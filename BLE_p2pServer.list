
BLE_p2pServer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013ba0  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002074  08013ce0  08013ce0  00014ce0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015d54  08015d54  00016d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08015d5c  08015d5c  00016d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08015d60  08015d60  00016d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000027c  20000008  08015d64  00017008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000025  20000284  08015fe0  00017284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200002ac  08016005  000172ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bd8  200002c0  08016016  000172c0  2**4
                  ALLOC
 10 ._user_heap_stack 00001400  20001e98  08016016  00017e98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000172bd  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00018000  2**2
                  ALLOC
 13 MB_MEM1       000001bc  20030028  20030028  00018000  2**2
                  ALLOC
 14 MB_MEM2       00000883  200301e4  200301e4  00018000  2**2
                  ALLOC
 15 .debug_line   0003d40c  00000000  00000000  000172ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line_str 00000082  00000000  00000000  000546f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_info   0003b4b3  00000000  00000000  0005477b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 00007eb3  00000000  00000000  0008fc2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00003528  00000000  00000000  00097ae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010dbe4  00000000  00000000  0009b010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_rnglists 000028ef  00000000  00000000  001a8bf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_macro  00031232  00000000  00000000  001ab4e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000043  00000000  00000000  001dc715  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000f27c  00000000  00000000  001dc758  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200002c0 	.word	0x200002c0
 800015c:	00000000 	.word	0x00000000
 8000160:	08013cc8 	.word	0x08013cc8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200002c4 	.word	0x200002c4
 800017c:	08013cc8 	.word	0x08013cc8

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr
	...

080001a0 <memchr>:
 80001a0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001a4:	2a10      	cmp	r2, #16
 80001a6:	db2b      	blt.n	8000200 <memchr+0x60>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	d008      	beq.n	80001c0 <memchr+0x20>
 80001ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001b2:	3a01      	subs	r2, #1
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d02d      	beq.n	8000214 <memchr+0x74>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	b342      	cbz	r2, 8000210 <memchr+0x70>
 80001be:	d1f6      	bne.n	80001ae <memchr+0xe>
 80001c0:	b4f0      	push	{r4, r5, r6, r7}
 80001c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ca:	f022 0407 	bic.w	r4, r2, #7
 80001ce:	f07f 0700 	mvns.w	r7, #0
 80001d2:	2300      	movs	r3, #0
 80001d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001d8:	3c08      	subs	r4, #8
 80001da:	ea85 0501 	eor.w	r5, r5, r1
 80001de:	ea86 0601 	eor.w	r6, r6, r1
 80001e2:	fa85 f547 	uadd8	r5, r5, r7
 80001e6:	faa3 f587 	sel	r5, r3, r7
 80001ea:	fa86 f647 	uadd8	r6, r6, r7
 80001ee:	faa5 f687 	sel	r6, r5, r7
 80001f2:	b98e      	cbnz	r6, 8000218 <memchr+0x78>
 80001f4:	d1ee      	bne.n	80001d4 <memchr+0x34>
 80001f6:	bcf0      	pop	{r4, r5, r6, r7}
 80001f8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001fc:	f002 0207 	and.w	r2, r2, #7
 8000200:	b132      	cbz	r2, 8000210 <memchr+0x70>
 8000202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000206:	3a01      	subs	r2, #1
 8000208:	ea83 0301 	eor.w	r3, r3, r1
 800020c:	b113      	cbz	r3, 8000214 <memchr+0x74>
 800020e:	d1f8      	bne.n	8000202 <memchr+0x62>
 8000210:	2000      	movs	r0, #0
 8000212:	4770      	bx	lr
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr
 8000218:	2d00      	cmp	r5, #0
 800021a:	bf06      	itte	eq
 800021c:	4635      	moveq	r5, r6
 800021e:	3803      	subeq	r0, #3
 8000220:	3807      	subne	r0, #7
 8000222:	f015 0f01 	tst.w	r5, #1
 8000226:	d107      	bne.n	8000238 <memchr+0x98>
 8000228:	3001      	adds	r0, #1
 800022a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800022e:	bf02      	ittt	eq
 8000230:	3001      	addeq	r0, #1
 8000232:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000236:	3001      	addeq	r0, #1
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
 800023a:	3801      	subs	r0, #1
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <__aeabi_drsub>:
 8000250:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000254:	e002      	b.n	800025c <__adddf3>
 8000256:	bf00      	nop

08000258 <__aeabi_dsub>:
 8000258:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800025c <__adddf3>:
 800025c:	b530      	push	{r4, r5, lr}
 800025e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000262:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000266:	ea94 0f05 	teq	r4, r5
 800026a:	bf08      	it	eq
 800026c:	ea90 0f02 	teqeq	r0, r2
 8000270:	bf1f      	itttt	ne
 8000272:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000276:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000282:	f000 80e2 	beq.w	800044a <__adddf3+0x1ee>
 8000286:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028e:	bfb8      	it	lt
 8000290:	426d      	neglt	r5, r5
 8000292:	dd0c      	ble.n	80002ae <__adddf3+0x52>
 8000294:	442c      	add	r4, r5
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	ea82 0000 	eor.w	r0, r2, r0
 80002a2:	ea83 0101 	eor.w	r1, r3, r1
 80002a6:	ea80 0202 	eor.w	r2, r0, r2
 80002aa:	ea81 0303 	eor.w	r3, r1, r3
 80002ae:	2d36      	cmp	r5, #54	@ 0x36
 80002b0:	bf88      	it	hi
 80002b2:	bd30      	pophi	{r4, r5, pc}
 80002b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x70>
 80002c6:	4240      	negs	r0, r0
 80002c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x84>
 80002da:	4252      	negs	r2, r2
 80002dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e0:	ea94 0f05 	teq	r4, r5
 80002e4:	f000 80a7 	beq.w	8000436 <__adddf3+0x1da>
 80002e8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f0:	db0d      	blt.n	800030e <__adddf3+0xb2>
 80002f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f6:	fa22 f205 	lsr.w	r2, r2, r5
 80002fa:	1880      	adds	r0, r0, r2
 80002fc:	f141 0100 	adc.w	r1, r1, #0
 8000300:	fa03 f20e 	lsl.w	r2, r3, lr
 8000304:	1880      	adds	r0, r0, r2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	4159      	adcs	r1, r3
 800030c:	e00e      	b.n	800032c <__adddf3+0xd0>
 800030e:	f1a5 0520 	sub.w	r5, r5, #32
 8000312:	f10e 0e20 	add.w	lr, lr, #32
 8000316:	2a01      	cmp	r2, #1
 8000318:	fa03 fc0e 	lsl.w	ip, r3, lr
 800031c:	bf28      	it	cs
 800031e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000322:	fa43 f305 	asr.w	r3, r3, r5
 8000326:	18c0      	adds	r0, r0, r3
 8000328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800032c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000330:	d507      	bpl.n	8000342 <__adddf3+0xe6>
 8000332:	f04f 0e00 	mov.w	lr, #0
 8000336:	f1dc 0c00 	rsbs	ip, ip, #0
 800033a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000342:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000346:	d31b      	bcc.n	8000380 <__adddf3+0x124>
 8000348:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800034c:	d30c      	bcc.n	8000368 <__adddf3+0x10c>
 800034e:	0849      	lsrs	r1, r1, #1
 8000350:	ea5f 0030 	movs.w	r0, r0, rrx
 8000354:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000358:	f104 0401 	add.w	r4, r4, #1
 800035c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000360:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000364:	f080 809a 	bcs.w	800049c <__adddf3+0x240>
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800036c:	bf08      	it	eq
 800036e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000372:	f150 0000 	adcs.w	r0, r0, #0
 8000376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037a:	ea41 0105 	orr.w	r1, r1, r5
 800037e:	bd30      	pop	{r4, r5, pc}
 8000380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000384:	4140      	adcs	r0, r0
 8000386:	eb41 0101 	adc.w	r1, r1, r1
 800038a:	3c01      	subs	r4, #1
 800038c:	bf28      	it	cs
 800038e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000392:	d2e9      	bcs.n	8000368 <__adddf3+0x10c>
 8000394:	f091 0f00 	teq	r1, #0
 8000398:	bf04      	itt	eq
 800039a:	4601      	moveq	r1, r0
 800039c:	2000      	moveq	r0, #0
 800039e:	fab1 f381 	clz	r3, r1
 80003a2:	bf08      	it	eq
 80003a4:	3320      	addeq	r3, #32
 80003a6:	f1a3 030b 	sub.w	r3, r3, #11
 80003aa:	f1b3 0220 	subs.w	r2, r3, #32
 80003ae:	da0c      	bge.n	80003ca <__adddf3+0x16e>
 80003b0:	320c      	adds	r2, #12
 80003b2:	dd08      	ble.n	80003c6 <__adddf3+0x16a>
 80003b4:	f102 0c14 	add.w	ip, r2, #20
 80003b8:	f1c2 020c 	rsb	r2, r2, #12
 80003bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c0:	fa21 f102 	lsr.w	r1, r1, r2
 80003c4:	e00c      	b.n	80003e0 <__adddf3+0x184>
 80003c6:	f102 0214 	add.w	r2, r2, #20
 80003ca:	bfd8      	it	le
 80003cc:	f1c2 0c20 	rsble	ip, r2, #32
 80003d0:	fa01 f102 	lsl.w	r1, r1, r2
 80003d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d8:	bfdc      	itt	le
 80003da:	ea41 010c 	orrle.w	r1, r1, ip
 80003de:	4090      	lslle	r0, r2
 80003e0:	1ae4      	subs	r4, r4, r3
 80003e2:	bfa2      	ittt	ge
 80003e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e8:	4329      	orrge	r1, r5
 80003ea:	bd30      	popge	{r4, r5, pc}
 80003ec:	ea6f 0404 	mvn.w	r4, r4
 80003f0:	3c1f      	subs	r4, #31
 80003f2:	da1c      	bge.n	800042e <__adddf3+0x1d2>
 80003f4:	340c      	adds	r4, #12
 80003f6:	dc0e      	bgt.n	8000416 <__adddf3+0x1ba>
 80003f8:	f104 0414 	add.w	r4, r4, #20
 80003fc:	f1c4 0220 	rsb	r2, r4, #32
 8000400:	fa20 f004 	lsr.w	r0, r0, r4
 8000404:	fa01 f302 	lsl.w	r3, r1, r2
 8000408:	ea40 0003 	orr.w	r0, r0, r3
 800040c:	fa21 f304 	lsr.w	r3, r1, r4
 8000410:	ea45 0103 	orr.w	r1, r5, r3
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f1c4 040c 	rsb	r4, r4, #12
 800041a:	f1c4 0220 	rsb	r2, r4, #32
 800041e:	fa20 f002 	lsr.w	r0, r0, r2
 8000422:	fa01 f304 	lsl.w	r3, r1, r4
 8000426:	ea40 0003 	orr.w	r0, r0, r3
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	fa21 f004 	lsr.w	r0, r1, r4
 8000432:	4629      	mov	r1, r5
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f094 0f00 	teq	r4, #0
 800043a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800043e:	bf06      	itte	eq
 8000440:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000444:	3401      	addeq	r4, #1
 8000446:	3d01      	subne	r5, #1
 8000448:	e74e      	b.n	80002e8 <__adddf3+0x8c>
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf18      	it	ne
 8000450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000454:	d029      	beq.n	80004aa <__adddf3+0x24e>
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	d005      	beq.n	800046e <__adddf3+0x212>
 8000462:	ea54 0c00 	orrs.w	ip, r4, r0
 8000466:	bf04      	itt	eq
 8000468:	4619      	moveq	r1, r3
 800046a:	4610      	moveq	r0, r2
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea91 0f03 	teq	r1, r3
 8000472:	bf1e      	ittt	ne
 8000474:	2100      	movne	r1, #0
 8000476:	2000      	movne	r0, #0
 8000478:	bd30      	popne	{r4, r5, pc}
 800047a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047e:	d105      	bne.n	800048c <__adddf3+0x230>
 8000480:	0040      	lsls	r0, r0, #1
 8000482:	4149      	adcs	r1, r1
 8000484:	bf28      	it	cs
 8000486:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800048a:	bd30      	pop	{r4, r5, pc}
 800048c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000490:	bf3c      	itt	cc
 8000492:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000496:	bd30      	popcc	{r4, r5, pc}
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800049c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004a4:	f04f 0000 	mov.w	r0, #0
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf1a      	itte	ne
 80004b0:	4619      	movne	r1, r3
 80004b2:	4610      	movne	r0, r2
 80004b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b8:	bf1c      	itt	ne
 80004ba:	460b      	movne	r3, r1
 80004bc:	4602      	movne	r2, r0
 80004be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c2:	bf06      	itte	eq
 80004c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c8:	ea91 0f03 	teqeq	r1, r3
 80004cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	bf00      	nop

080004d4 <__aeabi_ui2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f04f 0500 	mov.w	r5, #0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e750      	b.n	8000394 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_i2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800050c:	bf48      	it	mi
 800050e:	4240      	negmi	r0, r0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e73e      	b.n	8000394 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_f2d>:
 8000518:	0042      	lsls	r2, r0, #1
 800051a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000522:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000526:	bf1f      	itttt	ne
 8000528:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800052c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000530:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000534:	4770      	bxne	lr
 8000536:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800053a:	bf08      	it	eq
 800053c:	4770      	bxeq	lr
 800053e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000542:	bf04      	itt	eq
 8000544:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000554:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000558:	e71c      	b.n	8000394 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_ul2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f04f 0500 	mov.w	r5, #0
 800056a:	e00a      	b.n	8000582 <__aeabi_l2d+0x16>

0800056c <__aeabi_l2d>:
 800056c:	ea50 0201 	orrs.w	r2, r0, r1
 8000570:	bf08      	it	eq
 8000572:	4770      	bxeq	lr
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800057a:	d502      	bpl.n	8000582 <__aeabi_l2d+0x16>
 800057c:	4240      	negs	r0, r0
 800057e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000582:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000586:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800058a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058e:	f43f aed8 	beq.w	8000342 <__adddf3+0xe6>
 8000592:	f04f 0203 	mov.w	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a2:	bf18      	it	ne
 80005a4:	3203      	addne	r2, #3
 80005a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005aa:	f1c2 0320 	rsb	r3, r2, #32
 80005ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ba:	ea40 000e 	orr.w	r0, r0, lr
 80005be:	fa21 f102 	lsr.w	r1, r1, r2
 80005c2:	4414      	add	r4, r2
 80005c4:	e6bd      	b.n	8000342 <__adddf3+0xe6>
 80005c6:	bf00      	nop

080005c8 <__aeabi_dmul>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d6:	bf1d      	ittte	ne
 80005d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005dc:	ea94 0f0c 	teqne	r4, ip
 80005e0:	ea95 0f0c 	teqne	r5, ip
 80005e4:	f000 f8de 	bleq	80007a4 <__aeabi_dmul+0x1dc>
 80005e8:	442c      	add	r4, r5
 80005ea:	ea81 0603 	eor.w	r6, r1, r3
 80005ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fa:	bf18      	it	ne
 80005fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000600:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000604:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000608:	d038      	beq.n	800067c <__aeabi_dmul+0xb4>
 800060a:	fba0 ce02 	umull	ip, lr, r0, r2
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000616:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800061a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061e:	f04f 0600 	mov.w	r6, #0
 8000622:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000626:	f09c 0f00 	teq	ip, #0
 800062a:	bf18      	it	ne
 800062c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000630:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000634:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000638:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800063c:	d204      	bcs.n	8000648 <__aeabi_dmul+0x80>
 800063e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000642:	416d      	adcs	r5, r5
 8000644:	eb46 0606 	adc.w	r6, r6, r6
 8000648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800064c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800065c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000660:	bf88      	it	hi
 8000662:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000666:	d81e      	bhi.n	80006a6 <__aeabi_dmul+0xde>
 8000668:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000680:	ea46 0101 	orr.w	r1, r6, r1
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	ea81 0103 	eor.w	r1, r1, r3
 800068c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000690:	bfc2      	ittt	gt
 8000692:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069a:	bd70      	popgt	{r4, r5, r6, pc}
 800069c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a0:	f04f 0e00 	mov.w	lr, #0
 80006a4:	3c01      	subs	r4, #1
 80006a6:	f300 80ab 	bgt.w	8000800 <__aeabi_dmul+0x238>
 80006aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ae:	bfde      	ittt	le
 80006b0:	2000      	movle	r0, #0
 80006b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006b6:	bd70      	pople	{r4, r5, r6, pc}
 80006b8:	f1c4 0400 	rsb	r4, r4, #0
 80006bc:	3c20      	subs	r4, #32
 80006be:	da35      	bge.n	800072c <__aeabi_dmul+0x164>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc1b      	bgt.n	80006fc <__aeabi_dmul+0x134>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f305 	lsl.w	r3, r0, r5
 80006d0:	fa20 f004 	lsr.w	r0, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ec:	eb42 0106 	adc.w	r1, r2, r6
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 040c 	rsb	r4, r4, #12
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f304 	lsl.w	r3, r0, r4
 8000708:	fa20 f005 	lsr.w	r0, r0, r5
 800070c:	fa01 f204 	lsl.w	r2, r1, r4
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800071c:	f141 0100 	adc.w	r1, r1, #0
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f205 	lsl.w	r2, r0, r5
 8000734:	ea4e 0e02 	orr.w	lr, lr, r2
 8000738:	fa20 f304 	lsr.w	r3, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea43 0302 	orr.w	r3, r3, r2
 8000744:	fa21 f004 	lsr.w	r0, r1, r4
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800074c:	fa21 f204 	lsr.w	r2, r1, r4
 8000750:	ea20 0002 	bic.w	r0, r0, r2
 8000754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f094 0f00 	teq	r4, #0
 8000768:	d10f      	bne.n	800078a <__aeabi_dmul+0x1c2>
 800076a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800076e:	0040      	lsls	r0, r0, #1
 8000770:	eb41 0101 	adc.w	r1, r1, r1
 8000774:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3c01      	subeq	r4, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1a6>
 800077e:	ea41 0106 	orr.w	r1, r1, r6
 8000782:	f095 0f00 	teq	r5, #0
 8000786:	bf18      	it	ne
 8000788:	4770      	bxne	lr
 800078a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	eb43 0303 	adc.w	r3, r3, r3
 8000794:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3d01      	subeq	r5, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1c6>
 800079e:	ea43 0306 	orr.w	r3, r3, r6
 80007a2:	4770      	bx	lr
 80007a4:	ea94 0f0c 	teq	r4, ip
 80007a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ac:	bf18      	it	ne
 80007ae:	ea95 0f0c 	teqne	r5, ip
 80007b2:	d00c      	beq.n	80007ce <__aeabi_dmul+0x206>
 80007b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007be:	d1d1      	bne.n	8000764 <__aeabi_dmul+0x19c>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d2:	bf06      	itte	eq
 80007d4:	4610      	moveq	r0, r2
 80007d6:	4619      	moveq	r1, r3
 80007d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007dc:	d019      	beq.n	8000812 <__aeabi_dmul+0x24a>
 80007de:	ea94 0f0c 	teq	r4, ip
 80007e2:	d102      	bne.n	80007ea <__aeabi_dmul+0x222>
 80007e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e8:	d113      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007ea:	ea95 0f0c 	teq	r5, ip
 80007ee:	d105      	bne.n	80007fc <__aeabi_dmul+0x234>
 80007f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f4:	bf1c      	itt	ne
 80007f6:	4610      	movne	r0, r2
 80007f8:	4619      	movne	r1, r3
 80007fa:	d10a      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007fc:	ea81 0103 	eor.w	r1, r1, r3
 8000800:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000804:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000808:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000816:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800081a:	bd70      	pop	{r4, r5, r6, pc}

0800081c <__aeabi_ddiv>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000822:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082a:	bf1d      	ittte	ne
 800082c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000830:	ea94 0f0c 	teqne	r4, ip
 8000834:	ea95 0f0c 	teqne	r5, ip
 8000838:	f000 f8a7 	bleq	800098a <__aeabi_ddiv+0x16e>
 800083c:	eba4 0405 	sub.w	r4, r4, r5
 8000840:	ea81 0e03 	eor.w	lr, r1, r3
 8000844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000848:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800084c:	f000 8088 	beq.w	8000960 <__aeabi_ddiv+0x144>
 8000850:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000854:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800085c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000860:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800086c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000870:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000874:	429d      	cmp	r5, r3
 8000876:	bf08      	it	eq
 8000878:	4296      	cmpeq	r6, r2
 800087a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800087e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000882:	d202      	bcs.n	800088a <__aeabi_ddiv+0x6e>
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	1ab6      	subs	r6, r6, r2
 800088c:	eb65 0503 	sbc.w	r5, r5, r3
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800089a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008fc:	d018      	beq.n	8000930 <__aeabi_ddiv+0x114>
 80008fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000906:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091a:	d1c0      	bne.n	800089e <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000920:	d10b      	bne.n	800093a <__aeabi_ddiv+0x11e>
 8000922:	ea41 0100 	orr.w	r1, r1, r0
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800092e:	e7b6      	b.n	800089e <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000934:	bf04      	itt	eq
 8000936:	4301      	orreq	r1, r0
 8000938:	2000      	moveq	r0, #0
 800093a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800093e:	bf88      	it	hi
 8000940:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000944:	f63f aeaf 	bhi.w	80006a6 <__aeabi_dmul+0xde>
 8000948:	ebb5 0c03 	subs.w	ip, r5, r3
 800094c:	bf04      	itt	eq
 800094e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000956:	f150 0000 	adcs.w	r0, r0, #0
 800095a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800096c:	bfc2      	ittt	gt
 800096e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000976:	bd70      	popgt	{r4, r5, r6, pc}
 8000978:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800097c:	f04f 0e00 	mov.w	lr, #0
 8000980:	3c01      	subs	r4, #1
 8000982:	e690      	b.n	80006a6 <__aeabi_dmul+0xde>
 8000984:	ea45 0e06 	orr.w	lr, r5, r6
 8000988:	e68d      	b.n	80006a6 <__aeabi_dmul+0xde>
 800098a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098e:	ea94 0f0c 	teq	r4, ip
 8000992:	bf08      	it	eq
 8000994:	ea95 0f0c 	teqeq	r5, ip
 8000998:	f43f af3b 	beq.w	8000812 <__aeabi_dmul+0x24a>
 800099c:	ea94 0f0c 	teq	r4, ip
 80009a0:	d10a      	bne.n	80009b8 <__aeabi_ddiv+0x19c>
 80009a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a6:	f47f af34 	bne.w	8000812 <__aeabi_dmul+0x24a>
 80009aa:	ea95 0f0c 	teq	r5, ip
 80009ae:	f47f af25 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e72c      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009b8:	ea95 0f0c 	teq	r5, ip
 80009bc:	d106      	bne.n	80009cc <__aeabi_ddiv+0x1b0>
 80009be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c2:	f43f aefd 	beq.w	80007c0 <__aeabi_dmul+0x1f8>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e722      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d6:	f47f aec5 	bne.w	8000764 <__aeabi_dmul+0x19c>
 80009da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009de:	f47f af0d 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e6:	f47f aeeb 	bne.w	80007c0 <__aeabi_dmul+0x1f8>
 80009ea:	e712      	b.n	8000812 <__aeabi_dmul+0x24a>

080009ec <__gedf2>:
 80009ec:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80009f0:	e006      	b.n	8000a00 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__ledf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	e002      	b.n	8000a00 <__cmpdf2+0x4>
 80009fa:	bf00      	nop

080009fc <__cmpdf2>:
 80009fc:	f04f 0c01 	mov.w	ip, #1
 8000a00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a16:	d01b      	beq.n	8000a50 <__cmpdf2+0x54>
 8000a18:	b001      	add	sp, #4
 8000a1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1e:	bf0c      	ite	eq
 8000a20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a24:	ea91 0f03 	teqne	r1, r3
 8000a28:	bf02      	ittt	eq
 8000a2a:	ea90 0f02 	teqeq	r0, r2
 8000a2e:	2000      	moveq	r0, #0
 8000a30:	4770      	bxeq	lr
 8000a32:	f110 0f00 	cmn.w	r0, #0
 8000a36:	ea91 0f03 	teq	r1, r3
 8000a3a:	bf58      	it	pl
 8000a3c:	4299      	cmppl	r1, r3
 8000a3e:	bf08      	it	eq
 8000a40:	4290      	cmpeq	r0, r2
 8000a42:	bf2c      	ite	cs
 8000a44:	17d8      	asrcs	r0, r3, #31
 8000a46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a4a:	f040 0001 	orr.w	r0, r0, #1
 8000a4e:	4770      	bx	lr
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__cmpdf2+0x64>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d107      	bne.n	8000a70 <__cmpdf2+0x74>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d1d6      	bne.n	8000a18 <__cmpdf2+0x1c>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d0d3      	beq.n	8000a18 <__cmpdf2+0x1c>
 8000a70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdrcmple>:
 8000a78:	4684      	mov	ip, r0
 8000a7a:	4610      	mov	r0, r2
 8000a7c:	4662      	mov	r2, ip
 8000a7e:	468c      	mov	ip, r1
 8000a80:	4619      	mov	r1, r3
 8000a82:	4663      	mov	r3, ip
 8000a84:	e000      	b.n	8000a88 <__aeabi_cdcmpeq>
 8000a86:	bf00      	nop

08000a88 <__aeabi_cdcmpeq>:
 8000a88:	b501      	push	{r0, lr}
 8000a8a:	f7ff ffb7 	bl	80009fc <__cmpdf2>
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	bf48      	it	mi
 8000a92:	f110 0f00 	cmnmi.w	r0, #0
 8000a96:	bd01      	pop	{r0, pc}

08000a98 <__aeabi_dcmpeq>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff fff4 	bl	8000a88 <__aeabi_cdcmpeq>
 8000aa0:	bf0c      	ite	eq
 8000aa2:	2001      	moveq	r0, #1
 8000aa4:	2000      	movne	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmplt>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffea 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ab4:	bf34      	ite	cc
 8000ab6:	2001      	movcc	r0, #1
 8000ab8:	2000      	movcs	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmple>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffe0 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ac8:	bf94      	ite	ls
 8000aca:	2001      	movls	r0, #1
 8000acc:	2000      	movhi	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpge>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffce 	bl	8000a78 <__aeabi_cdrcmple>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpgt>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffc4 	bl	8000a78 <__aeabi_cdrcmple>
 8000af0:	bf34      	ite	cc
 8000af2:	2001      	movcc	r0, #1
 8000af4:	2000      	movcs	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpun>:
 8000afc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x10>
 8000b06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0a:	d10a      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b14:	d102      	bne.n	8000b1c <__aeabi_dcmpun+0x20>
 8000b16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1a:	d102      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	f04f 0001 	mov.w	r0, #1
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_d2iz>:
 8000b28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b2c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b30:	d215      	bcs.n	8000b5e <__aeabi_d2iz+0x36>
 8000b32:	d511      	bpl.n	8000b58 <__aeabi_d2iz+0x30>
 8000b34:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b3c:	d912      	bls.n	8000b64 <__aeabi_d2iz+0x3c>
 8000b3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d105      	bne.n	8000b70 <__aeabi_d2iz+0x48>
 8000b64:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b68:	bf08      	it	eq
 8000b6a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_uldivmod>:
 8000b78:	b953      	cbnz	r3, 8000b90 <__aeabi_uldivmod+0x18>
 8000b7a:	b94a      	cbnz	r2, 8000b90 <__aeabi_uldivmod+0x18>
 8000b7c:	2900      	cmp	r1, #0
 8000b7e:	bf08      	it	eq
 8000b80:	2800      	cmpeq	r0, #0
 8000b82:	bf1c      	itt	ne
 8000b84:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000b88:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b8c:	f000 b988 	b.w	8000ea0 <__aeabi_idiv0>
 8000b90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b98:	f000 f806 	bl	8000ba8 <__udivmoddi4>
 8000b9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba4:	b004      	add	sp, #16
 8000ba6:	4770      	bx	lr

08000ba8 <__udivmoddi4>:
 8000ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bac:	9d08      	ldr	r5, [sp, #32]
 8000bae:	468e      	mov	lr, r1
 8000bb0:	4604      	mov	r4, r0
 8000bb2:	4688      	mov	r8, r1
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d14a      	bne.n	8000c4e <__udivmoddi4+0xa6>
 8000bb8:	428a      	cmp	r2, r1
 8000bba:	4617      	mov	r7, r2
 8000bbc:	d962      	bls.n	8000c84 <__udivmoddi4+0xdc>
 8000bbe:	fab2 f682 	clz	r6, r2
 8000bc2:	b14e      	cbz	r6, 8000bd8 <__udivmoddi4+0x30>
 8000bc4:	f1c6 0320 	rsb	r3, r6, #32
 8000bc8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bcc:	fa20 f303 	lsr.w	r3, r0, r3
 8000bd0:	40b7      	lsls	r7, r6
 8000bd2:	ea43 0808 	orr.w	r8, r3, r8
 8000bd6:	40b4      	lsls	r4, r6
 8000bd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bdc:	fa1f fc87 	uxth.w	ip, r7
 8000be0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000be4:	0c23      	lsrs	r3, r4, #16
 8000be6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000bea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bee:	fb01 f20c 	mul.w	r2, r1, ip
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	d909      	bls.n	8000c0a <__udivmoddi4+0x62>
 8000bf6:	18fb      	adds	r3, r7, r3
 8000bf8:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000bfc:	f080 80ea 	bcs.w	8000dd4 <__udivmoddi4+0x22c>
 8000c00:	429a      	cmp	r2, r3
 8000c02:	f240 80e7 	bls.w	8000dd4 <__udivmoddi4+0x22c>
 8000c06:	3902      	subs	r1, #2
 8000c08:	443b      	add	r3, r7
 8000c0a:	1a9a      	subs	r2, r3, r2
 8000c0c:	b2a3      	uxth	r3, r4
 8000c0e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c12:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c1a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c1e:	459c      	cmp	ip, r3
 8000c20:	d909      	bls.n	8000c36 <__udivmoddi4+0x8e>
 8000c22:	18fb      	adds	r3, r7, r3
 8000c24:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c28:	f080 80d6 	bcs.w	8000dd8 <__udivmoddi4+0x230>
 8000c2c:	459c      	cmp	ip, r3
 8000c2e:	f240 80d3 	bls.w	8000dd8 <__udivmoddi4+0x230>
 8000c32:	443b      	add	r3, r7
 8000c34:	3802      	subs	r0, #2
 8000c36:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c3a:	eba3 030c 	sub.w	r3, r3, ip
 8000c3e:	2100      	movs	r1, #0
 8000c40:	b11d      	cbz	r5, 8000c4a <__udivmoddi4+0xa2>
 8000c42:	40f3      	lsrs	r3, r6
 8000c44:	2200      	movs	r2, #0
 8000c46:	e9c5 3200 	strd	r3, r2, [r5]
 8000c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4e:	428b      	cmp	r3, r1
 8000c50:	d905      	bls.n	8000c5e <__udivmoddi4+0xb6>
 8000c52:	b10d      	cbz	r5, 8000c58 <__udivmoddi4+0xb0>
 8000c54:	e9c5 0100 	strd	r0, r1, [r5]
 8000c58:	2100      	movs	r1, #0
 8000c5a:	4608      	mov	r0, r1
 8000c5c:	e7f5      	b.n	8000c4a <__udivmoddi4+0xa2>
 8000c5e:	fab3 f183 	clz	r1, r3
 8000c62:	2900      	cmp	r1, #0
 8000c64:	d146      	bne.n	8000cf4 <__udivmoddi4+0x14c>
 8000c66:	4573      	cmp	r3, lr
 8000c68:	d302      	bcc.n	8000c70 <__udivmoddi4+0xc8>
 8000c6a:	4282      	cmp	r2, r0
 8000c6c:	f200 8105 	bhi.w	8000e7a <__udivmoddi4+0x2d2>
 8000c70:	1a84      	subs	r4, r0, r2
 8000c72:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c76:	2001      	movs	r0, #1
 8000c78:	4690      	mov	r8, r2
 8000c7a:	2d00      	cmp	r5, #0
 8000c7c:	d0e5      	beq.n	8000c4a <__udivmoddi4+0xa2>
 8000c7e:	e9c5 4800 	strd	r4, r8, [r5]
 8000c82:	e7e2      	b.n	8000c4a <__udivmoddi4+0xa2>
 8000c84:	2a00      	cmp	r2, #0
 8000c86:	f000 8090 	beq.w	8000daa <__udivmoddi4+0x202>
 8000c8a:	fab2 f682 	clz	r6, r2
 8000c8e:	2e00      	cmp	r6, #0
 8000c90:	f040 80a4 	bne.w	8000ddc <__udivmoddi4+0x234>
 8000c94:	1a8a      	subs	r2, r1, r2
 8000c96:	0c03      	lsrs	r3, r0, #16
 8000c98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c9c:	b280      	uxth	r0, r0
 8000c9e:	b2bc      	uxth	r4, r7
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ca6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000caa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cae:	fb04 f20c 	mul.w	r2, r4, ip
 8000cb2:	429a      	cmp	r2, r3
 8000cb4:	d907      	bls.n	8000cc6 <__udivmoddi4+0x11e>
 8000cb6:	18fb      	adds	r3, r7, r3
 8000cb8:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000cbc:	d202      	bcs.n	8000cc4 <__udivmoddi4+0x11c>
 8000cbe:	429a      	cmp	r2, r3
 8000cc0:	f200 80e0 	bhi.w	8000e84 <__udivmoddi4+0x2dc>
 8000cc4:	46c4      	mov	ip, r8
 8000cc6:	1a9b      	subs	r3, r3, r2
 8000cc8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ccc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000cd0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000cd4:	fb02 f404 	mul.w	r4, r2, r4
 8000cd8:	429c      	cmp	r4, r3
 8000cda:	d907      	bls.n	8000cec <__udivmoddi4+0x144>
 8000cdc:	18fb      	adds	r3, r7, r3
 8000cde:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x142>
 8000ce4:	429c      	cmp	r4, r3
 8000ce6:	f200 80ca 	bhi.w	8000e7e <__udivmoddi4+0x2d6>
 8000cea:	4602      	mov	r2, r0
 8000cec:	1b1b      	subs	r3, r3, r4
 8000cee:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000cf2:	e7a5      	b.n	8000c40 <__udivmoddi4+0x98>
 8000cf4:	f1c1 0620 	rsb	r6, r1, #32
 8000cf8:	408b      	lsls	r3, r1
 8000cfa:	fa22 f706 	lsr.w	r7, r2, r6
 8000cfe:	431f      	orrs	r7, r3
 8000d00:	fa0e f401 	lsl.w	r4, lr, r1
 8000d04:	fa20 f306 	lsr.w	r3, r0, r6
 8000d08:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d0c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d10:	4323      	orrs	r3, r4
 8000d12:	fa00 f801 	lsl.w	r8, r0, r1
 8000d16:	fa1f fc87 	uxth.w	ip, r7
 8000d1a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d1e:	0c1c      	lsrs	r4, r3, #16
 8000d20:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d24:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d28:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d2c:	45a6      	cmp	lr, r4
 8000d2e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x1a0>
 8000d34:	193c      	adds	r4, r7, r4
 8000d36:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000d3a:	f080 809c 	bcs.w	8000e76 <__udivmoddi4+0x2ce>
 8000d3e:	45a6      	cmp	lr, r4
 8000d40:	f240 8099 	bls.w	8000e76 <__udivmoddi4+0x2ce>
 8000d44:	3802      	subs	r0, #2
 8000d46:	443c      	add	r4, r7
 8000d48:	eba4 040e 	sub.w	r4, r4, lr
 8000d4c:	fa1f fe83 	uxth.w	lr, r3
 8000d50:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d54:	fb09 4413 	mls	r4, r9, r3, r4
 8000d58:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d5c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d60:	45a4      	cmp	ip, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x1ce>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000d6a:	f080 8082 	bcs.w	8000e72 <__udivmoddi4+0x2ca>
 8000d6e:	45a4      	cmp	ip, r4
 8000d70:	d97f      	bls.n	8000e72 <__udivmoddi4+0x2ca>
 8000d72:	3b02      	subs	r3, #2
 8000d74:	443c      	add	r4, r7
 8000d76:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d7a:	eba4 040c 	sub.w	r4, r4, ip
 8000d7e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d82:	4564      	cmp	r4, ip
 8000d84:	4673      	mov	r3, lr
 8000d86:	46e1      	mov	r9, ip
 8000d88:	d362      	bcc.n	8000e50 <__udivmoddi4+0x2a8>
 8000d8a:	d05f      	beq.n	8000e4c <__udivmoddi4+0x2a4>
 8000d8c:	b15d      	cbz	r5, 8000da6 <__udivmoddi4+0x1fe>
 8000d8e:	ebb8 0203 	subs.w	r2, r8, r3
 8000d92:	eb64 0409 	sbc.w	r4, r4, r9
 8000d96:	fa04 f606 	lsl.w	r6, r4, r6
 8000d9a:	fa22 f301 	lsr.w	r3, r2, r1
 8000d9e:	431e      	orrs	r6, r3
 8000da0:	40cc      	lsrs	r4, r1
 8000da2:	e9c5 6400 	strd	r6, r4, [r5]
 8000da6:	2100      	movs	r1, #0
 8000da8:	e74f      	b.n	8000c4a <__udivmoddi4+0xa2>
 8000daa:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dae:	0c01      	lsrs	r1, r0, #16
 8000db0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000db4:	b280      	uxth	r0, r0
 8000db6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dba:	463b      	mov	r3, r7
 8000dbc:	4638      	mov	r0, r7
 8000dbe:	463c      	mov	r4, r7
 8000dc0:	46b8      	mov	r8, r7
 8000dc2:	46be      	mov	lr, r7
 8000dc4:	2620      	movs	r6, #32
 8000dc6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dca:	eba2 0208 	sub.w	r2, r2, r8
 8000dce:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000dd2:	e766      	b.n	8000ca2 <__udivmoddi4+0xfa>
 8000dd4:	4601      	mov	r1, r0
 8000dd6:	e718      	b.n	8000c0a <__udivmoddi4+0x62>
 8000dd8:	4610      	mov	r0, r2
 8000dda:	e72c      	b.n	8000c36 <__udivmoddi4+0x8e>
 8000ddc:	f1c6 0220 	rsb	r2, r6, #32
 8000de0:	fa2e f302 	lsr.w	r3, lr, r2
 8000de4:	40b7      	lsls	r7, r6
 8000de6:	40b1      	lsls	r1, r6
 8000de8:	fa20 f202 	lsr.w	r2, r0, r2
 8000dec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000df0:	430a      	orrs	r2, r1
 8000df2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000df6:	b2bc      	uxth	r4, r7
 8000df8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000dfc:	0c11      	lsrs	r1, r2, #16
 8000dfe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e02:	fb08 f904 	mul.w	r9, r8, r4
 8000e06:	40b0      	lsls	r0, r6
 8000e08:	4589      	cmp	r9, r1
 8000e0a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e0e:	b280      	uxth	r0, r0
 8000e10:	d93e      	bls.n	8000e90 <__udivmoddi4+0x2e8>
 8000e12:	1879      	adds	r1, r7, r1
 8000e14:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e18:	d201      	bcs.n	8000e1e <__udivmoddi4+0x276>
 8000e1a:	4589      	cmp	r9, r1
 8000e1c:	d81f      	bhi.n	8000e5e <__udivmoddi4+0x2b6>
 8000e1e:	eba1 0109 	sub.w	r1, r1, r9
 8000e22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e26:	fb09 f804 	mul.w	r8, r9, r4
 8000e2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e2e:	b292      	uxth	r2, r2
 8000e30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e34:	4542      	cmp	r2, r8
 8000e36:	d229      	bcs.n	8000e8c <__udivmoddi4+0x2e4>
 8000e38:	18ba      	adds	r2, r7, r2
 8000e3a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000e3e:	d2c4      	bcs.n	8000dca <__udivmoddi4+0x222>
 8000e40:	4542      	cmp	r2, r8
 8000e42:	d2c2      	bcs.n	8000dca <__udivmoddi4+0x222>
 8000e44:	f1a9 0102 	sub.w	r1, r9, #2
 8000e48:	443a      	add	r2, r7
 8000e4a:	e7be      	b.n	8000dca <__udivmoddi4+0x222>
 8000e4c:	45f0      	cmp	r8, lr
 8000e4e:	d29d      	bcs.n	8000d8c <__udivmoddi4+0x1e4>
 8000e50:	ebbe 0302 	subs.w	r3, lr, r2
 8000e54:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e58:	3801      	subs	r0, #1
 8000e5a:	46e1      	mov	r9, ip
 8000e5c:	e796      	b.n	8000d8c <__udivmoddi4+0x1e4>
 8000e5e:	eba7 0909 	sub.w	r9, r7, r9
 8000e62:	4449      	add	r1, r9
 8000e64:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e68:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6c:	fb09 f804 	mul.w	r8, r9, r4
 8000e70:	e7db      	b.n	8000e2a <__udivmoddi4+0x282>
 8000e72:	4673      	mov	r3, lr
 8000e74:	e77f      	b.n	8000d76 <__udivmoddi4+0x1ce>
 8000e76:	4650      	mov	r0, sl
 8000e78:	e766      	b.n	8000d48 <__udivmoddi4+0x1a0>
 8000e7a:	4608      	mov	r0, r1
 8000e7c:	e6fd      	b.n	8000c7a <__udivmoddi4+0xd2>
 8000e7e:	443b      	add	r3, r7
 8000e80:	3a02      	subs	r2, #2
 8000e82:	e733      	b.n	8000cec <__udivmoddi4+0x144>
 8000e84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e88:	443b      	add	r3, r7
 8000e8a:	e71c      	b.n	8000cc6 <__udivmoddi4+0x11e>
 8000e8c:	4649      	mov	r1, r9
 8000e8e:	e79c      	b.n	8000dca <__udivmoddi4+0x222>
 8000e90:	eba1 0109 	sub.w	r1, r1, r9
 8000e94:	46c4      	mov	ip, r8
 8000e96:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9a:	fb09 f804 	mul.w	r8, r9, r4
 8000e9e:	e7c4      	b.n	8000e2a <__udivmoddi4+0x282>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000ea4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ea6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ea8:	3304      	adds	r3, #4

08000eaa <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eaa:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eac:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000eae:	d3f9      	bcc.n	8000ea4 <CopyDataInit>
  bx lr
 8000eb0:	4770      	bx	lr

08000eb2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000eb2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000eb4:	3004      	adds	r0, #4

08000eb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000eb6:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000eb8:	d3fb      	bcc.n	8000eb2 <FillZerobss>
  bx lr
 8000eba:	4770      	bx	lr

08000ebc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ebc:	480c      	ldr	r0, [pc, #48]	@ (8000ef0 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000ebe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ec0:	f006 f870 	bl	8006fa4 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000ec4:	480b      	ldr	r0, [pc, #44]	@ (8000ef4 <LoopForever+0x8>)
 8000ec6:	490c      	ldr	r1, [pc, #48]	@ (8000ef8 <LoopForever+0xc>)
 8000ec8:	4a0c      	ldr	r2, [pc, #48]	@ (8000efc <LoopForever+0x10>)
 8000eca:	2300      	movs	r3, #0
 8000ecc:	f7ff ffed 	bl	8000eaa <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000ed0:	480b      	ldr	r0, [pc, #44]	@ (8000f00 <LoopForever+0x14>)
 8000ed2:	490c      	ldr	r1, [pc, #48]	@ (8000f04 <LoopForever+0x18>)
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	f7ff ffee 	bl	8000eb6 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000eda:	480b      	ldr	r0, [pc, #44]	@ (8000f08 <LoopForever+0x1c>)
 8000edc:	490b      	ldr	r1, [pc, #44]	@ (8000f0c <LoopForever+0x20>)
 8000ede:	2300      	movs	r3, #0
 8000ee0:	f7ff ffe9 	bl	8000eb6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ee4:	f010 fdba 	bl	8011a5c <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000ee8:	f001 fcda 	bl	80028a0 <main>

08000eec <LoopForever>:

LoopForever:
  b LoopForever
 8000eec:	e7fe      	b.n	8000eec <LoopForever>
 8000eee:	0000      	.short	0x0000
  ldr   r0, =_estack
 8000ef0:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000ef4:	20000008 	.word	0x20000008
 8000ef8:	20000284 	.word	0x20000284
 8000efc:	08015d64 	.word	0x08015d64
  INIT_BSS _sbss, _ebss
 8000f00:	200002c0 	.word	0x200002c0
 8000f04:	20001e98 	.word	0x20001e98
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000f08:	200301e4 	.word	0x200301e4
 8000f0c:	20030a67 	.word	0x20030a67

08000f10 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f10:	e7fe      	b.n	8000f10 <ADC1_IRQHandler>
	...

08000f14 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000f1c:	4b06      	ldr	r3, [pc, #24]	@ (8000f38 <LL_EXTI_EnableIT_32_63+0x24>)
 8000f1e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8000f22:	4905      	ldr	r1, [pc, #20]	@ (8000f38 <LL_EXTI_EnableIT_32_63+0x24>)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000f2c:	bf00      	nop
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	58000800 	.word	0x58000800

08000f3c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f48:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000f4a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f58:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f60:	68fb      	ldr	r3, [r7, #12]
}
 8000f62:	bf00      	nop
 8000f64:	3714      	adds	r7, #20
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr

08000f6e <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	b085      	sub	sp, #20
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000f76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f7a:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 8000f7e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	f8c1 314c 	str.w	r3, [r1, #332]	@ 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000f8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f8e:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4013      	ands	r3, r2
 8000f96:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f98:	68fb      	ldr	r3, [r7, #12]
}
 8000f9a:	bf00      	nop
 8000f9c:	3714      	adds	r7, #20
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000faa:	f006 f8c1 	bl	8007130 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000fae:	f006 f8c5 	bl	800713c <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8000fb2:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8000fb6:	f7ff ffad 	bl	8000f14 <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8000fba:	f00d fba3 	bl	800e704 <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 8000fbe:	f000 f821 	bl	8001004 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8000fc2:	f000 f8c1 	bl	8001148 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8000fc6:	bf00      	nop
}
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000fcc:	b5b0      	push	{r4, r5, r7, lr}
 8000fce:	b088      	sub	sp, #32
 8000fd0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000fd2:	4b0b      	ldr	r3, [pc, #44]	@ (8001000 <APPD_EnableCPU2+0x34>)
 8000fd4:	1d3c      	adds	r4, r7, #4
 8000fd6:	461d      	mov	r5, r3
 8000fd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fdc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fe0:	c403      	stmia	r4!, {r0, r1}
 8000fe2:	8022      	strh	r2, [r4, #0]
 8000fe4:	3402      	adds	r4, #2
 8000fe6:	0c13      	lsrs	r3, r2, #16
 8000fe8:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000fea:	f00f f8b9 	bl	8010160 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000fee:	1d3b      	adds	r3, r7, #4
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f00d ff0a 	bl	800ee0a <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000ff6:	bf00      	nop
}
 8000ff8:	3720      	adds	r7, #32
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bdb0      	pop	{r4, r5, r7, pc}
 8000ffe:	bf00      	nop
 8001000:	08013ce0 	.word	0x08013ce0

08001004 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b088      	sub	sp, #32
 8001008:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 8001018:	2300      	movs	r3, #0
 800101a:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8001020:	2300      	movs	r3, #0
 8001022:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8001024:	2300      	movs	r3, #0
 8001026:	77fb      	strb	r3, [r7, #31]
 8001028:	e036      	b.n	8001098 <APPD_SetCPU2GpioConfig+0x94>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 800102a:	7ffb      	ldrb	r3, [r7, #31]
 800102c:	4a43      	ldr	r2, [pc, #268]	@ (800113c <APPD_SetCPU2GpioConfig+0x138>)
 800102e:	00db      	lsls	r3, r3, #3
 8001030:	4413      	add	r3, r2
 8001032:	799b      	ldrb	r3, [r3, #6]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d02c      	beq.n	8001092 <APPD_SetCPU2GpioConfig+0x8e>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8001038:	7ffb      	ldrb	r3, [r7, #31]
 800103a:	4a40      	ldr	r2, [pc, #256]	@ (800113c <APPD_SetCPU2GpioConfig+0x138>)
 800103c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001040:	4a3f      	ldr	r2, [pc, #252]	@ (8001140 <APPD_SetCPU2GpioConfig+0x13c>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d01b      	beq.n	800107e <APPD_SetCPU2GpioConfig+0x7a>
 8001046:	4a3e      	ldr	r2, [pc, #248]	@ (8001140 <APPD_SetCPU2GpioConfig+0x13c>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d821      	bhi.n	8001090 <APPD_SetCPU2GpioConfig+0x8c>
 800104c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001050:	d003      	beq.n	800105a <APPD_SetCPU2GpioConfig+0x56>
 8001052:	4a3c      	ldr	r2, [pc, #240]	@ (8001144 <APPD_SetCPU2GpioConfig+0x140>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d009      	beq.n	800106c <APPD_SetCPU2GpioConfig+0x68>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 8001058:	e01a      	b.n	8001090 <APPD_SetCPU2GpioConfig+0x8c>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 800105a:	7ffb      	ldrb	r3, [r7, #31]
 800105c:	4a37      	ldr	r2, [pc, #220]	@ (800113c <APPD_SetCPU2GpioConfig+0x138>)
 800105e:	00db      	lsls	r3, r3, #3
 8001060:	4413      	add	r3, r2
 8001062:	889a      	ldrh	r2, [r3, #4]
 8001064:	8bbb      	ldrh	r3, [r7, #28]
 8001066:	4313      	orrs	r3, r2
 8001068:	83bb      	strh	r3, [r7, #28]
          break;
 800106a:	e012      	b.n	8001092 <APPD_SetCPU2GpioConfig+0x8e>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 800106c:	7ffb      	ldrb	r3, [r7, #31]
 800106e:	4a33      	ldr	r2, [pc, #204]	@ (800113c <APPD_SetCPU2GpioConfig+0x138>)
 8001070:	00db      	lsls	r3, r3, #3
 8001072:	4413      	add	r3, r2
 8001074:	889a      	ldrh	r2, [r3, #4]
 8001076:	8b7b      	ldrh	r3, [r7, #26]
 8001078:	4313      	orrs	r3, r2
 800107a:	837b      	strh	r3, [r7, #26]
          break;
 800107c:	e009      	b.n	8001092 <APPD_SetCPU2GpioConfig+0x8e>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 800107e:	7ffb      	ldrb	r3, [r7, #31]
 8001080:	4a2e      	ldr	r2, [pc, #184]	@ (800113c <APPD_SetCPU2GpioConfig+0x138>)
 8001082:	00db      	lsls	r3, r3, #3
 8001084:	4413      	add	r3, r2
 8001086:	889a      	ldrh	r2, [r3, #4]
 8001088:	8b3b      	ldrh	r3, [r7, #24]
 800108a:	4313      	orrs	r3, r2
 800108c:	833b      	strh	r3, [r7, #24]
          break;
 800108e:	e000      	b.n	8001092 <APPD_SetCPU2GpioConfig+0x8e>
          break;
 8001090:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8001092:	7ffb      	ldrb	r3, [r7, #31]
 8001094:	3301      	adds	r3, #1
 8001096:	77fb      	strb	r3, [r7, #31]
 8001098:	7ffb      	ldrb	r3, [r7, #31]
 800109a:	2b25      	cmp	r3, #37	@ 0x25
 800109c:	d9c5      	bls.n	800102a <APPD_SetCPU2GpioConfig+0x26>
      }
    }
  }

  gpio_config.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 80010a2:	2301      	movs	r3, #1
 80010a4:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a6:	2303      	movs	r3, #3
 80010a8:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 80010aa:	8bbb      	ldrh	r3, [r7, #28]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d014      	beq.n	80010da <APPD_SetCPU2GpioConfig+0xd6>
  {
    gpio_config.Pin = gpioa_pin_list;
 80010b0:	8bbb      	ldrh	r3, [r7, #28]
 80010b2:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b4:	2001      	movs	r0, #1
 80010b6:	f7ff ff41 	bl	8000f3c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 80010ba:	2001      	movs	r0, #1
 80010bc:	f7ff ff57 	bl	8000f6e <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 80010c0:	1d3b      	adds	r3, r7, #4
 80010c2:	4619      	mov	r1, r3
 80010c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010c8:	f006 fd5a 	bl	8007b80 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 80010cc:	8bbb      	ldrh	r3, [r7, #28]
 80010ce:	2200      	movs	r2, #0
 80010d0:	4619      	mov	r1, r3
 80010d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010d6:	f006 ffa1 	bl	800801c <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 80010da:	8b7b      	ldrh	r3, [r7, #26]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d012      	beq.n	8001106 <APPD_SetCPU2GpioConfig+0x102>
  {
    gpio_config.Pin = gpiob_pin_list;
 80010e0:	8b7b      	ldrh	r3, [r7, #26]
 80010e2:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e4:	2002      	movs	r0, #2
 80010e6:	f7ff ff29 	bl	8000f3c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 80010ea:	2002      	movs	r0, #2
 80010ec:	f7ff ff3f 	bl	8000f6e <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 80010f0:	1d3b      	adds	r3, r7, #4
 80010f2:	4619      	mov	r1, r3
 80010f4:	4813      	ldr	r0, [pc, #76]	@ (8001144 <APPD_SetCPU2GpioConfig+0x140>)
 80010f6:	f006 fd43 	bl	8007b80 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 80010fa:	8b7b      	ldrh	r3, [r7, #26]
 80010fc:	2200      	movs	r2, #0
 80010fe:	4619      	mov	r1, r3
 8001100:	4810      	ldr	r0, [pc, #64]	@ (8001144 <APPD_SetCPU2GpioConfig+0x140>)
 8001102:	f006 ff8b 	bl	800801c <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 8001106:	8b3b      	ldrh	r3, [r7, #24]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d013      	beq.n	8001134 <APPD_SetCPU2GpioConfig+0x130>
  {
    gpio_config.Pin = gpioc_pin_list;
 800110c:	8b3b      	ldrh	r3, [r7, #24]
 800110e:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001110:	2004      	movs	r0, #4
 8001112:	f7ff ff13 	bl	8000f3c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 8001116:	2004      	movs	r0, #4
 8001118:	f7ff ff29 	bl	8000f6e <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 800111c:	1d3b      	adds	r3, r7, #4
 800111e:	4619      	mov	r1, r3
 8001120:	4807      	ldr	r0, [pc, #28]	@ (8001140 <APPD_SetCPU2GpioConfig+0x13c>)
 8001122:	f006 fd2d 	bl	8007b80 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 8001126:	8b3b      	ldrh	r3, [r7, #24]
 8001128:	2200      	movs	r2, #0
 800112a:	4619      	mov	r1, r3
 800112c:	4804      	ldr	r0, [pc, #16]	@ (8001140 <APPD_SetCPU2GpioConfig+0x13c>)
 800112e:	f006 ff75 	bl	800801c <HAL_GPIO_WritePin>
  }

/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 8001132:	bf00      	nop
 8001134:	bf00      	nop
}
 8001136:	3720      	adds	r7, #32
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	080152e8 	.word	0x080152e8
 8001140:	48000800 	.word	0x48000800
 8001144:	48000400 	.word	0x48000400

08001148 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 800114c:	bf00      	nop
}
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 8001156:	b580      	push	{r7, lr}
 8001158:	af00      	add	r7, sp, #0
#endif
  }
  else if (CFG_DEBUG_TRACE_UART == hw_uart1)
  {
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 800115a:	f001 fc8b 	bl	8002a74 <MX_USART1_UART_Init>
#endif
  }
#endif

/* USER CODE END DbgOutputInit */
  return;
 800115e:	bf00      	nop
}
 8001160:	bd80      	pop	{r7, pc}

08001162 <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b084      	sub	sp, #16
 8001166:	af00      	add	r7, sp, #0
 8001168:	60f8      	str	r0, [r7, #12]
 800116a:	460b      	mov	r3, r1
 800116c:	607a      	str	r2, [r7, #4]
 800116e:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8001170:	897a      	ldrh	r2, [r7, #10]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	68f9      	ldr	r1, [r7, #12]
 8001176:	2000      	movs	r0, #0
 8001178:	f001 fa98 	bl	80026ac <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 800117c:	bf00      	nop
}
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 800118c:	4b07      	ldr	r3, [pc, #28]	@ (80011ac <LL_C2_PWR_SetPowerMode+0x28>)
 800118e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001192:	f023 0207 	bic.w	r2, r3, #7
 8001196:	4905      	ldr	r1, [pc, #20]	@ (80011ac <LL_C2_PWR_SetPowerMode+0x28>)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	4313      	orrs	r3, r2
 800119c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	58000400 	.word	0x58000400

080011b0 <LL_EXTI_EnableIT_32_63>:
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80011b8:	4b06      	ldr	r3, [pc, #24]	@ (80011d4 <LL_EXTI_EnableIT_32_63+0x24>)
 80011ba:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80011be:	4905      	ldr	r1, [pc, #20]	@ (80011d4 <LL_EXTI_EnableIT_32_63+0x24>)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	58000800 	.word	0x58000800

080011d8 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80011e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001210 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80011e6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80011ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80011f2:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	021b      	lsls	r3, r3, #8
 80011fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80011fe:	4313      	orrs	r3, r2
 8001200:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8001204:	bf00      	nop
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	cafecafe 	.word	0xcafecafe

08001214 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800121c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8001226:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4313      	orrs	r3, r2
 800122e:	608b      	str	r3, [r1, #8]
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8001240:	4b04      	ldr	r3, [pc, #16]	@ (8001254 <LL_DBGMCU_GetDeviceID+0x18>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8001248:	4618      	mov	r0, r3
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	e0042000 	.word	0xe0042000

08001258 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 800125c:	4b04      	ldr	r3, [pc, #16]	@ (8001270 <LL_DBGMCU_GetRevisionID+0x18>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	0c1b      	lsrs	r3, r3, #16
 8001262:	b29b      	uxth	r3, r3
}
 8001264:	4618      	mov	r0, r3
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	e0042000 	.word	0xe0042000

08001274 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001278:	4b05      	ldr	r3, [pc, #20]	@ (8001290 <LL_LPM_EnableSleep+0x1c>)
 800127a:	691b      	ldr	r3, [r3, #16]
 800127c:	4a04      	ldr	r2, [pc, #16]	@ (8001290 <LL_LPM_EnableSleep+0x1c>)
 800127e:	f023 0304 	bic.w	r3, r3, #4
 8001282:	6113      	str	r3, [r2, #16]
}
 8001284:	bf00      	nop
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	22ff      	movs	r2, #255	@ 0xff
 80012a0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80012a2:	bf00      	nop
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr

080012ae <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80012ae:	b480      	push	{r7}
 80012b0:	b083      	sub	sp, #12
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	22ca      	movs	r2, #202	@ 0xca
 80012ba:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2253      	movs	r2, #83	@ 0x53
 80012c0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 80012ce:	b480      	push	{r7}
 80012d0:	b083      	sub	sp, #12
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
 80012d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	f023 0207 	bic.w	r2, r3, #7
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	431a      	orrs	r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	609a      	str	r2, [r3, #8]
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <MX_APPE_Config>:
static void UartCmdExecute(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80012f8:	4b04      	ldr	r3, [pc, #16]	@ (800130c <MX_APPE_Config+0x18>)
 80012fa:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80012fe:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8001300:	f000 f89d 	bl	800143e <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8001304:	f000 f8a2 	bl	800144c <Config_HSE>

  return;
 8001308:	bf00      	nop
}
 800130a:	bd80      	pop	{r7, pc}
 800130c:	58004000 	.word	0x58004000

08001310 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8001314:	f000 f8ae 	bl	8001474 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8001318:	f000 f8c6 	bl	80014a8 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 800131c:	4920      	ldr	r1, [pc, #128]	@ (80013a0 <MX_APPE_Init+0x90>)
 800131e:	2000      	movs	r0, #0
 8001320:	f000 ff34 	bl	800218c <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 8001324:	f7ff fe3f 	bl	8000fa6 <APPD_Init>
  
  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8001328:	2101      	movs	r1, #1
 800132a:	2001      	movs	r0, #1
 800132c:	f00f fada 	bl	80108e4 <UTIL_LPM_SetOffMode>

  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
 8001330:	2100      	movs	r1, #0
 8001332:	2000      	movs	r0, #0
 8001334:	f005 fa10 	bl	8006758 <BSP_LCD_Init>
  /* Set LCD Foreground Layer  */
  UTIL_LCD_SetFuncDriver(&LCD_Driver); /* SetFunc before setting device */
 8001338:	481a      	ldr	r0, [pc, #104]	@ (80013a4 <MX_APPE_Init+0x94>)
 800133a:	f00e ffa5 	bl	8010288 <UTIL_LCD_SetFuncDriver>
  UTIL_LCD_SetDevice(0);            /* SetDevice after funcDriver is set */
 800133e:	2000      	movs	r0, #0
 8001340:	f00e fff8 	bl	8010334 <UTIL_LCD_SetDevice>
  BSP_LCD_Clear(0,SSD1315_COLOR_BLACK);
 8001344:	2100      	movs	r1, #0
 8001346:	2000      	movs	r0, #0
 8001348:	f005 fc2a 	bl	8006ba0 <BSP_LCD_Clear>
  BSP_LCD_DisplayOn(0);
 800134c:	2000      	movs	r0, #0
 800134e:	f005 fad3 	bl	80068f8 <BSP_LCD_DisplayOn>
  BSP_LCD_Refresh(0);
 8001352:	2000      	movs	r0, #0
 8001354:	f005 fafc 	bl	8006950 <BSP_LCD_Refresh>
  UTIL_LCD_SetFont(&Font12);
 8001358:	4813      	ldr	r0, [pc, #76]	@ (80013a8 <MX_APPE_Init+0x98>)
 800135a:	f00f f833 	bl	80103c4 <UTIL_LCD_SetFont>
  /* Set the LCD Text Color */
  UTIL_LCD_SetTextColor(SSD1315_COLOR_WHITE);
 800135e:	20ff      	movs	r0, #255	@ 0xff
 8001360:	f00f f808 	bl	8010374 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetBackColor(SSD1315_COLOR_BLACK);
 8001364:	2000      	movs	r0, #0
 8001366:	f00f f819 	bl	801039c <UTIL_LCD_SetBackColor>
  BSP_LCD_Clear(0,SSD1315_COLOR_BLACK);
 800136a:	2100      	movs	r1, #0
 800136c:	2000      	movs	r0, #0
 800136e:	f005 fc17 	bl	8006ba0 <BSP_LCD_Clear>
  BSP_LCD_Refresh(0);
 8001372:	2000      	movs	r0, #0
 8001374:	f005 faec 	bl	8006950 <BSP_LCD_Refresh>
  UTIL_LCD_DisplayStringAt(0, 0, (uint8_t *)"ST BLE P2P Server", CENTER_MODE);
 8001378:	2301      	movs	r3, #1
 800137a:	4a0c      	ldr	r2, [pc, #48]	@ (80013ac <MX_APPE_Init+0x9c>)
 800137c:	2100      	movs	r1, #0
 800137e:	2000      	movs	r0, #0
 8001380:	f00f f896 	bl	80104b0 <UTIL_LCD_DisplayStringAt>
  BSP_LCD_Refresh(0);
 8001384:	2000      	movs	r0, #0
 8001386:	f005 fae3 	bl	8006950 <BSP_LCD_Refresh>

  //Switch RGB LED off
  LED_Off();
 800138a:	f000 f84e 	bl	800142a <LED_Off>
  //Initialize user buttons
  Button_Init();
 800138e:	f000 f9ed 	bl	800176c <Button_Init>

  RxUART_Init();
 8001392:	f000 fa65 	bl	8001860 <RxUART_Init>

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8001396:	f000 f895 	bl	80014c4 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 800139a:	bf00      	nop
}
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	200004d4 	.word	0x200004d4
 80013a4:	08015478 	.word	0x08015478
 80013a8:	200000ac 	.word	0x200000ac
 80013ac:	08013cfc 	.word	0x08013cfc

080013b0 <Init_Smps>:

void Init_Smps(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 80013b4:	bf00      	nop
}
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <Init_Exti>:

void Init_Exti(void)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 80013c2:	2050      	movs	r0, #80	@ 0x50
 80013c4:	f7ff fef4 	bl	80011b0 <LL_EXTI_EnableIT_32_63>

  return;
 80013c8:	bf00      	nop
}
 80013ca:	bd80      	pop	{r7, pc}

080013cc <LED_Deinit>:

/* USER CODE BEGIN FD */

void LED_Deinit(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStructure = {0};
 80013d2:	1d3b      	adds	r3, r7, #4
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]
  
  /* RGB Led de-init */
  BSP_PWM_LED_DeInit();
 80013e0:	f004 fe30 	bl	8006044 <BSP_PWM_LED_DeInit>

  /* configure SPIx MOSI for LCD */
  GPIO_InitStructure.Pin       = BUS_SPI1_MOSI_PIN;
 80013e4:	2380      	movs	r3, #128	@ 0x80
 80013e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode      = GPIO_MODE_AF_PP;
 80013e8:	2302      	movs	r3, #2
 80013ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Pull      = GPIO_PULLDOWN;
 80013ec:	2302      	movs	r3, #2
 80013ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Speed     = GPIO_SPEED_FREQ_LOW;
 80013f0:	2300      	movs	r3, #0
 80013f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Alternate = BUS_SPI1_AF;
 80013f4:	2305      	movs	r3, #5
 80013f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_SPI1_GPIO_PORTA, &GPIO_InitStructure);
 80013f8:	1d3b      	adds	r3, r7, #4
 80013fa:	4619      	mov	r1, r3
 80013fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001400:	f006 fbbe 	bl	8007b80 <HAL_GPIO_Init>
}
 8001404:	bf00      	nop
 8001406:	3718      	adds	r7, #24
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <LED_On>:


void LED_On(aPwmLedGsData_TypeDef aPwmLedGsData)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  BSP_PWM_LED_Init();
 8001414:	f004 fdb8 	bl	8005f88 <BSP_PWM_LED_Init>
  BSP_PWM_LED_On(aPwmLedGsData);
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f004 fe3f 	bl	800609c <BSP_PWM_LED_On>
  LED_Deinit();
 800141e:	f7ff ffd5 	bl	80013cc <LED_Deinit>
}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <LED_Off>:

void LED_Off(void)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	af00      	add	r7, sp, #0
  BSP_PWM_LED_Init();
 800142e:	f004 fdab 	bl	8005f88 <BSP_PWM_LED_Init>
  BSP_PWM_LED_Off();
 8001432:	f004 fe3f 	bl	80060b4 <BSP_PWM_LED_Off>
  LED_Deinit();
 8001436:	f7ff ffc9 	bl	80013cc <LED_Deinit>
}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}

0800143e <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8001442:	bf00      	nop
}
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8001452:	2000      	movs	r0, #0
 8001454:	f00d fb90 	bl	800eb78 <OTP_Read>
 8001458:	6078      	str	r0, [r7, #4]
  if (p_otp)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d005      	beq.n	800146c <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	799b      	ldrb	r3, [r3, #6]
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff feb7 	bl	80011d8 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 800146a:	bf00      	nop
 800146c:	bf00      	nop
}
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <System_Init>:

static void System_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  Init_Smps();
 8001478:	f7ff ff9a 	bl	80013b0 <Init_Smps>

  Init_Exti();
 800147c:	f7ff ff9f 	bl	80013be <Init_Exti>

  Init_Rtc();
 8001480:	f000 f802 	bl	8001488 <Init_Rtc>

  return;
 8001484:	bf00      	nop
}
 8001486:	bd80      	pop	{r7, pc}

08001488 <Init_Rtc>:

static void Init_Rtc(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 800148c:	4805      	ldr	r0, [pc, #20]	@ (80014a4 <Init_Rtc+0x1c>)
 800148e:	f7ff ff0e 	bl	80012ae <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8001492:	2100      	movs	r1, #0
 8001494:	4803      	ldr	r0, [pc, #12]	@ (80014a4 <Init_Rtc+0x1c>)
 8001496:	f7ff ff1a 	bl	80012ce <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 800149a:	4802      	ldr	r0, [pc, #8]	@ (80014a4 <Init_Rtc+0x1c>)
 800149c:	f7ff fefa 	bl	8001294 <LL_RTC_EnableWriteProtection>

  return;
 80014a0:	bf00      	nop
}
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40002800 	.word	0x40002800

080014a8 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80014ac:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80014b0:	f7ff feb0 	bl	8001214 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80014b4:	f00f fa04 	bl	80108c0 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80014b8:	2004      	movs	r0, #4
 80014ba:	f7ff fe63 	bl	8001184 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 80014be:	bf00      	nop
}
 80014c0:	bd80      	pop	{r7, pc}
	...

080014c4 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b088      	sub	sp, #32
 80014c8:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80014ca:	f00e fc8f 	bl	800fdec <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80014ce:	4a11      	ldr	r2, [pc, #68]	@ (8001514 <appe_Tl_Init+0x50>)
 80014d0:	2100      	movs	r1, #0
 80014d2:	2010      	movs	r0, #16
 80014d4:	f00f fbb8 	bl	8010c48 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80014d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001518 <appe_Tl_Init+0x54>)
 80014da:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80014dc:	4b0f      	ldr	r3, [pc, #60]	@ (800151c <appe_Tl_Init+0x58>)
 80014de:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80014e0:	463b      	mov	r3, r7
 80014e2:	4619      	mov	r1, r3
 80014e4:	480e      	ldr	r0, [pc, #56]	@ (8001520 <appe_Tl_Init+0x5c>)
 80014e6:	f00d fd6b 	bl	800efc0 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80014ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001524 <appe_Tl_Init+0x60>)
 80014ec:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80014ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001528 <appe_Tl_Init+0x64>)
 80014f0:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80014f2:	4b0e      	ldr	r3, [pc, #56]	@ (800152c <appe_Tl_Init+0x68>)
 80014f4:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80014f6:	f240 533c 	movw	r3, #1340	@ 0x53c
 80014fa:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 80014fc:	f107 0308 	add.w	r3, r7, #8
 8001500:	4618      	mov	r0, r3
 8001502:	f00e fdb9 	bl	8010078 <TL_MM_Init>

  TL_Enable();
 8001506:	f00e fc6b 	bl	800fde0 <TL_Enable>

  return;
 800150a:	bf00      	nop
}
 800150c:	3720      	adds	r7, #32
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	0800eff9 	.word	0x0800eff9
 8001518:	20030734 	.word	0x20030734
 800151c:	08001531 	.word	0x08001531
 8001520:	08001549 	.word	0x08001549
 8001524:	2003094c 	.word	0x2003094c
 8001528:	20030840 	.word	0x20030840
 800152c:	200301f8 	.word	0x200301f8

08001530 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800153a:	bf00      	nop
}
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
	...

08001548 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b088      	sub	sp, #32
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	330b      	adds	r3, #11
 8001556:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	881b      	ldrh	r3, [r3, #0]
 800155c:	b29b      	uxth	r3, r3
 800155e:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 8001562:	2b07      	cmp	r3, #7
 8001564:	d860      	bhi.n	8001628 <APPE_SysUserEvtRx+0xe0>
 8001566:	a201      	add	r2, pc, #4	@ (adr r2, 800156c <APPE_SysUserEvtRx+0x24>)
 8001568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800156c:	0800158d 	.word	0x0800158d
 8001570:	080015cf 	.word	0x080015cf
 8001574:	080015dd 	.word	0x080015dd
 8001578:	08001629 	.word	0x08001629
 800157c:	080015f9 	.word	0x080015f9
 8001580:	08001609 	.word	0x08001609
 8001584:	08001611 	.word	0x08001611
 8001588:	08001621 	.word	0x08001621
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 800158c:	f107 030c 	add.w	r3, r7, #12
 8001590:	4618      	mov	r0, r3
 8001592:	f00d fc67 	bl	800ee64 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 8001596:	7b3b      	ldrb	r3, [r7, #12]
 8001598:	4619      	mov	r1, r3
 800159a:	7b7b      	ldrb	r3, [r7, #13]
 800159c:	461a      	mov	r2, r3
 800159e:	7bbb      	ldrb	r3, [r7, #14]
 80015a0:	4824      	ldr	r0, [pc, #144]	@ (8001634 <APPE_SysUserEvtRx+0xec>)
 80015a2:	f010 f9d5 	bl	8011950 <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 80015a6:	7c3b      	ldrb	r3, [r7, #16]
 80015a8:	4619      	mov	r1, r3
 80015aa:	4823      	ldr	r0, [pc, #140]	@ (8001638 <APPE_SysUserEvtRx+0xf0>)
 80015ac:	f010 f9d0 	bl	8011950 <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 80015b0:	7dbb      	ldrb	r3, [r7, #22]
 80015b2:	4619      	mov	r1, r3
 80015b4:	7dfb      	ldrb	r3, [r7, #23]
 80015b6:	461a      	mov	r2, r3
 80015b8:	7e3b      	ldrb	r3, [r7, #24]
 80015ba:	4820      	ldr	r0, [pc, #128]	@ (800163c <APPE_SysUserEvtRx+0xf4>)
 80015bc:	f010 f9c8 	bl	8011950 <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 80015c0:	481f      	ldr	r0, [pc, #124]	@ (8001640 <APPE_SysUserEvtRx+0xf8>)
 80015c2:	f010 f9c5 	bl	8011950 <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f000 f870 	bl	80016ac <APPE_SysEvtReadyProcessing>
    break;
 80015cc:	e02d      	b.n	800162a <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 80015ce:	481d      	ldr	r0, [pc, #116]	@ (8001644 <APPE_SysUserEvtRx+0xfc>)
 80015d0:	f010 f9be 	bl	8011950 <iprintf>
    APPE_SysEvtError(pPayload);
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f000 f843 	bl	8001660 <APPE_SysEvtError>
    break;
 80015da:	e026      	b.n	800162a <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 80015dc:	481a      	ldr	r0, [pc, #104]	@ (8001648 <APPE_SysUserEvtRx+0x100>)
 80015de:	f010 fa27 	bl	8011a30 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 80015e6:	6819      	ldr	r1, [r3, #0]
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	461a      	mov	r2, r3
 80015f0:	4816      	ldr	r0, [pc, #88]	@ (800164c <APPE_SysUserEvtRx+0x104>)
 80015f2:	f010 f9ad 	bl	8011950 <iprintf>
    break;
 80015f6:	e018      	b.n	800162a <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	3302      	adds	r3, #2
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4619      	mov	r1, r3
 8001600:	4813      	ldr	r0, [pc, #76]	@ (8001650 <APPE_SysUserEvtRx+0x108>)
 8001602:	f010 f9a5 	bl	8011950 <iprintf>
    break;
 8001606:	e010      	b.n	800162a <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 8001608:	4812      	ldr	r0, [pc, #72]	@ (8001654 <APPE_SysUserEvtRx+0x10c>)
 800160a:	f010 f9a1 	bl	8011950 <iprintf>
    break;
 800160e:	e00c      	b.n	800162a <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	3302      	adds	r3, #2
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4619      	mov	r1, r3
 8001618:	480f      	ldr	r0, [pc, #60]	@ (8001658 <APPE_SysUserEvtRx+0x110>)
 800161a:	f010 f999 	bl	8011950 <iprintf>
    break;
 800161e:	e004      	b.n	800162a <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 8001620:	480e      	ldr	r0, [pc, #56]	@ (800165c <APPE_SysUserEvtRx+0x114>)
 8001622:	f010 f995 	bl	8011950 <iprintf>
    break;
 8001626:	e000      	b.n	800162a <APPE_SysUserEvtRx+0xe2>

  default:
    break;
 8001628:	bf00      	nop
  }

  return;
 800162a:	bf00      	nop
}
 800162c:	3720      	adds	r7, #32
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	08013d10 	.word	0x08013d10
 8001638:	08013d34 	.word	0x08013d34
 800163c:	08013d50 	.word	0x08013d50
 8001640:	08013d68 	.word	0x08013d68
 8001644:	08013d88 	.word	0x08013d88
 8001648:	08013dac 	.word	0x08013dac
 800164c:	08013dfc 	.word	0x08013dfc
 8001650:	08013e24 	.word	0x08013e24
 8001654:	08013e60 	.word	0x08013e60
 8001658:	08013e84 	.word	0x08013e84
 800165c:	08013ec0 	.word	0x08013ec0

08001660 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	330b      	adds	r3, #11
 800166e:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	3302      	adds	r3, #2
 8001674:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	4619      	mov	r1, r3
 800167c:	4808      	ldr	r0, [pc, #32]	@ (80016a0 <APPE_SysEvtError+0x40>)
 800167e:	f010 f967 	bl	8011950 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d103      	bne.n	8001692 <APPE_SysEvtError+0x32>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 800168a:	4806      	ldr	r0, [pc, #24]	@ (80016a4 <APPE_SysEvtError+0x44>)
 800168c:	f010 f9d0 	bl	8011a30 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8001690:	e003      	b.n	800169a <APPE_SysEvtError+0x3a>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 8001692:	4805      	ldr	r0, [pc, #20]	@ (80016a8 <APPE_SysEvtError+0x48>)
 8001694:	f010 f9cc 	bl	8011a30 <puts>
  return;
 8001698:	bf00      	nop
}
 800169a:	3710      	adds	r7, #16
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	08013ee4 	.word	0x08013ee4
 80016a4:	08013f14 	.word	0x08013f14
 80016a8:	08013f50 	.word	0x08013f50

080016ac <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08a      	sub	sp, #40	@ 0x28
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80016b4:	f107 0308 	add.w	r3, r7, #8
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 80016c2:	2300      	movs	r3, #0
 80016c4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 80016c6:	2300      	movs	r3, #0
 80016c8:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	330b      	adds	r3, #11
 80016d0:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	3302      	adds	r3, #2
 80016d6:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d128      	bne.n	8001732 <APPE_SysEvtReadyProcessing+0x86>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 80016e0:	481d      	ldr	r0, [pc, #116]	@ (8001758 <APPE_SysEvtReadyProcessing+0xac>)
 80016e2:	f010 f9a5 	bl	8011a30 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 80016e6:	f7ff fc71 	bl	8000fcc <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 80016ea:	230f      	movs	r3, #15
 80016ec:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 80016ee:	237f      	movs	r3, #127	@ 0x7f
 80016f0:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 80016f2:	f7ff fdb1 	bl	8001258 <LL_DBGMCU_GetRevisionID>
 80016f6:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 80016f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80016fa:	4818      	ldr	r0, [pc, #96]	@ (800175c <APPE_SysEvtReadyProcessing+0xb0>)
 80016fc:	f010 f928 	bl	8011950 <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 8001700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001702:	b29b      	uxth	r3, r3
 8001704:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8001706:	f7ff fd99 	bl	800123c <LL_DBGMCU_GetDeviceID>
 800170a:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 800170c:	6a39      	ldr	r1, [r7, #32]
 800170e:	4814      	ldr	r0, [pc, #80]	@ (8001760 <APPE_SysEvtReadyProcessing+0xb4>)
 8001710:	f010 f91e 	bl	8011950 <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 8001714:	6a3b      	ldr	r3, [r7, #32]
 8001716:	b29b      	uxth	r3, r3
 8001718:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 800171a:	f107 0308 	add.w	r3, r7, #8
 800171e:	4618      	mov	r0, r3
 8001720:	f00d fb8a 	bl	800ee38 <SHCI_C2_Config>

    APP_BLE_Init();
 8001724:	f001 fea2 	bl	800346c <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001728:	2100      	movs	r1, #0
 800172a:	2001      	movs	r0, #1
 800172c:	f00f f8da 	bl	80108e4 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8001730:	e00e      	b.n	8001750 <APPE_SysEvtReadyProcessing+0xa4>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d106      	bne.n	8001748 <APPE_SysEvtReadyProcessing+0x9c>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 800173a:	480a      	ldr	r0, [pc, #40]	@ (8001764 <APPE_SysEvtReadyProcessing+0xb8>)
 800173c:	f010 f908 	bl	8011950 <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	701a      	strb	r2, [r3, #0]
  return;
 8001746:	e003      	b.n	8001750 <APPE_SysEvtReadyProcessing+0xa4>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 8001748:	4807      	ldr	r0, [pc, #28]	@ (8001768 <APPE_SysEvtReadyProcessing+0xbc>)
 800174a:	f010 f901 	bl	8011950 <iprintf>
  return;
 800174e:	bf00      	nop
}
 8001750:	3728      	adds	r7, #40	@ 0x28
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	08013f88 	.word	0x08013f88
 800175c:	08013fa4 	.word	0x08013fa4
 8001760:	08013fc8 	.word	0x08013fc8
 8001764:	08013fe8 	.word	0x08013fe8
 8001768:	0801401c 	.word	0x0801401c

0800176c <Button_Init>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
static void Button_Init( void )
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
#if (CFG_BUTTON_SUPPORTED == 1)
  /**
   * Button Initialization
   */
  BSP_PB_Init(BUTTON_USER1, BUTTON_MODE_EXTI);    
 8001770:	2101      	movs	r1, #1
 8001772:	2000      	movs	r0, #0
 8001774:	f004 fcc6 	bl	8006104 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_USER2, BUTTON_MODE_EXTI);
 8001778:	2101      	movs	r1, #1
 800177a:	2001      	movs	r0, #1
 800177c:	f004 fcc2 	bl	8006104 <BSP_PB_Init>

#endif

  return;
 8001780:	bf00      	nop
}
 8001782:	bd80      	pop	{r7, pc}

08001784 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800178c:	f005 fcac 	bl	80070e8 <HAL_GetTick>
 8001790:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800179c:	d00a      	beq.n	80017b4 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 800179e:	f005 fcbb 	bl	8007118 <HAL_GetTickFreq>
 80017a2:	4603      	mov	r3, r0
 80017a4:	461a      	mov	r2, r3
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	4413      	add	r3, r2
 80017aa:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017ac:	e002      	b.n	80017b4 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 80017ae:	f7ff fd61 	bl	8001274 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 80017b2:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 80017b4:	f005 fc98 	bl	80070e8 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d8f4      	bhi.n	80017ae <HAL_Delay+0x2a>
  }
}
 80017c4:	bf00      	nop
 80017c6:	bf00      	nop
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80017d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80017d6:	f00f f8b5 	bl	8010944 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}

080017de <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 80017e2:	bf00      	nop
}
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80017f4:	2100      	movs	r1, #0
 80017f6:	2010      	movs	r0, #16
 80017f8:	f00f fa48 	bl	8010c8c <UTIL_SEQ_SetTask>
  return;
 80017fc:	bf00      	nop
}
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 800180c:	2002      	movs	r0, #2
 800180e:	f00f faa9 	bl	8010d64 <UTIL_SEQ_SetEvt>
  return;
 8001812:	bf00      	nop
}
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b082      	sub	sp, #8
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001822:	2002      	movs	r0, #2
 8001824:	f00f fabe 	bl	8010da4 <UTIL_SEQ_WaitEvt>
  return;
 8001828:	bf00      	nop
}
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 800183a:	88fb      	ldrh	r3, [r7, #6]
 800183c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001840:	d003      	beq.n	800184a <HAL_GPIO_EXTI_Callback+0x1a>
 8001842:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001846:	d003      	beq.n	8001850 <HAL_GPIO_EXTI_Callback+0x20>
  case GPIO_PIN_13:
    /* SW button 2 */
    APP_BLE_Key_Button2_Action();
    break; 
  default:
    break;
 8001848:	e005      	b.n	8001856 <HAL_GPIO_EXTI_Callback+0x26>
    APP_BLE_Key_Button1_Action();
 800184a:	f002 fac3 	bl	8003dd4 <APP_BLE_Key_Button1_Action>
    break; 
 800184e:	e002      	b.n	8001856 <HAL_GPIO_EXTI_Callback+0x26>
    APP_BLE_Key_Button2_Action();
 8001850:	f002 fac6 	bl	8003de0 <APP_BLE_Key_Button2_Action>
    break; 
 8001854:	bf00      	nop
  }
  return;
 8001856:	bf00      	nop
}
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
	...

08001860 <RxUART_Init>:

static void RxUART_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  HW_UART_Receive_IT((hw_uart_id_t)CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, RxCpltCallback);
 8001864:	4b03      	ldr	r3, [pc, #12]	@ (8001874 <RxUART_Init+0x14>)
 8001866:	2201      	movs	r2, #1
 8001868:	4903      	ldr	r1, [pc, #12]	@ (8001878 <RxUART_Init+0x18>)
 800186a:	2000      	movs	r0, #0
 800186c:	f000 fefa 	bl	8002664 <HW_UART_Receive_IT>
}
 8001870:	bf00      	nop
 8001872:	bd80      	pop	{r7, pc}
 8001874:	0800187d 	.word	0x0800187d
 8001878:	200002e4 	.word	0x200002e4

0800187c <RxCpltCallback>:

static void RxCpltCallback(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* Filling buffer and wait for '\r' char */
  if (indexReceiveChar < C_SIZE_CMD_STRING)
 8001880:	4b15      	ldr	r3, [pc, #84]	@ (80018d8 <RxCpltCallback+0x5c>)
 8001882:	881b      	ldrh	r3, [r3, #0]
 8001884:	2bff      	cmp	r3, #255	@ 0xff
 8001886:	d81e      	bhi.n	80018c6 <RxCpltCallback+0x4a>
  {
    if (aRxBuffer[0] == '\r')
 8001888:	4b14      	ldr	r3, [pc, #80]	@ (80018dc <RxCpltCallback+0x60>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b0d      	cmp	r3, #13
 800188e:	d10f      	bne.n	80018b0 <RxCpltCallback+0x34>
    {
      APP_DBG_MSG("received %s\n", CommandString);
 8001890:	4913      	ldr	r1, [pc, #76]	@ (80018e0 <RxCpltCallback+0x64>)
 8001892:	4814      	ldr	r0, [pc, #80]	@ (80018e4 <RxCpltCallback+0x68>)
 8001894:	f010 f85c 	bl	8011950 <iprintf>

      UartCmdExecute();
 8001898:	f000 f828 	bl	80018ec <UartCmdExecute>

      /* Clear receive buffer and character counter*/
      indexReceiveChar = 0;
 800189c:	4b0e      	ldr	r3, [pc, #56]	@ (80018d8 <RxCpltCallback+0x5c>)
 800189e:	2200      	movs	r2, #0
 80018a0:	801a      	strh	r2, [r3, #0]
      memset(CommandString, 0, C_SIZE_CMD_STRING);
 80018a2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018a6:	2100      	movs	r1, #0
 80018a8:	480d      	ldr	r0, [pc, #52]	@ (80018e0 <RxCpltCallback+0x64>)
 80018aa:	f010 f8c9 	bl	8011a40 <memset>
 80018ae:	e00a      	b.n	80018c6 <RxCpltCallback+0x4a>
    }
    else
    {
      CommandString[indexReceiveChar++] = aRxBuffer[0];
 80018b0:	4b09      	ldr	r3, [pc, #36]	@ (80018d8 <RxCpltCallback+0x5c>)
 80018b2:	881b      	ldrh	r3, [r3, #0]
 80018b4:	1c5a      	adds	r2, r3, #1
 80018b6:	b291      	uxth	r1, r2
 80018b8:	4a07      	ldr	r2, [pc, #28]	@ (80018d8 <RxCpltCallback+0x5c>)
 80018ba:	8011      	strh	r1, [r2, #0]
 80018bc:	461a      	mov	r2, r3
 80018be:	4b07      	ldr	r3, [pc, #28]	@ (80018dc <RxCpltCallback+0x60>)
 80018c0:	7819      	ldrb	r1, [r3, #0]
 80018c2:	4b07      	ldr	r3, [pc, #28]	@ (80018e0 <RxCpltCallback+0x64>)
 80018c4:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Once a character has been sent, put back the device in reception mode */
  HW_UART_Receive_IT((hw_uart_id_t)CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, RxCpltCallback);
 80018c6:	4b08      	ldr	r3, [pc, #32]	@ (80018e8 <RxCpltCallback+0x6c>)
 80018c8:	2201      	movs	r2, #1
 80018ca:	4904      	ldr	r1, [pc, #16]	@ (80018dc <RxCpltCallback+0x60>)
 80018cc:	2000      	movs	r0, #0
 80018ce:	f000 fec9 	bl	8002664 <HW_UART_Receive_IT>
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	200003ec 	.word	0x200003ec
 80018dc:	200002e4 	.word	0x200002e4
 80018e0:	200002ec 	.word	0x200002ec
 80018e4:	08014050 	.word	0x08014050
 80018e8:	0800187d 	.word	0x0800187d

080018ec <UartCmdExecute>:

static void UartCmdExecute(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* Parse received CommandString */
  if(strcmp((char const*)CommandString, "SW1") == 0)
 80018f0:	4913      	ldr	r1, [pc, #76]	@ (8001940 <UartCmdExecute+0x54>)
 80018f2:	4814      	ldr	r0, [pc, #80]	@ (8001944 <UartCmdExecute+0x58>)
 80018f4:	f7fe fc44 	bl	8000180 <strcmp>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d109      	bne.n	8001912 <UartCmdExecute+0x26>
  {
    APP_DBG_MSG("SW1 OK\n");
 80018fe:	4812      	ldr	r0, [pc, #72]	@ (8001948 <UartCmdExecute+0x5c>)
 8001900:	f010 f896 	bl	8011a30 <puts>
    exti_handle.Line = BUTTON_USER1_EXTI_LINE;
 8001904:	4b11      	ldr	r3, [pc, #68]	@ (800194c <UartCmdExecute+0x60>)
 8001906:	4a12      	ldr	r2, [pc, #72]	@ (8001950 <UartCmdExecute+0x64>)
 8001908:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 800190a:	4810      	ldr	r0, [pc, #64]	@ (800194c <UartCmdExecute+0x60>)
 800190c:	f006 f916 	bl	8007b3c <HAL_EXTI_GenerateSWI>
  }
  else
  {
    APP_DBG_MSG("NOT RECOGNIZED COMMAND : %s\n", CommandString);
  }
}
 8001910:	e014      	b.n	800193c <UartCmdExecute+0x50>
  else if (strcmp((char const*)CommandString, "SW2") == 0)
 8001912:	4910      	ldr	r1, [pc, #64]	@ (8001954 <UartCmdExecute+0x68>)
 8001914:	480b      	ldr	r0, [pc, #44]	@ (8001944 <UartCmdExecute+0x58>)
 8001916:	f7fe fc33 	bl	8000180 <strcmp>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d109      	bne.n	8001934 <UartCmdExecute+0x48>
    APP_DBG_MSG("SW2 OK\n");
 8001920:	480d      	ldr	r0, [pc, #52]	@ (8001958 <UartCmdExecute+0x6c>)
 8001922:	f010 f885 	bl	8011a30 <puts>
    exti_handle.Line = BUTTON_USER2_EXTI_LINE;
 8001926:	4b09      	ldr	r3, [pc, #36]	@ (800194c <UartCmdExecute+0x60>)
 8001928:	4a0c      	ldr	r2, [pc, #48]	@ (800195c <UartCmdExecute+0x70>)
 800192a:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 800192c:	4807      	ldr	r0, [pc, #28]	@ (800194c <UartCmdExecute+0x60>)
 800192e:	f006 f905 	bl	8007b3c <HAL_EXTI_GenerateSWI>
}
 8001932:	e003      	b.n	800193c <UartCmdExecute+0x50>
    APP_DBG_MSG("NOT RECOGNIZED COMMAND : %s\n", CommandString);
 8001934:	4903      	ldr	r1, [pc, #12]	@ (8001944 <UartCmdExecute+0x58>)
 8001936:	480a      	ldr	r0, [pc, #40]	@ (8001960 <UartCmdExecute+0x74>)
 8001938:	f010 f80a 	bl	8011950 <iprintf>
}
 800193c:	bf00      	nop
 800193e:	bd80      	pop	{r7, pc}
 8001940:	08014060 	.word	0x08014060
 8001944:	200002ec 	.word	0x200002ec
 8001948:	08014064 	.word	0x08014064
 800194c:	200002dc 	.word	0x200002dc
 8001950:	1600000c 	.word	0x1600000c
 8001954:	0801406c 	.word	0x0801406c
 8001958:	08014070 	.word	0x08014070
 800195c:	1600000d 	.word	0x1600000d
 8001960:	08014078 	.word	0x08014078

08001964 <LL_EXTI_EnableIT_0_31>:
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800196c:	4b06      	ldr	r3, [pc, #24]	@ (8001988 <LL_EXTI_EnableIT_0_31+0x24>)
 800196e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001972:	4905      	ldr	r1, [pc, #20]	@ (8001988 <LL_EXTI_EnableIT_0_31+0x24>)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4313      	orrs	r3, r2
 8001978:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 800197c:	bf00      	nop
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	58000800 	.word	0x58000800

0800198c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001994:	4b05      	ldr	r3, [pc, #20]	@ (80019ac <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	4904      	ldr	r1, [pc, #16]	@ (80019ac <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4313      	orrs	r3, r2
 800199e:	600b      	str	r3, [r1, #0]

}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	58000800 	.word	0x58000800

080019b0 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80019b6:	4b0d      	ldr	r3, [pc, #52]	@ (80019ec <ReadRtcSsrValue+0x3c>)
 80019b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80019be:	4b0b      	ldr	r3, [pc, #44]	@ (80019ec <ReadRtcSsrValue+0x3c>)
 80019c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80019c6:	e005      	b.n	80019d4 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80019cc:	4b07      	ldr	r3, [pc, #28]	@ (80019ec <ReadRtcSsrValue+0x3c>)
 80019ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d1f5      	bne.n	80019c8 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80019dc:	683b      	ldr	r3, [r7, #0]
}
 80019de:	4618      	mov	r0, r3
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	40002800 	.word	0x40002800

080019f0 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4603      	mov	r3, r0
 80019f8:	460a      	mov	r2, r1
 80019fa:	71fb      	strb	r3, [r7, #7]
 80019fc:	4613      	mov	r3, r2
 80019fe:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001a00:	79ba      	ldrb	r2, [r7, #6]
 8001a02:	491d      	ldr	r1, [pc, #116]	@ (8001a78 <LinkTimerAfter+0x88>)
 8001a04:	4613      	mov	r3, r2
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	4413      	add	r3, r2
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	440b      	add	r3, r1
 8001a0e:	3315      	adds	r3, #21
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001a14:	7bfb      	ldrb	r3, [r7, #15]
 8001a16:	2b06      	cmp	r3, #6
 8001a18:	d009      	beq.n	8001a2e <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8001a1a:	7bfa      	ldrb	r2, [r7, #15]
 8001a1c:	4916      	ldr	r1, [pc, #88]	@ (8001a78 <LinkTimerAfter+0x88>)
 8001a1e:	4613      	mov	r3, r2
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	4413      	add	r3, r2
 8001a24:	00db      	lsls	r3, r3, #3
 8001a26:	440b      	add	r3, r1
 8001a28:	3314      	adds	r3, #20
 8001a2a:	79fa      	ldrb	r2, [r7, #7]
 8001a2c:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001a2e:	79fa      	ldrb	r2, [r7, #7]
 8001a30:	4911      	ldr	r1, [pc, #68]	@ (8001a78 <LinkTimerAfter+0x88>)
 8001a32:	4613      	mov	r3, r2
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	4413      	add	r3, r2
 8001a38:	00db      	lsls	r3, r3, #3
 8001a3a:	440b      	add	r3, r1
 8001a3c:	3315      	adds	r3, #21
 8001a3e:	7bfa      	ldrb	r2, [r7, #15]
 8001a40:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001a42:	79fa      	ldrb	r2, [r7, #7]
 8001a44:	490c      	ldr	r1, [pc, #48]	@ (8001a78 <LinkTimerAfter+0x88>)
 8001a46:	4613      	mov	r3, r2
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	4413      	add	r3, r2
 8001a4c:	00db      	lsls	r3, r3, #3
 8001a4e:	440b      	add	r3, r1
 8001a50:	3314      	adds	r3, #20
 8001a52:	79ba      	ldrb	r2, [r7, #6]
 8001a54:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8001a56:	79ba      	ldrb	r2, [r7, #6]
 8001a58:	4907      	ldr	r1, [pc, #28]	@ (8001a78 <LinkTimerAfter+0x88>)
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	4413      	add	r3, r2
 8001a60:	00db      	lsls	r3, r3, #3
 8001a62:	440b      	add	r3, r1
 8001a64:	3315      	adds	r3, #21
 8001a66:	79fa      	ldrb	r2, [r7, #7]
 8001a68:	701a      	strb	r2, [r3, #0]

  return;
 8001a6a:	bf00      	nop
}
 8001a6c:	3714      	adds	r7, #20
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	200003f0 	.word	0x200003f0

08001a7c <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	4603      	mov	r3, r0
 8001a84:	460a      	mov	r2, r1
 8001a86:	71fb      	strb	r3, [r7, #7]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001a8c:	4b29      	ldr	r3, [pc, #164]	@ (8001b34 <LinkTimerBefore+0xb8>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	79ba      	ldrb	r2, [r7, #6]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d032      	beq.n	8001afe <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001a98:	79ba      	ldrb	r2, [r7, #6]
 8001a9a:	4927      	ldr	r1, [pc, #156]	@ (8001b38 <LinkTimerBefore+0xbc>)
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	4413      	add	r3, r2
 8001aa2:	00db      	lsls	r3, r3, #3
 8001aa4:	440b      	add	r3, r1
 8001aa6:	3314      	adds	r3, #20
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001aac:	7bfa      	ldrb	r2, [r7, #15]
 8001aae:	4922      	ldr	r1, [pc, #136]	@ (8001b38 <LinkTimerBefore+0xbc>)
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	4413      	add	r3, r2
 8001ab6:	00db      	lsls	r3, r3, #3
 8001ab8:	440b      	add	r3, r1
 8001aba:	3315      	adds	r3, #21
 8001abc:	79fa      	ldrb	r2, [r7, #7]
 8001abe:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001ac0:	79fa      	ldrb	r2, [r7, #7]
 8001ac2:	491d      	ldr	r1, [pc, #116]	@ (8001b38 <LinkTimerBefore+0xbc>)
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	4413      	add	r3, r2
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	440b      	add	r3, r1
 8001ace:	3315      	adds	r3, #21
 8001ad0:	79ba      	ldrb	r2, [r7, #6]
 8001ad2:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001ad4:	79fa      	ldrb	r2, [r7, #7]
 8001ad6:	4918      	ldr	r1, [pc, #96]	@ (8001b38 <LinkTimerBefore+0xbc>)
 8001ad8:	4613      	mov	r3, r2
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	4413      	add	r3, r2
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	440b      	add	r3, r1
 8001ae2:	3314      	adds	r3, #20
 8001ae4:	7bfa      	ldrb	r2, [r7, #15]
 8001ae6:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001ae8:	79ba      	ldrb	r2, [r7, #6]
 8001aea:	4913      	ldr	r1, [pc, #76]	@ (8001b38 <LinkTimerBefore+0xbc>)
 8001aec:	4613      	mov	r3, r2
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	4413      	add	r3, r2
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	440b      	add	r3, r1
 8001af6:	3314      	adds	r3, #20
 8001af8:	79fa      	ldrb	r2, [r7, #7]
 8001afa:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001afc:	e014      	b.n	8001b28 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8001afe:	79fa      	ldrb	r2, [r7, #7]
 8001b00:	490d      	ldr	r1, [pc, #52]	@ (8001b38 <LinkTimerBefore+0xbc>)
 8001b02:	4613      	mov	r3, r2
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	4413      	add	r3, r2
 8001b08:	00db      	lsls	r3, r3, #3
 8001b0a:	440b      	add	r3, r1
 8001b0c:	3315      	adds	r3, #21
 8001b0e:	79ba      	ldrb	r2, [r7, #6]
 8001b10:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001b12:	79ba      	ldrb	r2, [r7, #6]
 8001b14:	4908      	ldr	r1, [pc, #32]	@ (8001b38 <LinkTimerBefore+0xbc>)
 8001b16:	4613      	mov	r3, r2
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	4413      	add	r3, r2
 8001b1c:	00db      	lsls	r3, r3, #3
 8001b1e:	440b      	add	r3, r1
 8001b20:	3314      	adds	r3, #20
 8001b22:	79fa      	ldrb	r2, [r7, #7]
 8001b24:	701a      	strb	r2, [r3, #0]
  return;
 8001b26:	bf00      	nop
}
 8001b28:	3714      	adds	r7, #20
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	20000480 	.word	0x20000480
 8001b38:	200003f0 	.word	0x200003f0

08001b3c <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001b46:	4b4e      	ldr	r3, [pc, #312]	@ (8001c80 <linkTimer+0x144>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	2b06      	cmp	r3, #6
 8001b4e:	d118      	bne.n	8001b82 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001b50:	4b4b      	ldr	r3, [pc, #300]	@ (8001c80 <linkTimer+0x144>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	b2da      	uxtb	r2, r3
 8001b56:	4b4b      	ldr	r3, [pc, #300]	@ (8001c84 <linkTimer+0x148>)
 8001b58:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001b5a:	4a49      	ldr	r2, [pc, #292]	@ (8001c80 <linkTimer+0x144>)
 8001b5c:	79fb      	ldrb	r3, [r7, #7]
 8001b5e:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001b60:	79fa      	ldrb	r2, [r7, #7]
 8001b62:	4949      	ldr	r1, [pc, #292]	@ (8001c88 <linkTimer+0x14c>)
 8001b64:	4613      	mov	r3, r2
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	4413      	add	r3, r2
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	440b      	add	r3, r1
 8001b6e:	3315      	adds	r3, #21
 8001b70:	2206      	movs	r2, #6
 8001b72:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001b74:	4b45      	ldr	r3, [pc, #276]	@ (8001c8c <linkTimer+0x150>)
 8001b76:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001b7a:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	81fb      	strh	r3, [r7, #14]
 8001b80:	e078      	b.n	8001c74 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001b82:	f000 f909 	bl	8001d98 <ReturnTimeElapsed>
 8001b86:	4603      	mov	r3, r0
 8001b88:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001b8a:	79fa      	ldrb	r2, [r7, #7]
 8001b8c:	493e      	ldr	r1, [pc, #248]	@ (8001c88 <linkTimer+0x14c>)
 8001b8e:	4613      	mov	r3, r2
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	4413      	add	r3, r2
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	440b      	add	r3, r1
 8001b98:	3308      	adds	r3, #8
 8001b9a:	6819      	ldr	r1, [r3, #0]
 8001b9c:	89fb      	ldrh	r3, [r7, #14]
 8001b9e:	79fa      	ldrb	r2, [r7, #7]
 8001ba0:	4419      	add	r1, r3
 8001ba2:	4839      	ldr	r0, [pc, #228]	@ (8001c88 <linkTimer+0x14c>)
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	4413      	add	r3, r2
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	4403      	add	r3, r0
 8001bae:	3308      	adds	r3, #8
 8001bb0:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001bb2:	79fa      	ldrb	r2, [r7, #7]
 8001bb4:	4934      	ldr	r1, [pc, #208]	@ (8001c88 <linkTimer+0x14c>)
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	4413      	add	r3, r2
 8001bbc:	00db      	lsls	r3, r3, #3
 8001bbe:	440b      	add	r3, r1
 8001bc0:	3308      	adds	r3, #8
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001bc6:	4b2e      	ldr	r3, [pc, #184]	@ (8001c80 <linkTimer+0x144>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4a2e      	ldr	r2, [pc, #184]	@ (8001c88 <linkTimer+0x14c>)
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	440b      	add	r3, r1
 8001bd6:	00db      	lsls	r3, r3, #3
 8001bd8:	4413      	add	r3, r2
 8001bda:	3308      	adds	r3, #8
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	68ba      	ldr	r2, [r7, #8]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d337      	bcc.n	8001c54 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001be4:	4b26      	ldr	r3, [pc, #152]	@ (8001c80 <linkTimer+0x144>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001bea:	7b7a      	ldrb	r2, [r7, #13]
 8001bec:	4926      	ldr	r1, [pc, #152]	@ (8001c88 <linkTimer+0x14c>)
 8001bee:	4613      	mov	r3, r2
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	4413      	add	r3, r2
 8001bf4:	00db      	lsls	r3, r3, #3
 8001bf6:	440b      	add	r3, r1
 8001bf8:	3315      	adds	r3, #21
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001bfe:	e013      	b.n	8001c28 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001c00:	7b7a      	ldrb	r2, [r7, #13]
 8001c02:	4921      	ldr	r1, [pc, #132]	@ (8001c88 <linkTimer+0x14c>)
 8001c04:	4613      	mov	r3, r2
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	4413      	add	r3, r2
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	440b      	add	r3, r1
 8001c0e:	3315      	adds	r3, #21
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001c14:	7b7a      	ldrb	r2, [r7, #13]
 8001c16:	491c      	ldr	r1, [pc, #112]	@ (8001c88 <linkTimer+0x14c>)
 8001c18:	4613      	mov	r3, r2
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	4413      	add	r3, r2
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	440b      	add	r3, r1
 8001c22:	3315      	adds	r3, #21
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001c28:	7b3b      	ldrb	r3, [r7, #12]
 8001c2a:	2b06      	cmp	r3, #6
 8001c2c:	d00b      	beq.n	8001c46 <linkTimer+0x10a>
 8001c2e:	7b3a      	ldrb	r2, [r7, #12]
 8001c30:	4915      	ldr	r1, [pc, #84]	@ (8001c88 <linkTimer+0x14c>)
 8001c32:	4613      	mov	r3, r2
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	4413      	add	r3, r2
 8001c38:	00db      	lsls	r3, r3, #3
 8001c3a:	440b      	add	r3, r1
 8001c3c:	3308      	adds	r3, #8
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	68ba      	ldr	r2, [r7, #8]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d2dc      	bcs.n	8001c00 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001c46:	7b7a      	ldrb	r2, [r7, #13]
 8001c48:	79fb      	ldrb	r3, [r7, #7]
 8001c4a:	4611      	mov	r1, r2
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff fecf 	bl	80019f0 <LinkTimerAfter>
 8001c52:	e00f      	b.n	8001c74 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001c54:	4b0a      	ldr	r3, [pc, #40]	@ (8001c80 <linkTimer+0x144>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	b2da      	uxtb	r2, r3
 8001c5a:	79fb      	ldrb	r3, [r7, #7]
 8001c5c:	4611      	mov	r1, r2
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff ff0c 	bl	8001a7c <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001c64:	4b06      	ldr	r3, [pc, #24]	@ (8001c80 <linkTimer+0x144>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	b2da      	uxtb	r2, r3
 8001c6a:	4b06      	ldr	r3, [pc, #24]	@ (8001c84 <linkTimer+0x148>)
 8001c6c:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001c6e:	4a04      	ldr	r2, [pc, #16]	@ (8001c80 <linkTimer+0x144>)
 8001c70:	79fb      	ldrb	r3, [r7, #7]
 8001c72:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001c74:	89fb      	ldrh	r3, [r7, #14]
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20000480 	.word	0x20000480
 8001c84:	20000481 	.word	0x20000481
 8001c88:	200003f0 	.word	0x200003f0
 8001c8c:	20000484 	.word	0x20000484

08001c90 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	460a      	mov	r2, r1
 8001c9a:	71fb      	strb	r3, [r7, #7]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001ca0:	4b39      	ldr	r3, [pc, #228]	@ (8001d88 <UnlinkTimer+0xf8>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	79fa      	ldrb	r2, [r7, #7]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d111      	bne.n	8001cd0 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001cac:	4b36      	ldr	r3, [pc, #216]	@ (8001d88 <UnlinkTimer+0xf8>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	b2da      	uxtb	r2, r3
 8001cb2:	4b36      	ldr	r3, [pc, #216]	@ (8001d8c <UnlinkTimer+0xfc>)
 8001cb4:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001cb6:	79fa      	ldrb	r2, [r7, #7]
 8001cb8:	4935      	ldr	r1, [pc, #212]	@ (8001d90 <UnlinkTimer+0x100>)
 8001cba:	4613      	mov	r3, r2
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	4413      	add	r3, r2
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	440b      	add	r3, r1
 8001cc4:	3315      	adds	r3, #21
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	b2da      	uxtb	r2, r3
 8001cca:	4b2f      	ldr	r3, [pc, #188]	@ (8001d88 <UnlinkTimer+0xf8>)
 8001ccc:	701a      	strb	r2, [r3, #0]
 8001cce:	e03e      	b.n	8001d4e <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001cd0:	79fa      	ldrb	r2, [r7, #7]
 8001cd2:	492f      	ldr	r1, [pc, #188]	@ (8001d90 <UnlinkTimer+0x100>)
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	4413      	add	r3, r2
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	440b      	add	r3, r1
 8001cde:	3314      	adds	r3, #20
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001ce4:	79fa      	ldrb	r2, [r7, #7]
 8001ce6:	492a      	ldr	r1, [pc, #168]	@ (8001d90 <UnlinkTimer+0x100>)
 8001ce8:	4613      	mov	r3, r2
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	4413      	add	r3, r2
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	440b      	add	r3, r1
 8001cf2:	3315      	adds	r3, #21
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001cf8:	79f9      	ldrb	r1, [r7, #7]
 8001cfa:	7bfa      	ldrb	r2, [r7, #15]
 8001cfc:	4824      	ldr	r0, [pc, #144]	@ (8001d90 <UnlinkTimer+0x100>)
 8001cfe:	460b      	mov	r3, r1
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	440b      	add	r3, r1
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	4403      	add	r3, r0
 8001d08:	3315      	adds	r3, #21
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	b2d8      	uxtb	r0, r3
 8001d0e:	4920      	ldr	r1, [pc, #128]	@ (8001d90 <UnlinkTimer+0x100>)
 8001d10:	4613      	mov	r3, r2
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	4413      	add	r3, r2
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	440b      	add	r3, r1
 8001d1a:	3315      	adds	r3, #21
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001d20:	7bbb      	ldrb	r3, [r7, #14]
 8001d22:	2b06      	cmp	r3, #6
 8001d24:	d013      	beq.n	8001d4e <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001d26:	79f9      	ldrb	r1, [r7, #7]
 8001d28:	7bba      	ldrb	r2, [r7, #14]
 8001d2a:	4819      	ldr	r0, [pc, #100]	@ (8001d90 <UnlinkTimer+0x100>)
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	440b      	add	r3, r1
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	4403      	add	r3, r0
 8001d36:	3314      	adds	r3, #20
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	b2d8      	uxtb	r0, r3
 8001d3c:	4914      	ldr	r1, [pc, #80]	@ (8001d90 <UnlinkTimer+0x100>)
 8001d3e:	4613      	mov	r3, r2
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	4413      	add	r3, r2
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	440b      	add	r3, r1
 8001d48:	3314      	adds	r3, #20
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001d4e:	79fa      	ldrb	r2, [r7, #7]
 8001d50:	490f      	ldr	r1, [pc, #60]	@ (8001d90 <UnlinkTimer+0x100>)
 8001d52:	4613      	mov	r3, r2
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	4413      	add	r3, r2
 8001d58:	00db      	lsls	r3, r3, #3
 8001d5a:	440b      	add	r3, r1
 8001d5c:	330c      	adds	r3, #12
 8001d5e:	2201      	movs	r2, #1
 8001d60:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001d62:	4b09      	ldr	r3, [pc, #36]	@ (8001d88 <UnlinkTimer+0xf8>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	2b06      	cmp	r3, #6
 8001d6a:	d107      	bne.n	8001d7c <UnlinkTimer+0xec>
 8001d6c:	79bb      	ldrb	r3, [r7, #6]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d104      	bne.n	8001d7c <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001d72:	4b08      	ldr	r3, [pc, #32]	@ (8001d94 <UnlinkTimer+0x104>)
 8001d74:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001d78:	601a      	str	r2, [r3, #0]
  }

  return;
 8001d7a:	bf00      	nop
 8001d7c:	bf00      	nop
}
 8001d7e:	3714      	adds	r7, #20
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	20000480 	.word	0x20000480
 8001d8c:	20000481 	.word	0x20000481
 8001d90:	200003f0 	.word	0x200003f0
 8001d94:	20000484 	.word	0x20000484

08001d98 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001d9e:	4b1a      	ldr	r3, [pc, #104]	@ (8001e08 <ReturnTimeElapsed+0x70>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001da6:	d026      	beq.n	8001df6 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001da8:	f7ff fe02 	bl	80019b0 <ReadRtcSsrValue>
 8001dac:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001dae:	4b16      	ldr	r3, [pc, #88]	@ (8001e08 <ReturnTimeElapsed+0x70>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d805      	bhi.n	8001dc4 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001db8:	4b13      	ldr	r3, [pc, #76]	@ (8001e08 <ReturnTimeElapsed+0x70>)
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	607b      	str	r3, [r7, #4]
 8001dc2:	e00a      	b.n	8001dda <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001dc4:	4b11      	ldr	r3, [pc, #68]	@ (8001e0c <ReturnTimeElapsed+0x74>)
 8001dc6:	881b      	ldrh	r3, [r3, #0]
 8001dc8:	461a      	mov	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001dd0:	4b0d      	ldr	r3, [pc, #52]	@ (8001e08 <ReturnTimeElapsed+0x70>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	683a      	ldr	r2, [r7, #0]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001dda:	4b0d      	ldr	r3, [pc, #52]	@ (8001e10 <ReturnTimeElapsed+0x78>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	461a      	mov	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	fb02 f303 	mul.w	r3, r2, r3
 8001de6:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001de8:	4b0a      	ldr	r3, [pc, #40]	@ (8001e14 <ReturnTimeElapsed+0x7c>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	461a      	mov	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	40d3      	lsrs	r3, r2
 8001df2:	607b      	str	r3, [r7, #4]
 8001df4:	e001      	b.n	8001dfa <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001df6:	2300      	movs	r3, #0
 8001df8:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	b29b      	uxth	r3, r3
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	20000484 	.word	0x20000484
 8001e0c:	2000048c 	.word	0x2000048c
 8001e10:	2000048a 	.word	0x2000048a
 8001e14:	20000489 	.word	0x20000489

08001e18 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	4603      	mov	r3, r0
 8001e20:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8001e22:	88fb      	ldrh	r3, [r7, #6]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d108      	bne.n	8001e3a <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001e28:	f7ff fdc2 	bl	80019b0 <ReadRtcSsrValue>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	4a21      	ldr	r2, [pc, #132]	@ (8001eb4 <RestartWakeupCounter+0x9c>)
 8001e30:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001e32:	2003      	movs	r0, #3
 8001e34:	f005 fb05 	bl	8007442 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001e38:	e039      	b.n	8001eae <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001e3a:	88fb      	ldrh	r3, [r7, #6]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d803      	bhi.n	8001e48 <RestartWakeupCounter+0x30>
 8001e40:	4b1d      	ldr	r3, [pc, #116]	@ (8001eb8 <RestartWakeupCounter+0xa0>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d002      	beq.n	8001e4e <RestartWakeupCounter+0x36>
      Value -= 1;
 8001e48:	88fb      	ldrh	r3, [r7, #6]
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001e4e:	bf00      	nop
 8001e50:	4b1a      	ldr	r3, [pc, #104]	@ (8001ebc <RestartWakeupCounter+0xa4>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	f003 0304 	and.w	r3, r3, #4
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d0f8      	beq.n	8001e50 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001e5e:	4b17      	ldr	r3, [pc, #92]	@ (8001ebc <RestartWakeupCounter+0xa4>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	b2da      	uxtb	r2, r3
 8001e66:	4b15      	ldr	r3, [pc, #84]	@ (8001ebc <RestartWakeupCounter+0xa4>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001e6e:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001e70:	4b13      	ldr	r3, [pc, #76]	@ (8001ec0 <RestartWakeupCounter+0xa8>)
 8001e72:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001e76:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001e78:	2003      	movs	r0, #3
 8001e7a:	f005 faf0 	bl	800745e <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001e7e:	4b11      	ldr	r3, [pc, #68]	@ (8001ec4 <RestartWakeupCounter+0xac>)
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	0c1b      	lsrs	r3, r3, #16
 8001e84:	041b      	lsls	r3, r3, #16
 8001e86:	88fa      	ldrh	r2, [r7, #6]
 8001e88:	490e      	ldr	r1, [pc, #56]	@ (8001ec4 <RestartWakeupCounter+0xac>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001e8e:	f7ff fd8f 	bl	80019b0 <ReadRtcSsrValue>
 8001e92:	4603      	mov	r3, r0
 8001e94:	4a07      	ldr	r2, [pc, #28]	@ (8001eb4 <RestartWakeupCounter+0x9c>)
 8001e96:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8001e98:	4b08      	ldr	r3, [pc, #32]	@ (8001ebc <RestartWakeupCounter+0xa4>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	689a      	ldr	r2, [r3, #8]
 8001e9e:	4b07      	ldr	r3, [pc, #28]	@ (8001ebc <RestartWakeupCounter+0xa4>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001ea6:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001ea8:	f3af 8000 	nop.w
  return ;
 8001eac:	bf00      	nop
}
 8001eae:	3708      	adds	r7, #8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	20000484 	.word	0x20000484
 8001eb8:	20000489 	.word	0x20000489
 8001ebc:	200004d4 	.word	0x200004d4
 8001ec0:	58000800 	.word	0x58000800
 8001ec4:	40002800 	.word	0x40002800

08001ec8 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001ece:	4b45      	ldr	r3, [pc, #276]	@ (8001fe4 <RescheduleTimerList+0x11c>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ed6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001eda:	d107      	bne.n	8001eec <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001edc:	bf00      	nop
 8001ede:	4b42      	ldr	r3, [pc, #264]	@ (8001fe8 <RescheduleTimerList+0x120>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	f003 0304 	and.w	r3, r3, #4
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d1f8      	bne.n	8001ede <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001eec:	4b3e      	ldr	r3, [pc, #248]	@ (8001fe8 <RescheduleTimerList+0x120>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	689a      	ldr	r2, [r3, #8]
 8001ef2:	4b3d      	ldr	r3, [pc, #244]	@ (8001fe8 <RescheduleTimerList+0x120>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001efa:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001efc:	4b3b      	ldr	r3, [pc, #236]	@ (8001fec <RescheduleTimerList+0x124>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001f02:	7bfa      	ldrb	r2, [r7, #15]
 8001f04:	493a      	ldr	r1, [pc, #232]	@ (8001ff0 <RescheduleTimerList+0x128>)
 8001f06:	4613      	mov	r3, r2
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	4413      	add	r3, r2
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	440b      	add	r3, r1
 8001f10:	3308      	adds	r3, #8
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001f16:	f7ff ff3f 	bl	8001d98 <ReturnTimeElapsed>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001f1e:	88fb      	ldrh	r3, [r7, #6]
 8001f20:	68ba      	ldr	r2, [r7, #8]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d205      	bcs.n	8001f32 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001f26:	2300      	movs	r3, #0
 8001f28:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001f2a:	4b32      	ldr	r3, [pc, #200]	@ (8001ff4 <RescheduleTimerList+0x12c>)
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	701a      	strb	r2, [r3, #0]
 8001f30:	e04d      	b.n	8001fce <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001f32:	88fb      	ldrh	r3, [r7, #6]
 8001f34:	4a30      	ldr	r2, [pc, #192]	@ (8001ff8 <RescheduleTimerList+0x130>)
 8001f36:	8812      	ldrh	r2, [r2, #0]
 8001f38:	b292      	uxth	r2, r2
 8001f3a:	4413      	add	r3, r2
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d906      	bls.n	8001f52 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001f44:	4b2c      	ldr	r3, [pc, #176]	@ (8001ff8 <RescheduleTimerList+0x130>)
 8001f46:	881b      	ldrh	r3, [r3, #0]
 8001f48:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001f4a:	4b2a      	ldr	r3, [pc, #168]	@ (8001ff4 <RescheduleTimerList+0x12c>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	701a      	strb	r2, [r3, #0]
 8001f50:	e03d      	b.n	8001fce <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	b29a      	uxth	r2, r3
 8001f56:	88fb      	ldrh	r3, [r7, #6]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001f5c:	4b25      	ldr	r3, [pc, #148]	@ (8001ff4 <RescheduleTimerList+0x12c>)
 8001f5e:	2201      	movs	r2, #1
 8001f60:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001f62:	e034      	b.n	8001fce <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001f64:	7bfa      	ldrb	r2, [r7, #15]
 8001f66:	4922      	ldr	r1, [pc, #136]	@ (8001ff0 <RescheduleTimerList+0x128>)
 8001f68:	4613      	mov	r3, r2
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	4413      	add	r3, r2
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	440b      	add	r3, r1
 8001f72:	3308      	adds	r3, #8
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	88fb      	ldrh	r3, [r7, #6]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d20a      	bcs.n	8001f92 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001f7c:	7bfa      	ldrb	r2, [r7, #15]
 8001f7e:	491c      	ldr	r1, [pc, #112]	@ (8001ff0 <RescheduleTimerList+0x128>)
 8001f80:	4613      	mov	r3, r2
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	4413      	add	r3, r2
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	440b      	add	r3, r1
 8001f8a:	3308      	adds	r3, #8
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	e013      	b.n	8001fba <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001f92:	7bfa      	ldrb	r2, [r7, #15]
 8001f94:	4916      	ldr	r1, [pc, #88]	@ (8001ff0 <RescheduleTimerList+0x128>)
 8001f96:	4613      	mov	r3, r2
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	4413      	add	r3, r2
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	440b      	add	r3, r1
 8001fa0:	3308      	adds	r3, #8
 8001fa2:	6819      	ldr	r1, [r3, #0]
 8001fa4:	88fb      	ldrh	r3, [r7, #6]
 8001fa6:	7bfa      	ldrb	r2, [r7, #15]
 8001fa8:	1ac9      	subs	r1, r1, r3
 8001faa:	4811      	ldr	r0, [pc, #68]	@ (8001ff0 <RescheduleTimerList+0x128>)
 8001fac:	4613      	mov	r3, r2
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	4413      	add	r3, r2
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	4403      	add	r3, r0
 8001fb6:	3308      	adds	r3, #8
 8001fb8:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001fba:	7bfa      	ldrb	r2, [r7, #15]
 8001fbc:	490c      	ldr	r1, [pc, #48]	@ (8001ff0 <RescheduleTimerList+0x128>)
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	4413      	add	r3, r2
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	440b      	add	r3, r1
 8001fc8:	3315      	adds	r3, #21
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001fce:	7bfb      	ldrb	r3, [r7, #15]
 8001fd0:	2b06      	cmp	r3, #6
 8001fd2:	d1c7      	bne.n	8001f64 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001fd4:	89bb      	ldrh	r3, [r7, #12]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff ff1e 	bl	8001e18 <RestartWakeupCounter>

  return ;
 8001fdc:	bf00      	nop
}
 8001fde:	3710      	adds	r7, #16
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40002800 	.word	0x40002800
 8001fe8:	200004d4 	.word	0x200004d4
 8001fec:	20000480 	.word	0x20000480
 8001ff0:	200003f0 	.word	0x200003f0
 8001ff4:	20000488 	.word	0x20000488
 8001ff8:	2000048e 	.word	0x2000048e

08001ffc <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b08a      	sub	sp, #40	@ 0x28
 8002000:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002002:	f3ef 8310 	mrs	r3, PRIMASK
 8002006:	617b      	str	r3, [r7, #20]
  return(result);
 8002008:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800200a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800200c:	b672      	cpsid	i
}
 800200e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002010:	4b59      	ldr	r3, [pc, #356]	@ (8002178 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	22ca      	movs	r2, #202	@ 0xca
 8002016:	625a      	str	r2, [r3, #36]	@ 0x24
 8002018:	4b57      	ldr	r3, [pc, #348]	@ (8002178 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2253      	movs	r2, #83	@ 0x53
 800201e:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8002020:	4b55      	ldr	r3, [pc, #340]	@ (8002178 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	689a      	ldr	r2, [r3, #8]
 8002026:	4b54      	ldr	r3, [pc, #336]	@ (8002178 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800202e:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8002030:	4b52      	ldr	r3, [pc, #328]	@ (800217c <HW_TS_RTC_Wakeup_Handler+0x180>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8002038:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800203c:	4950      	ldr	r1, [pc, #320]	@ (8002180 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800203e:	4613      	mov	r3, r2
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	4413      	add	r3, r2
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	440b      	add	r3, r1
 8002048:	330c      	adds	r3, #12
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b02      	cmp	r3, #2
 8002050:	d16e      	bne.n	8002130 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8002052:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002056:	494a      	ldr	r1, [pc, #296]	@ (8002180 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002058:	4613      	mov	r3, r2
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	4413      	add	r3, r2
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	440b      	add	r3, r1
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8002066:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800206a:	4945      	ldr	r1, [pc, #276]	@ (8002180 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800206c:	4613      	mov	r3, r2
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	4413      	add	r3, r2
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	440b      	add	r3, r1
 8002076:	3310      	adds	r3, #16
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 800207c:	4b41      	ldr	r3, [pc, #260]	@ (8002184 <HW_TS_RTC_Wakeup_Handler+0x188>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d04c      	beq.n	8002120 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8002086:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800208a:	493d      	ldr	r1, [pc, #244]	@ (8002180 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800208c:	4613      	mov	r3, r2
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	4413      	add	r3, r2
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	440b      	add	r3, r1
 8002096:	330d      	adds	r3, #13
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b01      	cmp	r3, #1
 800209e:	d124      	bne.n	80020ea <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 80020a0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80020a4:	2101      	movs	r1, #1
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7ff fdf2 	bl	8001c90 <UnlinkTimer>
 80020ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ae:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	f383 8810 	msr	PRIMASK, r3
}
 80020b6:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 80020b8:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80020bc:	4930      	ldr	r1, [pc, #192]	@ (8002180 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80020be:	4613      	mov	r3, r2
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	4413      	add	r3, r2
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	440b      	add	r3, r1
 80020c8:	3304      	adds	r3, #4
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80020d0:	4611      	mov	r1, r2
 80020d2:	4618      	mov	r0, r3
 80020d4:	f000 fa32 	bl	800253c <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80020d8:	4b27      	ldr	r3, [pc, #156]	@ (8002178 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	22ca      	movs	r2, #202	@ 0xca
 80020de:	625a      	str	r2, [r3, #36]	@ 0x24
 80020e0:	4b25      	ldr	r3, [pc, #148]	@ (8002178 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2253      	movs	r2, #83	@ 0x53
 80020e6:	625a      	str	r2, [r3, #36]	@ 0x24
 80020e8:	e012      	b.n	8002110 <HW_TS_RTC_Wakeup_Handler+0x114>
 80020ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ec:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f383 8810 	msr	PRIMASK, r3
}
 80020f4:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80020f6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80020fa:	4618      	mov	r0, r3
 80020fc:	f000 f99a 	bl	8002434 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002100:	4b1d      	ldr	r3, [pc, #116]	@ (8002178 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	22ca      	movs	r2, #202	@ 0xca
 8002106:	625a      	str	r2, [r3, #36]	@ 0x24
 8002108:	4b1b      	ldr	r3, [pc, #108]	@ (8002178 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2253      	movs	r2, #83	@ 0x53
 800210e:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8002110:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002114:	69fa      	ldr	r2, [r7, #28]
 8002116:	4619      	mov	r1, r3
 8002118:	69b8      	ldr	r0, [r7, #24]
 800211a:	f000 fa95 	bl	8002648 <HW_TS_RTC_Int_AppNot>
 800211e:	e022      	b.n	8002166 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8002120:	f7ff fed2 	bl	8001ec8 <RescheduleTimerList>
 8002124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002126:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	f383 8810 	msr	PRIMASK, r3
}
 800212e:	e01a      	b.n	8002166 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002130:	bf00      	nop
 8002132:	4b11      	ldr	r3, [pc, #68]	@ (8002178 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	f003 0304 	and.w	r3, r3, #4
 800213c:	2b00      	cmp	r3, #0
 800213e:	d0f8      	beq.n	8002132 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002140:	4b0d      	ldr	r3, [pc, #52]	@ (8002178 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	b2da      	uxtb	r2, r3
 8002148:	4b0b      	ldr	r3, [pc, #44]	@ (8002178 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8002150:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002152:	4b0d      	ldr	r3, [pc, #52]	@ (8002188 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002154:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002158:	60da      	str	r2, [r3, #12]
 800215a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800215c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f383 8810 	msr	PRIMASK, r3
}
 8002164:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002166:	4b04      	ldr	r3, [pc, #16]	@ (8002178 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	22ff      	movs	r2, #255	@ 0xff
 800216c:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 800216e:	bf00      	nop
}
 8002170:	3728      	adds	r7, #40	@ 0x28
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	200004d4 	.word	0x200004d4
 800217c:	20000480 	.word	0x20000480
 8002180:	200003f0 	.word	0x200003f0
 8002184:	20000488 	.word	0x20000488
 8002188:	58000800 	.word	0x58000800

0800218c <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b088      	sub	sp, #32
 8002190:	af00      	add	r7, sp, #0
 8002192:	4603      	mov	r3, r0
 8002194:	6039      	str	r1, [r7, #0]
 8002196:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002198:	4b5e      	ldr	r3, [pc, #376]	@ (8002314 <HW_TS_Init+0x188>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	22ca      	movs	r2, #202	@ 0xca
 800219e:	625a      	str	r2, [r3, #36]	@ 0x24
 80021a0:	4b5c      	ldr	r3, [pc, #368]	@ (8002314 <HW_TS_Init+0x188>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2253      	movs	r2, #83	@ 0x53
 80021a6:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80021a8:	4b5b      	ldr	r3, [pc, #364]	@ (8002318 <HW_TS_Init+0x18c>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	4a5a      	ldr	r2, [pc, #360]	@ (8002318 <HW_TS_Init+0x18c>)
 80021ae:	f043 0320 	orr.w	r3, r3, #32
 80021b2:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80021b4:	4b58      	ldr	r3, [pc, #352]	@ (8002318 <HW_TS_Init+0x18c>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	f1c3 0304 	rsb	r3, r3, #4
 80021c4:	b2da      	uxtb	r2, r3
 80021c6:	4b55      	ldr	r3, [pc, #340]	@ (800231c <HW_TS_Init+0x190>)
 80021c8:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80021ca:	4b53      	ldr	r3, [pc, #332]	@ (8002318 <HW_TS_Init+0x18c>)
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80021d2:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 80021d6:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	fa92 f2a2 	rbit	r2, r2
 80021de:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021e0:	68fa      	ldr	r2, [r7, #12]
 80021e2:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80021e4:	697a      	ldr	r2, [r7, #20]
 80021e6:	2a00      	cmp	r2, #0
 80021e8:	d101      	bne.n	80021ee <HW_TS_Init+0x62>
  {
    return 32U;
 80021ea:	2220      	movs	r2, #32
 80021ec:	e003      	b.n	80021f6 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 80021ee:	697a      	ldr	r2, [r7, #20]
 80021f0:	fab2 f282 	clz	r2, r2
 80021f4:	b2d2      	uxtb	r2, r2
 80021f6:	40d3      	lsrs	r3, r2
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	3301      	adds	r3, #1
 80021fc:	b2da      	uxtb	r2, r3
 80021fe:	4b48      	ldr	r3, [pc, #288]	@ (8002320 <HW_TS_Init+0x194>)
 8002200:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8002202:	4b45      	ldr	r3, [pc, #276]	@ (8002318 <HW_TS_Init+0x18c>)
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	b29b      	uxth	r3, r3
 8002208:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800220c:	b29b      	uxth	r3, r3
 800220e:	3301      	adds	r3, #1
 8002210:	b29a      	uxth	r2, r3
 8002212:	4b44      	ldr	r3, [pc, #272]	@ (8002324 <HW_TS_Init+0x198>)
 8002214:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8002216:	4b43      	ldr	r3, [pc, #268]	@ (8002324 <HW_TS_Init+0x198>)
 8002218:	881b      	ldrh	r3, [r3, #0]
 800221a:	3b01      	subs	r3, #1
 800221c:	4a40      	ldr	r2, [pc, #256]	@ (8002320 <HW_TS_Init+0x194>)
 800221e:	7812      	ldrb	r2, [r2, #0]
 8002220:	fb02 f303 	mul.w	r3, r2, r3
 8002224:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002228:	4a3c      	ldr	r2, [pc, #240]	@ (800231c <HW_TS_Init+0x190>)
 800222a:	7812      	ldrb	r2, [r2, #0]
 800222c:	40d3      	lsrs	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002236:	4293      	cmp	r3, r2
 8002238:	d904      	bls.n	8002244 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 800223a:	4b3b      	ldr	r3, [pc, #236]	@ (8002328 <HW_TS_Init+0x19c>)
 800223c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002240:	801a      	strh	r2, [r3, #0]
 8002242:	e003      	b.n	800224c <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	b29a      	uxth	r2, r3
 8002248:	4b37      	ldr	r3, [pc, #220]	@ (8002328 <HW_TS_Init+0x19c>)
 800224a:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800224c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002250:	f7ff fb9c 	bl	800198c <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002254:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002258:	f7ff fb84 	bl	8001964 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 800225c:	79fb      	ldrb	r3, [r7, #7]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d13d      	bne.n	80022de <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002262:	4b32      	ldr	r3, [pc, #200]	@ (800232c <HW_TS_Init+0x1a0>)
 8002264:	2201      	movs	r2, #1
 8002266:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002268:	4b31      	ldr	r3, [pc, #196]	@ (8002330 <HW_TS_Init+0x1a4>)
 800226a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800226e:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002270:	2300      	movs	r3, #0
 8002272:	77fb      	strb	r3, [r7, #31]
 8002274:	e00c      	b.n	8002290 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8002276:	7ffa      	ldrb	r2, [r7, #31]
 8002278:	492e      	ldr	r1, [pc, #184]	@ (8002334 <HW_TS_Init+0x1a8>)
 800227a:	4613      	mov	r3, r2
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	4413      	add	r3, r2
 8002280:	00db      	lsls	r3, r3, #3
 8002282:	440b      	add	r3, r1
 8002284:	330c      	adds	r3, #12
 8002286:	2200      	movs	r2, #0
 8002288:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800228a:	7ffb      	ldrb	r3, [r7, #31]
 800228c:	3301      	adds	r3, #1
 800228e:	77fb      	strb	r3, [r7, #31]
 8002290:	7ffb      	ldrb	r3, [r7, #31]
 8002292:	2b05      	cmp	r3, #5
 8002294:	d9ef      	bls.n	8002276 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8002296:	4b28      	ldr	r3, [pc, #160]	@ (8002338 <HW_TS_Init+0x1ac>)
 8002298:	2206      	movs	r2, #6
 800229a:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 800229c:	4b1d      	ldr	r3, [pc, #116]	@ (8002314 <HW_TS_Init+0x188>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	689a      	ldr	r2, [r3, #8]
 80022a2:	4b1c      	ldr	r3, [pc, #112]	@ (8002314 <HW_TS_Init+0x188>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022aa:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80022ac:	4b19      	ldr	r3, [pc, #100]	@ (8002314 <HW_TS_Init+0x188>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	b2da      	uxtb	r2, r3
 80022b4:	4b17      	ldr	r3, [pc, #92]	@ (8002314 <HW_TS_Init+0x188>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80022bc:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80022be:	4b1f      	ldr	r3, [pc, #124]	@ (800233c <HW_TS_Init+0x1b0>)
 80022c0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80022c4:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80022c6:	2003      	movs	r0, #3
 80022c8:	f005 f8c9 	bl	800745e <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80022cc:	4b11      	ldr	r3, [pc, #68]	@ (8002314 <HW_TS_Init+0x188>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	689a      	ldr	r2, [r3, #8]
 80022d2:	4b10      	ldr	r3, [pc, #64]	@ (8002314 <HW_TS_Init+0x188>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80022da:	609a      	str	r2, [r3, #8]
 80022dc:	e009      	b.n	80022f2 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 80022de:	4b0d      	ldr	r3, [pc, #52]	@ (8002314 <HW_TS_Init+0x188>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d002      	beq.n	80022f2 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80022ec:	2003      	movs	r0, #3
 80022ee:	f005 f8a8 	bl	8007442 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80022f2:	4b08      	ldr	r3, [pc, #32]	@ (8002314 <HW_TS_Init+0x188>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	22ff      	movs	r2, #255	@ 0xff
 80022f8:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80022fa:	2200      	movs	r2, #0
 80022fc:	2103      	movs	r1, #3
 80022fe:	2003      	movs	r0, #3
 8002300:	f005 f85d 	bl	80073be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002304:	2003      	movs	r0, #3
 8002306:	f005 f874 	bl	80073f2 <HAL_NVIC_EnableIRQ>

  return;
 800230a:	bf00      	nop
}
 800230c:	3720      	adds	r7, #32
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	200004d4 	.word	0x200004d4
 8002318:	40002800 	.word	0x40002800
 800231c:	20000489 	.word	0x20000489
 8002320:	2000048a 	.word	0x2000048a
 8002324:	2000048c 	.word	0x2000048c
 8002328:	2000048e 	.word	0x2000048e
 800232c:	20000488 	.word	0x20000488
 8002330:	20000484 	.word	0x20000484
 8002334:	200003f0 	.word	0x200003f0
 8002338:	20000480 	.word	0x20000480
 800233c:	58000800 	.word	0x58000800

08002340 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8002340:	b480      	push	{r7}
 8002342:	b08b      	sub	sp, #44	@ 0x2c
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	603b      	str	r3, [r7, #0]
 800234c:	4613      	mov	r3, r2
 800234e:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8002350:	2300      	movs	r3, #0
 8002352:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002356:	f3ef 8310 	mrs	r3, PRIMASK
 800235a:	61fb      	str	r3, [r7, #28]
  return(result);
 800235c:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800235e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8002360:	b672      	cpsid	i
}
 8002362:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8002364:	e004      	b.n	8002370 <HW_TS_Create+0x30>
  {
    loop++;
 8002366:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800236a:	3301      	adds	r3, #1
 800236c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8002370:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002374:	2b05      	cmp	r3, #5
 8002376:	d80c      	bhi.n	8002392 <HW_TS_Create+0x52>
 8002378:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800237c:	492c      	ldr	r1, [pc, #176]	@ (8002430 <HW_TS_Create+0xf0>)
 800237e:	4613      	mov	r3, r2
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	4413      	add	r3, r2
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	440b      	add	r3, r1
 8002388:	330c      	adds	r3, #12
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1e9      	bne.n	8002366 <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002392:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002396:	2b06      	cmp	r3, #6
 8002398:	d038      	beq.n	800240c <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 800239a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800239e:	4924      	ldr	r1, [pc, #144]	@ (8002430 <HW_TS_Create+0xf0>)
 80023a0:	4613      	mov	r3, r2
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	4413      	add	r3, r2
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	440b      	add	r3, r1
 80023aa:	330c      	adds	r3, #12
 80023ac:	2201      	movs	r2, #1
 80023ae:	701a      	strb	r2, [r3, #0]
 80023b0:	6a3b      	ldr	r3, [r7, #32]
 80023b2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	f383 8810 	msr	PRIMASK, r3
}
 80023ba:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 80023bc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80023c0:	491b      	ldr	r1, [pc, #108]	@ (8002430 <HW_TS_Create+0xf0>)
 80023c2:	4613      	mov	r3, r2
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	4413      	add	r3, r2
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	440b      	add	r3, r1
 80023cc:	3310      	adds	r3, #16
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 80023d2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80023d6:	4916      	ldr	r1, [pc, #88]	@ (8002430 <HW_TS_Create+0xf0>)
 80023d8:	4613      	mov	r3, r2
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	4413      	add	r3, r2
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	440b      	add	r3, r1
 80023e2:	330d      	adds	r3, #13
 80023e4:	79fa      	ldrb	r2, [r7, #7]
 80023e6:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 80023e8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80023ec:	4910      	ldr	r1, [pc, #64]	@ (8002430 <HW_TS_Create+0xf0>)
 80023ee:	4613      	mov	r3, r2
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	4413      	add	r3, r2
 80023f4:	00db      	lsls	r3, r3, #3
 80023f6:	440b      	add	r3, r1
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8002402:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8002404:	2300      	movs	r3, #0
 8002406:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800240a:	e008      	b.n	800241e <HW_TS_Create+0xde>
 800240c:	6a3b      	ldr	r3, [r7, #32]
 800240e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	f383 8810 	msr	PRIMASK, r3
}
 8002416:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8002418:	2301      	movs	r3, #1
 800241a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return(localreturnstatus);
 800241e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002422:	4618      	mov	r0, r3
 8002424:	372c      	adds	r7, #44	@ 0x2c
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	200003f0 	.word	0x200003f0

08002434 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af00      	add	r7, sp, #0
 800243a:	4603      	mov	r3, r0
 800243c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800243e:	f3ef 8310 	mrs	r3, PRIMASK
 8002442:	60fb      	str	r3, [r7, #12]
  return(result);
 8002444:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002446:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002448:	b672      	cpsid	i
}
 800244a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800244c:	2003      	movs	r0, #3
 800244e:	f004 ffde 	bl	800740e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002452:	4b34      	ldr	r3, [pc, #208]	@ (8002524 <HW_TS_Stop+0xf0>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	22ca      	movs	r2, #202	@ 0xca
 8002458:	625a      	str	r2, [r3, #36]	@ 0x24
 800245a:	4b32      	ldr	r3, [pc, #200]	@ (8002524 <HW_TS_Stop+0xf0>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2253      	movs	r2, #83	@ 0x53
 8002460:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002462:	79fa      	ldrb	r2, [r7, #7]
 8002464:	4930      	ldr	r1, [pc, #192]	@ (8002528 <HW_TS_Stop+0xf4>)
 8002466:	4613      	mov	r3, r2
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	4413      	add	r3, r2
 800246c:	00db      	lsls	r3, r3, #3
 800246e:	440b      	add	r3, r1
 8002470:	330c      	adds	r3, #12
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d142      	bne.n	8002500 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800247a:	79fb      	ldrb	r3, [r7, #7]
 800247c:	2100      	movs	r1, #0
 800247e:	4618      	mov	r0, r3
 8002480:	f7ff fc06 	bl	8001c90 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8002484:	4b29      	ldr	r3, [pc, #164]	@ (800252c <HW_TS_Stop+0xf8>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800248a:	7cfb      	ldrb	r3, [r7, #19]
 800248c:	2b06      	cmp	r3, #6
 800248e:	d12f      	bne.n	80024f0 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002490:	4b27      	ldr	r3, [pc, #156]	@ (8002530 <HW_TS_Stop+0xfc>)
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002498:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800249c:	d107      	bne.n	80024ae <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800249e:	bf00      	nop
 80024a0:	4b20      	ldr	r3, [pc, #128]	@ (8002524 <HW_TS_Stop+0xf0>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	f003 0304 	and.w	r3, r3, #4
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1f8      	bne.n	80024a0 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80024ae:	4b1d      	ldr	r3, [pc, #116]	@ (8002524 <HW_TS_Stop+0xf0>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002524 <HW_TS_Stop+0xf0>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024bc:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80024be:	bf00      	nop
 80024c0:	4b18      	ldr	r3, [pc, #96]	@ (8002524 <HW_TS_Stop+0xf0>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	f003 0304 	and.w	r3, r3, #4
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d0f8      	beq.n	80024c0 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80024ce:	4b15      	ldr	r3, [pc, #84]	@ (8002524 <HW_TS_Stop+0xf0>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	b2da      	uxtb	r2, r3
 80024d6:	4b13      	ldr	r3, [pc, #76]	@ (8002524 <HW_TS_Stop+0xf0>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80024de:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80024e0:	4b14      	ldr	r3, [pc, #80]	@ (8002534 <HW_TS_Stop+0x100>)
 80024e2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80024e6:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80024e8:	2003      	movs	r0, #3
 80024ea:	f004 ffb8 	bl	800745e <HAL_NVIC_ClearPendingIRQ>
 80024ee:	e007      	b.n	8002500 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80024f0:	4b11      	ldr	r3, [pc, #68]	@ (8002538 <HW_TS_Stop+0x104>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	7cfa      	ldrb	r2, [r7, #19]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d001      	beq.n	8002500 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 80024fc:	f7ff fce4 	bl	8001ec8 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002500:	4b08      	ldr	r3, [pc, #32]	@ (8002524 <HW_TS_Stop+0xf0>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	22ff      	movs	r2, #255	@ 0xff
 8002506:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002508:	2003      	movs	r0, #3
 800250a:	f004 ff72 	bl	80073f2 <HAL_NVIC_EnableIRQ>
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	f383 8810 	msr	PRIMASK, r3
}
 8002518:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800251a:	bf00      	nop
}
 800251c:	3718      	adds	r7, #24
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	200004d4 	.word	0x200004d4
 8002528:	200003f0 	.word	0x200003f0
 800252c:	20000480 	.word	0x20000480
 8002530:	40002800 	.word	0x40002800
 8002534:	58000800 	.word	0x58000800
 8002538:	20000481 	.word	0x20000481

0800253c <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b086      	sub	sp, #24
 8002540:	af00      	add	r7, sp, #0
 8002542:	4603      	mov	r3, r0
 8002544:	6039      	str	r1, [r7, #0]
 8002546:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002548:	79fa      	ldrb	r2, [r7, #7]
 800254a:	493b      	ldr	r1, [pc, #236]	@ (8002638 <HW_TS_Start+0xfc>)
 800254c:	4613      	mov	r3, r2
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	4413      	add	r3, r2
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	440b      	add	r3, r1
 8002556:	330c      	adds	r3, #12
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	b2db      	uxtb	r3, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d103      	bne.n	8002568 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8002560:	79fb      	ldrb	r3, [r7, #7]
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff ff66 	bl	8002434 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002568:	f3ef 8310 	mrs	r3, PRIMASK
 800256c:	60fb      	str	r3, [r7, #12]
  return(result);
 800256e:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002570:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002572:	b672      	cpsid	i
}
 8002574:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002576:	2003      	movs	r0, #3
 8002578:	f004 ff49 	bl	800740e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800257c:	4b2f      	ldr	r3, [pc, #188]	@ (800263c <HW_TS_Start+0x100>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	22ca      	movs	r2, #202	@ 0xca
 8002582:	625a      	str	r2, [r3, #36]	@ 0x24
 8002584:	4b2d      	ldr	r3, [pc, #180]	@ (800263c <HW_TS_Start+0x100>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2253      	movs	r2, #83	@ 0x53
 800258a:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 800258c:	79fa      	ldrb	r2, [r7, #7]
 800258e:	492a      	ldr	r1, [pc, #168]	@ (8002638 <HW_TS_Start+0xfc>)
 8002590:	4613      	mov	r3, r2
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	4413      	add	r3, r2
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	440b      	add	r3, r1
 800259a:	330c      	adds	r3, #12
 800259c:	2202      	movs	r2, #2
 800259e:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80025a0:	79fa      	ldrb	r2, [r7, #7]
 80025a2:	4925      	ldr	r1, [pc, #148]	@ (8002638 <HW_TS_Start+0xfc>)
 80025a4:	4613      	mov	r3, r2
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	4413      	add	r3, r2
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	440b      	add	r3, r1
 80025ae:	3308      	adds	r3, #8
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80025b4:	79fa      	ldrb	r2, [r7, #7]
 80025b6:	4920      	ldr	r1, [pc, #128]	@ (8002638 <HW_TS_Start+0xfc>)
 80025b8:	4613      	mov	r3, r2
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	4413      	add	r3, r2
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	440b      	add	r3, r1
 80025c2:	3304      	adds	r3, #4
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80025c8:	79fb      	ldrb	r3, [r7, #7]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7ff fab6 	bl	8001b3c <linkTimer>
 80025d0:	4603      	mov	r3, r0
 80025d2:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80025d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002640 <HW_TS_Start+0x104>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80025da:	4b1a      	ldr	r3, [pc, #104]	@ (8002644 <HW_TS_Start+0x108>)
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	7c7a      	ldrb	r2, [r7, #17]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d002      	beq.n	80025ec <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 80025e6:	f7ff fc6f 	bl	8001ec8 <RescheduleTimerList>
 80025ea:	e013      	b.n	8002614 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80025ec:	79fa      	ldrb	r2, [r7, #7]
 80025ee:	4912      	ldr	r1, [pc, #72]	@ (8002638 <HW_TS_Start+0xfc>)
 80025f0:	4613      	mov	r3, r2
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	4413      	add	r3, r2
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	440b      	add	r3, r1
 80025fa:	3308      	adds	r3, #8
 80025fc:	6819      	ldr	r1, [r3, #0]
 80025fe:	8a7b      	ldrh	r3, [r7, #18]
 8002600:	79fa      	ldrb	r2, [r7, #7]
 8002602:	1ac9      	subs	r1, r1, r3
 8002604:	480c      	ldr	r0, [pc, #48]	@ (8002638 <HW_TS_Start+0xfc>)
 8002606:	4613      	mov	r3, r2
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	4413      	add	r3, r2
 800260c:	00db      	lsls	r3, r3, #3
 800260e:	4403      	add	r3, r0
 8002610:	3308      	adds	r3, #8
 8002612:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002614:	4b09      	ldr	r3, [pc, #36]	@ (800263c <HW_TS_Start+0x100>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	22ff      	movs	r2, #255	@ 0xff
 800261a:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800261c:	2003      	movs	r0, #3
 800261e:	f004 fee8 	bl	80073f2 <HAL_NVIC_EnableIRQ>
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	f383 8810 	msr	PRIMASK, r3
}
 800262c:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800262e:	bf00      	nop
}
 8002630:	3718      	adds	r7, #24
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	200003f0 	.word	0x200003f0
 800263c:	200004d4 	.word	0x200004d4
 8002640:	20000480 	.word	0x20000480
 8002644:	20000481 	.word	0x20000481

08002648 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	460b      	mov	r3, r1
 8002652:	607a      	str	r2, [r7, #4]
 8002654:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4798      	blx	r3

  return;
 800265a:	bf00      	nop
}
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
	...

08002664 <HW_UART_Receive_IT>:
    void (*HW_hlpuart1RxCb)(void);
    void (*HW_hlpuart1TxCb)(void);
#endif

void HW_UART_Receive_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	60b9      	str	r1, [r7, #8]
 800266c:	607b      	str	r3, [r7, #4]
 800266e:	4603      	mov	r3, r0
 8002670:	73fb      	strb	r3, [r7, #15]
 8002672:	4613      	mov	r3, r2
 8002674:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 8002676:	7bfb      	ldrb	r3, [r7, #15]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d10c      	bne.n	8002696 <HW_UART_Receive_IT+0x32>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_UART_RX_IT(huart1, USART1);
 800267c:	4a08      	ldr	r2, [pc, #32]	@ (80026a0 <HW_UART_Receive_IT+0x3c>)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6013      	str	r3, [r2, #0]
 8002682:	4b08      	ldr	r3, [pc, #32]	@ (80026a4 <HW_UART_Receive_IT+0x40>)
 8002684:	4a08      	ldr	r2, [pc, #32]	@ (80026a8 <HW_UART_Receive_IT+0x44>)
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	89bb      	ldrh	r3, [r7, #12]
 800268a:	461a      	mov	r2, r3
 800268c:	68b9      	ldr	r1, [r7, #8]
 800268e:	4805      	ldr	r0, [pc, #20]	@ (80026a4 <HW_UART_Receive_IT+0x40>)
 8002690:	f008 fc72 	bl	800af78 <HAL_UART_Receive_IT>
            break;
 8002694:	e000      	b.n	8002698 <HW_UART_Receive_IT+0x34>
            HW_UART_RX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 8002696:	bf00      	nop
    }

    return;
 8002698:	bf00      	nop
}
 800269a:	3710      	adds	r7, #16
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	20000490 	.word	0x20000490
 80026a4:	200004f8 	.word	0x200004f8
 80026a8:	40013800 	.word	0x40013800

080026ac <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60b9      	str	r1, [r7, #8]
 80026b4:	607b      	str	r3, [r7, #4]
 80026b6:	4603      	mov	r3, r0
 80026b8:	73fb      	strb	r3, [r7, #15]
 80026ba:	4613      	mov	r3, r2
 80026bc:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 80026be:	2300      	movs	r3, #0
 80026c0:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 80026c2:	2300      	movs	r3, #0
 80026c4:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 80026c6:	7bfb      	ldrb	r3, [r7, #15]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d10e      	bne.n	80026ea <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 80026cc:	4a17      	ldr	r2, [pc, #92]	@ (800272c <HW_UART_Transmit_DMA+0x80>)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 80026d2:	4b17      	ldr	r3, [pc, #92]	@ (8002730 <HW_UART_Transmit_DMA+0x84>)
 80026d4:	4a17      	ldr	r2, [pc, #92]	@ (8002734 <HW_UART_Transmit_DMA+0x88>)
 80026d6:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 80026d8:	89bb      	ldrh	r3, [r7, #12]
 80026da:	461a      	mov	r2, r3
 80026dc:	68b9      	ldr	r1, [r7, #8]
 80026de:	4814      	ldr	r0, [pc, #80]	@ (8002730 <HW_UART_Transmit_DMA+0x84>)
 80026e0:	f008 fc96 	bl	800b010 <HAL_UART_Transmit_DMA>
 80026e4:	4603      	mov	r3, r0
 80026e6:	75fb      	strb	r3, [r7, #23]
            break;
 80026e8:	e000      	b.n	80026ec <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 80026ea:	bf00      	nop
    }

    switch (hal_status)
 80026ec:	7dfb      	ldrb	r3, [r7, #23]
 80026ee:	2b03      	cmp	r3, #3
 80026f0:	d816      	bhi.n	8002720 <HW_UART_Transmit_DMA+0x74>
 80026f2:	a201      	add	r2, pc, #4	@ (adr r2, 80026f8 <HW_UART_Transmit_DMA+0x4c>)
 80026f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026f8:	08002709 	.word	0x08002709
 80026fc:	0800270f 	.word	0x0800270f
 8002700:	08002715 	.word	0x08002715
 8002704:	0800271b 	.word	0x0800271b
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8002708:	2300      	movs	r3, #0
 800270a:	75bb      	strb	r3, [r7, #22]
            break;
 800270c:	e009      	b.n	8002722 <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 800270e:	2301      	movs	r3, #1
 8002710:	75bb      	strb	r3, [r7, #22]
            break;
 8002712:	e006      	b.n	8002722 <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8002714:	2302      	movs	r3, #2
 8002716:	75bb      	strb	r3, [r7, #22]
            break;
 8002718:	e003      	b.n	8002722 <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 800271a:	2303      	movs	r3, #3
 800271c:	75bb      	strb	r3, [r7, #22]
            break;
 800271e:	e000      	b.n	8002722 <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 8002720:	bf00      	nop
    }

    return hw_status;
 8002722:	7dbb      	ldrb	r3, [r7, #22]
}
 8002724:	4618      	mov	r0, r3
 8002726:	3718      	adds	r7, #24
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	20000494 	.word	0x20000494
 8002730:	200004f8 	.word	0x200004f8
 8002734:	40013800 	.word	0x40013800

08002738 <HAL_UART_RxCpltCallback>:

    return;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	461a      	mov	r2, r3
 8002746:	4b09      	ldr	r3, [pc, #36]	@ (800276c <HAL_UART_RxCpltCallback+0x34>)
 8002748:	429a      	cmp	r2, r3
 800274a:	d107      	bne.n	800275c <HAL_UART_RxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1RxCb)
 800274c:	4b08      	ldr	r3, [pc, #32]	@ (8002770 <HAL_UART_RxCpltCallback+0x38>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d005      	beq.n	8002760 <HAL_UART_RxCpltCallback+0x28>
            {
                HW_huart1RxCb();
 8002754:	4b06      	ldr	r3, [pc, #24]	@ (8002770 <HAL_UART_RxCpltCallback+0x38>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4798      	blx	r3
            }
            break;
 800275a:	e001      	b.n	8002760 <HAL_UART_RxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 800275c:	bf00      	nop
 800275e:	e000      	b.n	8002762 <HAL_UART_RxCpltCallback+0x2a>
            break;
 8002760:	bf00      	nop
    }

    return;
 8002762:	bf00      	nop
}
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	40013800 	.word	0x40013800
 8002770:	20000490 	.word	0x20000490

08002774 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	461a      	mov	r2, r3
 8002782:	4b09      	ldr	r3, [pc, #36]	@ (80027a8 <HAL_UART_TxCpltCallback+0x34>)
 8002784:	429a      	cmp	r2, r3
 8002786:	d107      	bne.n	8002798 <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8002788:	4b08      	ldr	r3, [pc, #32]	@ (80027ac <HAL_UART_TxCpltCallback+0x38>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d005      	beq.n	800279c <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 8002790:	4b06      	ldr	r3, [pc, #24]	@ (80027ac <HAL_UART_TxCpltCallback+0x38>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4798      	blx	r3
            }
            break;
 8002796:	e001      	b.n	800279c <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8002798:	bf00      	nop
 800279a:	e000      	b.n	800279e <HAL_UART_TxCpltCallback+0x2a>
            break;
 800279c:	bf00      	nop
    }

    return;
 800279e:	bf00      	nop
}
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	40013800 	.word	0x40013800
 80027ac:	20000494 	.word	0x20000494

080027b0 <LL_RCC_LSE_SetDriveCapability>:
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80027b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027c0:	f023 0218 	bic.w	r2, r3, #24
 80027c4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <LL_AHB1_GRP1_EnableClock>:
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80027e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027e8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80027ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80027f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027f8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4013      	ands	r3, r2
 80027fe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002800:	68fb      	ldr	r3, [r7, #12]
}
 8002802:	bf00      	nop
 8002804:	3714      	adds	r7, #20
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr

0800280e <LL_AHB2_GRP1_EnableClock>:
{
 800280e:	b480      	push	{r7}
 8002810:	b085      	sub	sp, #20
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002816:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800281a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800281c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4313      	orrs	r3, r2
 8002824:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002826:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800282a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4013      	ands	r3, r2
 8002830:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002832:	68fb      	ldr	r3, [r7, #12]
}
 8002834:	bf00      	nop
 8002836:	3714      	adds	r7, #20
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <LL_RTC_EnableWriteProtection>:
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	22ff      	movs	r2, #255	@ 0xff
 800284c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800284e:	bf00      	nop
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr

0800285a <LL_RTC_DisableWriteProtection>:
{
 800285a:	b480      	push	{r7}
 800285c:	b083      	sub	sp, #12
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	22ca      	movs	r2, #202	@ 0xca
 8002866:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2253      	movs	r2, #83	@ 0x53
 800286c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800286e:	bf00      	nop
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr

0800287a <LL_RTC_WAKEUP_SetClock>:
{
 800287a:	b480      	push	{r7}
 800287c:	b083      	sub	sp, #12
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
 8002882:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f023 0207 	bic.w	r2, r3, #7
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	431a      	orrs	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	609a      	str	r2, [r3, #8]
}
 8002894:	bf00      	nop
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028a4:	f004 fbb2 	bl	800700c <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 80028a8:	f7fe fd24 	bl	80012f4 <MX_APPE_Config>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028ac:	f000 f816 	bl	80028dc <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80028b0:	f000 f870 	bl	8002994 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 80028b4:	f000 f88e 	bl	80029d4 <MX_IPCC_Init>

  /* USER CODE BEGIN SysInit */
  PeriphClock_Config();
 80028b8:	f000 fb2e 	bl	8002f18 <PeriphClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028bc:	f000 f93a 	bl	8002b34 <MX_GPIO_Init>
  MX_DMA_Init();
 80028c0:	f000 f926 	bl	8002b10 <MX_DMA_Init>
  MX_RTC_Init();
 80028c4:	f000 f8a2 	bl	8002a0c <MX_RTC_Init>
  MX_USART1_UART_Init();
 80028c8:	f000 f8d4 	bl	8002a74 <MX_USART1_UART_Init>
  MX_RF_Init();
 80028cc:	f000 f896 	bl	80029fc <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 80028d0:	f7fe fd1e 	bl	8001310 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 80028d4:	f7fe ff7b 	bl	80017ce <MX_APPE_Process>
 80028d8:	e7fc      	b.n	80028d4 <main+0x34>
	...

080028dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b09a      	sub	sp, #104	@ 0x68
 80028e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028e2:	f107 0320 	add.w	r3, r7, #32
 80028e6:	2248      	movs	r2, #72	@ 0x48
 80028e8:	2100      	movs	r1, #0
 80028ea:	4618      	mov	r0, r3
 80028ec:	f00f f8a8 	bl	8011a40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028f0:	1d3b      	adds	r3, r7, #4
 80028f2:	2200      	movs	r2, #0
 80028f4:	601a      	str	r2, [r3, #0]
 80028f6:	605a      	str	r2, [r3, #4]
 80028f8:	609a      	str	r2, [r3, #8]
 80028fa:	60da      	str	r2, [r3, #12]
 80028fc:	611a      	str	r2, [r3, #16]
 80028fe:	615a      	str	r2, [r3, #20]
 8002900:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002902:	f005 fc65 	bl	80081d0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8002906:	2010      	movs	r0, #16
 8002908:	f7ff ff52 	bl	80027b0 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800290c:	4b20      	ldr	r3, [pc, #128]	@ (8002990 <SystemClock_Config+0xb4>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002914:	4a1e      	ldr	r2, [pc, #120]	@ (8002990 <SystemClock_Config+0xb4>)
 8002916:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800291a:	6013      	str	r3, [r2, #0]
 800291c:	4b1c      	ldr	r3, [pc, #112]	@ (8002990 <SystemClock_Config+0xb4>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002924:	603b      	str	r3, [r7, #0]
 8002926:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8002928:	2307      	movs	r3, #7
 800292a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800292c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002930:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002932:	2301      	movs	r3, #1
 8002934:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002936:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800293a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800293c:	2340      	movs	r3, #64	@ 0x40
 800293e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002940:	2300      	movs	r3, #0
 8002942:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002944:	f107 0320 	add.w	r3, r7, #32
 8002948:	4618      	mov	r0, r3
 800294a:	f005 ffd5 	bl	80088f8 <HAL_RCC_OscConfig>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8002954:	f000 fae7 	bl	8002f26 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002958:	236f      	movs	r3, #111	@ 0x6f
 800295a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800295c:	2302      	movs	r3, #2
 800295e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002960:	2300      	movs	r3, #0
 8002962:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002964:	2300      	movs	r3, #0
 8002966:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002968:	2300      	movs	r3, #0
 800296a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800296c:	2300      	movs	r3, #0
 800296e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002970:	2300      	movs	r3, #0
 8002972:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002974:	1d3b      	adds	r3, r7, #4
 8002976:	2101      	movs	r1, #1
 8002978:	4618      	mov	r0, r3
 800297a:	f006 fb31 	bl	8008fe0 <HAL_RCC_ClockConfig>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8002984:	f000 facf 	bl	8002f26 <Error_Handler>
  }
}
 8002988:	bf00      	nop
 800298a:	3768      	adds	r7, #104	@ 0x68
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	58000400 	.word	0x58000400

08002994 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b094      	sub	sp, #80	@ 0x50
 8002998:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800299a:	463b      	mov	r3, r7
 800299c:	2250      	movs	r2, #80	@ 0x50
 800299e:	2100      	movs	r1, #0
 80029a0:	4618      	mov	r0, r3
 80029a2:	f00f f84d 	bl	8011a40 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 80029a6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80029aa:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80029ac:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80029b0:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 80029b2:	2302      	movs	r3, #2
 80029b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80029b6:	2300      	movs	r3, #0
 80029b8:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029ba:	463b      	mov	r3, r7
 80029bc:	4618      	mov	r0, r3
 80029be:	f006 ff4c 	bl	800985a <HAL_RCCEx_PeriphCLKConfig>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80029c8:	f000 faad 	bl	8002f26 <Error_Handler>
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif

  /* USER CODE END Smps */
}
 80029cc:	bf00      	nop
 80029ce:	3750      	adds	r7, #80	@ 0x50
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80029d8:	4b06      	ldr	r3, [pc, #24]	@ (80029f4 <MX_IPCC_Init+0x20>)
 80029da:	4a07      	ldr	r2, [pc, #28]	@ (80029f8 <MX_IPCC_Init+0x24>)
 80029dc:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80029de:	4805      	ldr	r0, [pc, #20]	@ (80029f4 <MX_IPCC_Init+0x20>)
 80029e0:	f005 fb70 	bl	80080c4 <HAL_IPCC_Init>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80029ea:	f000 fa9c 	bl	8002f26 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80029ee:	bf00      	nop
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	20000498 	.word	0x20000498
 80029f8:	58000c00 	.word	0x58000c00

080029fc <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8002a00:	bf00      	nop
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
	...

08002a0c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002a10:	4b16      	ldr	r3, [pc, #88]	@ (8002a6c <MX_RTC_Init+0x60>)
 8002a12:	4a17      	ldr	r2, [pc, #92]	@ (8002a70 <MX_RTC_Init+0x64>)
 8002a14:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002a16:	4b15      	ldr	r3, [pc, #84]	@ (8002a6c <MX_RTC_Init+0x60>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8002a1c:	4b13      	ldr	r3, [pc, #76]	@ (8002a6c <MX_RTC_Init+0x60>)
 8002a1e:	220f      	movs	r2, #15
 8002a20:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8002a22:	4b12      	ldr	r3, [pc, #72]	@ (8002a6c <MX_RTC_Init+0x60>)
 8002a24:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8002a28:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002a2a:	4b10      	ldr	r3, [pc, #64]	@ (8002a6c <MX_RTC_Init+0x60>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002a30:	4b0e      	ldr	r3, [pc, #56]	@ (8002a6c <MX_RTC_Init+0x60>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002a36:	4b0d      	ldr	r3, [pc, #52]	@ (8002a6c <MX_RTC_Init+0x60>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a6c <MX_RTC_Init+0x60>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002a42:	480a      	ldr	r0, [pc, #40]	@ (8002a6c <MX_RTC_Init+0x60>)
 8002a44:	f007 f990 	bl	8009d68 <HAL_RTC_Init>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8002a4e:	f000 fa6a 	bl	8002f26 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8002a52:	4807      	ldr	r0, [pc, #28]	@ (8002a70 <MX_RTC_Init+0x64>)
 8002a54:	f7ff ff01 	bl	800285a <LL_RTC_DisableWriteProtection>
  
  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8002a58:	2100      	movs	r1, #0
 8002a5a:	4805      	ldr	r0, [pc, #20]	@ (8002a70 <MX_RTC_Init+0x64>)
 8002a5c:	f7ff ff0d 	bl	800287a <LL_RTC_WAKEUP_SetClock>
  
  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8002a60:	4803      	ldr	r0, [pc, #12]	@ (8002a70 <MX_RTC_Init+0x64>)
 8002a62:	f7ff feed 	bl	8002840 <LL_RTC_EnableWriteProtection>
  /* USER CODE END RTC_Init 2 */

}
 8002a66:	bf00      	nop
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	200004d4 	.word	0x200004d4
 8002a70:	40002800 	.word	0x40002800

08002a74 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a78:	4b23      	ldr	r3, [pc, #140]	@ (8002b08 <MX_USART1_UART_Init+0x94>)
 8002a7a:	4a24      	ldr	r2, [pc, #144]	@ (8002b0c <MX_USART1_UART_Init+0x98>)
 8002a7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002a7e:	4b22      	ldr	r3, [pc, #136]	@ (8002b08 <MX_USART1_UART_Init+0x94>)
 8002a80:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002a84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a86:	4b20      	ldr	r3, [pc, #128]	@ (8002b08 <MX_USART1_UART_Init+0x94>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a8c:	4b1e      	ldr	r3, [pc, #120]	@ (8002b08 <MX_USART1_UART_Init+0x94>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a92:	4b1d      	ldr	r3, [pc, #116]	@ (8002b08 <MX_USART1_UART_Init+0x94>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a98:	4b1b      	ldr	r3, [pc, #108]	@ (8002b08 <MX_USART1_UART_Init+0x94>)
 8002a9a:	220c      	movs	r2, #12
 8002a9c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a9e:	4b1a      	ldr	r3, [pc, #104]	@ (8002b08 <MX_USART1_UART_Init+0x94>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8002aa4:	4b18      	ldr	r3, [pc, #96]	@ (8002b08 <MX_USART1_UART_Init+0x94>)
 8002aa6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002aaa:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002aac:	4b16      	ldr	r3, [pc, #88]	@ (8002b08 <MX_USART1_UART_Init+0x94>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ab2:	4b15      	ldr	r3, [pc, #84]	@ (8002b08 <MX_USART1_UART_Init+0x94>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ab8:	4b13      	ldr	r3, [pc, #76]	@ (8002b08 <MX_USART1_UART_Init+0x94>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002abe:	4812      	ldr	r0, [pc, #72]	@ (8002b08 <MX_USART1_UART_Init+0x94>)
 8002ac0:	f008 fa0a 	bl	800aed8 <HAL_UART_Init>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002aca:	f000 fa2c 	bl	8002f26 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ace:	2100      	movs	r1, #0
 8002ad0:	480d      	ldr	r0, [pc, #52]	@ (8002b08 <MX_USART1_UART_Init+0x94>)
 8002ad2:	f00a fa7a 	bl	800cfca <HAL_UARTEx_SetTxFifoThreshold>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8002adc:	f000 fa23 	bl	8002f26 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	4809      	ldr	r0, [pc, #36]	@ (8002b08 <MX_USART1_UART_Init+0x94>)
 8002ae4:	f00a faaf 	bl	800d046 <HAL_UARTEx_SetRxFifoThreshold>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8002aee:	f000 fa1a 	bl	8002f26 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002af2:	4805      	ldr	r0, [pc, #20]	@ (8002b08 <MX_USART1_UART_Init+0x94>)
 8002af4:	f00a fa30 	bl	800cf58 <HAL_UARTEx_DisableFifoMode>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8002afe:	f000 fa12 	bl	8002f26 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b02:	bf00      	nop
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	200004f8 	.word	0x200004f8
 8002b0c:	40013800 	.word	0x40013800

08002b10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002b14:	2004      	movs	r0, #4
 8002b16:	f7ff fe61 	bl	80027dc <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002b1a:	2002      	movs	r0, #2
 8002b1c:	f7ff fe5e 	bl	80027dc <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 15, 0);
 8002b20:	2200      	movs	r2, #0
 8002b22:	210f      	movs	r1, #15
 8002b24:	203a      	movs	r0, #58	@ 0x3a
 8002b26:	f004 fc4a 	bl	80073be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8002b2a:	203a      	movs	r0, #58	@ 0x3a
 8002b2c:	f004 fc61 	bl	80073f2 <HAL_NVIC_EnableIRQ>

}
 8002b30:	bf00      	nop
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b3a:	1d3b      	adds	r3, r7, #4
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	605a      	str	r2, [r3, #4]
 8002b42:	609a      	str	r2, [r3, #8]
 8002b44:	60da      	str	r2, [r3, #12]
 8002b46:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b48:	2001      	movs	r0, #1
 8002b4a:	f7ff fe60 	bl	800280e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b4e:	2004      	movs	r0, #4
 8002b50:	f7ff fe5d 	bl	800280e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b54:	2002      	movs	r0, #2
 8002b56:	f7ff fe5a 	bl	800280e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b5a:	2008      	movs	r0, #8
 8002b5c:	f7ff fe57 	bl	800280e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b60:	2010      	movs	r0, #16
 8002b62:	f7ff fe54 	bl	800280e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b66:	2080      	movs	r0, #128	@ 0x80
 8002b68:	f7ff fe51 	bl	800280e <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Connected_LED_GPIO_Port, Connected_LED_Pin, GPIO_PIN_RESET);
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002b72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b76:	f005 fa51 	bl	800801c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Power_LED_Pin|Transmitting_LED_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f44f 4144 	mov.w	r1, #50176	@ 0xc400
 8002b80:	48bd      	ldr	r0, [pc, #756]	@ (8002e78 <MX_GPIO_Init+0x344>)
 8002b82:	f005 fa4b 	bl	800801c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, CS_DISP_Pin|GPIO_SELECT2_Pin, GPIO_PIN_RESET);
 8002b86:	2200      	movs	r2, #0
 8002b88:	2103      	movs	r1, #3
 8002b8a:	48bc      	ldr	r0, [pc, #752]	@ (8002e7c <MX_GPIO_Init+0x348>)
 8002b8c:	f005 fa46 	bl	800801c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, D_C_DISP_Pin|RST_DISP_Pin, GPIO_PIN_RESET);
 8002b90:	2200      	movs	r2, #0
 8002b92:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8002b96:	48ba      	ldr	r0, [pc, #744]	@ (8002e80 <MX_GPIO_Init+0x34c>)
 8002b98:	f005 fa40 	bl	800801c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002ba2:	48b8      	ldr	r0, [pc, #736]	@ (8002e84 <MX_GPIO_Init+0x350>)
 8002ba4:	f005 fa3a 	bl	800801c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_SELECT1_GPIO_Port, GPIO_SELECT1_Pin, GPIO_PIN_RESET);
 8002ba8:	2200      	movs	r2, #0
 8002baa:	2104      	movs	r1, #4
 8002bac:	48b6      	ldr	r0, [pc, #728]	@ (8002e88 <MX_GPIO_Init+0x354>)
 8002bae:	f005 fa35 	bl	800801c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA0 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_5;
 8002bb2:	2325      	movs	r3, #37	@ 0x25
 8002bb4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bbe:	1d3b      	adds	r3, r7, #4
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002bc6:	f004 ffdb 	bl	8007b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC3 PC1 PC5 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_4;
 8002bca:	233a      	movs	r3, #58	@ 0x3a
 8002bcc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bd6:	1d3b      	adds	r3, r7, #4
 8002bd8:	4619      	mov	r1, r3
 8002bda:	48a9      	ldr	r0, [pc, #676]	@ (8002e80 <MX_GPIO_Init+0x34c>)
 8002bdc:	f004 ffd0 	bl	8007b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11;
 8002be0:	f640 4304 	movw	r3, #3076	@ 0xc04
 8002be4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002be6:	2300      	movs	r3, #0
 8002be8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bea:	2300      	movs	r3, #0
 8002bec:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bee:	1d3b      	adds	r3, r7, #4
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	48a3      	ldr	r0, [pc, #652]	@ (8002e80 <MX_GPIO_Init+0x34c>)
 8002bf4:	f004 ffc4 	bl	8007b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_BK_IO0_Pin */
  GPIO_InitStruct.Pin = QSPI_BK_IO0_Pin;
 8002bf8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002bfc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfe:	2302      	movs	r3, #2
 8002c00:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c02:	2300      	movs	r3, #0
 8002c04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c06:	2300      	movs	r3, #0
 8002c08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002c0a:	230a      	movs	r3, #10
 8002c0c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(QSPI_BK_IO0_GPIO_Port, &GPIO_InitStruct);
 8002c0e:	1d3b      	adds	r3, r7, #4
 8002c10:	4619      	mov	r1, r3
 8002c12:	4899      	ldr	r0, [pc, #612]	@ (8002e78 <MX_GPIO_Init+0x344>)
 8002c14:	f004 ffb4 	bl	8007b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : LPUART1_RX_MCU_Pin */
  GPIO_InitStruct.Pin = LPUART1_RX_MCU_Pin;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c20:	2300      	movs	r3, #0
 8002c22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c24:	2300      	movs	r3, #0
 8002c26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002c28:	2308      	movs	r3, #8
 8002c2a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LPUART1_RX_MCU_GPIO_Port, &GPIO_InitStruct);
 8002c2c:	1d3b      	adds	r3, r7, #4
 8002c2e:	4619      	mov	r1, r3
 8002c30:	4893      	ldr	r0, [pc, #588]	@ (8002e80 <MX_GPIO_Init+0x34c>)
 8002c32:	f004 ffa5 	bl	8007b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002c36:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c3a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c3c:	2312      	movs	r3, #18
 8002c3e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c40:	2300      	movs	r3, #0
 8002c42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c44:	2300      	movs	r3, #0
 8002c46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002c48:	2304      	movs	r3, #4
 8002c4a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c4c:	1d3b      	adds	r3, r7, #4
 8002c4e:	4619      	mov	r1, r3
 8002c50:	4889      	ldr	r0, [pc, #548]	@ (8002e78 <MX_GPIO_Init+0x344>)
 8002c52:	f004 ff95 	bl	8007b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPUART1_TX_MCU_Pin PB12 */
  GPIO_InitStruct.Pin = LPUART1_TX_MCU_Pin|GPIO_PIN_12;
 8002c56:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 8002c5a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c60:	2300      	movs	r3, #0
 8002c62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c64:	2300      	movs	r3, #0
 8002c66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002c68:	2308      	movs	r3, #8
 8002c6a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c6c:	1d3b      	adds	r3, r7, #4
 8002c6e:	4619      	mov	r1, r3
 8002c70:	4881      	ldr	r0, [pc, #516]	@ (8002e78 <MX_GPIO_Init+0x344>)
 8002c72:	f004 ff85 	bl	8007b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002c76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c7a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c80:	2300      	movs	r3, #0
 8002c82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c84:	2300      	movs	r3, #0
 8002c86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c8c:	1d3b      	adds	r3, r7, #4
 8002c8e:	4619      	mov	r1, r3
 8002c90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c94:	f004 ff74 	bl	8007b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : Connected_LED_Pin */
  GPIO_InitStruct.Pin = Connected_LED_Pin;
 8002c98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c9c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Connected_LED_GPIO_Port, &GPIO_InitStruct);
 8002caa:	1d3b      	adds	r3, r7, #4
 8002cac:	4619      	mov	r1, r3
 8002cae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002cb2:	f004 ff65 	bl	8007b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_P_Pin USB_N_Pin */
  GPIO_InitStruct.Pin = USB_P_Pin|USB_N_Pin;
 8002cb6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002cba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8002cc8:	230a      	movs	r3, #10
 8002cca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ccc:	1d3b      	adds	r3, r7, #4
 8002cce:	4619      	mov	r1, r3
 8002cd0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002cd4:	f004 ff54 	bl	8007b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cdc:	2302      	movs	r3, #2
 8002cde:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002ce8:	2305      	movs	r3, #5
 8002cea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cec:	1d3b      	adds	r3, r7, #4
 8002cee:	4619      	mov	r1, r3
 8002cf0:	4864      	ldr	r0, [pc, #400]	@ (8002e84 <MX_GPIO_Init+0x350>)
 8002cf2:	f004 ff45 	bl	8007b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : TSC_G4_IO1_Pin TSC_G4_IO2_Pin */
  GPIO_InitStruct.Pin = TSC_G4_IO1_Pin|TSC_G4_IO2_Pin;
 8002cf6:	23c0      	movs	r3, #192	@ 0xc0
 8002cf8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d02:	2300      	movs	r3, #0
 8002d04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF9_TSC;
 8002d06:	2309      	movs	r3, #9
 8002d08:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d0a:	1d3b      	adds	r3, r7, #4
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	485c      	ldr	r0, [pc, #368]	@ (8002e80 <MX_GPIO_Init+0x34c>)
 8002d10:	f004 ff36 	bl	8007b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : Power_LED_Pin Transmitting_LED_Pin PB10 */
  GPIO_InitStruct.Pin = Power_LED_Pin|Transmitting_LED_Pin|GPIO_PIN_10;
 8002d14:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 8002d18:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d22:	2300      	movs	r3, #0
 8002d24:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d26:	1d3b      	adds	r3, r7, #4
 8002d28:	4619      	mov	r1, r3
 8002d2a:	4853      	ldr	r0, [pc, #332]	@ (8002e78 <MX_GPIO_Init+0x344>)
 8002d2c:	f004 ff28 	bl	8007b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 DRDY_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|DRDY_Pin;
 8002d30:	2312      	movs	r3, #18
 8002d32:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d34:	2300      	movs	r3, #0
 8002d36:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d3c:	1d3b      	adds	r3, r7, #4
 8002d3e:	4619      	mov	r1, r3
 8002d40:	4851      	ldr	r0, [pc, #324]	@ (8002e88 <MX_GPIO_Init+0x354>)
 8002d42:	f004 ff1d 	bl	8007b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002d46:	2304      	movs	r3, #4
 8002d48:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d52:	1d3b      	adds	r3, r7, #4
 8002d54:	4619      	mov	r1, r3
 8002d56:	4848      	ldr	r0, [pc, #288]	@ (8002e78 <MX_GPIO_Init+0x344>)
 8002d58:	f004 ff12 	bl	8007b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI1_CK2_Pin SAI1_D2_Pin */
  GPIO_InitStruct.Pin = SAI1_CK2_Pin|SAI1_D2_Pin;
 8002d5c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002d60:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d62:	2302      	movs	r3, #2
 8002d64:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d66:	2300      	movs	r3, #0
 8002d68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF3_SAI1;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d72:	1d3b      	adds	r3, r7, #4
 8002d74:	4619      	mov	r1, r3
 8002d76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d7a:	f004 ff01 	bl	8007b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002d7e:	2340      	movs	r3, #64	@ 0x40
 8002d80:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d82:	2302      	movs	r3, #2
 8002d84:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d86:	2300      	movs	r3, #0
 8002d88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002d8e:	2308      	movs	r3, #8
 8002d90:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d92:	1d3b      	adds	r3, r7, #4
 8002d94:	4619      	mov	r1, r3
 8002d96:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d9a:	f004 fef1 	bl	8007b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_BK_SCK_Pin */
  GPIO_InitStruct.Pin = QSPI_BK_SCK_Pin;
 8002d9e:	2308      	movs	r3, #8
 8002da0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da2:	2302      	movs	r3, #2
 8002da4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da6:	2300      	movs	r3, #0
 8002da8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002daa:	2300      	movs	r3, #0
 8002dac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002dae:	230a      	movs	r3, #10
 8002db0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(QSPI_BK_SCK_GPIO_Port, &GPIO_InitStruct);
 8002db2:	1d3b      	adds	r3, r7, #4
 8002db4:	4619      	mov	r1, r3
 8002db6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002dba:	f004 fee1 	bl	8007b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_DISP_Pin GPIO_SELECT2_Pin */
  GPIO_InitStruct.Pin = CS_DISP_Pin|GPIO_SELECT2_Pin;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002dce:	1d3b      	adds	r3, r7, #4
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	482a      	ldr	r0, [pc, #168]	@ (8002e7c <MX_GPIO_Init+0x348>)
 8002dd4:	f004 fed4 	bl	8007b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002dd8:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002ddc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dde:	2302      	movs	r3, #2
 8002de0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de2:	2300      	movs	r3, #0
 8002de4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002de6:	2300      	movs	r3, #0
 8002de8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002dea:	2301      	movs	r3, #1
 8002dec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002dee:	1d3b      	adds	r3, r7, #4
 8002df0:	4619      	mov	r1, r3
 8002df2:	4824      	ldr	r0, [pc, #144]	@ (8002e84 <MX_GPIO_Init+0x350>)
 8002df4:	f004 fec4 	bl	8007b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD12 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_4;
 8002df8:	f243 0310 	movw	r3, #12304	@ 0x3010
 8002dfc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e02:	2300      	movs	r3, #0
 8002e04:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e06:	1d3b      	adds	r3, r7, #4
 8002e08:	4619      	mov	r1, r3
 8002e0a:	481e      	ldr	r0, [pc, #120]	@ (8002e84 <MX_GPIO_Init+0x350>)
 8002e0c:	f004 feb8 	bl	8007b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin;
 8002e10:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8002e14:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e16:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002e1a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e20:	1d3b      	adds	r3, r7, #4
 8002e22:	4619      	mov	r1, r3
 8002e24:	4817      	ldr	r0, [pc, #92]	@ (8002e84 <MX_GPIO_Init+0x350>)
 8002e26:	f004 feab 	bl	8007b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : D_C_DISP_Pin RST_DISP_Pin */
  GPIO_InitStruct.Pin = D_C_DISP_Pin|RST_DISP_Pin;
 8002e2a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002e2e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e30:	2301      	movs	r3, #1
 8002e32:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e34:	2300      	movs	r3, #0
 8002e36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e3c:	1d3b      	adds	r3, r7, #4
 8002e3e:	4619      	mov	r1, r3
 8002e40:	480f      	ldr	r0, [pc, #60]	@ (8002e80 <MX_GPIO_Init+0x34c>)
 8002e42:	f004 fe9d 	bl	8007b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_BK_NCS_Pin QSPI_BK_IO1_Pin QSPI_BK_IO2_Pin */
  GPIO_InitStruct.Pin = QSPI_BK_NCS_Pin|QSPI_BK_IO1_Pin|QSPI_BK_IO2_Pin;
 8002e46:	2368      	movs	r3, #104	@ 0x68
 8002e48:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e4a:	2302      	movs	r3, #2
 8002e4c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e52:	2300      	movs	r3, #0
 8002e54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002e56:	230a      	movs	r3, #10
 8002e58:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e5a:	1d3b      	adds	r3, r7, #4
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	4809      	ldr	r0, [pc, #36]	@ (8002e84 <MX_GPIO_Init+0x350>)
 8002e60:	f004 fe8e 	bl	8007b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002e64:	2308      	movs	r3, #8
 8002e66:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e68:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002e6c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e72:	1d3b      	adds	r3, r7, #4
 8002e74:	4619      	mov	r1, r3
 8002e76:	e009      	b.n	8002e8c <MX_GPIO_Init+0x358>
 8002e78:	48000400 	.word	0x48000400
 8002e7c:	48001c00 	.word	0x48001c00
 8002e80:	48000800 	.word	0x48000800
 8002e84:	48000c00 	.word	0x48000c00
 8002e88:	48001000 	.word	0x48001000
 8002e8c:	4820      	ldr	r0, [pc, #128]	@ (8002f10 <MX_GPIO_Init+0x3dc>)
 8002e8e:	f004 fe77 	bl	8007b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002e92:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e96:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ea4:	1d3b      	adds	r3, r7, #4
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	481a      	ldr	r0, [pc, #104]	@ (8002f14 <MX_GPIO_Init+0x3e0>)
 8002eaa:	f004 fe69 	bl	8007b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : TSC_G6_IO1_Pin TSC_G6_IO2_Pin */
  GPIO_InitStruct.Pin = TSC_G6_IO1_Pin|TSC_G6_IO2_Pin;
 8002eae:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002eb2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF9_TSC;
 8002ec0:	2309      	movs	r3, #9
 8002ec2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ec4:	1d3b      	adds	r3, r7, #4
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	4812      	ldr	r0, [pc, #72]	@ (8002f14 <MX_GPIO_Init+0x3e0>)
 8002eca:	f004 fe59 	bl	8007b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_SELECT1_Pin */
  GPIO_InitStruct.Pin = GPIO_SELECT1_Pin;
 8002ece:	2304      	movs	r3, #4
 8002ed0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eda:	2300      	movs	r3, #0
 8002edc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIO_SELECT1_GPIO_Port, &GPIO_InitStruct);
 8002ede:	1d3b      	adds	r3, r7, #4
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	480b      	ldr	r0, [pc, #44]	@ (8002f10 <MX_GPIO_Init+0x3dc>)
 8002ee4:	f004 fe4c 	bl	8007b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eec:	2302      	movs	r3, #2
 8002eee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8002ef8:	230e      	movs	r3, #14
 8002efa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002efc:	1d3b      	adds	r3, r7, #4
 8002efe:	4619      	mov	r1, r3
 8002f00:	4803      	ldr	r0, [pc, #12]	@ (8002f10 <MX_GPIO_Init+0x3dc>)
 8002f02:	f004 fe3d 	bl	8007b80 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8002f06:	bf00      	nop
 8002f08:	3718      	adds	r7, #24
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	48001000 	.word	0x48001000
 8002f14:	48000c00 	.word	0x48000c00

08002f18 <PeriphClock_Config>:

/* USER CODE BEGIN 4 */
void PeriphClock_Config(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0

	/* Start automatic synchronization */
	HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
#endif

	return;
 8002f1c:	bf00      	nop
}
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr

08002f26 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f26:	b480      	push	{r7}
 8002f28:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002f2a:	b672      	cpsid	i
}
 8002f2c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f2e:	bf00      	nop
 8002f30:	e7fd      	b.n	8002f2e <Error_Handler+0x8>

08002f32 <LL_RCC_SetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRTCClockSource(uint32_t Source)
{
 8002f32:	b480      	push	{r7}
 8002f34:	b083      	sub	sp, #12
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002f3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f42:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f46:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002f52:	bf00      	nop
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr

08002f5e <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002f62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f6a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f72:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002f76:	bf00      	nop
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <LL_AHB2_GRP1_EnableClock>:
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002f88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f8c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002f8e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002f98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f9c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
}
 8002fa6:	bf00      	nop
 8002fa8:	3714      	adds	r7, #20
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <LL_AHB3_GRP1_EnableClock>:
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	b085      	sub	sp, #20
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002fba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fbe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002fc0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002fca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
}
 8002fd8:	bf00      	nop
 8002fda:	3714      	adds	r7, #20
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <LL_APB1_GRP1_EnableClock>:
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002fec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ff0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002ff2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002ffc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003000:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4013      	ands	r3, r2
 8003006:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003008:	68fb      	ldr	r3, [r7, #12]
}
 800300a:	bf00      	nop
 800300c:	3714      	adds	r7, #20
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr

08003016 <LL_APB2_GRP1_EnableClock>:
{
 8003016:	b480      	push	{r7}
 8003018:	b085      	sub	sp, #20
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800301e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003022:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003024:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4313      	orrs	r3, r2
 800302c:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800302e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003032:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4013      	ands	r3, r2
 8003038:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800303a:	68fb      	ldr	r3, [r7, #12]
}
 800303c:	bf00      	nop
 800303e:	3714      	adds	r7, #20
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800304c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003050:	f7ff ffaf 	bl	8002fb2 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8003054:	2200      	movs	r2, #0
 8003056:	2100      	movs	r1, #0
 8003058:	202e      	movs	r0, #46	@ 0x2e
 800305a:	f004 f9b0 	bl	80073be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 800305e:	202e      	movs	r0, #46	@ 0x2e
 8003060:	f004 f9c7 	bl	80073f2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003064:	bf00      	nop
 8003066:	bd80      	pop	{r7, pc}

08003068 <HAL_IPCC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hipcc: IPCC handle pointer
  * @retval None
  */
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a05      	ldr	r2, [pc, #20]	@ (800308c <HAL_IPCC_MspInit+0x24>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d103      	bne.n	8003082 <HAL_IPCC_MspInit+0x1a>
  {
    /* USER CODE BEGIN IPCC_MspInit 0 */

    /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 800307a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800307e:	f7ff ff98 	bl	8002fb2 <LL_AHB3_GRP1_EnableClock>

    /* USER CODE END IPCC_MspInit 1 */

  }

}
 8003082:	bf00      	nop
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	58000c00 	.word	0x58000c00

08003090 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b096      	sub	sp, #88	@ 0x58
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003098:	f107 0308 	add.w	r3, r7, #8
 800309c:	2250      	movs	r2, #80	@ 0x50
 800309e:	2100      	movs	r1, #0
 80030a0:	4618      	mov	r0, r3
 80030a2:	f00e fccd 	bl	8011a40 <memset>
  if(hrtc->Instance==RTC)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a14      	ldr	r2, [pc, #80]	@ (80030fc <HAL_RTC_MspInit+0x6c>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d120      	bne.n	80030f2 <HAL_RTC_MspInit+0x62>
  {
    /* USER CODE BEGIN RTC_MspInit 0 */
  HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80030b0:	f005 f88e 	bl	80081d0 <HAL_PWR_EnableBkUpAccess>

  /**
  *  Write twice the value to flush the APB-AHB bridge
  *  This bit shall be written in the register before writing the next one
  */
  HAL_PWR_EnableBkUpAccess();
 80030b4:	f005 f88c 	bl	80081d0 <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE); /**< Select LSI as RTC Input */
 80030b8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80030bc:	f7ff ff39 	bl	8002f32 <LL_RCC_SetRTCClockSource>
    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80030c0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80030c4:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80030c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80030ca:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030cc:	f107 0308 	add.w	r3, r7, #8
 80030d0:	4618      	mov	r0, r3
 80030d2:	f006 fbc2 	bl	800985a <HAL_RCCEx_PeriphCLKConfig>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d001      	beq.n	80030e0 <HAL_RTC_MspInit+0x50>
    {
      Error_Handler();
 80030dc:	f7ff ff23 	bl	8002f26 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80030e0:	f7ff ff3d 	bl	8002f5e <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80030e4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80030e8:	f7ff ff7c 	bl	8002fe4 <LL_APB1_GRP1_EnableClock>
    /* USER CODE BEGIN RTC_MspInit 1 */
  HAL_RTCEx_EnableBypassShadow(hrtc);
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f006 ff47 	bl	8009f80 <HAL_RTCEx_EnableBypassShadow>
    /* USER CODE END RTC_MspInit 1 */

  }

}
 80030f2:	bf00      	nop
 80030f4:	3758      	adds	r7, #88	@ 0x58
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	40002800 	.word	0x40002800

08003100 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b09c      	sub	sp, #112	@ 0x70
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003108:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800310c:	2200      	movs	r2, #0
 800310e:	601a      	str	r2, [r3, #0]
 8003110:	605a      	str	r2, [r3, #4]
 8003112:	609a      	str	r2, [r3, #8]
 8003114:	60da      	str	r2, [r3, #12]
 8003116:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003118:	f107 030c 	add.w	r3, r7, #12
 800311c:	2250      	movs	r2, #80	@ 0x50
 800311e:	2100      	movs	r1, #0
 8003120:	4618      	mov	r0, r3
 8003122:	f00e fc8d 	bl	8011a40 <memset>
  if(huart->Instance==USART1)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a2e      	ldr	r2, [pc, #184]	@ (80031e4 <HAL_UART_MspInit+0xe4>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d155      	bne.n	80031dc <HAL_UART_MspInit+0xdc>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003130:	2301      	movs	r3, #1
 8003132:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003134:	2300      	movs	r3, #0
 8003136:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003138:	f107 030c 	add.w	r3, r7, #12
 800313c:	4618      	mov	r0, r3
 800313e:	f006 fb8c 	bl	800985a <HAL_RCCEx_PeriphCLKConfig>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d001      	beq.n	800314c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003148:	f7ff feed 	bl	8002f26 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800314c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003150:	f7ff ff61 	bl	8003016 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003154:	2002      	movs	r0, #2
 8003156:	f7ff ff13 	bl	8002f80 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 800315a:	23c0      	movs	r3, #192	@ 0xc0
 800315c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800315e:	2302      	movs	r3, #2
 8003160:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003162:	2301      	movs	r3, #1
 8003164:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003166:	2303      	movs	r3, #3
 8003168:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800316a:	2307      	movs	r3, #7
 800316c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800316e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003172:	4619      	mov	r1, r3
 8003174:	481c      	ldr	r0, [pc, #112]	@ (80031e8 <HAL_UART_MspInit+0xe8>)
 8003176:	f004 fd03 	bl	8007b80 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Channel4;
 800317a:	4b1c      	ldr	r3, [pc, #112]	@ (80031ec <HAL_UART_MspInit+0xec>)
 800317c:	4a1c      	ldr	r2, [pc, #112]	@ (80031f0 <HAL_UART_MspInit+0xf0>)
 800317e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003180:	4b1a      	ldr	r3, [pc, #104]	@ (80031ec <HAL_UART_MspInit+0xec>)
 8003182:	220f      	movs	r2, #15
 8003184:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003186:	4b19      	ldr	r3, [pc, #100]	@ (80031ec <HAL_UART_MspInit+0xec>)
 8003188:	2210      	movs	r2, #16
 800318a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800318c:	4b17      	ldr	r3, [pc, #92]	@ (80031ec <HAL_UART_MspInit+0xec>)
 800318e:	2200      	movs	r2, #0
 8003190:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003192:	4b16      	ldr	r3, [pc, #88]	@ (80031ec <HAL_UART_MspInit+0xec>)
 8003194:	2280      	movs	r2, #128	@ 0x80
 8003196:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003198:	4b14      	ldr	r3, [pc, #80]	@ (80031ec <HAL_UART_MspInit+0xec>)
 800319a:	2200      	movs	r2, #0
 800319c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800319e:	4b13      	ldr	r3, [pc, #76]	@ (80031ec <HAL_UART_MspInit+0xec>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80031a4:	4b11      	ldr	r3, [pc, #68]	@ (80031ec <HAL_UART_MspInit+0xec>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80031aa:	4b10      	ldr	r3, [pc, #64]	@ (80031ec <HAL_UART_MspInit+0xec>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80031b0:	480e      	ldr	r0, [pc, #56]	@ (80031ec <HAL_UART_MspInit+0xec>)
 80031b2:	f004 f963 	bl	800747c <HAL_DMA_Init>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d001      	beq.n	80031c0 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 80031bc:	f7ff feb3 	bl	8002f26 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a0a      	ldr	r2, [pc, #40]	@ (80031ec <HAL_UART_MspInit+0xec>)
 80031c4:	67da      	str	r2, [r3, #124]	@ 0x7c
 80031c6:	4a09      	ldr	r2, [pc, #36]	@ (80031ec <HAL_UART_MspInit+0xec>)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80031cc:	2200      	movs	r2, #0
 80031ce:	2100      	movs	r1, #0
 80031d0:	2024      	movs	r0, #36	@ 0x24
 80031d2:	f004 f8f4 	bl	80073be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80031d6:	2024      	movs	r0, #36	@ 0x24
 80031d8:	f004 f90b 	bl	80073f2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80031dc:	bf00      	nop
 80031de:	3770      	adds	r7, #112	@ 0x70
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	40013800 	.word	0x40013800
 80031e8:	48000400 	.word	0x48000400
 80031ec:	2000058c 	.word	0x2000058c
 80031f0:	40020444 	.word	0x40020444

080031f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80031f8:	bf00      	nop
 80031fa:	e7fd      	b.n	80031f8 <NMI_Handler+0x4>

080031fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003200:	bf00      	nop
 8003202:	e7fd      	b.n	8003200 <HardFault_Handler+0x4>

08003204 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003208:	bf00      	nop
 800320a:	e7fd      	b.n	8003208 <MemManage_Handler+0x4>

0800320c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003210:	bf00      	nop
 8003212:	e7fd      	b.n	8003210 <BusFault_Handler+0x4>

08003214 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003214:	b480      	push	{r7}
 8003216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003218:	bf00      	nop
 800321a:	e7fd      	b.n	8003218 <UsageFault_Handler+0x4>

0800321c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003220:	bf00      	nop
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr

0800322a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800322a:	b480      	push	{r7}
 800322c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800322e:	bf00      	nop
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003238:	b480      	push	{r7}
 800323a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800323c:	bf00      	nop
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr

08003246 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800324a:	f003 ff39 	bl	80070c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800324e:	bf00      	nop
 8003250:	bd80      	pop	{r7, pc}
	...

08003254 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003258:	4802      	ldr	r0, [pc, #8]	@ (8003264 <USART1_IRQHandler+0x10>)
 800325a:	f007 ff59 	bl	800b110 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800325e:	bf00      	nop
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	200004f8 	.word	0x200004f8

08003268 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800326c:	f004 ff06 	bl	800807c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8003270:	bf00      	nop
 8003272:	bd80      	pop	{r7, pc}

08003274 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003278:	4802      	ldr	r0, [pc, #8]	@ (8003284 <DMA2_Channel4_IRQHandler+0x10>)
 800327a:	f004 fae0 	bl	800783e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 800327e:	bf00      	nop
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	2000058c 	.word	0x2000058c

08003288 <IPCC_C1_RX_IRQHandler>:
/* USER CODE BEGIN 1 */
/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 800328c:	f001 fc80 	bl	8004b90 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8003290:	bf00      	nop
 8003292:	bd80      	pop	{r7, pc}

08003294 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8003298:	f001 fcb0 	bl	8004bfc <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 800329c:	bf00      	nop
 800329e:	bd80      	pop	{r7, pc}

080032a0 <EXTI15_10_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW_EXTI_IRQHandler(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80032a4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80032a8:	f004 fed0 	bl	800804c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80032ac:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80032b0:	f004 fecc 	bl	800804c <HAL_GPIO_EXTI_IRQHandler>
}
 80032b4:	bf00      	nop
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <RTC_WKUP_IRQHandler>:

void RTC_WKUP_IRQHandler(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0
  HAL_RTCEx_WakeUpTimerIRQHandler();
 80032bc:	f7fe fe9e 	bl	8001ffc <HW_TS_RTC_Wakeup_Handler>
}
 80032c0:	bf00      	nop
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <TIM1_TRG_COM_TIM17_IRQHandler>:
  * @brief  This function handles TIM17 IRQ Handler.
  * @param  None
  * @retval None
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	af00      	add	r7, sp, #0
  BSP_PWM_LED_IRQHandler();
 80032c8:	f002 ff06 	bl	80060d8 <BSP_PWM_LED_IRQHandler>
}
 80032cc:	bf00      	nop
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0
  return 1;
 80032d4:	2301      	movs	r3, #1
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <_kill>:

int _kill(int pid, int sig)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80032ea:	f00e fbb1 	bl	8011a50 <__errno>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2216      	movs	r2, #22
 80032f2:	601a      	str	r2, [r3, #0]
  return -1;
 80032f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3708      	adds	r7, #8
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <_exit>:

void _exit (int status)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003308:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f7ff ffe7 	bl	80032e0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003312:	bf00      	nop
 8003314:	e7fd      	b.n	8003312 <_exit+0x12>

08003316 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003316:	b580      	push	{r7, lr}
 8003318:	b086      	sub	sp, #24
 800331a:	af00      	add	r7, sp, #0
 800331c:	60f8      	str	r0, [r7, #12]
 800331e:	60b9      	str	r1, [r7, #8]
 8003320:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003322:	2300      	movs	r3, #0
 8003324:	617b      	str	r3, [r7, #20]
 8003326:	e00a      	b.n	800333e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003328:	f3af 8000 	nop.w
 800332c:	4601      	mov	r1, r0
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	1c5a      	adds	r2, r3, #1
 8003332:	60ba      	str	r2, [r7, #8]
 8003334:	b2ca      	uxtb	r2, r1
 8003336:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	3301      	adds	r3, #1
 800333c:	617b      	str	r3, [r7, #20]
 800333e:	697a      	ldr	r2, [r7, #20]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	429a      	cmp	r2, r3
 8003344:	dbf0      	blt.n	8003328 <_read+0x12>
  }

  return len;
 8003346:	687b      	ldr	r3, [r7, #4]
}
 8003348:	4618      	mov	r0, r3
 800334a:	3718      	adds	r7, #24
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003358:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800335c:	4618      	mov	r0, r3
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003378:	605a      	str	r2, [r3, #4]
  return 0;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <_isatty>:

int _isatty(int file)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003390:	2301      	movs	r3, #1
}
 8003392:	4618      	mov	r0, r3
 8003394:	370c      	adds	r7, #12
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr

0800339e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800339e:	b480      	push	{r7}
 80033a0:	b085      	sub	sp, #20
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	60f8      	str	r0, [r7, #12]
 80033a6:	60b9      	str	r1, [r7, #8]
 80033a8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3714      	adds	r7, #20
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b086      	sub	sp, #24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80033c0:	4a14      	ldr	r2, [pc, #80]	@ (8003414 <_sbrk+0x5c>)
 80033c2:	4b15      	ldr	r3, [pc, #84]	@ (8003418 <_sbrk+0x60>)
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80033cc:	4b13      	ldr	r3, [pc, #76]	@ (800341c <_sbrk+0x64>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d102      	bne.n	80033da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80033d4:	4b11      	ldr	r3, [pc, #68]	@ (800341c <_sbrk+0x64>)
 80033d6:	4a12      	ldr	r2, [pc, #72]	@ (8003420 <_sbrk+0x68>)
 80033d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80033da:	4b10      	ldr	r3, [pc, #64]	@ (800341c <_sbrk+0x64>)
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4413      	add	r3, r2
 80033e2:	693a      	ldr	r2, [r7, #16]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d207      	bcs.n	80033f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80033e8:	f00e fb32 	bl	8011a50 <__errno>
 80033ec:	4603      	mov	r3, r0
 80033ee:	220c      	movs	r2, #12
 80033f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80033f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80033f6:	e009      	b.n	800340c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80033f8:	4b08      	ldr	r3, [pc, #32]	@ (800341c <_sbrk+0x64>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80033fe:	4b07      	ldr	r3, [pc, #28]	@ (800341c <_sbrk+0x64>)
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4413      	add	r3, r2
 8003406:	4a05      	ldr	r2, [pc, #20]	@ (800341c <_sbrk+0x64>)
 8003408:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800340a:	68fb      	ldr	r3, [r7, #12]
}
 800340c:	4618      	mov	r0, r3
 800340e:	3718      	adds	r7, #24
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	20030000 	.word	0x20030000
 8003418:	00001000 	.word	0x00001000
 800341c:	200005ec 	.word	0x200005ec
 8003420:	20001e98 	.word	0x20001e98

08003424 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8003428:	4b03      	ldr	r3, [pc, #12]	@ (8003438 <LL_FLASH_GetUDN+0x14>)
 800342a:	681b      	ldr	r3, [r3, #0]
}
 800342c:	4618      	mov	r0, r3
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	1fff7580 	.word	0x1fff7580

0800343c <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8003440:	4b03      	ldr	r3, [pc, #12]	@ (8003450 <LL_FLASH_GetDeviceID+0x14>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	b2db      	uxtb	r3, r3
}
 8003446:	4618      	mov	r0, r3
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr
 8003450:	1fff7584 	.word	0x1fff7584

08003454 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8003454:	b480      	push	{r7}
 8003456:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8003458:	4b03      	ldr	r3, [pc, #12]	@ (8003468 <LL_FLASH_GetSTCompanyID+0x14>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	0a1b      	lsrs	r3, r3, #8
}
 800345e:	4618      	mov	r0, r3
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr
 8003468:	1fff7584 	.word	0x1fff7584

0800346c <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800346c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800346e:	b0b1      	sub	sp, #196	@ 0xc4
 8003470:	af04      	add	r7, sp, #16
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8003472:	2392      	movs	r3, #146	@ 0x92
 8003474:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */
  WirelessFwInfo_t wireless_info_instance;
  WirelessFwInfo_t *p_wireless_info = &wireless_info_instance;  
 8003478:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800347c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  char BdAddress[20];
  char StackVersion[23];
  char StackBranch[20];
  char FusVersion[20];
  const uint8_t *bdaddr=0;  
 8003480:	2300      	movs	r3, #0
 8003482:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8003486:	4bb8      	ldr	r3, [pc, #736]	@ (8003768 <APP_BLE_Init+0x2fc>)
 8003488:	463c      	mov	r4, r7
 800348a:	461d      	mov	r5, r3
 800348c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800348e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003490:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003492:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003494:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003496:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003498:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800349c:	c403      	stmia	r4!, {r0, r1}
 800349e:	8022      	strh	r2, [r4, #0]
 80034a0:	3402      	adds	r4, #2
 80034a2:	0c13      	lsrs	r3, r2, #16
 80034a4:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 80034a6:	f000 fca3 	bl	8003df0 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 80034aa:	2101      	movs	r1, #1
 80034ac:	2002      	movs	r0, #2
 80034ae:	f00d fa19 	bl	80108e4 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 80034b2:	4aae      	ldr	r2, [pc, #696]	@ (800376c <APP_BLE_Init+0x300>)
 80034b4:	2100      	movs	r1, #0
 80034b6:	2004      	movs	r0, #4
 80034b8:	f00d fbc6 	bl	8010c48 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 80034bc:	463b      	mov	r3, r7
 80034be:	4618      	mov	r0, r3
 80034c0:	f00b fc8c 	bl	800eddc <SHCI_C2_BLE_Init>
 80034c4:	4603      	mov	r3, r0
 80034c6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  if (status != SHCI_Success)
 80034ca:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d008      	beq.n	80034e4 <APP_BLE_Init+0x78>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 80034d2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80034d6:	4619      	mov	r1, r3
 80034d8:	48a5      	ldr	r0, [pc, #660]	@ (8003770 <APP_BLE_Init+0x304>)
 80034da:	f00e fa39 	bl	8011950 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 80034de:	f7ff fd22 	bl	8002f26 <Error_Handler>
 80034e2:	e002      	b.n	80034ea <APP_BLE_Init+0x7e>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 80034e4:	48a3      	ldr	r0, [pc, #652]	@ (8003774 <APP_BLE_Init+0x308>)
 80034e6:	f00e fa33 	bl	8011950 <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 80034ea:	f000 fc97 	bl	8003e1c <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 80034ee:	f00c fbd1 	bl	800fc94 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80034f2:	4ba1      	ldr	r3, [pc, #644]	@ (8003778 <APP_BLE_Init+0x30c>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 80034fa:	4b9f      	ldr	r3, [pc, #636]	@ (8003778 <APP_BLE_Init+0x30c>)
 80034fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003500:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8003502:	4a9e      	ldr	r2, [pc, #632]	@ (800377c <APP_BLE_Init+0x310>)
 8003504:	2100      	movs	r1, #0
 8003506:	2001      	movs	r0, #1
 8003508:	f00d fb9e 	bl	8010c48 <UTIL_SEQ_RegTask>
#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
  UTIL_SEQ_RegTask(1<<CFG_TASK_CONN_UPDATE_REG_ID, UTIL_SEQ_RFU, Connection_Interval_Update_Req);
 800350c:	4a9c      	ldr	r2, [pc, #624]	@ (8003780 <APP_BLE_Init+0x314>)
 800350e:	2100      	movs	r1, #0
 8003510:	2002      	movs	r0, #2
 8003512:	f00d fb99 	bl	8010c48 <UTIL_SEQ_RegTask>
#if (BLE_CFG_OTA_REBOOT_CHAR != 0)
  a_ManufData[sizeof(a_ManufData)-8] = CFG_FEATURE_OTA_REBOOT;
#endif /* BLE_CFG_OTA_REBOOT_CHAR != 0 */

#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8003516:	2006      	movs	r0, #6
 8003518:	f00a feaa 	bl	800e270 <aci_hal_set_radio_activity_mask>
 800351c:	4603      	mov	r3, r0
 800351e:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
  if (ret != BLE_STATUS_SUCCESS)
 8003522:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 8003526:	2b00      	cmp	r3, #0
 8003528:	d006      	beq.n	8003538 <APP_BLE_Init+0xcc>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 800352a:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 800352e:	4619      	mov	r1, r3
 8003530:	4894      	ldr	r0, [pc, #592]	@ (8003784 <APP_BLE_Init+0x318>)
 8003532:	f00e fa0d 	bl	8011950 <iprintf>
 8003536:	e002      	b.n	800353e <APP_BLE_Init+0xd2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 8003538:	4893      	ldr	r0, [pc, #588]	@ (8003788 <APP_BLE_Init+0x31c>)
 800353a:	f00e fa09 	bl	8011950 <iprintf>
  }
#endif /* RADIO_ACTIVITY_EVENT != 0 */

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
  index_con_int = 0;
 800353e:	4b93      	ldr	r3, [pc, #588]	@ (800378c <APP_BLE_Init+0x320>)
 8003540:	2200      	movs	r2, #0
 8003542:	701a      	strb	r2, [r3, #0]
  mutex = 1;
 8003544:	4b92      	ldr	r3, [pc, #584]	@ (8003790 <APP_BLE_Init+0x324>)
 8003546:	2201      	movs	r2, #1
 8003548:	701a      	strb	r2, [r3, #0]
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 800354a:	f001 f913 	bl	8004774 <P2PS_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 800354e:	4b91      	ldr	r3, [pc, #580]	@ (8003794 <APP_BLE_Init+0x328>)
 8003550:	2200      	movs	r2, #0
 8003552:	4991      	ldr	r1, [pc, #580]	@ (8003798 <APP_BLE_Init+0x32c>)
 8003554:	2000      	movs	r0, #0
 8003556:	f7fe fef3 	bl	8002340 <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 800355a:	4b90      	ldr	r3, [pc, #576]	@ (800379c <APP_BLE_Init+0x330>)
 800355c:	2200      	movs	r2, #0
 800355e:	4990      	ldr	r1, [pc, #576]	@ (80037a0 <APP_BLE_Init+0x334>)
 8003560:	2000      	movs	r0, #0
 8003562:	f7fe feed 	bl	8002340 <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8003566:	4b84      	ldr	r3, [pc, #528]	@ (8003778 <APP_BLE_Init+0x30c>)
 8003568:	2200      	movs	r2, #0
 800356a:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800356c:	4b82      	ldr	r3, [pc, #520]	@ (8003778 <APP_BLE_Init+0x30c>)
 800356e:	2200      	movs	r2, #0
 8003570:	761a      	strb	r2, [r3, #24]

  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 8003572:	4b8c      	ldr	r3, [pc, #560]	@ (80037a4 <APP_BLE_Init+0x338>)
 8003574:	2280      	movs	r2, #128	@ 0x80
 8003576:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 8003578:	4b8b      	ldr	r3, [pc, #556]	@ (80037a8 <APP_BLE_Init+0x33c>)
 800357a:	22a0      	movs	r2, #160	@ 0xa0
 800357c:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800357e:	2001      	movs	r0, #1
 8003580:	f000 fdfc 	bl	800417c <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */
   /* Displays the board information: MAC Address, Stack version, FUS version*/ 
   if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 8003584:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8003588:	f00b fc6c 	bl	800ee64 <SHCI_GetWirelessFwInfo>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	f040 8092 	bne.w	80036b8 <APP_BLE_Init+0x24c>
   {
     // Error
   }
   else
   {
     bdaddr= BleGetBdAddress();
 8003594:	f000 fe9e 	bl	80042d4 <BleGetBdAddress>
 8003598:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
     sprintf(BdAddress, "BD_ad=%02x%02x%02x%02x%02x%02x", bdaddr[5],bdaddr[4],bdaddr[3],bdaddr[2],bdaddr[1],bdaddr[0]);
 800359c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80035a0:	3305      	adds	r3, #5
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	461d      	mov	r5, r3
 80035a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80035aa:	3304      	adds	r3, #4
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	461e      	mov	r6, r3
 80035b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80035b4:	3303      	adds	r3, #3
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	461a      	mov	r2, r3
 80035ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80035be:	3302      	adds	r3, #2
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	4619      	mov	r1, r3
 80035c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80035c8:	3301      	adds	r3, #1
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	461c      	mov	r4, r3
 80035ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 80035d8:	9303      	str	r3, [sp, #12]
 80035da:	9402      	str	r4, [sp, #8]
 80035dc:	9101      	str	r1, [sp, #4]
 80035de:	9200      	str	r2, [sp, #0]
 80035e0:	4633      	mov	r3, r6
 80035e2:	462a      	mov	r2, r5
 80035e4:	4971      	ldr	r1, [pc, #452]	@ (80037ac <APP_BLE_Init+0x340>)
 80035e6:	f00e f8cf 	bl	8011788 <siprintf>
     sprintf(StackVersion, "BLE Stack=v%d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub);
 80035ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	461a      	mov	r2, r3
 80035f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80035f6:	785b      	ldrb	r3, [r3, #1]
 80035f8:	4619      	mov	r1, r3
 80035fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80035fe:	789b      	ldrb	r3, [r3, #2]
 8003600:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 8003604:	9300      	str	r3, [sp, #0]
 8003606:	460b      	mov	r3, r1
 8003608:	4969      	ldr	r1, [pc, #420]	@ (80037b0 <APP_BLE_Init+0x344>)
 800360a:	f00e f8bd 	bl	8011788 <siprintf>
     sprintf(StackBranch, "Branch=%d Type=%d", p_wireless_info->VersionBranch, p_wireless_info->VersionReleaseType);
 800360e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003612:	78db      	ldrb	r3, [r3, #3]
 8003614:	461a      	mov	r2, r3
 8003616:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800361a:	791b      	ldrb	r3, [r3, #4]
 800361c:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8003620:	4964      	ldr	r1, [pc, #400]	@ (80037b4 <APP_BLE_Init+0x348>)
 8003622:	f00e f8b1 	bl	8011788 <siprintf>
     sprintf(FusVersion, "FUS v%d.%d.%d", p_wireless_info->FusVersionMajor, p_wireless_info->FusVersionMinor, p_wireless_info->FusVersionSub);
 8003626:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800362a:	7a9b      	ldrb	r3, [r3, #10]
 800362c:	461a      	mov	r2, r3
 800362e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003632:	7adb      	ldrb	r3, [r3, #11]
 8003634:	4619      	mov	r1, r3
 8003636:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800363a:	7b1b      	ldrb	r3, [r3, #12]
 800363c:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8003640:	9300      	str	r3, [sp, #0]
 8003642:	460b      	mov	r3, r1
 8003644:	495c      	ldr	r1, [pc, #368]	@ (80037b8 <APP_BLE_Init+0x34c>)
 8003646:	f00e f89f 	bl	8011788 <siprintf>
     
     BSP_LCD_Clear(0,SSD1315_COLOR_BLACK);
 800364a:	2100      	movs	r1, #0
 800364c:	2000      	movs	r0, #0
 800364e:	f003 faa7 	bl	8006ba0 <BSP_LCD_Clear>
     BSP_LCD_Refresh(0);
 8003652:	2000      	movs	r0, #0
 8003654:	f003 f97c 	bl	8006950 <BSP_LCD_Refresh>
     UTIL_LCD_DisplayStringAt(0, 0, (uint8_t *)BdAddress, LEFT_MODE);
 8003658:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 800365c:	2303      	movs	r3, #3
 800365e:	2100      	movs	r1, #0
 8003660:	2000      	movs	r0, #0
 8003662:	f00c ff25 	bl	80104b0 <UTIL_LCD_DisplayStringAt>
     UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)StackVersion, LEFT_MODE);
 8003666:	f00c fec1 	bl	80103ec <UTIL_LCD_GetFont>
 800366a:	4603      	mov	r3, r0
 800366c:	88db      	ldrh	r3, [r3, #6]
 800366e:	4619      	mov	r1, r3
 8003670:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8003674:	2303      	movs	r3, #3
 8003676:	2000      	movs	r0, #0
 8003678:	f00c ff1a 	bl	80104b0 <UTIL_LCD_DisplayStringAt>
     UTIL_LCD_DisplayStringAt(0, LINE(2), (uint8_t *)StackBranch, LEFT_MODE);
 800367c:	f00c feb6 	bl	80103ec <UTIL_LCD_GetFont>
 8003680:	4603      	mov	r3, r0
 8003682:	88db      	ldrh	r3, [r3, #6]
 8003684:	005b      	lsls	r3, r3, #1
 8003686:	4619      	mov	r1, r3
 8003688:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800368c:	2303      	movs	r3, #3
 800368e:	2000      	movs	r0, #0
 8003690:	f00c ff0e 	bl	80104b0 <UTIL_LCD_DisplayStringAt>
     UTIL_LCD_DisplayStringAt(0, LINE(3), (uint8_t *)FusVersion, LEFT_MODE);
 8003694:	f00c feaa 	bl	80103ec <UTIL_LCD_GetFont>
 8003698:	4603      	mov	r3, r0
 800369a:	88db      	ldrh	r3, [r3, #6]
 800369c:	461a      	mov	r2, r3
 800369e:	4613      	mov	r3, r2
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	4413      	add	r3, r2
 80036a4:	4619      	mov	r1, r3
 80036a6:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80036aa:	2303      	movs	r3, #3
 80036ac:	2000      	movs	r0, #0
 80036ae:	f00c feff 	bl	80104b0 <UTIL_LCD_DisplayStringAt>
     BSP_LCD_Refresh(0);
 80036b2:	2000      	movs	r0, #0
 80036b4:	f003 f94c 	bl	8006950 <BSP_LCD_Refresh>
   }
   HAL_Delay(4000);
 80036b8:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 80036bc:	f7fe f862 	bl	8001784 <HAL_Delay>
   /* Displays Application */
   
   sprintf(BdAddress, "BD_ad=%02x%02x%02x%02x%02x%02x", bdaddr[5],bdaddr[4],bdaddr[3],bdaddr[2],bdaddr[1],bdaddr[0]);
 80036c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80036c4:	3305      	adds	r3, #5
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	461d      	mov	r5, r3
 80036ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80036ce:	3304      	adds	r3, #4
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	461e      	mov	r6, r3
 80036d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80036d8:	3303      	adds	r3, #3
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	461a      	mov	r2, r3
 80036de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80036e2:	3302      	adds	r3, #2
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	4619      	mov	r1, r3
 80036e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80036ec:	3301      	adds	r3, #1
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	461c      	mov	r4, r3
 80036f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 80036fc:	9303      	str	r3, [sp, #12]
 80036fe:	9402      	str	r4, [sp, #8]
 8003700:	9101      	str	r1, [sp, #4]
 8003702:	9200      	str	r2, [sp, #0]
 8003704:	4633      	mov	r3, r6
 8003706:	462a      	mov	r2, r5
 8003708:	4928      	ldr	r1, [pc, #160]	@ (80037ac <APP_BLE_Init+0x340>)
 800370a:	f00e f83d 	bl	8011788 <siprintf>
   BSP_LCD_Clear(0,SSD1315_COLOR_BLACK);
 800370e:	2100      	movs	r1, #0
 8003710:	2000      	movs	r0, #0
 8003712:	f003 fa45 	bl	8006ba0 <BSP_LCD_Clear>
   BSP_LCD_Refresh(0);
 8003716:	2000      	movs	r0, #0
 8003718:	f003 f91a 	bl	8006950 <BSP_LCD_Refresh>
   UTIL_LCD_DisplayStringAt(0, 0, (uint8_t *)"ST BLE P2P Server", CENTER_MODE);
 800371c:	2301      	movs	r3, #1
 800371e:	4a27      	ldr	r2, [pc, #156]	@ (80037bc <APP_BLE_Init+0x350>)
 8003720:	2100      	movs	r1, #0
 8003722:	2000      	movs	r0, #0
 8003724:	f00c fec4 	bl	80104b0 <UTIL_LCD_DisplayStringAt>
   UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)BdAddress, LEFT_MODE);
 8003728:	f00c fe60 	bl	80103ec <UTIL_LCD_GetFont>
 800372c:	4603      	mov	r3, r0
 800372e:	88db      	ldrh	r3, [r3, #6]
 8003730:	4619      	mov	r1, r3
 8003732:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 8003736:	2303      	movs	r3, #3
 8003738:	2000      	movs	r0, #0
 800373a:	f00c feb9 	bl	80104b0 <UTIL_LCD_DisplayStringAt>
   UTIL_LCD_DisplayStringAt(0, LINE(3), (uint8_t *)"ADVERTISING", LEFT_MODE);
 800373e:	f00c fe55 	bl	80103ec <UTIL_LCD_GetFont>
 8003742:	4603      	mov	r3, r0
 8003744:	88db      	ldrh	r3, [r3, #6]
 8003746:	461a      	mov	r2, r3
 8003748:	4613      	mov	r3, r2
 800374a:	005b      	lsls	r3, r3, #1
 800374c:	4413      	add	r3, r2
 800374e:	4619      	mov	r1, r3
 8003750:	2303      	movs	r3, #3
 8003752:	4a1b      	ldr	r2, [pc, #108]	@ (80037c0 <APP_BLE_Init+0x354>)
 8003754:	2000      	movs	r0, #0
 8003756:	f00c feab 	bl	80104b0 <UTIL_LCD_DisplayStringAt>
   BSP_LCD_Refresh(0);
 800375a:	2000      	movs	r0, #0
 800375c:	f003 f8f8 	bl	8006950 <BSP_LCD_Refresh>
  /* USER CODE END APP_BLE_Init_2 */

  return;
 8003760:	bf00      	nop
}
 8003762:	37b4      	adds	r7, #180	@ 0xb4
 8003764:	46bd      	mov	sp, r7
 8003766:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003768:	080141ec 	.word	0x080141ec
 800376c:	0800e839 	.word	0x0800e839
 8003770:	08014098 	.word	0x08014098
 8003774:	080140d0 	.word	0x080140d0
 8003778:	200005f8 	.word	0x200005f8
 800377c:	0800435d 	.word	0x0800435d
 8003780:	080044e9 	.word	0x080044e9
 8003784:	080140f8 	.word	0x080140f8
 8003788:	0801413c 	.word	0x0801413c
 800378c:	20000684 	.word	0x20000684
 8003790:	20000685 	.word	0x20000685
 8003794:	080043b5 	.word	0x080043b5
 8003798:	20000679 	.word	0x20000679
 800379c:	080043c5 	.word	0x080043c5
 80037a0:	2000067a 	.word	0x2000067a
 80037a4:	2000067c 	.word	0x2000067c
 80037a8:	2000067e 	.word	0x2000067e
 80037ac:	08014174 	.word	0x08014174
 80037b0:	08014194 	.word	0x08014194
 80037b4:	080141a8 	.word	0x080141a8
 80037b8:	080141bc 	.word	0x080141bc
 80037bc:	080141cc 	.word	0x080141cc
 80037c0:	080141e0 	.word	0x080141e0

080037c4 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 80037c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037c6:	b097      	sub	sp, #92	@ 0x5c
 80037c8:	af04      	add	r7, sp, #16
 80037ca:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  uint8_t           Tx_phy, Rx_phy;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 80037cc:	2392      	movs	r3, #146	@ 0x92
 80037ce:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  /* USER CODE BEGIN SVCCTL_App_Notification */
    char BdAddress[20];
    const uint8_t *bdaddr; 
  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	3301      	adds	r3, #1
 80037d6:	643b      	str	r3, [r7, #64]	@ 0x40

  switch (p_event_pckt->evt)
 80037d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	2bff      	cmp	r3, #255	@ 0xff
 80037de:	f000 81d2 	beq.w	8003b86 <SVCCTL_App_Notification+0x3c2>
 80037e2:	2bff      	cmp	r3, #255	@ 0xff
 80037e4:	f300 82b9 	bgt.w	8003d5a <SVCCTL_App_Notification+0x596>
 80037e8:	2b05      	cmp	r3, #5
 80037ea:	d002      	beq.n	80037f2 <SVCCTL_App_Notification+0x2e>
 80037ec:	2b3e      	cmp	r3, #62	@ 0x3e
 80037ee:	d07b      	beq.n	80038e8 <SVCCTL_App_Notification+0x124>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 80037f0:	e2b3      	b.n	8003d5a <SVCCTL_App_Notification+0x596>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 80037f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037f4:	3302      	adds	r3, #2
 80037f6:	623b      	str	r3, [r7, #32]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 80037f8:	6a3b      	ldr	r3, [r7, #32]
 80037fa:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80037fe:	b29a      	uxth	r2, r3
 8003800:	4ba3      	ldr	r3, [pc, #652]	@ (8003a90 <SVCCTL_App_Notification+0x2cc>)
 8003802:	8adb      	ldrh	r3, [r3, #22]
 8003804:	429a      	cmp	r2, r3
 8003806:	d114      	bne.n	8003832 <SVCCTL_App_Notification+0x6e>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8003808:	4ba1      	ldr	r3, [pc, #644]	@ (8003a90 <SVCCTL_App_Notification+0x2cc>)
 800380a:	2200      	movs	r2, #0
 800380c:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800380e:	4ba0      	ldr	r3, [pc, #640]	@ (8003a90 <SVCCTL_App_Notification+0x2cc>)
 8003810:	2200      	movs	r2, #0
 8003812:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 8003816:	489f      	ldr	r0, [pc, #636]	@ (8003a94 <SVCCTL_App_Notification+0x2d0>)
 8003818:	f00e f90a 	bl	8011a30 <puts>
                    p_disconnection_complete_event->Connection_Handle,
 800381c:	6a3b      	ldr	r3, [r7, #32]
 800381e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003822:	b29b      	uxth	r3, r3
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 8003824:	4619      	mov	r1, r3
                    p_disconnection_complete_event->Reason);
 8003826:	6a3b      	ldr	r3, [r7, #32]
 8003828:	78db      	ldrb	r3, [r3, #3]
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 800382a:	461a      	mov	r2, r3
 800382c:	489a      	ldr	r0, [pc, #616]	@ (8003a98 <SVCCTL_App_Notification+0x2d4>)
 800382e:	f00e f88f 	bl	8011950 <iprintf>
      Adv_Request(APP_BLE_FAST_ADV);
 8003832:	2001      	movs	r0, #1
 8003834:	f000 fca2 	bl	800417c <Adv_Request>
      HandleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 8003838:	4b98      	ldr	r3, [pc, #608]	@ (8003a9c <SVCCTL_App_Notification+0x2d8>)
 800383a:	2201      	movs	r2, #1
 800383c:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800383e:	4b94      	ldr	r3, [pc, #592]	@ (8003a90 <SVCCTL_App_Notification+0x2cc>)
 8003840:	8ada      	ldrh	r2, [r3, #22]
 8003842:	4b96      	ldr	r3, [pc, #600]	@ (8003a9c <SVCCTL_App_Notification+0x2d8>)
 8003844:	805a      	strh	r2, [r3, #2]
      P2PS_APP_Notification(&HandleNotification);
 8003846:	4895      	ldr	r0, [pc, #596]	@ (8003a9c <SVCCTL_App_Notification+0x2d8>)
 8003848:	f000 ff4e 	bl	80046e8 <P2PS_APP_Notification>
      bdaddr= BleGetBdAddress();
 800384c:	f000 fd42 	bl	80042d4 <BleGetBdAddress>
 8003850:	6278      	str	r0, [r7, #36]	@ 0x24
      sprintf(BdAddress, "BD_ad=%02x%02x%02x%02x%02x%02x", bdaddr[5], bdaddr[4], bdaddr[3], bdaddr[2], bdaddr[1], bdaddr[0]);
 8003852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003854:	3305      	adds	r3, #5
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	461d      	mov	r5, r3
 800385a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800385c:	3304      	adds	r3, #4
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	461e      	mov	r6, r3
 8003862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003864:	3303      	adds	r3, #3
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	461a      	mov	r2, r3
 800386a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800386c:	3302      	adds	r3, #2
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	4619      	mov	r1, r3
 8003872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003874:	3301      	adds	r3, #1
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	461c      	mov	r4, r3
 800387a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	f107 0008 	add.w	r0, r7, #8
 8003882:	9303      	str	r3, [sp, #12]
 8003884:	9402      	str	r4, [sp, #8]
 8003886:	9101      	str	r1, [sp, #4]
 8003888:	9200      	str	r2, [sp, #0]
 800388a:	4633      	mov	r3, r6
 800388c:	462a      	mov	r2, r5
 800388e:	4984      	ldr	r1, [pc, #528]	@ (8003aa0 <SVCCTL_App_Notification+0x2dc>)
 8003890:	f00d ff7a 	bl	8011788 <siprintf>
      BSP_LCD_Clear(0,SSD1315_COLOR_BLACK);
 8003894:	2100      	movs	r1, #0
 8003896:	2000      	movs	r0, #0
 8003898:	f003 f982 	bl	8006ba0 <BSP_LCD_Clear>
      BSP_LCD_Refresh(0);
 800389c:	2000      	movs	r0, #0
 800389e:	f003 f857 	bl	8006950 <BSP_LCD_Refresh>
      UTIL_LCD_DisplayStringAt(0, 0, (uint8_t *)"ST BLE P2P Server", CENTER_MODE);
 80038a2:	2301      	movs	r3, #1
 80038a4:	4a7f      	ldr	r2, [pc, #508]	@ (8003aa4 <SVCCTL_App_Notification+0x2e0>)
 80038a6:	2100      	movs	r1, #0
 80038a8:	2000      	movs	r0, #0
 80038aa:	f00c fe01 	bl	80104b0 <UTIL_LCD_DisplayStringAt>
      UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)BdAddress, LEFT_MODE);
 80038ae:	f00c fd9d 	bl	80103ec <UTIL_LCD_GetFont>
 80038b2:	4603      	mov	r3, r0
 80038b4:	88db      	ldrh	r3, [r3, #6]
 80038b6:	4619      	mov	r1, r3
 80038b8:	f107 0208 	add.w	r2, r7, #8
 80038bc:	2303      	movs	r3, #3
 80038be:	2000      	movs	r0, #0
 80038c0:	f00c fdf6 	bl	80104b0 <UTIL_LCD_DisplayStringAt>
      UTIL_LCD_DisplayStringAt(0, LINE(3), (uint8_t *)"ADVERTISING", LEFT_MODE);
 80038c4:	f00c fd92 	bl	80103ec <UTIL_LCD_GetFont>
 80038c8:	4603      	mov	r3, r0
 80038ca:	88db      	ldrh	r3, [r3, #6]
 80038cc:	461a      	mov	r2, r3
 80038ce:	4613      	mov	r3, r2
 80038d0:	005b      	lsls	r3, r3, #1
 80038d2:	4413      	add	r3, r2
 80038d4:	4619      	mov	r1, r3
 80038d6:	2303      	movs	r3, #3
 80038d8:	4a73      	ldr	r2, [pc, #460]	@ (8003aa8 <SVCCTL_App_Notification+0x2e4>)
 80038da:	2000      	movs	r0, #0
 80038dc:	f00c fde8 	bl	80104b0 <UTIL_LCD_DisplayStringAt>
      BSP_LCD_Refresh(0);
 80038e0:	2000      	movs	r0, #0
 80038e2:	f003 f835 	bl	8006950 <BSP_LCD_Refresh>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 80038e6:	e23b      	b.n	8003d60 <SVCCTL_App_Notification+0x59c>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 80038e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038ea:	3302      	adds	r3, #2
 80038ec:	637b      	str	r3, [r7, #52]	@ 0x34
      switch (p_meta_evt->subevent)
 80038ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	2b0c      	cmp	r3, #12
 80038f4:	d033      	beq.n	800395e <SVCCTL_App_Notification+0x19a>
 80038f6:	2b0c      	cmp	r3, #12
 80038f8:	f300 8143 	bgt.w	8003b82 <SVCCTL_App_Notification+0x3be>
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d06c      	beq.n	80039da <SVCCTL_App_Notification+0x216>
 8003900:	2b03      	cmp	r3, #3
 8003902:	f040 813e 	bne.w	8003b82 <SVCCTL_App_Notification+0x3be>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 8003906:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003908:	3301      	adds	r3, #1
 800390a:	62fb      	str	r3, [r7, #44]	@ 0x2c
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 800390c:	4867      	ldr	r0, [pc, #412]	@ (8003aac <SVCCTL_App_Notification+0x2e8>)
 800390e:	f00e f88f 	bl	8011a30 <puts>
                       p_connection_update_complete_event->Conn_Interval*1.25,
 8003912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003914:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8003918:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800391a:	4618      	mov	r0, r3
 800391c:	f7fc fdea 	bl	80004f4 <__aeabi_i2d>
 8003920:	f04f 0200 	mov.w	r2, #0
 8003924:	4b62      	ldr	r3, [pc, #392]	@ (8003ab0 <SVCCTL_App_Notification+0x2ec>)
 8003926:	f7fc fe4f 	bl	80005c8 <__aeabi_dmul>
 800392a:	4602      	mov	r2, r0
 800392c:	460b      	mov	r3, r1
 800392e:	4610      	mov	r0, r2
 8003930:	4619      	mov	r1, r3
                       p_connection_update_complete_event->Conn_Latency,
 8003932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003934:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8003938:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800393a:	461c      	mov	r4, r3
                       p_connection_update_complete_event->Supervision_Timeout*10);
 800393c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800393e:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8003942:	b29b      	uxth	r3, r3
 8003944:	461a      	mov	r2, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 8003946:	4613      	mov	r3, r2
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	4413      	add	r3, r2
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	9301      	str	r3, [sp, #4]
 8003950:	9400      	str	r4, [sp, #0]
 8003952:	4602      	mov	r2, r0
 8003954:	460b      	mov	r3, r1
 8003956:	4857      	ldr	r0, [pc, #348]	@ (8003ab4 <SVCCTL_App_Notification+0x2f0>)
 8003958:	f00d fffa 	bl	8011950 <iprintf>
          break;
 800395c:	e112      	b.n	8003b84 <SVCCTL_App_Notification+0x3c0>
          p_evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)p_meta_evt->data;
 800395e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003960:	3301      	adds	r3, #1
 8003962:	633b      	str	r3, [r7, #48]	@ 0x30
          APP_DBG_MSG("==>> HCI_LE_PHY_UPDATE_COMPLETE_SUBEVT_CODE - ");
 8003964:	4854      	ldr	r0, [pc, #336]	@ (8003ab8 <SVCCTL_App_Notification+0x2f4>)
 8003966:	f00d fff3 	bl	8011950 <iprintf>
          if (p_evt_le_phy_update_complete->Status == 0)
 800396a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d103      	bne.n	800397a <SVCCTL_App_Notification+0x1b6>
            APP_DBG_MSG("status ok \n");
 8003972:	4852      	ldr	r0, [pc, #328]	@ (8003abc <SVCCTL_App_Notification+0x2f8>)
 8003974:	f00e f85c 	bl	8011a30 <puts>
 8003978:	e002      	b.n	8003980 <SVCCTL_App_Notification+0x1bc>
            APP_DBG_MSG("status nok \n");
 800397a:	4851      	ldr	r0, [pc, #324]	@ (8003ac0 <SVCCTL_App_Notification+0x2fc>)
 800397c:	f00e f858 	bl	8011a30 <puts>
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, &Tx_phy, &Rx_phy);
 8003980:	4b43      	ldr	r3, [pc, #268]	@ (8003a90 <SVCCTL_App_Notification+0x2cc>)
 8003982:	8adb      	ldrh	r3, [r3, #22]
 8003984:	f107 021e 	add.w	r2, r7, #30
 8003988:	f107 011f 	add.w	r1, r7, #31
 800398c:	4618      	mov	r0, r3
 800398e:	f00a fce7 	bl	800e360 <hci_le_read_phy>
 8003992:	4603      	mov	r3, r0
 8003994:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
          if (ret != BLE_STATUS_SUCCESS)
 8003998:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800399c:	2b00      	cmp	r3, #0
 800399e:	d003      	beq.n	80039a8 <SVCCTL_App_Notification+0x1e4>
            APP_DBG_MSG("==>> hci_le_read_phy : fail\n\r");
 80039a0:	4848      	ldr	r0, [pc, #288]	@ (8003ac4 <SVCCTL_App_Notification+0x300>)
 80039a2:	f00d ffd5 	bl	8011950 <iprintf>
          break;
 80039a6:	e0ed      	b.n	8003b84 <SVCCTL_App_Notification+0x3c0>
            APP_DBG_MSG("==>> hci_le_read_phy - Success \n");
 80039a8:	4847      	ldr	r0, [pc, #284]	@ (8003ac8 <SVCCTL_App_Notification+0x304>)
 80039aa:	f00e f841 	bl	8011a30 <puts>
            if ((Tx_phy == TX_2M) && (Rx_phy == RX_2M))
 80039ae:	7ffb      	ldrb	r3, [r7, #31]
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d10a      	bne.n	80039ca <SVCCTL_App_Notification+0x206>
 80039b4:	7fbb      	ldrb	r3, [r7, #30]
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d107      	bne.n	80039ca <SVCCTL_App_Notification+0x206>
              APP_DBG_MSG("==>> PHY Param  TX= %d, RX= %d \n\r", Tx_phy, Rx_phy);
 80039ba:	7ffb      	ldrb	r3, [r7, #31]
 80039bc:	4619      	mov	r1, r3
 80039be:	7fbb      	ldrb	r3, [r7, #30]
 80039c0:	461a      	mov	r2, r3
 80039c2:	4842      	ldr	r0, [pc, #264]	@ (8003acc <SVCCTL_App_Notification+0x308>)
 80039c4:	f00d ffc4 	bl	8011950 <iprintf>
          break;
 80039c8:	e0dc      	b.n	8003b84 <SVCCTL_App_Notification+0x3c0>
              APP_DBG_MSG("==>> PHY Param  TX= %d, RX= %d \n\r", Tx_phy, Rx_phy);
 80039ca:	7ffb      	ldrb	r3, [r7, #31]
 80039cc:	4619      	mov	r1, r3
 80039ce:	7fbb      	ldrb	r3, [r7, #30]
 80039d0:	461a      	mov	r2, r3
 80039d2:	483e      	ldr	r0, [pc, #248]	@ (8003acc <SVCCTL_App_Notification+0x308>)
 80039d4:	f00d ffbc 	bl	8011950 <iprintf>
          break;
 80039d8:	e0d4      	b.n	8003b84 <SVCCTL_App_Notification+0x3c0>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 80039da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039dc:	3301      	adds	r3, #1
 80039de:	62bb      	str	r3, [r7, #40]	@ 0x28
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 80039e0:	4b2b      	ldr	r3, [pc, #172]	@ (8003a90 <SVCCTL_App_Notification+0x2cc>)
 80039e2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7fe fd24 	bl	8002434 <HW_TS_Stop>
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 80039ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039ee:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	4619      	mov	r1, r3
 80039f6:	4836      	ldr	r0, [pc, #216]	@ (8003ad0 <SVCCTL_App_Notification+0x30c>)
 80039f8:	f00d ffaa 	bl	8011950 <iprintf>
                      p_connection_complete_event->Peer_Address[5],
 80039fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039fe:	7a9b      	ldrb	r3, [r3, #10]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 8003a00:	4618      	mov	r0, r3
                      p_connection_complete_event->Peer_Address[4],
 8003a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a04:	7a5b      	ldrb	r3, [r3, #9]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 8003a06:	461c      	mov	r4, r3
                      p_connection_complete_event->Peer_Address[3],
 8003a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a0a:	7a1b      	ldrb	r3, [r3, #8]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 8003a0c:	461d      	mov	r5, r3
                      p_connection_complete_event->Peer_Address[2],
 8003a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a10:	79db      	ldrb	r3, [r3, #7]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 8003a12:	461a      	mov	r2, r3
                      p_connection_complete_event->Peer_Address[1],
 8003a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a16:	799b      	ldrb	r3, [r3, #6]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 8003a18:	4619      	mov	r1, r3
                      p_connection_complete_event->Peer_Address[0]);
 8003a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a1c:	795b      	ldrb	r3, [r3, #5]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 8003a1e:	9302      	str	r3, [sp, #8]
 8003a20:	9101      	str	r1, [sp, #4]
 8003a22:	9200      	str	r2, [sp, #0]
 8003a24:	462b      	mov	r3, r5
 8003a26:	4622      	mov	r2, r4
 8003a28:	4601      	mov	r1, r0
 8003a2a:	482a      	ldr	r0, [pc, #168]	@ (8003ad4 <SVCCTL_App_Notification+0x310>)
 8003a2c:	f00d ff90 	bl	8011950 <iprintf>
                      p_connection_complete_event->Conn_Interval*1.25,
 8003a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a32:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8003a36:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7fc fd5b 	bl	80004f4 <__aeabi_i2d>
 8003a3e:	f04f 0200 	mov.w	r2, #0
 8003a42:	4b1b      	ldr	r3, [pc, #108]	@ (8003ab0 <SVCCTL_App_Notification+0x2ec>)
 8003a44:	f7fc fdc0 	bl	80005c8 <__aeabi_dmul>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	460b      	mov	r3, r1
 8003a4c:	4610      	mov	r0, r2
 8003a4e:	4619      	mov	r1, r3
                      p_connection_complete_event->Conn_Latency,
 8003a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a52:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8003a56:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 8003a58:	461c      	mov	r4, r3
                      p_connection_complete_event->Supervision_Timeout*10
 8003a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a5c:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	461a      	mov	r2, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 8003a64:	4613      	mov	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4413      	add	r3, r2
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	9301      	str	r3, [sp, #4]
 8003a6e:	9400      	str	r4, [sp, #0]
 8003a70:	4602      	mov	r2, r0
 8003a72:	460b      	mov	r3, r1
 8003a74:	480f      	ldr	r0, [pc, #60]	@ (8003ab4 <SVCCTL_App_Notification+0x2f0>)
 8003a76:	f00d ff6b 	bl	8011950 <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8003a7a:	4b05      	ldr	r3, [pc, #20]	@ (8003a90 <SVCCTL_App_Notification+0x2cc>)
 8003a7c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8003a80:	2b04      	cmp	r3, #4
 8003a82:	d129      	bne.n	8003ad8 <SVCCTL_App_Notification+0x314>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8003a84:	4b02      	ldr	r3, [pc, #8]	@ (8003a90 <SVCCTL_App_Notification+0x2cc>)
 8003a86:	2206      	movs	r2, #6
 8003a88:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8003a8c:	e028      	b.n	8003ae0 <SVCCTL_App_Notification+0x31c>
 8003a8e:	bf00      	nop
 8003a90:	200005f8 	.word	0x200005f8
 8003a94:	08014228 	.word	0x08014228
 8003a98:	08014254 	.word	0x08014254
 8003a9c:	20000680 	.word	0x20000680
 8003aa0:	08014174 	.word	0x08014174
 8003aa4:	080141cc 	.word	0x080141cc
 8003aa8:	080141e0 	.word	0x080141e0
 8003aac:	08014290 	.word	0x08014290
 8003ab0:	3ff40000 	.word	0x3ff40000
 8003ab4:	080142c4 	.word	0x080142c4
 8003ab8:	08014330 	.word	0x08014330
 8003abc:	08014360 	.word	0x08014360
 8003ac0:	0801436c 	.word	0x0801436c
 8003ac4:	08014378 	.word	0x08014378
 8003ac8:	08014398 	.word	0x08014398
 8003acc:	080143b8 	.word	0x080143b8
 8003ad0:	080143dc 	.word	0x080143dc
 8003ad4:	08014424 	.word	0x08014424
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8003ad8:	4ba4      	ldr	r3, [pc, #656]	@ (8003d6c <SVCCTL_App_Notification+0x5a8>)
 8003ada:	2205      	movs	r2, #5
 8003adc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8003ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ae2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	4ba0      	ldr	r3, [pc, #640]	@ (8003d6c <SVCCTL_App_Notification+0x5a8>)
 8003aea:	82da      	strh	r2, [r3, #22]
          HandleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 8003aec:	4ba0      	ldr	r3, [pc, #640]	@ (8003d70 <SVCCTL_App_Notification+0x5ac>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8003af2:	4b9e      	ldr	r3, [pc, #632]	@ (8003d6c <SVCCTL_App_Notification+0x5a8>)
 8003af4:	8ada      	ldrh	r2, [r3, #22]
 8003af6:	4b9e      	ldr	r3, [pc, #632]	@ (8003d70 <SVCCTL_App_Notification+0x5ac>)
 8003af8:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&HandleNotification);
 8003afa:	489d      	ldr	r0, [pc, #628]	@ (8003d70 <SVCCTL_App_Notification+0x5ac>)
 8003afc:	f000 fdf4 	bl	80046e8 <P2PS_APP_Notification>
          bdaddr= BleGetBdAddress();
 8003b00:	f000 fbe8 	bl	80042d4 <BleGetBdAddress>
 8003b04:	6278      	str	r0, [r7, #36]	@ 0x24
          sprintf(BdAddress, "BD_ad=%02x%02x%02x%02x%02x%02x", bdaddr[5],bdaddr[4],bdaddr[3],bdaddr[2],bdaddr[1],bdaddr[0]);
 8003b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b08:	3305      	adds	r3, #5
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	461d      	mov	r5, r3
 8003b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b10:	3304      	adds	r3, #4
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	461e      	mov	r6, r3
 8003b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b18:	3303      	adds	r3, #3
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b20:	3302      	adds	r3, #2
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	4619      	mov	r1, r3
 8003b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b28:	3301      	adds	r3, #1
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	461c      	mov	r4, r3
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	f107 0008 	add.w	r0, r7, #8
 8003b36:	9303      	str	r3, [sp, #12]
 8003b38:	9402      	str	r4, [sp, #8]
 8003b3a:	9101      	str	r1, [sp, #4]
 8003b3c:	9200      	str	r2, [sp, #0]
 8003b3e:	4633      	mov	r3, r6
 8003b40:	462a      	mov	r2, r5
 8003b42:	498c      	ldr	r1, [pc, #560]	@ (8003d74 <SVCCTL_App_Notification+0x5b0>)
 8003b44:	f00d fe20 	bl	8011788 <siprintf>
          UTIL_LCD_DisplayStringAt(0, LINE(1), (uint8_t *)BdAddress, LEFT_MODE);
 8003b48:	f00c fc50 	bl	80103ec <UTIL_LCD_GetFont>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	88db      	ldrh	r3, [r3, #6]
 8003b50:	4619      	mov	r1, r3
 8003b52:	f107 0208 	add.w	r2, r7, #8
 8003b56:	2303      	movs	r3, #3
 8003b58:	2000      	movs	r0, #0
 8003b5a:	f00c fca9 	bl	80104b0 <UTIL_LCD_DisplayStringAt>
          UTIL_LCD_DisplayStringAt(0, LINE(3), (uint8_t *)"CONNECTED  ", LEFT_MODE);
 8003b5e:	f00c fc45 	bl	80103ec <UTIL_LCD_GetFont>
 8003b62:	4603      	mov	r3, r0
 8003b64:	88db      	ldrh	r3, [r3, #6]
 8003b66:	461a      	mov	r2, r3
 8003b68:	4613      	mov	r3, r2
 8003b6a:	005b      	lsls	r3, r3, #1
 8003b6c:	4413      	add	r3, r2
 8003b6e:	4619      	mov	r1, r3
 8003b70:	2303      	movs	r3, #3
 8003b72:	4a81      	ldr	r2, [pc, #516]	@ (8003d78 <SVCCTL_App_Notification+0x5b4>)
 8003b74:	2000      	movs	r0, #0
 8003b76:	f00c fc9b 	bl	80104b0 <UTIL_LCD_DisplayStringAt>
          BSP_LCD_Refresh(0);
 8003b7a:	2000      	movs	r0, #0
 8003b7c:	f002 fee8 	bl	8006950 <BSP_LCD_Refresh>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8003b80:	e000      	b.n	8003b84 <SVCCTL_App_Notification+0x3c0>
          break;
 8003b82:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8003b84:	e0ec      	b.n	8003d60 <SVCCTL_App_Notification+0x59c>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8003b86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b88:	3302      	adds	r3, #2
 8003b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      switch (p_blecore_evt->ecode)
 8003b8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b8e:	881b      	ldrh	r3, [r3, #0]
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8003b96:	4293      	cmp	r3, r2
 8003b98:	f000 80d5 	beq.w	8003d46 <SVCCTL_App_Notification+0x582>
 8003b9c:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	f300 80dc 	bgt.w	8003d5e <SVCCTL_App_Notification+0x59a>
 8003ba6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003baa:	f000 80bc 	beq.w	8003d26 <SVCCTL_App_Notification+0x562>
 8003bae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bb2:	f300 80d4 	bgt.w	8003d5e <SVCCTL_App_Notification+0x59a>
 8003bb6:	2b04      	cmp	r3, #4
 8003bb8:	f000 80bd 	beq.w	8003d36 <SVCCTL_App_Notification+0x572>
 8003bbc:	2b04      	cmp	r3, #4
 8003bbe:	f2c0 80ce 	blt.w	8003d5e <SVCCTL_App_Notification+0x59a>
 8003bc2:	f240 420a 	movw	r2, #1034	@ 0x40a
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	f300 80c9 	bgt.w	8003d5e <SVCCTL_App_Notification+0x59a>
 8003bcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bd0:	f2c0 80c5 	blt.w	8003d5e <SVCCTL_App_Notification+0x59a>
 8003bd4:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8003bd8:	2b0a      	cmp	r3, #10
 8003bda:	f200 80c0 	bhi.w	8003d5e <SVCCTL_App_Notification+0x59a>
 8003bde:	a201      	add	r2, pc, #4	@ (adr r2, 8003be4 <SVCCTL_App_Notification+0x420>)
 8003be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be4:	08003c11 	.word	0x08003c11
 8003be8:	08003cf1 	.word	0x08003cf1
 8003bec:	08003c19 	.word	0x08003c19
 8003bf0:	08003c4f 	.word	0x08003c4f
 8003bf4:	08003d5f 	.word	0x08003d5f
 8003bf8:	08003c57 	.word	0x08003c57
 8003bfc:	08003d5f 	.word	0x08003d5f
 8003c00:	08003d2f 	.word	0x08003d2f
 8003c04:	08003c8b 	.word	0x08003c8b
 8003c08:	08003c9b 	.word	0x08003c9b
 8003c0c:	08003c93 	.word	0x08003c93
          APP_DBG_MSG(">>== ACI_GAP_LIMITED_DISCOVERABLE_VSEVT_CODE \n");
 8003c10:	485a      	ldr	r0, [pc, #360]	@ (8003d7c <SVCCTL_App_Notification+0x5b8>)
 8003c12:	f00d ff0d 	bl	8011a30 <puts>
          break; /* ACI_GAP_LIMITED_DISCOVERABLE_VSEVT_CODE */
 8003c16:	e09f      	b.n	8003d58 <SVCCTL_App_Notification+0x594>
          APP_DBG_MSG(">>== ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 8003c18:	4859      	ldr	r0, [pc, #356]	@ (8003d80 <SVCCTL_App_Notification+0x5bc>)
 8003c1a:	f00d ff09 	bl	8011a30 <puts>
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,123456);
 8003c1e:	4b53      	ldr	r3, [pc, #332]	@ (8003d6c <SVCCTL_App_Notification+0x5a8>)
 8003c20:	8adb      	ldrh	r3, [r3, #22]
 8003c22:	4958      	ldr	r1, [pc, #352]	@ (8003d84 <SVCCTL_App_Notification+0x5c0>)
 8003c24:	4618      	mov	r0, r3
 8003c26:	f009 fcd1 	bl	800d5cc <aci_gap_pass_key_resp>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
          if (ret != BLE_STATUS_SUCCESS)
 8003c30:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d006      	beq.n	8003c46 <SVCCTL_App_Notification+0x482>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Fail, reason: 0x%x\n", ret);
 8003c38:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	4852      	ldr	r0, [pc, #328]	@ (8003d88 <SVCCTL_App_Notification+0x5c4>)
 8003c40:	f00d fe86 	bl	8011950 <iprintf>
          break; /* ACI_GAP_PASS_KEY_REQ_VSEVT_CODE */
 8003c44:	e088      	b.n	8003d58 <SVCCTL_App_Notification+0x594>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Success \n");
 8003c46:	4851      	ldr	r0, [pc, #324]	@ (8003d8c <SVCCTL_App_Notification+0x5c8>)
 8003c48:	f00d fef2 	bl	8011a30 <puts>
          break; /* ACI_GAP_PASS_KEY_REQ_VSEVT_CODE */
 8003c4c:	e084      	b.n	8003d58 <SVCCTL_App_Notification+0x594>
          APP_DBG_MSG(">>== ACI_GAP_AUTHORIZATION_REQ_VSEVT_CODE\n");
 8003c4e:	4850      	ldr	r0, [pc, #320]	@ (8003d90 <SVCCTL_App_Notification+0x5cc>)
 8003c50:	f00d feee 	bl	8011a30 <puts>
          break; /* ACI_GAP_AUTHORIZATION_REQ_VSEVT_CODE */
 8003c54:	e080      	b.n	8003d58 <SVCCTL_App_Notification+0x594>
          APP_DBG_MSG("==>> ACI_GAP_BOND_LOST_VSEVT_CODE \n");
 8003c56:	484f      	ldr	r0, [pc, #316]	@ (8003d94 <SVCCTL_App_Notification+0x5d0>)
 8003c58:	f00d feea 	bl	8011a30 <puts>
          ret = aci_gap_allow_rebond(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8003c5c:	4b43      	ldr	r3, [pc, #268]	@ (8003d6c <SVCCTL_App_Notification+0x5a8>)
 8003c5e:	8adb      	ldrh	r3, [r3, #22]
 8003c60:	4618      	mov	r0, r3
 8003c62:	f009 fe5d 	bl	800d920 <aci_gap_allow_rebond>
 8003c66:	4603      	mov	r3, r0
 8003c68:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
          if (ret != BLE_STATUS_SUCCESS)
 8003c6c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d006      	beq.n	8003c82 <SVCCTL_App_Notification+0x4be>
            APP_DBG_MSG("==>> aci_gap_allow_rebond : Fail, reason: 0x%x\n", ret);
 8003c74:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003c78:	4619      	mov	r1, r3
 8003c7a:	4847      	ldr	r0, [pc, #284]	@ (8003d98 <SVCCTL_App_Notification+0x5d4>)
 8003c7c:	f00d fe68 	bl	8011950 <iprintf>
          break; /* ACI_GAP_BOND_LOST_VSEVT_CODE */
 8003c80:	e06a      	b.n	8003d58 <SVCCTL_App_Notification+0x594>
            APP_DBG_MSG("==>> aci_gap_allow_rebond : Success \n");
 8003c82:	4846      	ldr	r0, [pc, #280]	@ (8003d9c <SVCCTL_App_Notification+0x5d8>)
 8003c84:	f00d fed4 	bl	8011a30 <puts>
          break; /* ACI_GAP_BOND_LOST_VSEVT_CODE */
 8003c88:	e066      	b.n	8003d58 <SVCCTL_App_Notification+0x594>
          APP_DBG_MSG(">>== ACI_GAP_ADDR_NOT_RESOLVED_VSEVT_CODE \n");
 8003c8a:	4845      	ldr	r0, [pc, #276]	@ (8003da0 <SVCCTL_App_Notification+0x5dc>)
 8003c8c:	f00d fed0 	bl	8011a30 <puts>
          break; /* ACI_GAP_ADDR_NOT_RESOLVED_VSEVT_CODE */
 8003c90:	e062      	b.n	8003d58 <SVCCTL_App_Notification+0x594>
          APP_DBG_MSG(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 8003c92:	4844      	ldr	r0, [pc, #272]	@ (8003da4 <SVCCTL_App_Notification+0x5e0>)
 8003c94:	f00d fecc 	bl	8011a30 <puts>
          break; /* ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE */    
 8003c98:	e05e      	b.n	8003d58 <SVCCTL_App_Notification+0x594>
          APP_DBG_MSG(">>== ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE\n");
 8003c9a:	4843      	ldr	r0, [pc, #268]	@ (8003da8 <SVCCTL_App_Notification+0x5e4>)
 8003c9c:	f00d fec8 	bl	8011a30 <puts>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(p_blecore_evt->data))->Numeric_Value);
 8003ca0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ca2:	3302      	adds	r3, #2
          APP_DBG_MSG("     - numeric_value = %ld\n",
 8003ca4:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8003ca8:	4619      	mov	r1, r3
 8003caa:	4840      	ldr	r0, [pc, #256]	@ (8003dac <SVCCTL_App_Notification+0x5e8>)
 8003cac:	f00d fe50 	bl	8011950 <iprintf>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(p_blecore_evt->data))->Numeric_Value);
 8003cb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cb2:	3302      	adds	r3, #2
          APP_DBG_MSG("     - Hex_value = %lx\n",
 8003cb4:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8003cb8:	4619      	mov	r1, r3
 8003cba:	483d      	ldr	r0, [pc, #244]	@ (8003db0 <SVCCTL_App_Notification+0x5ec>)
 8003cbc:	f00d fe48 	bl	8011950 <iprintf>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES); /* CONFIRM_YES = 1 */
 8003cc0:	4b2a      	ldr	r3, [pc, #168]	@ (8003d6c <SVCCTL_App_Notification+0x5a8>)
 8003cc2:	8adb      	ldrh	r3, [r3, #22]
 8003cc4:	2101      	movs	r1, #1
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f009 fe7e 	bl	800d9c8 <aci_gap_numeric_comparison_value_confirm_yesno>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
          if (ret != BLE_STATUS_SUCCESS)
 8003cd2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d006      	beq.n	8003ce8 <SVCCTL_App_Notification+0x524>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Fail, reason: 0x%x\n", ret);
 8003cda:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003cde:	4619      	mov	r1, r3
 8003ce0:	4834      	ldr	r0, [pc, #208]	@ (8003db4 <SVCCTL_App_Notification+0x5f0>)
 8003ce2:	f00d fe35 	bl	8011950 <iprintf>
          break;
 8003ce6:	e037      	b.n	8003d58 <SVCCTL_App_Notification+0x594>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Success \n");
 8003ce8:	4833      	ldr	r0, [pc, #204]	@ (8003db8 <SVCCTL_App_Notification+0x5f4>)
 8003cea:	f00d fea1 	bl	8011a30 <puts>
          break;
 8003cee:	e033      	b.n	8003d58 <SVCCTL_App_Notification+0x594>
          pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8003cf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cf2:	3302      	adds	r3, #2
 8003cf4:	63bb      	str	r3, [r7, #56]	@ 0x38
          APP_DBG_MSG(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
 8003cf6:	4831      	ldr	r0, [pc, #196]	@ (8003dbc <SVCCTL_App_Notification+0x5f8>)
 8003cf8:	f00d fe9a 	bl	8011a30 <puts>
          if (pairing_complete->Status == 0)
 8003cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cfe:	789b      	ldrb	r3, [r3, #2]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d103      	bne.n	8003d0c <SVCCTL_App_Notification+0x548>
            APP_DBG_MSG("     - Pairing Success\n");
 8003d04:	482e      	ldr	r0, [pc, #184]	@ (8003dc0 <SVCCTL_App_Notification+0x5fc>)
 8003d06:	f00d fe93 	bl	8011a30 <puts>
 8003d0a:	e008      	b.n	8003d1e <SVCCTL_App_Notification+0x55a>
            APP_DBG_MSG("     - Pairing KO \n     - Status: 0x%x\n     - Reason: 0x%x\n",pairing_complete->Status, pairing_complete->Reason);
 8003d0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d0e:	789b      	ldrb	r3, [r3, #2]
 8003d10:	4619      	mov	r1, r3
 8003d12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d14:	78db      	ldrb	r3, [r3, #3]
 8003d16:	461a      	mov	r2, r3
 8003d18:	482a      	ldr	r0, [pc, #168]	@ (8003dc4 <SVCCTL_App_Notification+0x600>)
 8003d1a:	f00d fe19 	bl	8011950 <iprintf>
          APP_DBG_MSG("\n");
 8003d1e:	200a      	movs	r0, #10
 8003d20:	f00d fe28 	bl	8011974 <putchar>
          break;    
 8003d24:	e018      	b.n	8003d58 <SVCCTL_App_Notification+0x594>
          mutex = 1;
 8003d26:	4b28      	ldr	r3, [pc, #160]	@ (8003dc8 <SVCCTL_App_Notification+0x604>)
 8003d28:	2201      	movs	r2, #1
 8003d2a:	701a      	strb	r2, [r3, #0]
          break;
 8003d2c:	e014      	b.n	8003d58 <SVCCTL_App_Notification+0x594>
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 8003d2e:	4827      	ldr	r0, [pc, #156]	@ (8003dcc <SVCCTL_App_Notification+0x608>)
 8003d30:	f00d fe0e 	bl	8011950 <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8003d34:	e010      	b.n	8003d58 <SVCCTL_App_Notification+0x594>
          HW_TS_Start(BleApplicationContext.SwitchOffGPIO_timer_Id, (uint32_t)LED_ON_TIMEOUT);
 8003d36:	4b0d      	ldr	r3, [pc, #52]	@ (8003d6c <SVCCTL_App_Notification+0x5a8>)
 8003d38:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8003d3c:	210a      	movs	r1, #10
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7fe fbfc 	bl	800253c <HW_TS_Start>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8003d44:	e008      	b.n	8003d58 <SVCCTL_App_Notification+0x594>
          APP_DBG_MSG(">>== ACI_GATT_INDICATION_VSEVT_CODE \r");
 8003d46:	4822      	ldr	r0, [pc, #136]	@ (8003dd0 <SVCCTL_App_Notification+0x60c>)
 8003d48:	f00d fe02 	bl	8011950 <iprintf>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8003d4c:	4b07      	ldr	r3, [pc, #28]	@ (8003d6c <SVCCTL_App_Notification+0x5a8>)
 8003d4e:	8adb      	ldrh	r3, [r3, #22]
 8003d50:	4618      	mov	r0, r3
 8003d52:	f00a f94c 	bl	800dfee <aci_gatt_confirm_indication>
        break;
 8003d56:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8003d58:	e001      	b.n	8003d5e <SVCCTL_App_Notification+0x59a>
      break;
 8003d5a:	bf00      	nop
 8003d5c:	e000      	b.n	8003d60 <SVCCTL_App_Notification+0x59c>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8003d5e:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8003d60:	2301      	movs	r3, #1
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	374c      	adds	r7, #76	@ 0x4c
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	200005f8 	.word	0x200005f8
 8003d70:	20000680 	.word	0x20000680
 8003d74:	08014174 	.word	0x08014174
 8003d78:	08014474 	.word	0x08014474
 8003d7c:	08014480 	.word	0x08014480
 8003d80:	080144b0 	.word	0x080144b0
 8003d84:	0001e240 	.word	0x0001e240
 8003d88:	080144d8 	.word	0x080144d8
 8003d8c:	0801450c 	.word	0x0801450c
 8003d90:	08014534 	.word	0x08014534
 8003d94:	08014560 	.word	0x08014560
 8003d98:	08014584 	.word	0x08014584
 8003d9c:	080145b4 	.word	0x080145b4
 8003da0:	080145dc 	.word	0x080145dc
 8003da4:	08014608 	.word	0x08014608
 8003da8:	08014638 	.word	0x08014638
 8003dac:	0801466c 	.word	0x0801466c
 8003db0:	08014688 	.word	0x08014688
 8003db4:	080146a0 	.word	0x080146a0
 8003db8:	080146f0 	.word	0x080146f0
 8003dbc:	08014738 	.word	0x08014738
 8003dc0:	08014764 	.word	0x08014764
 8003dc4:	0801477c 	.word	0x0801477c
 8003dc8:	20000685 	.word	0x20000685
 8003dcc:	080147b8 	.word	0x080147b8
 8003dd0:	080147e0 	.word	0x080147e0

08003dd4 <APP_BLE_Key_Button1_Action>:
  return BleApplicationContext.Device_Connection_Status;
}

/* USER CODE BEGIN FD*/
void APP_BLE_Key_Button1_Action(void)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	af00      	add	r7, sp, #0
  P2PS_APP_SW1_Button_Action();
 8003dd8:	f000 fd82 	bl	80048e0 <P2PS_APP_SW1_Button_Action>
}
 8003ddc:	bf00      	nop
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <APP_BLE_Key_Button2_Action>:

void APP_BLE_Key_Button2_Action(void)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	af00      	add	r7, sp, #0
#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0 )    
  UTIL_SEQ_SetTask( 1<<CFG_TASK_CONN_UPDATE_REG_ID, CFG_SCH_PRIO_0);
 8003de4:	2100      	movs	r1, #0
 8003de6:	2002      	movs	r0, #2
 8003de8:	f00c ff50 	bl	8010c8c <UTIL_SEQ_SetTask>
#endif
  
  return;
 8003dec:	bf00      	nop
}
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8003df6:	4b06      	ldr	r3, [pc, #24]	@ (8003e10 <Ble_Tl_Init+0x20>)
 8003df8:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8003dfa:	4b06      	ldr	r3, [pc, #24]	@ (8003e14 <Ble_Tl_Init+0x24>)
 8003dfc:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8003dfe:	463b      	mov	r3, r7
 8003e00:	4619      	mov	r1, r3
 8003e02:	4805      	ldr	r0, [pc, #20]	@ (8003e18 <Ble_Tl_Init+0x28>)
 8003e04:	f00a fcfc 	bl	800e800 <hci_init>

  return;
 8003e08:	bf00      	nop
}
 8003e0a:	3708      	adds	r7, #8
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	20030028 	.word	0x20030028
 8003e14:	08004591 	.word	0x08004591
 8003e18:	08004559 	.word	0x08004559

08003e1c <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8003e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e1e:	b08d      	sub	sp, #52	@ 0x34
 8003e20:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8003e22:	2300      	movs	r3, #0
 8003e24:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8003e26:	2392      	movs	r3, #146	@ 0x92
 8003e28:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 8003e2a:	48a5      	ldr	r0, [pc, #660]	@ (80040c0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8003e2c:	f00d fe00 	bl	8011a30 <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8003e30:	f00a fa72 	bl	800e318 <hci_reset>
 8003e34:	4603      	mov	r3, r0
 8003e36:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8003e38:	7dfb      	ldrb	r3, [r7, #23]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d005      	beq.n	8003e4a <Ble_Hci_Gap_Gatt_Init+0x2e>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 8003e3e:	7dfb      	ldrb	r3, [r7, #23]
 8003e40:	4619      	mov	r1, r3
 8003e42:	48a0      	ldr	r0, [pc, #640]	@ (80040c4 <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 8003e44:	f00d fd84 	bl	8011950 <iprintf>
 8003e48:	e002      	b.n	8003e50 <Ble_Hci_Gap_Gatt_Init+0x34>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 8003e4a:	489f      	ldr	r0, [pc, #636]	@ (80040c8 <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 8003e4c:	f00d fdf0 	bl	8011a30 <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8003e50:	f000 fa40 	bl	80042d4 <BleGetBdAddress>
 8003e54:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBLIC_ADDRESS_OFFSET, CONFIG_DATA_PUBLIC_ADDRESS_LEN, (uint8_t*) p_bd_addr);
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	2106      	movs	r1, #6
 8003e5a:	2000      	movs	r0, #0
 8003e5c:	f00a f91c 	bl	800e098 <aci_hal_write_config_data>
 8003e60:	4603      	mov	r3, r0
 8003e62:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8003e64:	7dfb      	ldrb	r3, [r7, #23]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d005      	beq.n	8003e76 <Ble_Hci_Gap_Gatt_Init+0x5a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBLIC_ADDRESS_OFFSET, result: 0x%x \n", ret);
 8003e6a:	7dfb      	ldrb	r3, [r7, #23]
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	4897      	ldr	r0, [pc, #604]	@ (80040cc <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 8003e70:	f00d fd6e 	bl	8011950 <iprintf>
 8003e74:	e021      	b.n	8003eba <Ble_Hci_Gap_Gatt_Init+0x9e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBLIC_ADDRESS_OFFSET\n");
 8003e76:	4896      	ldr	r0, [pc, #600]	@ (80040d0 <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 8003e78:	f00d fdda 	bl	8011a30 <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	3305      	adds	r3, #5
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	4618      	mov	r0, r3
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	3304      	adds	r3, #4
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	461c      	mov	r4, r3
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	3303      	adds	r3, #3
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	461d      	mov	r5, r3
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	3302      	adds	r3, #2
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	9302      	str	r3, [sp, #8]
 8003eaa:	9101      	str	r1, [sp, #4]
 8003eac:	9200      	str	r2, [sp, #0]
 8003eae:	462b      	mov	r3, r5
 8003eb0:	4622      	mov	r2, r4
 8003eb2:	4601      	mov	r1, r0
 8003eb4:	4887      	ldr	r0, [pc, #540]	@ (80040d4 <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 8003eb6:	f00d fd4b 	bl	8011950 <iprintf>
  }

#if (CFG_BLE_ADDRESS_TYPE == GAP_PUBLIC_ADDR)
  /* BLE MAC in ADV Packet */
  a_ManufData[ sizeof(a_ManufData)-6] = p_bd_addr[5];
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	3305      	adds	r3, #5
 8003ebe:	781a      	ldrb	r2, [r3, #0]
 8003ec0:	4b85      	ldr	r3, [pc, #532]	@ (80040d8 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 8003ec2:	721a      	strb	r2, [r3, #8]
  a_ManufData[ sizeof(a_ManufData)-5] = p_bd_addr[4];
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	3304      	adds	r3, #4
 8003ec8:	781a      	ldrb	r2, [r3, #0]
 8003eca:	4b83      	ldr	r3, [pc, #524]	@ (80040d8 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 8003ecc:	725a      	strb	r2, [r3, #9]
  a_ManufData[ sizeof(a_ManufData)-4] = p_bd_addr[3];
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	3303      	adds	r3, #3
 8003ed2:	781a      	ldrb	r2, [r3, #0]
 8003ed4:	4b80      	ldr	r3, [pc, #512]	@ (80040d8 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 8003ed6:	729a      	strb	r2, [r3, #10]
  a_ManufData[ sizeof(a_ManufData)-3] = p_bd_addr[2];
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	3302      	adds	r3, #2
 8003edc:	781a      	ldrb	r2, [r3, #0]
 8003ede:	4b7e      	ldr	r3, [pc, #504]	@ (80040d8 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 8003ee0:	72da      	strb	r2, [r3, #11]
  a_ManufData[ sizeof(a_ManufData)-2] = p_bd_addr[1];
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	781a      	ldrb	r2, [r3, #0]
 8003ee8:	4b7b      	ldr	r3, [pc, #492]	@ (80040d8 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 8003eea:	731a      	strb	r2, [r3, #12]
  a_ManufData[ sizeof(a_ManufData)-1] = p_bd_addr[0];
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	781a      	ldrb	r2, [r3, #0]
 8003ef0:	4b79      	ldr	r3, [pc, #484]	@ (80040d8 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 8003ef2:	735a      	strb	r2, [r3, #13]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8003ef4:	4a79      	ldr	r2, [pc, #484]	@ (80040dc <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 8003ef6:	2110      	movs	r1, #16
 8003ef8:	2018      	movs	r0, #24
 8003efa:	f00a f8cd 	bl	800e098 <aci_hal_write_config_data>
 8003efe:	4603      	mov	r3, r0
 8003f00:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8003f02:	7dfb      	ldrb	r3, [r7, #23]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d005      	beq.n	8003f14 <Ble_Hci_Gap_Gatt_Init+0xf8>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 8003f08:	7dfb      	ldrb	r3, [r7, #23]
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	4874      	ldr	r0, [pc, #464]	@ (80040e0 <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 8003f0e:	f00d fd1f 	bl	8011950 <iprintf>
 8003f12:	e002      	b.n	8003f1a <Ble_Hci_Gap_Gatt_Init+0xfe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 8003f14:	4873      	ldr	r0, [pc, #460]	@ (80040e4 <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 8003f16:	f00d fd8b 	bl	8011a30 <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8003f1a:	4a73      	ldr	r2, [pc, #460]	@ (80040e8 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 8003f1c:	2110      	movs	r1, #16
 8003f1e:	2008      	movs	r0, #8
 8003f20:	f00a f8ba 	bl	800e098 <aci_hal_write_config_data>
 8003f24:	4603      	mov	r3, r0
 8003f26:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8003f28:	7dfb      	ldrb	r3, [r7, #23]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d005      	beq.n	8003f3a <Ble_Hci_Gap_Gatt_Init+0x11e>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 8003f2e:	7dfb      	ldrb	r3, [r7, #23]
 8003f30:	4619      	mov	r1, r3
 8003f32:	486e      	ldr	r0, [pc, #440]	@ (80040ec <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 8003f34:	f00d fd0c 	bl	8011950 <iprintf>
 8003f38:	e002      	b.n	8003f40 <Ble_Hci_Gap_Gatt_Init+0x124>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 8003f3a:	486d      	ldr	r0, [pc, #436]	@ (80040f0 <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 8003f3c:	f00d fd78 	bl	8011a30 <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8003f40:	2118      	movs	r1, #24
 8003f42:	2001      	movs	r0, #1
 8003f44:	f00a f92d 	bl	800e1a2 <aci_hal_set_tx_power_level>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8003f4c:	7dfb      	ldrb	r3, [r7, #23]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d005      	beq.n	8003f5e <Ble_Hci_Gap_Gatt_Init+0x142>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 8003f52:	7dfb      	ldrb	r3, [r7, #23]
 8003f54:	4619      	mov	r1, r3
 8003f56:	4867      	ldr	r0, [pc, #412]	@ (80040f4 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 8003f58:	f00d fcfa 	bl	8011950 <iprintf>
 8003f5c:	e002      	b.n	8003f64 <Ble_Hci_Gap_Gatt_Init+0x148>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 8003f5e:	4866      	ldr	r0, [pc, #408]	@ (80040f8 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 8003f60:	f00d fd66 	bl	8011a30 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8003f64:	f009 fd97 	bl	800da96 <aci_gatt_init>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8003f6c:	7dfb      	ldrb	r3, [r7, #23]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d005      	beq.n	8003f7e <Ble_Hci_Gap_Gatt_Init+0x162>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 8003f72:	7dfb      	ldrb	r3, [r7, #23]
 8003f74:	4619      	mov	r1, r3
 8003f76:	4861      	ldr	r0, [pc, #388]	@ (80040fc <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 8003f78:	f00d fcea 	bl	8011950 <iprintf>
 8003f7c:	e002      	b.n	8003f84 <Ble_Hci_Gap_Gatt_Init+0x168>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 8003f7e:	4860      	ldr	r0, [pc, #384]	@ (8004100 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 8003f80:	f00d fd56 	bl	8011a30 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8003f84:	2300      	movs	r3, #0
 8003f86:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8003f88:	7bfb      	ldrb	r3, [r7, #15]
 8003f8a:	f043 0301 	orr.w	r3, r3, #1
 8003f8e:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8003f90:	7bfb      	ldrb	r3, [r7, #15]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d02b      	beq.n	8003fee <Ble_Hci_Gap_Gatt_Init+0x1d2>
  {
    const char *name = "Senior";
 8003f96:	4b5b      	ldr	r3, [pc, #364]	@ (8004104 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 8003f98:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8003f9a:	1dba      	adds	r2, r7, #6
 8003f9c:	7bf8      	ldrb	r0, [r7, #15]
 8003f9e:	1cbb      	adds	r3, r7, #2
 8003fa0:	9301      	str	r3, [sp, #4]
 8003fa2:	1d3b      	adds	r3, r7, #4
 8003fa4:	9300      	str	r3, [sp, #0]
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	2207      	movs	r2, #7
 8003faa:	2100      	movs	r1, #0
 8003fac:	f009 fb75 	bl	800d69a <aci_gap_init>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	75fb      	strb	r3, [r7, #23]
                       APPBLE_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 8003fb4:	7dfb      	ldrb	r3, [r7, #23]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d005      	beq.n	8003fc6 <Ble_Hci_Gap_Gatt_Init+0x1aa>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 8003fba:	7dfb      	ldrb	r3, [r7, #23]
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	4852      	ldr	r0, [pc, #328]	@ (8004108 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 8003fc0:	f00d fcc6 	bl	8011950 <iprintf>
 8003fc4:	e002      	b.n	8003fcc <Ble_Hci_Gap_Gatt_Init+0x1b0>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 8003fc6:	4851      	ldr	r0, [pc, #324]	@ (800410c <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 8003fc8:	f00d fd32 	bl	8011a30 <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8003fcc:	88fc      	ldrh	r4, [r7, #6]
 8003fce:	88bd      	ldrh	r5, [r7, #4]
 8003fd0:	68b8      	ldr	r0, [r7, #8]
 8003fd2:	f7fc f935 	bl	8000240 <strlen>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	b2da      	uxtb	r2, r3
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	9300      	str	r3, [sp, #0]
 8003fde:	4613      	mov	r3, r2
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	4629      	mov	r1, r5
 8003fe4:	4620      	mov	r0, r4
 8003fe6:	f009 ff59 	bl	800de9c <aci_gatt_update_char_value>
 8003fea:	4603      	mov	r3, r0
 8003fec:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8003fee:	88f8      	ldrh	r0, [r7, #6]
 8003ff0:	8879      	ldrh	r1, [r7, #2]
 8003ff2:	463b      	mov	r3, r7
 8003ff4:	9300      	str	r3, [sp, #0]
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f009 ff4f 	bl	800de9c <aci_gatt_update_char_value>
 8003ffe:	4603      	mov	r3, r0
 8004000:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8004002:	2202      	movs	r2, #2
 8004004:	2102      	movs	r1, #2
 8004006:	2000      	movs	r0, #0
 8004008:	f00a fa28 	bl	800e45c <hci_le_set_default_phy>
 800400c:	4603      	mov	r3, r0
 800400e:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8004010:	7dfb      	ldrb	r3, [r7, #23]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d005      	beq.n	8004022 <Ble_Hci_Gap_Gatt_Init+0x206>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 8004016:	7dfb      	ldrb	r3, [r7, #23]
 8004018:	4619      	mov	r1, r3
 800401a:	483d      	ldr	r0, [pc, #244]	@ (8004110 <Ble_Hci_Gap_Gatt_Init+0x2f4>)
 800401c:	f00d fc98 	bl	8011950 <iprintf>
 8004020:	e002      	b.n	8004028 <Ble_Hci_Gap_Gatt_Init+0x20c>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 8004022:	483c      	ldr	r0, [pc, #240]	@ (8004114 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 8004024:	f00d fd04 	bl	8011a30 <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8004028:	4b3b      	ldr	r3, [pc, #236]	@ (8004118 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800402a:	2201      	movs	r2, #1
 800402c:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800402e:	4b3a      	ldr	r3, [pc, #232]	@ (8004118 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	4618      	mov	r0, r3
 8004034:	f009 f9b2 	bl	800d39c <aci_gap_set_io_capability>
 8004038:	4603      	mov	r3, r0
 800403a:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800403c:	7dfb      	ldrb	r3, [r7, #23]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d005      	beq.n	800404e <Ble_Hci_Gap_Gatt_Init+0x232>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 8004042:	7dfb      	ldrb	r3, [r7, #23]
 8004044:	4619      	mov	r1, r3
 8004046:	4835      	ldr	r0, [pc, #212]	@ (800411c <Ble_Hci_Gap_Gatt_Init+0x300>)
 8004048:	f00d fc82 	bl	8011950 <iprintf>
 800404c:	e002      	b.n	8004054 <Ble_Hci_Gap_Gatt_Init+0x238>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 800404e:	4834      	ldr	r0, [pc, #208]	@ (8004120 <Ble_Hci_Gap_Gatt_Init+0x304>)
 8004050:	f00d fcee 	bl	8011a30 <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8004054:	4b30      	ldr	r3, [pc, #192]	@ (8004118 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8004056:	2201      	movs	r2, #1
 8004058:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800405a:	4b2f      	ldr	r3, [pc, #188]	@ (8004118 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800405c:	2208      	movs	r2, #8
 800405e:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8004060:	4b2d      	ldr	r3, [pc, #180]	@ (8004118 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8004062:	2210      	movs	r2, #16
 8004064:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8004066:	4b2c      	ldr	r3, [pc, #176]	@ (8004118 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8004068:	2200      	movs	r2, #0
 800406a:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800406c:	4b2a      	ldr	r3, [pc, #168]	@ (8004118 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800406e:	4a2d      	ldr	r2, [pc, #180]	@ (8004124 <Ble_Hci_Gap_Gatt_Init+0x308>)
 8004070:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8004072:	4b29      	ldr	r3, [pc, #164]	@ (8004118 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8004074:	2201      	movs	r2, #1
 8004076:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8004078:	4b27      	ldr	r3, [pc, #156]	@ (8004118 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800407a:	789c      	ldrb	r4, [r3, #2]
 800407c:	4b26      	ldr	r3, [pc, #152]	@ (8004118 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800407e:	785d      	ldrb	r5, [r3, #1]
 8004080:	4b25      	ldr	r3, [pc, #148]	@ (8004118 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8004082:	791b      	ldrb	r3, [r3, #4]
 8004084:	4a24      	ldr	r2, [pc, #144]	@ (8004118 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8004086:	7952      	ldrb	r2, [r2, #5]
 8004088:	4923      	ldr	r1, [pc, #140]	@ (8004118 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800408a:	78c9      	ldrb	r1, [r1, #3]
 800408c:	4822      	ldr	r0, [pc, #136]	@ (8004118 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800408e:	6880      	ldr	r0, [r0, #8]
 8004090:	2600      	movs	r6, #0
 8004092:	9604      	str	r6, [sp, #16]
 8004094:	9003      	str	r0, [sp, #12]
 8004096:	9102      	str	r1, [sp, #8]
 8004098:	9201      	str	r2, [sp, #4]
 800409a:	9300      	str	r3, [sp, #0]
 800409c:	2300      	movs	r3, #0
 800409e:	2201      	movs	r2, #1
 80040a0:	4629      	mov	r1, r5
 80040a2:	4620      	mov	r0, r4
 80040a4:	f009 f9ce 	bl	800d444 <aci_gap_set_authentication_requirement>
 80040a8:	4603      	mov	r3, r0
 80040aa:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 80040ac:	7dfb      	ldrb	r3, [r7, #23]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d03c      	beq.n	800412c <Ble_Hci_Gap_Gatt_Init+0x310>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 80040b2:	7dfb      	ldrb	r3, [r7, #23]
 80040b4:	4619      	mov	r1, r3
 80040b6:	481c      	ldr	r0, [pc, #112]	@ (8004128 <Ble_Hci_Gap_Gatt_Init+0x30c>)
 80040b8:	f00d fc4a 	bl	8011950 <iprintf>
 80040bc:	e039      	b.n	8004132 <Ble_Hci_Gap_Gatt_Init+0x316>
 80040be:	bf00      	nop
 80040c0:	08014808 	.word	0x08014808
 80040c4:	08014834 	.word	0x08014834
 80040c8:	08014864 	.word	0x08014864
 80040cc:	08014884 	.word	0x08014884
 80040d0:	080148e8 	.word	0x080148e8
 80040d4:	0801493c 	.word	0x0801493c
 80040d8:	20000010 	.word	0x20000010
 80040dc:	08015420 	.word	0x08015420
 80040e0:	08014978 	.word	0x08014978
 80040e4:	080149d0 	.word	0x080149d0
 80040e8:	08015430 	.word	0x08015430
 80040ec:	08014a18 	.word	0x08014a18
 80040f0:	08014a70 	.word	0x08014a70
 80040f4:	08014ab8 	.word	0x08014ab8
 80040f8:	08014af8 	.word	0x08014af8
 80040fc:	08014b28 	.word	0x08014b28
 8004100:	08014b5c 	.word	0x08014b5c
 8004104:	08014b80 	.word	0x08014b80
 8004108:	08014b88 	.word	0x08014b88
 800410c:	08014bb8 	.word	0x08014bb8
 8004110:	08014bd8 	.word	0x08014bd8
 8004114:	08014c14 	.word	0x08014c14
 8004118:	200005f8 	.word	0x200005f8
 800411c:	08014c40 	.word	0x08014c40
 8004120:	08014c80 	.word	0x08014c80
 8004124:	0001b207 	.word	0x0001b207
 8004128:	08014cb0 	.word	0x08014cb0
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 800412c:	480e      	ldr	r0, [pc, #56]	@ (8004168 <Ble_Hci_Gap_Gatt_Init+0x34c>)
 800412e:	f00d fc7f 	bl	8011a30 <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8004132:	4b0e      	ldr	r3, [pc, #56]	@ (800416c <Ble_Hci_Gap_Gatt_Init+0x350>)
 8004134:	789b      	ldrb	r3, [r3, #2]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00f      	beq.n	800415a <Ble_Hci_Gap_Gatt_Init+0x33e>
  {
    ret = aci_gap_configure_whitelist();
 800413a:	f009 fbcd 	bl	800d8d8 <aci_gap_configure_filter_accept_list>
 800413e:	4603      	mov	r3, r0
 8004140:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 8004142:	7dfb      	ldrb	r3, [r7, #23]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d005      	beq.n	8004154 <Ble_Hci_Gap_Gatt_Init+0x338>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 8004148:	7dfb      	ldrb	r3, [r7, #23]
 800414a:	4619      	mov	r1, r3
 800414c:	4808      	ldr	r0, [pc, #32]	@ (8004170 <Ble_Hci_Gap_Gatt_Init+0x354>)
 800414e:	f00d fbff 	bl	8011950 <iprintf>
 8004152:	e002      	b.n	800415a <Ble_Hci_Gap_Gatt_Init+0x33e>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 8004154:	4807      	ldr	r0, [pc, #28]	@ (8004174 <Ble_Hci_Gap_Gatt_Init+0x358>)
 8004156:	f00d fc6b 	bl	8011a30 <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 800415a:	4807      	ldr	r0, [pc, #28]	@ (8004178 <Ble_Hci_Gap_Gatt_Init+0x35c>)
 800415c:	f00d fbf8 	bl	8011950 <iprintf>
}
 8004160:	bf00      	nop
 8004162:	371c      	adds	r7, #28
 8004164:	46bd      	mov	sp, r7
 8004166:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004168:	08014cfc 	.word	0x08014cfc
 800416c:	200005f8 	.word	0x200005f8
 8004170:	08014d38 	.word	0x08014d38
 8004174:	08014d78 	.word	0x08014d78
 8004178:	08014da8 	.word	0x08014da8

0800417c <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b08c      	sub	sp, #48	@ 0x30
 8004180:	af08      	add	r7, sp, #32
 8004182:	4603      	mov	r3, r0
 8004184:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8004186:	2392      	movs	r3, #146	@ 0x92
 8004188:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (NewStatus == APP_BLE_FAST_ADV)
 800418a:	79fb      	ldrb	r3, [r7, #7]
 800418c:	2b01      	cmp	r3, #1
 800418e:	d106      	bne.n	800419e <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 8004190:	4b41      	ldr	r3, [pc, #260]	@ (8004298 <Adv_Request+0x11c>)
 8004192:	881b      	ldrh	r3, [r3, #0]
 8004194:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 8004196:	4b41      	ldr	r3, [pc, #260]	@ (800429c <Adv_Request+0x120>)
 8004198:	881b      	ldrh	r3, [r3, #0]
 800419a:	81bb      	strh	r3, [r7, #12]
 800419c:	e005      	b.n	80041aa <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 800419e:	f44f 63c8 	mov.w	r3, #1600	@ 0x640
 80041a2:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 80041a4:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 80041a8:	81bb      	strh	r3, [r7, #12]

  /**
   * Stop the timer, it will be restarted for a new shot
   * It does not hurt if the timer was not running
   */
  HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 80041aa:	4b3d      	ldr	r3, [pc, #244]	@ (80042a0 <Adv_Request+0x124>)
 80041ac:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80041b0:	4618      	mov	r0, r3
 80041b2:	f7fe f93f 	bl	8002434 <HW_TS_Stop>

  if ((NewStatus == APP_BLE_LP_ADV)
 80041b6:	79fb      	ldrb	r3, [r7, #7]
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d119      	bne.n	80041f0 <Adv_Request+0x74>
      && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 80041bc:	4b38      	ldr	r3, [pc, #224]	@ (80042a0 <Adv_Request+0x124>)
 80041be:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d004      	beq.n	80041d0 <Adv_Request+0x54>
          || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 80041c6:	4b36      	ldr	r3, [pc, #216]	@ (80042a0 <Adv_Request+0x124>)
 80041c8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d10f      	bne.n	80041f0 <Adv_Request+0x74>
  {
    /* Connection in ADVERTISE mode have to stop the current advertising */
    ret = aci_gap_set_non_discoverable();
 80041d0:	f008 ffc6 	bl	800d160 <aci_gap_set_non_discoverable>
 80041d4:	4603      	mov	r3, r0
 80041d6:	72fb      	strb	r3, [r7, #11]
    if (ret != BLE_STATUS_SUCCESS)
 80041d8:	7afb      	ldrb	r3, [r7, #11]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d005      	beq.n	80041ea <Adv_Request+0x6e>
    {
      APP_DBG_MSG("==>> aci_gap_set_non_discoverable - Stop Advertising Failed , result: %d \n", ret);
 80041de:	7afb      	ldrb	r3, [r7, #11]
 80041e0:	4619      	mov	r1, r3
 80041e2:	4830      	ldr	r0, [pc, #192]	@ (80042a4 <Adv_Request+0x128>)
 80041e4:	f00d fbb4 	bl	8011950 <iprintf>
 80041e8:	e002      	b.n	80041f0 <Adv_Request+0x74>
    }
    else
    {
      APP_DBG_MSG("==>> aci_gap_set_non_discoverable - Successfully Stopped Advertising \n");
 80041ea:	482f      	ldr	r0, [pc, #188]	@ (80042a8 <Adv_Request+0x12c>)
 80041ec:	f00d fc20 	bl	8011a30 <puts>
    }
  }

  BleApplicationContext.Device_Connection_Status = NewStatus;
 80041f0:	4a2b      	ldr	r2, [pc, #172]	@ (80042a0 <Adv_Request+0x124>)
 80041f2:	79fb      	ldrb	r3, [r7, #7]
 80041f4:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_IND,
 80041f8:	4b29      	ldr	r3, [pc, #164]	@ (80042a0 <Adv_Request+0x124>)
 80041fa:	7e1b      	ldrb	r3, [r3, #24]
 80041fc:	89ba      	ldrh	r2, [r7, #12]
 80041fe:	89f9      	ldrh	r1, [r7, #14]
 8004200:	2000      	movs	r0, #0
 8004202:	9006      	str	r0, [sp, #24]
 8004204:	2000      	movs	r0, #0
 8004206:	9005      	str	r0, [sp, #20]
 8004208:	4828      	ldr	r0, [pc, #160]	@ (80042ac <Adv_Request+0x130>)
 800420a:	9004      	str	r0, [sp, #16]
 800420c:	9303      	str	r3, [sp, #12]
 800420e:	4b28      	ldr	r3, [pc, #160]	@ (80042b0 <Adv_Request+0x134>)
 8004210:	9302      	str	r3, [sp, #8]
 8004212:	2307      	movs	r3, #7
 8004214:	9301      	str	r3, [sp, #4]
 8004216:	2300      	movs	r3, #0
 8004218:	9300      	str	r3, [sp, #0]
 800421a:	2300      	movs	r3, #0
 800421c:	2000      	movs	r0, #0
 800421e:	f008 ffc3 	bl	800d1a8 <aci_gap_set_discoverable>
 8004222:	4603      	mov	r3, r0
 8004224:	72fb      	strb	r3, [r7, #11]
                                 (uint8_t*) &a_LocalName,
                                 BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen,
                                 BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 8004226:	7afb      	ldrb	r3, [r7, #11]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d005      	beq.n	8004238 <Adv_Request+0xbc>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 800422c:	7afb      	ldrb	r3, [r7, #11]
 800422e:	4619      	mov	r1, r3
 8004230:	4820      	ldr	r0, [pc, #128]	@ (80042b4 <Adv_Request+0x138>)
 8004232:	f00d fb8d 	bl	8011950 <iprintf>
 8004236:	e002      	b.n	800423e <Adv_Request+0xc2>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 8004238:	481f      	ldr	r0, [pc, #124]	@ (80042b8 <Adv_Request+0x13c>)
 800423a:	f00d fbf9 	bl	8011a30 <puts>
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_ManufData), (uint8_t*) a_ManufData);
 800423e:	491f      	ldr	r1, [pc, #124]	@ (80042bc <Adv_Request+0x140>)
 8004240:	200e      	movs	r0, #14
 8004242:	f009 fad7 	bl	800d7f4 <aci_gap_update_adv_data>
 8004246:	4603      	mov	r3, r0
 8004248:	72fb      	strb	r3, [r7, #11]
  if (ret != BLE_STATUS_SUCCESS)
 800424a:	7afb      	ldrb	r3, [r7, #11]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00e      	beq.n	800426e <Adv_Request+0xf2>
  {
    if (NewStatus == APP_BLE_FAST_ADV)
 8004250:	79fb      	ldrb	r3, [r7, #7]
 8004252:	2b01      	cmp	r3, #1
 8004254:	d105      	bne.n	8004262 <Adv_Request+0xe6>
    {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 8004256:	7afb      	ldrb	r3, [r7, #11]
 8004258:	4619      	mov	r1, r3
 800425a:	4819      	ldr	r0, [pc, #100]	@ (80042c0 <Adv_Request+0x144>)
 800425c:	f00d fb78 	bl	8011950 <iprintf>
    {
      APP_DBG_MSG("==>> Success: Start Low Power Advertising \n\r");
    }
  }

  return;
 8004260:	e017      	b.n	8004292 <Adv_Request+0x116>
      APP_DBG_MSG("==>> Start Low Power Advertising Failed , result: %d \n\r", ret);
 8004262:	7afb      	ldrb	r3, [r7, #11]
 8004264:	4619      	mov	r1, r3
 8004266:	4817      	ldr	r0, [pc, #92]	@ (80042c4 <Adv_Request+0x148>)
 8004268:	f00d fb72 	bl	8011950 <iprintf>
  return;
 800426c:	e011      	b.n	8004292 <Adv_Request+0x116>
    if (NewStatus == APP_BLE_FAST_ADV)
 800426e:	79fb      	ldrb	r3, [r7, #7]
 8004270:	2b01      	cmp	r3, #1
 8004272:	d10a      	bne.n	800428a <Adv_Request+0x10e>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 8004274:	4814      	ldr	r0, [pc, #80]	@ (80042c8 <Adv_Request+0x14c>)
 8004276:	f00d fb6b 	bl	8011950 <iprintf>
      HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 800427a:	4b09      	ldr	r3, [pc, #36]	@ (80042a0 <Adv_Request+0x124>)
 800427c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8004280:	4912      	ldr	r1, [pc, #72]	@ (80042cc <Adv_Request+0x150>)
 8004282:	4618      	mov	r0, r3
 8004284:	f7fe f95a 	bl	800253c <HW_TS_Start>
  return;
 8004288:	e003      	b.n	8004292 <Adv_Request+0x116>
      APP_DBG_MSG("==>> Success: Start Low Power Advertising \n\r");
 800428a:	4811      	ldr	r0, [pc, #68]	@ (80042d0 <Adv_Request+0x154>)
 800428c:	f00d fb60 	bl	8011950 <iprintf>
  return;
 8004290:	bf00      	nop
}
 8004292:	3710      	adds	r7, #16
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	2000067c 	.word	0x2000067c
 800429c:	2000067e 	.word	0x2000067e
 80042a0:	200005f8 	.word	0x200005f8
 80042a4:	08014dd4 	.word	0x08014dd4
 80042a8:	08014e20 	.word	0x08014e20
 80042ac:	20000611 	.word	0x20000611
 80042b0:	08015440 	.word	0x08015440
 80042b4:	08014e68 	.word	0x08014e68
 80042b8:	08014ea0 	.word	0x08014ea0
 80042bc:	20000010 	.word	0x20000010
 80042c0:	08014ec8 	.word	0x08014ec8
 80042c4:	08014efc 	.word	0x08014efc
 80042c8:	08014f34 	.word	0x08014f34
 80042cc:	0001e046 	.word	0x0001e046
 80042d0:	08014f5c 	.word	0x08014f5c

080042d4 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b086      	sub	sp, #24
 80042d8:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 80042da:	f7ff f8a3 	bl	8003424 <LL_FLASH_GetUDN>
 80042de:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80042e6:	d023      	beq.n	8004330 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 80042e8:	f7ff f8b4 	bl	8003454 <LL_FLASH_GetSTCompanyID>
 80042ec:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 80042ee:	f7ff f8a5 	bl	800343c <LL_FLASH_GetDeviceID>
 80042f2:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	b2da      	uxtb	r2, r3
 80042f8:	4b16      	ldr	r3, [pc, #88]	@ (8004354 <BleGetBdAddress+0x80>)
 80042fa:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	0a1b      	lsrs	r3, r3, #8
 8004300:	b2da      	uxtb	r2, r3
 8004302:	4b14      	ldr	r3, [pc, #80]	@ (8004354 <BleGetBdAddress+0x80>)
 8004304:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	b2da      	uxtb	r2, r3
 800430a:	4b12      	ldr	r3, [pc, #72]	@ (8004354 <BleGetBdAddress+0x80>)
 800430c:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	b2da      	uxtb	r2, r3
 8004312:	4b10      	ldr	r3, [pc, #64]	@ (8004354 <BleGetBdAddress+0x80>)
 8004314:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	0a1b      	lsrs	r3, r3, #8
 800431a:	b2da      	uxtb	r2, r3
 800431c:	4b0d      	ldr	r3, [pc, #52]	@ (8004354 <BleGetBdAddress+0x80>)
 800431e:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	0c1b      	lsrs	r3, r3, #16
 8004324:	b2da      	uxtb	r2, r3
 8004326:	4b0b      	ldr	r3, [pc, #44]	@ (8004354 <BleGetBdAddress+0x80>)
 8004328:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800432a:	4b0a      	ldr	r3, [pc, #40]	@ (8004354 <BleGetBdAddress+0x80>)
 800432c:	617b      	str	r3, [r7, #20]
 800432e:	e00b      	b.n	8004348 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8004330:	2000      	movs	r0, #0
 8004332:	f00a fc21 	bl	800eb78 <OTP_Read>
 8004336:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d002      	beq.n	8004344 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	617b      	str	r3, [r7, #20]
 8004342:	e001      	b.n	8004348 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8004344:	4b04      	ldr	r3, [pc, #16]	@ (8004358 <BleGetBdAddress+0x84>)
 8004346:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8004348:	697b      	ldr	r3, [r7, #20]
}
 800434a:	4618      	mov	r0, r3
 800434c:	3718      	adds	r7, #24
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	200005f0 	.word	0x200005f0
 8004358:	08015418 	.word	0x08015418

0800435c <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8004362:	4b10      	ldr	r3, [pc, #64]	@ (80043a4 <Adv_Cancel+0x48>)
 8004364:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8004368:	2b05      	cmp	r3, #5
 800436a:	d017      	beq.n	800439c <Adv_Cancel+0x40>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800436c:	2392      	movs	r3, #146	@ 0x92
 800436e:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 8004370:	f008 fef6 	bl	800d160 <aci_gap_set_non_discoverable>
 8004374:	4603      	mov	r3, r0
 8004376:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8004378:	4b0a      	ldr	r3, [pc, #40]	@ (80043a4 <Adv_Cancel+0x48>)
 800437a:	2200      	movs	r2, #0
 800437c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    if (ret != BLE_STATUS_SUCCESS)
 8004380:	79fb      	ldrb	r3, [r7, #7]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d003      	beq.n	800438e <Adv_Cancel+0x32>
    {
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 8004386:	4808      	ldr	r0, [pc, #32]	@ (80043a8 <Adv_Cancel+0x4c>)
 8004388:	f00d fae2 	bl	8011950 <iprintf>

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800438c:	e006      	b.n	800439c <Adv_Cancel+0x40>
      APP_DBG_MSG("  \r\n\r");
 800438e:	4807      	ldr	r0, [pc, #28]	@ (80043ac <Adv_Cancel+0x50>)
 8004390:	f00d fade 	bl	8011950 <iprintf>
      APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 8004394:	4806      	ldr	r0, [pc, #24]	@ (80043b0 <Adv_Cancel+0x54>)
 8004396:	f00d fadb 	bl	8011950 <iprintf>
  return;
 800439a:	bf00      	nop
 800439c:	bf00      	nop
}
 800439e:	3708      	adds	r7, #8
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	200005f8 	.word	0x200005f8
 80043a8:	08014f8c 	.word	0x08014f8c
 80043ac:	08014fb0 	.word	0x08014fb0
 80043b0:	08014fb8 	.word	0x08014fb8

080043b4 <Adv_Cancel_Req>:

static void Adv_Cancel_Req(void)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_Req_1 */

  /* USER CODE END Adv_Cancel_Req_1 */

  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 80043b8:	2100      	movs	r1, #0
 80043ba:	2001      	movs	r0, #1
 80043bc:	f00c fc66 	bl	8010c8c <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN Adv_Cancel_Req_2 */

  /* USER CODE END Adv_Cancel_Req_2 */

  return;
 80043c0:	bf00      	nop
}
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO()
{
 80043c4:	b480      	push	{r7}
 80043c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Switch_OFF_GPIO */

  /* USER CODE END Switch_OFF_GPIO */
}
 80043c8:	bf00      	nop
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
	...

080043d4 <BLE_SVC_L2CAP_Conn_Update>:

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
void BLE_SVC_L2CAP_Conn_Update(uint16_t ConnectionHandle)
{
 80043d4:	b590      	push	{r4, r7, lr}
 80043d6:	b089      	sub	sp, #36	@ 0x24
 80043d8:	af02      	add	r7, sp, #8
 80043da:	4603      	mov	r3, r0
 80043dc:	80fb      	strh	r3, [r7, #6]
  /* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_1 */

  /* USER CODE END BLE_SVC_L2CAP_Conn_Update_1 */

  if (mutex == 1)
 80043de:	4b3a      	ldr	r3, [pc, #232]	@ (80044c8 <BLE_SVC_L2CAP_Conn_Update+0xf4>)
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d148      	bne.n	8004478 <BLE_SVC_L2CAP_Conn_Update+0xa4>
  {
    mutex = 0;
 80043e6:	4b38      	ldr	r3, [pc, #224]	@ (80044c8 <BLE_SVC_L2CAP_Conn_Update+0xf4>)
 80043e8:	2200      	movs	r2, #0
 80043ea:	701a      	strb	r2, [r3, #0]
    index_con_int = (index_con_int + 1)%SIZE_TAB_CONN_INT;
 80043ec:	4b37      	ldr	r3, [pc, #220]	@ (80044cc <BLE_SVC_L2CAP_Conn_Update+0xf8>)
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	3301      	adds	r3, #1
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	f003 0301 	and.w	r3, r3, #1
 80043f8:	bfb8      	it	lt
 80043fa:	425b      	neglt	r3, r3
 80043fc:	b2da      	uxtb	r2, r3
 80043fe:	4b33      	ldr	r3, [pc, #204]	@ (80044cc <BLE_SVC_L2CAP_Conn_Update+0xf8>)
 8004400:	701a      	strb	r2, [r3, #0]
    uint16_t interval_min = CONN_P(a_ConnInterval[index_con_int]);
 8004402:	4b32      	ldr	r3, [pc, #200]	@ (80044cc <BLE_SVC_L2CAP_Conn_Update+0xf8>)
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	4a32      	ldr	r2, [pc, #200]	@ (80044d0 <BLE_SVC_L2CAP_Conn_Update+0xfc>)
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	4413      	add	r3, r2
 800440c:	ed93 7a00 	vldr	s14, [r3]
 8004410:	eef7 6a04 	vmov.f32	s13, #116	@ 0x3fa00000  1.250
 8004414:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004418:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800441c:	ee17 3a90 	vmov	r3, s15
 8004420:	82fb      	strh	r3, [r7, #22]
    uint16_t interval_max = CONN_P(a_ConnInterval[index_con_int]);
 8004422:	4b2a      	ldr	r3, [pc, #168]	@ (80044cc <BLE_SVC_L2CAP_Conn_Update+0xf8>)
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	4a2a      	ldr	r2, [pc, #168]	@ (80044d0 <BLE_SVC_L2CAP_Conn_Update+0xfc>)
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	4413      	add	r3, r2
 800442c:	ed93 7a00 	vldr	s14, [r3]
 8004430:	eef7 6a04 	vmov.f32	s13, #116	@ 0x3fa00000  1.250
 8004434:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004438:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800443c:	ee17 3a90 	vmov	r3, s15
 8004440:	82bb      	strh	r3, [r7, #20]
    uint16_t peripheral_latency = L2CAP_PERIPHERAL_LATENCY;
 8004442:	2300      	movs	r3, #0
 8004444:	827b      	strh	r3, [r7, #18]
    uint16_t timeout_multiplier = L2CAP_TIMEOUT_MULTIPLIER;
 8004446:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800444a:	823b      	strh	r3, [r7, #16]
    tBleStatus ret;

    ret = aci_l2cap_connection_parameter_update_req(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,
 800444c:	4b21      	ldr	r3, [pc, #132]	@ (80044d4 <BLE_SVC_L2CAP_Conn_Update+0x100>)
 800444e:	8ad8      	ldrh	r0, [r3, #22]
 8004450:	8a7c      	ldrh	r4, [r7, #18]
 8004452:	8aba      	ldrh	r2, [r7, #20]
 8004454:	8af9      	ldrh	r1, [r7, #22]
 8004456:	8a3b      	ldrh	r3, [r7, #16]
 8004458:	9300      	str	r3, [sp, #0]
 800445a:	4623      	mov	r3, r4
 800445c:	f00a f87b 	bl	800e556 <aci_l2cap_connection_parameter_update_req>
 8004460:	4603      	mov	r3, r0
 8004462:	73fb      	strb	r3, [r7, #15]
                                                    interval_min, interval_max,
                                                    peripheral_latency, timeout_multiplier);
    if (ret != BLE_STATUS_SUCCESS)
 8004464:	7bfb      	ldrb	r3, [r7, #15]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d003      	beq.n	8004472 <BLE_SVC_L2CAP_Conn_Update+0x9e>
    {
      APP_DBG_MSG("BLE_SVC_L2CAP_Conn_Update(), Failed \r\n\r");
 800446a:	481b      	ldr	r0, [pc, #108]	@ (80044d8 <BLE_SVC_L2CAP_Conn_Update+0x104>)
 800446c:	f00d fa70 	bl	8011950 <iprintf>
 8004470:	e002      	b.n	8004478 <BLE_SVC_L2CAP_Conn_Update+0xa4>
    }
    else
    {
      APP_DBG_MSG("BLE_SVC_L2CAP_Conn_Update(), Successfully \r\n\r");
 8004472:	481a      	ldr	r0, [pc, #104]	@ (80044dc <BLE_SVC_L2CAP_Conn_Update+0x108>)
 8004474:	f00d fa6c 	bl	8011950 <iprintf>
    }
  }

  /* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_2 */
  if(index_con_int==0){
 8004478:	4b14      	ldr	r3, [pc, #80]	@ (80044cc <BLE_SVC_L2CAP_Conn_Update+0xf8>)
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d10e      	bne.n	800449e <BLE_SVC_L2CAP_Conn_Update+0xca>
    UTIL_LCD_DisplayStringAt(0, LINE(3), (uint8_t *)"Req CONN INT: 50ms", LEFT_MODE);
 8004480:	f00b ffb4 	bl	80103ec <UTIL_LCD_GetFont>
 8004484:	4603      	mov	r3, r0
 8004486:	88db      	ldrh	r3, [r3, #6]
 8004488:	461a      	mov	r2, r3
 800448a:	4613      	mov	r3, r2
 800448c:	005b      	lsls	r3, r3, #1
 800448e:	4413      	add	r3, r2
 8004490:	4619      	mov	r1, r3
 8004492:	2303      	movs	r3, #3
 8004494:	4a12      	ldr	r2, [pc, #72]	@ (80044e0 <BLE_SVC_L2CAP_Conn_Update+0x10c>)
 8004496:	2000      	movs	r0, #0
 8004498:	f00c f80a 	bl	80104b0 <UTIL_LCD_DisplayStringAt>
 800449c:	e00d      	b.n	80044ba <BLE_SVC_L2CAP_Conn_Update+0xe6>
  }
  else{
    UTIL_LCD_DisplayStringAt(0, LINE(3), (uint8_t *)"Req CONN INT: 1s  ", LEFT_MODE);
 800449e:	f00b ffa5 	bl	80103ec <UTIL_LCD_GetFont>
 80044a2:	4603      	mov	r3, r0
 80044a4:	88db      	ldrh	r3, [r3, #6]
 80044a6:	461a      	mov	r2, r3
 80044a8:	4613      	mov	r3, r2
 80044aa:	005b      	lsls	r3, r3, #1
 80044ac:	4413      	add	r3, r2
 80044ae:	4619      	mov	r1, r3
 80044b0:	2303      	movs	r3, #3
 80044b2:	4a0c      	ldr	r2, [pc, #48]	@ (80044e4 <BLE_SVC_L2CAP_Conn_Update+0x110>)
 80044b4:	2000      	movs	r0, #0
 80044b6:	f00b fffb 	bl	80104b0 <UTIL_LCD_DisplayStringAt>
  }
  BSP_LCD_Refresh(0);
 80044ba:	2000      	movs	r0, #0
 80044bc:	f002 fa48 	bl	8006950 <BSP_LCD_Refresh>
  /* USER CODE END BLE_SVC_L2CAP_Conn_Update_2 */

  return;
 80044c0:	bf00      	nop
}
 80044c2:	371c      	adds	r7, #28
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd90      	pop	{r4, r7, pc}
 80044c8:	20000685 	.word	0x20000685
 80044cc:	20000684 	.word	0x20000684
 80044d0:	20000008 	.word	0x20000008
 80044d4:	200005f8 	.word	0x200005f8
 80044d8:	08014fd4 	.word	0x08014fd4
 80044dc:	08014ffc 	.word	0x08014ffc
 80044e0:	0801502c 	.word	0x0801502c
 80044e4:	08015040 	.word	0x08015040

080044e8 <Connection_Interval_Update_Req>:
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
static void Connection_Interval_Update_Req(void)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	af00      	add	r7, sp, #0
  if (BleApplicationContext.Device_Connection_Status != APP_BLE_FAST_ADV && BleApplicationContext.Device_Connection_Status != APP_BLE_IDLE)
 80044ec:	4b08      	ldr	r3, [pc, #32]	@ (8004510 <Connection_Interval_Update_Req+0x28>)
 80044ee:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d00a      	beq.n	800450c <Connection_Interval_Update_Req+0x24>
 80044f6:	4b06      	ldr	r3, [pc, #24]	@ (8004510 <Connection_Interval_Update_Req+0x28>)
 80044f8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d005      	beq.n	800450c <Connection_Interval_Update_Req+0x24>
  {
    BLE_SVC_L2CAP_Conn_Update(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8004500:	4b03      	ldr	r3, [pc, #12]	@ (8004510 <Connection_Interval_Update_Req+0x28>)
 8004502:	8adb      	ldrh	r3, [r3, #22]
 8004504:	4618      	mov	r0, r3
 8004506:	f7ff ff65 	bl	80043d4 <BLE_SVC_L2CAP_Conn_Update>
  }

  return;
 800450a:	bf00      	nop
 800450c:	bf00      	nop
}
 800450e:	bd80      	pop	{r7, pc}
 8004510:	200005f8 	.word	0x200005f8

08004514 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800451c:	2100      	movs	r1, #0
 800451e:	2004      	movs	r0, #4
 8004520:	f00c fbb4 	bl	8010c8c <UTIL_SEQ_SetTask>

  return;
 8004524:	bf00      	nop
}
 8004526:	3708      	adds	r7, #8
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8004534:	2001      	movs	r0, #1
 8004536:	f00c fc15 	bl	8010d64 <UTIL_SEQ_SetEvt>

  return;
 800453a:	bf00      	nop
}
 800453c:	3708      	adds	r7, #8
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}

08004542 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8004542:	b580      	push	{r7, lr}
 8004544:	b082      	sub	sp, #8
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800454a:	2001      	movs	r0, #1
 800454c:	f00c fc2a 	bl	8010da4 <UTIL_SEQ_WaitEvt>

  return;
 8004550:	bf00      	nop
}
 8004552:	3708      	adds	r7, #8
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	3308      	adds	r3, #8
 800456a:	4618      	mov	r0, r3
 800456c:	f00b fbe4 	bl	800fd38 <SVCCTL_UserEvtRx>
 8004570:	4603      	mov	r3, r0
 8004572:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8004574:	7afb      	ldrb	r3, [r7, #11]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d003      	beq.n	8004582 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2201      	movs	r2, #1
 800457e:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8004580:	e003      	b.n	800458a <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	701a      	strb	r2, [r3, #0]
  return;
 8004588:	bf00      	nop
}
 800458a:	3710      	adds	r7, #16
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	4603      	mov	r3, r0
 8004598:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800459a:	79fb      	ldrb	r3, [r7, #7]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d002      	beq.n	80045a6 <BLE_StatusNot+0x16>
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d006      	beq.n	80045b2 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 80045a4:	e00b      	b.n	80045be <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80045a6:	230f      	movs	r3, #15
 80045a8:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 80045aa:	68f8      	ldr	r0, [r7, #12]
 80045ac:	f00c fb9a 	bl	8010ce4 <UTIL_SEQ_PauseTask>
      break;
 80045b0:	e005      	b.n	80045be <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80045b2:	230f      	movs	r3, #15
 80045b4:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	f00c fbb4 	bl	8010d24 <UTIL_SEQ_ResumeTask>
      break;
 80045bc:	bf00      	nop
  }

  return;
 80045be:	bf00      	nop
}
 80045c0:	3710      	adds	r7, #16
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
	...

080045c8 <P2PS_STM_App_Notification>:
static void P2PS_APP_LED_BUTTON_context_Init(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */
aPwmLedGsData_TypeDef aPwmLedGsData;
/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	2b03      	cmp	r3, #3
 80045d6:	d01a      	beq.n	800460e <P2PS_STM_App_Notification+0x46>
 80045d8:	2b03      	cmp	r3, #3
 80045da:	dc6d      	bgt.n	80046b8 <P2PS_STM_App_Notification+0xf0>
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d002      	beq.n	80045e6 <P2PS_STM_App_Notification+0x1e>
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d00a      	beq.n	80045fa <P2PS_STM_App_Notification+0x32>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */

/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 80045e4:	e068      	b.n	80046b8 <P2PS_STM_App_Notification+0xf0>
      P2P_Server_App_Context.Notification_Status = 1;
 80045e6:	4b38      	ldr	r3, [pc, #224]	@ (80046c8 <P2PS_STM_App_Notification+0x100>)
 80045e8:	2201      	movs	r2, #1
 80045ea:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION ENABLED\n");
 80045ec:	4837      	ldr	r0, [pc, #220]	@ (80046cc <P2PS_STM_App_Notification+0x104>)
 80045ee:	f00d fa1f 	bl	8011a30 <puts>
      APP_DBG_MSG(" \n\r");
 80045f2:	4837      	ldr	r0, [pc, #220]	@ (80046d0 <P2PS_STM_App_Notification+0x108>)
 80045f4:	f00d f9ac 	bl	8011950 <iprintf>
      break;
 80045f8:	e061      	b.n	80046be <P2PS_STM_App_Notification+0xf6>
      P2P_Server_App_Context.Notification_Status = 0;
 80045fa:	4b33      	ldr	r3, [pc, #204]	@ (80046c8 <P2PS_STM_App_Notification+0x100>)
 80045fc:	2200      	movs	r2, #0
 80045fe:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION DISABLED\n");
 8004600:	4834      	ldr	r0, [pc, #208]	@ (80046d4 <P2PS_STM_App_Notification+0x10c>)
 8004602:	f00d fa15 	bl	8011a30 <puts>
      APP_DBG_MSG(" \n\r");
 8004606:	4832      	ldr	r0, [pc, #200]	@ (80046d0 <P2PS_STM_App_Notification+0x108>)
 8004608:	f00d f9a2 	bl	8011950 <iprintf>
      break;
 800460c:	e057      	b.n	80046be <P2PS_STM_App_Notification+0xf6>
      if(pNotification->DataTransfered.pPayload[0] == 0x00){ /* ALL Deviceselected - may be necessary as LB Routeur informs all connection */
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d124      	bne.n	8004662 <P2PS_STM_App_Notification+0x9a>
        if(pNotification->DataTransfered.pPayload[1] == 0x01)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	3301      	adds	r3, #1
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	2b01      	cmp	r3, #1
 8004622:	d110      	bne.n	8004646 <P2PS_STM_App_Notification+0x7e>
          aPwmLedGsData[PWM_LED_RED]   = PWM_LED_GSDATA_OFF;
 8004624:	2300      	movs	r3, #0
 8004626:	733b      	strb	r3, [r7, #12]
          aPwmLedGsData[PWM_LED_GREEN] = PWM_LED_GSDATA_OFF;
 8004628:	2300      	movs	r3, #0
 800462a:	737b      	strb	r3, [r7, #13]
          aPwmLedGsData[PWM_LED_BLUE]  = PWM_LED_GSDATA_7_0;
 800462c:	2322      	movs	r3, #34	@ 0x22
 800462e:	73bb      	strb	r3, [r7, #14]
          LED_On(aPwmLedGsData);
 8004630:	f107 030c 	add.w	r3, r7, #12
 8004634:	4618      	mov	r0, r3
 8004636:	f7fc fee9 	bl	800140c <LED_On>
          APP_DBG_MSG("-- P2P APPLICATION SERVER  : LED1 ON\n");
 800463a:	4827      	ldr	r0, [pc, #156]	@ (80046d8 <P2PS_STM_App_Notification+0x110>)
 800463c:	f00d f9f8 	bl	8011a30 <puts>
          APP_DBG_MSG(" \n\r");
 8004640:	4823      	ldr	r0, [pc, #140]	@ (80046d0 <P2PS_STM_App_Notification+0x108>)
 8004642:	f00d f985 	bl	8011950 <iprintf>
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	3301      	adds	r3, #1
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d107      	bne.n	8004662 <P2PS_STM_App_Notification+0x9a>
          LED_Off();
 8004652:	f7fc feea 	bl	800142a <LED_Off>
          APP_DBG_MSG("-- P2P APPLICATION SERVER  : LED1 OFF\n");
 8004656:	4821      	ldr	r0, [pc, #132]	@ (80046dc <P2PS_STM_App_Notification+0x114>)
 8004658:	f00d f9ea 	bl	8011a30 <puts>
          APP_DBG_MSG(" \n\r");
 800465c:	481c      	ldr	r0, [pc, #112]	@ (80046d0 <P2PS_STM_App_Notification+0x108>)
 800465e:	f00d f977 	bl	8011950 <iprintf>
      if(pNotification->DataTransfered.pPayload[0] == 0x01){ /* end device 1 selected - may be necessary as LB Routeur informs all connection */
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	2b01      	cmp	r3, #1
 800466a:	d127      	bne.n	80046bc <P2PS_STM_App_Notification+0xf4>
        if(pNotification->DataTransfered.pPayload[1] == 0x01)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	3301      	adds	r3, #1
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d110      	bne.n	800469a <P2PS_STM_App_Notification+0xd2>
          aPwmLedGsData[PWM_LED_RED]   = PWM_LED_GSDATA_OFF;
 8004678:	2300      	movs	r3, #0
 800467a:	733b      	strb	r3, [r7, #12]
          aPwmLedGsData[PWM_LED_GREEN] = PWM_LED_GSDATA_OFF;
 800467c:	2300      	movs	r3, #0
 800467e:	737b      	strb	r3, [r7, #13]
          aPwmLedGsData[PWM_LED_BLUE]  = PWM_LED_GSDATA_7_0;
 8004680:	2322      	movs	r3, #34	@ 0x22
 8004682:	73bb      	strb	r3, [r7, #14]
          LED_On(aPwmLedGsData);
 8004684:	f107 030c 	add.w	r3, r7, #12
 8004688:	4618      	mov	r0, r3
 800468a:	f7fc febf 	bl	800140c <LED_On>
          APP_DBG_MSG("-- P2P APPLICATION SERVER 1 : LED1 ON\n");
 800468e:	4814      	ldr	r0, [pc, #80]	@ (80046e0 <P2PS_STM_App_Notification+0x118>)
 8004690:	f00d f9ce 	bl	8011a30 <puts>
          APP_DBG_MSG(" \n\r");
 8004694:	480e      	ldr	r0, [pc, #56]	@ (80046d0 <P2PS_STM_App_Notification+0x108>)
 8004696:	f00d f95b 	bl	8011950 <iprintf>
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	3301      	adds	r3, #1
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d10a      	bne.n	80046bc <P2PS_STM_App_Notification+0xf4>
          LED_Off();
 80046a6:	f7fc fec0 	bl	800142a <LED_Off>
          APP_DBG_MSG("-- P2P APPLICATION SERVER 1 : LED1 OFF\n");
 80046aa:	480e      	ldr	r0, [pc, #56]	@ (80046e4 <P2PS_STM_App_Notification+0x11c>)
 80046ac:	f00d f9c0 	bl	8011a30 <puts>
          APP_DBG_MSG(" \n\r");
 80046b0:	4807      	ldr	r0, [pc, #28]	@ (80046d0 <P2PS_STM_App_Notification+0x108>)
 80046b2:	f00d f94d 	bl	8011950 <iprintf>
      break;
 80046b6:	e001      	b.n	80046bc <P2PS_STM_App_Notification+0xf4>
      break;
 80046b8:	bf00      	nop
 80046ba:	e000      	b.n	80046be <P2PS_STM_App_Notification+0xf6>
      break;
 80046bc:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 80046be:	bf00      	nop
}
 80046c0:	3710      	adds	r7, #16
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	2000068c 	.word	0x2000068c
 80046cc:	08015054 	.word	0x08015054
 80046d0:	08015088 	.word	0x08015088
 80046d4:	0801508c 	.word	0x0801508c
 80046d8:	080150c0 	.word	0x080150c0
 80046dc:	080150e8 	.word	0x080150e8
 80046e0:	08015110 	.word	0x08015110
 80046e4:	08015138 	.word	0x08015138

080046e8 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */
	switch(pNotification->P2P_Evt_Opcode)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d002      	beq.n	80046fe <P2PS_APP_Notification+0x16>
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d018      	beq.n	800472e <P2PS_APP_Notification+0x46>
	            APP_DBG_MSG("❌ BLE Disconnected\r\n");
	            HW_TS_Stop(hello_timer_id);
	            break;

    default:
        break;
 80046fc:	e02d      	b.n	800475a <P2PS_APP_Notification+0x72>
	            HAL_GPIO_WritePin(Connected_LED_GPIO_Port, Connected_LED_Pin, GPIO_PIN_RESET); // ON
 80046fe:	2200      	movs	r2, #0
 8004700:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004704:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004708:	f003 fc88 	bl	800801c <HAL_GPIO_WritePin>
	            HAL_GPIO_WritePin(Power_LED_GPIO_Port, Power_LED_Pin, GPIO_PIN_SET);           // OFF
 800470c:	2201      	movs	r2, #1
 800470e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004712:	4814      	ldr	r0, [pc, #80]	@ (8004764 <P2PS_APP_Notification+0x7c>)
 8004714:	f003 fc82 	bl	800801c <HAL_GPIO_WritePin>
	            APP_DBG_MSG("✅ BLE Connected\r\n");
 8004718:	4813      	ldr	r0, [pc, #76]	@ (8004768 <P2PS_APP_Notification+0x80>)
 800471a:	f00d f989 	bl	8011a30 <puts>
	            HW_TS_Start(hello_timer_id, (1000 * 1000 / CFG_TS_TICK_VAL));
 800471e:	4b13      	ldr	r3, [pc, #76]	@ (800476c <P2PS_APP_Notification+0x84>)
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	f640 0101 	movw	r1, #2049	@ 0x801
 8004726:	4618      	mov	r0, r3
 8004728:	f7fd ff08 	bl	800253c <HW_TS_Start>
	            break;
 800472c:	e015      	b.n	800475a <P2PS_APP_Notification+0x72>
	            HAL_GPIO_WritePin(Connected_LED_GPIO_Port, Connected_LED_Pin, GPIO_PIN_SET);   // OFF
 800472e:	2201      	movs	r2, #1
 8004730:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004734:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004738:	f003 fc70 	bl	800801c <HAL_GPIO_WritePin>
	            HAL_GPIO_WritePin(Power_LED_GPIO_Port, Power_LED_Pin, GPIO_PIN_RESET);         // ON
 800473c:	2200      	movs	r2, #0
 800473e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004742:	4808      	ldr	r0, [pc, #32]	@ (8004764 <P2PS_APP_Notification+0x7c>)
 8004744:	f003 fc6a 	bl	800801c <HAL_GPIO_WritePin>
	            APP_DBG_MSG("❌ BLE Disconnected\r\n");
 8004748:	4809      	ldr	r0, [pc, #36]	@ (8004770 <P2PS_APP_Notification+0x88>)
 800474a:	f00d f971 	bl	8011a30 <puts>
	            HW_TS_Stop(hello_timer_id);
 800474e:	4b07      	ldr	r3, [pc, #28]	@ (800476c <P2PS_APP_Notification+0x84>)
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	4618      	mov	r0, r3
 8004754:	f7fd fe6e 	bl	8002434 <HW_TS_Stop>
	            break;
 8004758:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 800475a:	bf00      	nop
}
 800475c:	3708      	adds	r7, #8
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	48000400 	.word	0x48000400
 8004768:	08015160 	.word	0x08015160
 800476c:	2000068a 	.word	0x2000068a
 8004770:	08015174 	.word	0x08015174

08004774 <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 8004774:	b590      	push	{r4, r7, lr}
 8004776:	b099      	sub	sp, #100	@ 0x64
 8004778:	af06      	add	r7, sp, #24
 // UTIL_SEQ_RegTask( 1<< CFG_TASK_SW1_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, P2PS_Send_Notification );

  /**
   * Initialize LedButton Service
   */
	HW_TS_Create(CFG_TIM_PROC_ID_ISR, &hello_timer_id, hw_ts_Repeated, Send_Hello_Data);
 800477a:	4b47      	ldr	r3, [pc, #284]	@ (8004898 <P2PS_APP_Init+0x124>)
 800477c:	2201      	movs	r2, #1
 800477e:	4947      	ldr	r1, [pc, #284]	@ (800489c <P2PS_APP_Init+0x128>)
 8004780:	2000      	movs	r0, #0
 8004782:	f7fd fddd 	bl	8002340 <HW_TS_Create>
 // P2P_Server_App_Context.Notification_Status=0;
 // P2PS_APP_LED_BUTTON_context_Init();
	UTIL_SEQ_RegTask( 1<< CFG_TASK_SW1_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, P2PS_Send_Notification );
 8004786:	4a46      	ldr	r2, [pc, #280]	@ (80048a0 <P2PS_APP_Init+0x12c>)
 8004788:	2100      	movs	r1, #0
 800478a:	2008      	movs	r0, #8
 800478c:	f00c fa5c 	bl	8010c48 <UTIL_SEQ_RegTask>

	  /**
	   * Initialize LedButton Service
	   */
	  P2P_Server_App_Context.Notification_Status = 0;
 8004790:	4b44      	ldr	r3, [pc, #272]	@ (80048a4 <P2PS_APP_Init+0x130>)
 8004792:	2200      	movs	r2, #0
 8004794:	701a      	strb	r2, [r3, #0]
	  P2PS_APP_LED_BUTTON_context_Init();
 8004796:	f000 f89d 	bl	80048d4 <P2PS_APP_LED_BUTTON_context_Init>
	  /* USER CODE BEGIN Custom Hello Service */
	  tBleStatus ret;
	  uint8_t hello_service_uuid[16] = {0xAA,0xBB,0xCC,0xDD,0xEE,0xFF,0x00,0x11,
 800479a:	4b43      	ldr	r3, [pc, #268]	@ (80048a8 <P2PS_APP_Init+0x134>)
 800479c:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 80047a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80047a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	                                    0x22,0x33,0x44,0x55,0x66,0x77,0x88,0x99};
	  uint8_t hello_char_uuid[16]    = {0xAA,0xBB,0xCC,0xDD,0xEE,0xFF,0x00,0x11,
 80047a6:	4b41      	ldr	r3, [pc, #260]	@ (80048ac <P2PS_APP_Init+0x138>)
 80047a8:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80047ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80047ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	                                    0x22,0x33,0x44,0x55,0x66,0x77,0x88,0x9A};

	  Service_UUID_t service_uuid;
	  Char_UUID_t char_uuid;

	  memcpy(service_uuid.Service_UUID_128, hello_service_uuid, 16);
 80047b2:	f107 0414 	add.w	r4, r7, #20
 80047b6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80047ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80047bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  memcpy(char_uuid.Char_UUID_128, hello_char_uuid, 16);
 80047c0:	1d3c      	adds	r4, r7, #4
 80047c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80047c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80047c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	  ret = aci_gatt_add_service(UUID_TYPE_128, &service_uuid, PRIMARY_SERVICE, 7, &hello_service_handle);
 80047cc:	f107 0114 	add.w	r1, r7, #20
 80047d0:	4b37      	ldr	r3, [pc, #220]	@ (80048b0 <P2PS_APP_Init+0x13c>)
 80047d2:	9300      	str	r3, [sp, #0]
 80047d4:	2307      	movs	r3, #7
 80047d6:	2201      	movs	r2, #1
 80047d8:	2002      	movs	r0, #2
 80047da:	f009 f981 	bl	800dae0 <aci_gatt_add_service>
 80047de:	4603      	mov	r3, r0
 80047e0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	  if (ret != BLE_STATUS_SUCCESS)
 80047e4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d005      	beq.n	80047f8 <P2PS_APP_Init+0x84>
	  {
	      APP_DBG_MSG("Failed to add Hello service: 0x%02X\r\n", ret);
 80047ec:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80047f0:	4619      	mov	r1, r3
 80047f2:	4830      	ldr	r0, [pc, #192]	@ (80048b4 <P2PS_APP_Init+0x140>)
 80047f4:	f00d f8ac 	bl	8011950 <iprintf>
	  }

	  ret = aci_gatt_add_char(hello_service_handle,
 80047f8:	4b2d      	ldr	r3, [pc, #180]	@ (80048b0 <P2PS_APP_Init+0x13c>)
 80047fa:	8818      	ldrh	r0, [r3, #0]
 80047fc:	1d3a      	adds	r2, r7, #4
 80047fe:	4b2e      	ldr	r3, [pc, #184]	@ (80048b8 <P2PS_APP_Init+0x144>)
 8004800:	9305      	str	r3, [sp, #20]
 8004802:	2300      	movs	r3, #0
 8004804:	9304      	str	r3, [sp, #16]
 8004806:	230a      	movs	r3, #10
 8004808:	9303      	str	r3, [sp, #12]
 800480a:	2300      	movs	r3, #0
 800480c:	9302      	str	r3, [sp, #8]
 800480e:	2300      	movs	r3, #0
 8004810:	9301      	str	r3, [sp, #4]
 8004812:	2310      	movs	r3, #16
 8004814:	9300      	str	r3, [sp, #0]
 8004816:	2305      	movs	r3, #5
 8004818:	2102      	movs	r1, #2
 800481a:	f009 fa37 	bl	800dc8c <aci_gatt_add_char>
 800481e:	4603      	mov	r3, r0
 8004820:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	                          CHAR_PROP_NOTIFY,
	                          ATTR_PERMISSION_NONE,
	                          0,
	                          10, 0,
	                          &hello_char_handle);
	  APP_DBG_MSG("Service add ret=0x%02X handle=%d\r\n", ret, hello_service_handle);
 8004824:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004828:	4a21      	ldr	r2, [pc, #132]	@ (80048b0 <P2PS_APP_Init+0x13c>)
 800482a:	8812      	ldrh	r2, [r2, #0]
 800482c:	4619      	mov	r1, r3
 800482e:	4823      	ldr	r0, [pc, #140]	@ (80048bc <P2PS_APP_Init+0x148>)
 8004830:	f00d f88e 	bl	8011950 <iprintf>
	  APP_DBG_MSG("Char add ret=0x%02X handle=%d\r\n", ret, hello_char_handle);
 8004834:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004838:	4a1f      	ldr	r2, [pc, #124]	@ (80048b8 <P2PS_APP_Init+0x144>)
 800483a:	8812      	ldrh	r2, [r2, #0]
 800483c:	4619      	mov	r1, r3
 800483e:	4820      	ldr	r0, [pc, #128]	@ (80048c0 <P2PS_APP_Init+0x14c>)
 8004840:	f00d f886 	bl	8011950 <iprintf>


	  if (ret != BLE_STATUS_SUCCESS)
 8004844:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004848:	2b00      	cmp	r3, #0
 800484a:	d005      	beq.n	8004858 <P2PS_APP_Init+0xe4>
	  {
	      APP_DBG_MSG("Failed to add Hello characteristic: 0x%02X\r\n", ret);
 800484c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004850:	4619      	mov	r1, r3
 8004852:	481c      	ldr	r0, [pc, #112]	@ (80048c4 <P2PS_APP_Init+0x150>)
 8004854:	f00d f87c 	bl	8011950 <iprintf>
	  }

	  APP_DBG_MSG("✅ Custom Hello Service initialized\r\n");
 8004858:	481b      	ldr	r0, [pc, #108]	@ (80048c8 <P2PS_APP_Init+0x154>)
 800485a:	f00d f8e9 	bl	8011a30 <puts>
	  /* USER CODE END Custom Hello Service */
	  // ✅ Enable notifications so data can be sent
	  static uint8_t hello_timer_id;

	  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &hello_timer_id, hw_ts_Repeated, Send_Hello_Data);
 800485e:	4b0e      	ldr	r3, [pc, #56]	@ (8004898 <P2PS_APP_Init+0x124>)
 8004860:	2201      	movs	r2, #1
 8004862:	491a      	ldr	r1, [pc, #104]	@ (80048cc <P2PS_APP_Init+0x158>)
 8004864:	2000      	movs	r0, #0
 8004866:	f7fd fd6b 	bl	8002340 <HW_TS_Create>
	 // HW_TS_Start(hello_timer_id, (1000 * 1000 / CFG_TS_TICK_VAL));  // 1-second period
	  /* ---- ADD ABOVE ---- */
	  HAL_GPIO_WritePin(Power_LED_GPIO_Port, Power_LED_Pin, GPIO_PIN_RESET);     // Power ON
 800486a:	2200      	movs	r2, #0
 800486c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004870:	4817      	ldr	r0, [pc, #92]	@ (80048d0 <P2PS_APP_Init+0x15c>)
 8004872:	f003 fbd3 	bl	800801c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Connected_LED_GPIO_Port, Connected_LED_Pin, GPIO_PIN_SET); // Disconnected
 8004876:	2201      	movs	r2, #1
 8004878:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800487c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004880:	f003 fbcc 	bl	800801c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Transmitting_LED_GPIO_Port, Transmitting_LED_Pin, GPIO_PIN_SET); // Not transmitting
 8004884:	2201      	movs	r2, #1
 8004886:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800488a:	4811      	ldr	r0, [pc, #68]	@ (80048d0 <P2PS_APP_Init+0x15c>)
 800488c:	f003 fbc6 	bl	800801c <HAL_GPIO_WritePin>
/* USER CODE END P2PS_APP_Init */
  return;
 8004890:	bf00      	nop
}
 8004892:	374c      	adds	r7, #76	@ 0x4c
 8004894:	46bd      	mov	sp, r7
 8004896:	bd90      	pop	{r4, r7, pc}
 8004898:	08004901 	.word	0x08004901
 800489c:	2000068a 	.word	0x2000068a
 80048a0:	080048f1 	.word	0x080048f1
 80048a4:	2000068c 	.word	0x2000068c
 80048a8:	08015250 	.word	0x08015250
 80048ac:	08015260 	.word	0x08015260
 80048b0:	20000686 	.word	0x20000686
 80048b4:	0801518c 	.word	0x0801518c
 80048b8:	20000688 	.word	0x20000688
 80048bc:	080151b4 	.word	0x080151b4
 80048c0:	080151d8 	.word	0x080151d8
 80048c4:	080151f8 	.word	0x080151f8
 80048c8:	08015228 	.word	0x08015228
 80048cc:	20000690 	.word	0x20000690
 80048d0:	48000400 	.word	0x48000400

080048d4 <P2PS_APP_LED_BUTTON_context_Init>:

/* USER CODE BEGIN FD */
void P2PS_APP_LED_BUTTON_context_Init(void){
 80048d4:	b580      	push	{r7, lr}
 80048d6:	af00      	add	r7, sp, #0

  LED_Off();
 80048d8:	f7fc fda7 	bl	800142a <LED_Off>
  P2P_Server_App_Context.LedControl.Device_Led_Selection=0x06; /* device6 */
  P2P_Server_App_Context.LedControl.Led1=0x00; /* led OFF */
  P2P_Server_App_Context.ButtonControl.Device_Button_Selection=0x06; /* Device6 */
  P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
#endif
}
 80048dc:	bf00      	nop
 80048de:	bd80      	pop	{r7, pc}

080048e0 <P2PS_APP_SW1_Button_Action>:

void P2PS_APP_SW1_Button_Action(void)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SW1_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 80048e4:	2100      	movs	r1, #0
 80048e6:	2008      	movs	r0, #8
 80048e8:	f00c f9d0 	bl	8010c8c <UTIL_SEQ_SetTask>

  return;
 80048ec:	bf00      	nop
}
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <P2PS_Send_Notification>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/
/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
void P2PS_Send_Notification(void)
{
 80048f0:	b480      	push	{r7}
 80048f2:	af00      	add	r7, sp, #0
   } else {
    APP_DBG_MSG("-- P2P APPLICATION SERVER : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n "); 
   }

  return;*/
}
 80048f4:	bf00      	nop
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr
	...

08004900 <Send_Hello_Data>:

static void Send_Hello_Data(void)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b088      	sub	sp, #32
 8004904:	af02      	add	r7, sp, #8
	const uint8_t msg[] = {'H', 'e', 'l', 'l', 'o'};
 8004906:	4a18      	ldr	r2, [pc, #96]	@ (8004968 <Send_Hello_Data+0x68>)
 8004908:	463b      	mov	r3, r7
 800490a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800490e:	6018      	str	r0, [r3, #0]
 8004910:	3304      	adds	r3, #4
 8004912:	7019      	strb	r1, [r3, #0]
	tBleStatus ret;

	    uint32_t start_time = HAL_GetTick();  // Record timestamp before sending
 8004914:	f002 fbe8 	bl	80070e8 <HAL_GetTick>
 8004918:	6178      	str	r0, [r7, #20]

	    // Turn ON transmit LED (active-low)
	    HAL_GPIO_WritePin(Transmitting_LED_GPIO_Port, Transmitting_LED_Pin, GPIO_PIN_RESET);
 800491a:	2200      	movs	r2, #0
 800491c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004920:	4812      	ldr	r0, [pc, #72]	@ (800496c <Send_Hello_Data+0x6c>)
 8004922:	f003 fb7b 	bl	800801c <HAL_GPIO_WritePin>

	    // Send data
	    ret = aci_gatt_update_char_value(hello_service_handle,
 8004926:	4b12      	ldr	r3, [pc, #72]	@ (8004970 <Send_Hello_Data+0x70>)
 8004928:	8818      	ldrh	r0, [r3, #0]
 800492a:	4b12      	ldr	r3, [pc, #72]	@ (8004974 <Send_Hello_Data+0x74>)
 800492c:	8819      	ldrh	r1, [r3, #0]
 800492e:	463b      	mov	r3, r7
 8004930:	9300      	str	r3, [sp, #0]
 8004932:	2305      	movs	r3, #5
 8004934:	2200      	movs	r2, #0
 8004936:	f009 fab1 	bl	800de9c <aci_gatt_update_char_value>
 800493a:	4603      	mov	r3, r0
 800493c:	74fb      	strb	r3, [r7, #19]
	                                     0,
	                                     sizeof(msg),
	                                     (uint8_t*)msg);

	    // Turn OFF transmit LED (active-low)
	    HAL_GPIO_WritePin(Transmitting_LED_GPIO_Port, Transmitting_LED_Pin, GPIO_PIN_SET);
 800493e:	2201      	movs	r2, #1
 8004940:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004944:	4809      	ldr	r0, [pc, #36]	@ (800496c <Send_Hello_Data+0x6c>)
 8004946:	f003 fb69 	bl	800801c <HAL_GPIO_WritePin>

	    uint32_t end_time = HAL_GetTick();  // Record after send
 800494a:	f002 fbcd 	bl	80070e8 <HAL_GetTick>
 800494e:	60f8      	str	r0, [r7, #12]
	    uint32_t latency = end_time - start_time;  // Calculate in ms
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	60bb      	str	r3, [r7, #8]

	    // Print latency only to terminal
	    APP_DBG_MSG("BLE Tx Latency: %lu ms\r\n", latency);
 8004958:	68b9      	ldr	r1, [r7, #8]
 800495a:	4807      	ldr	r0, [pc, #28]	@ (8004978 <Send_Hello_Data+0x78>)
 800495c:	f00c fff8 	bl	8011950 <iprintf>

	}
 8004960:	bf00      	nop
 8004962:	3718      	adds	r7, #24
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	0801528c 	.word	0x0801528c
 800496c:	48000400 	.word	0x48000400
 8004970:	20000686 	.word	0x20000686
 8004974:	20000688 	.word	0x20000688
 8004978:	08015270 	.word	0x08015270

0800497c <LL_PWR_EnableBootC2>:
{
 800497c:	b480      	push	{r7}
 800497e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8004980:	4b05      	ldr	r3, [pc, #20]	@ (8004998 <LL_PWR_EnableBootC2+0x1c>)
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	4a04      	ldr	r2, [pc, #16]	@ (8004998 <LL_PWR_EnableBootC2+0x1c>)
 8004986:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800498a:	60d3      	str	r3, [r2, #12]
}
 800498c:	bf00      	nop
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	58000400 	.word	0x58000400

0800499c <LL_C2_EXTI_EnableEvent_32_63>:
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 80049a4:	4b06      	ldr	r3, [pc, #24]	@ (80049c0 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80049a6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80049aa:	4905      	ldr	r1, [pc, #20]	@ (80049c0 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr
 80049c0:	58000800 	.word	0x58000800

080049c4 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80049cc:	4b05      	ldr	r3, [pc, #20]	@ (80049e4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80049ce:	6a1a      	ldr	r2, [r3, #32]
 80049d0:	4904      	ldr	r1, [pc, #16]	@ (80049e4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	620b      	str	r3, [r1, #32]
}
 80049d8:	bf00      	nop
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr
 80049e4:	58000800 	.word	0x58000800

080049e8 <LL_AHB3_GRP1_EnableClock>:
{
 80049e8:	b480      	push	{r7}
 80049ea:	b085      	sub	sp, #20
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80049f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80049f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8004a00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a04:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4013      	ands	r3, r2
 8004a0a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
}
 8004a0e:	bf00      	nop
 8004a10:	3714      	adds	r7, #20
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	b085      	sub	sp, #20
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8004a22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a26:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8004a2a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8004a36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a3a:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4013      	ands	r3, r2
 8004a42:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004a44:	68fb      	ldr	r3, [r7, #12]
}
 8004a46:	bf00      	nop
 8004a48:	3714      	adds	r7, #20
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr

08004a52 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8004a52:	b480      	push	{r7}
 8004a54:	b083      	sub	sp, #12
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	601a      	str	r2, [r3, #0]
}
 8004a66:	bf00      	nop
 8004a68:	370c      	adds	r7, #12
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr

08004a72 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8004a72:	b480      	push	{r7}
 8004a74:	b083      	sub	sp, #12
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f043 0201 	orr.w	r2, r3, #1
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	601a      	str	r2, [r3, #0]
}
 8004a86:	bf00      	nop
 8004a88:	370c      	adds	r7, #12
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr

08004a92 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8004a92:	b480      	push	{r7}
 8004a94:	b083      	sub	sp, #12
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
 8004a9a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	685a      	ldr	r2, [r3, #4]
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	041b      	lsls	r3, r3, #16
 8004aa4:	43db      	mvns	r3, r3
 8004aa6:	401a      	ands	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	605a      	str	r2, [r3, #4]
}
 8004aac:	bf00      	nop
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685a      	ldr	r2, [r3, #4]
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	041b      	lsls	r3, r3, #16
 8004aca:	431a      	orrs	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	605a      	str	r2, [r3, #4]
}
 8004ad0:	bf00      	nop
 8004ad2:	370c      	adds	r7, #12
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr

08004adc <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685a      	ldr	r2, [r3, #4]
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	43db      	mvns	r3, r3
 8004aee:	401a      	ands	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	605a      	str	r2, [r3, #4]
}
 8004af4:	bf00      	nop
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	683a      	ldr	r2, [r7, #0]
 8004b0e:	609a      	str	r2, [r3, #8]
}
 8004b10:	bf00      	nop
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	041a      	lsls	r2, r3, #16
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	609a      	str	r2, [r3, #8]
}
 8004b2e:	bf00      	nop
 8004b30:	370c      	adds	r7, #12
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr

08004b3a <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8004b3a:	b480      	push	{r7}
 8004b3c:	b083      	sub	sp, #12
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
 8004b42:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	68da      	ldr	r2, [r3, #12]
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	683a      	ldr	r2, [r7, #0]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d101      	bne.n	8004b56 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8004b52:	2301      	movs	r3, #1
 8004b54:	e000      	b.n	8004b58 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8004b56:	2300      	movs	r3, #0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	69da      	ldr	r2, [r3, #28]
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	4013      	ands	r3, r2
 8004b76:	683a      	ldr	r2, [r7, #0]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d101      	bne.n	8004b80 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e000      	b.n	8004b82 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	370c      	adds	r7, #12
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
	...

08004b90 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8004b94:	2102      	movs	r1, #2
 8004b96:	4818      	ldr	r0, [pc, #96]	@ (8004bf8 <HW_IPCC_Rx_Handler+0x68>)
 8004b98:	f7ff ffe4 	bl	8004b64 <LL_C2_IPCC_IsActiveFlag_CHx>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d008      	beq.n	8004bb4 <HW_IPCC_Rx_Handler+0x24>
 8004ba2:	4b15      	ldr	r3, [pc, #84]	@ (8004bf8 <HW_IPCC_Rx_Handler+0x68>)
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	f003 0302 	and.w	r3, r3, #2
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d102      	bne.n	8004bb4 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 8004bae:	f000 f925 	bl	8004dfc <HW_IPCC_SYS_EvtHandler>
 8004bb2:	e01e      	b.n	8004bf2 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8004bb4:	2101      	movs	r1, #1
 8004bb6:	4810      	ldr	r0, [pc, #64]	@ (8004bf8 <HW_IPCC_Rx_Handler+0x68>)
 8004bb8:	f7ff ffd4 	bl	8004b64 <LL_C2_IPCC_IsActiveFlag_CHx>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d008      	beq.n	8004bd4 <HW_IPCC_Rx_Handler+0x44>
 8004bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8004bf8 <HW_IPCC_Rx_Handler+0x68>)
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	f003 0301 	and.w	r3, r3, #1
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d102      	bne.n	8004bd4 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 8004bce:	f000 f899 	bl	8004d04 <HW_IPCC_BLE_EvtHandler>
 8004bd2:	e00e      	b.n	8004bf2 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8004bd4:	2108      	movs	r1, #8
 8004bd6:	4808      	ldr	r0, [pc, #32]	@ (8004bf8 <HW_IPCC_Rx_Handler+0x68>)
 8004bd8:	f7ff ffc4 	bl	8004b64 <LL_C2_IPCC_IsActiveFlag_CHx>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d008      	beq.n	8004bf4 <HW_IPCC_Rx_Handler+0x64>
 8004be2:	4b05      	ldr	r3, [pc, #20]	@ (8004bf8 <HW_IPCC_Rx_Handler+0x68>)
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	f003 0308 	and.w	r3, r3, #8
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d102      	bne.n	8004bf4 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 8004bee:	f000 f97d 	bl	8004eec <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8004bf2:	bf00      	nop
 8004bf4:	bf00      	nop
}
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	58000c00 	.word	0x58000c00

08004bfc <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8004c00:	2102      	movs	r1, #2
 8004c02:	4818      	ldr	r0, [pc, #96]	@ (8004c64 <HW_IPCC_Tx_Handler+0x68>)
 8004c04:	f7ff ff99 	bl	8004b3a <LL_C1_IPCC_IsActiveFlag_CHx>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d108      	bne.n	8004c20 <HW_IPCC_Tx_Handler+0x24>
 8004c0e:	4b15      	ldr	r3, [pc, #84]	@ (8004c64 <HW_IPCC_Tx_Handler+0x68>)
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d102      	bne.n	8004c20 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8004c1a:	f000 f8d3 	bl	8004dc4 <HW_IPCC_SYS_CmdEvtHandler>
 8004c1e:	e01e      	b.n	8004c5e <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8004c20:	2108      	movs	r1, #8
 8004c22:	4810      	ldr	r0, [pc, #64]	@ (8004c64 <HW_IPCC_Tx_Handler+0x68>)
 8004c24:	f7ff ff89 	bl	8004b3a <LL_C1_IPCC_IsActiveFlag_CHx>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d108      	bne.n	8004c40 <HW_IPCC_Tx_Handler+0x44>
 8004c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8004c64 <HW_IPCC_Tx_Handler+0x68>)
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d102      	bne.n	8004c40 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 8004c3a:	f000 f919 	bl	8004e70 <HW_IPCC_MM_FreeBufHandler>
 8004c3e:	e00e      	b.n	8004c5e <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8004c40:	2120      	movs	r1, #32
 8004c42:	4808      	ldr	r0, [pc, #32]	@ (8004c64 <HW_IPCC_Tx_Handler+0x68>)
 8004c44:	f7ff ff79 	bl	8004b3a <LL_C1_IPCC_IsActiveFlag_CHx>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d108      	bne.n	8004c60 <HW_IPCC_Tx_Handler+0x64>
 8004c4e:	4b05      	ldr	r3, [pc, #20]	@ (8004c64 <HW_IPCC_Tx_Handler+0x68>)
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d102      	bne.n	8004c60 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8004c5a:	f000 f85f 	bl	8004d1c <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8004c5e:	bf00      	nop
 8004c60:	bf00      	nop
}
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	58000c00 	.word	0x58000c00

08004c68 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8004c6c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8004c70:	f7ff fed3 	bl	8004a1a <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8004c74:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8004c78:	f7ff fea4 	bl	80049c4 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8004c7c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8004c80:	f7ff fe8c 	bl	800499c <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8004c84:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8004c86:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8004c88:	f7ff fe78 	bl	800497c <LL_PWR_EnableBootC2>

  return;
 8004c8c:	bf00      	nop
}
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8004c94:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8004c98:	f7ff fea6 	bl	80049e8 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8004c9c:	4806      	ldr	r0, [pc, #24]	@ (8004cb8 <HW_IPCC_Init+0x28>)
 8004c9e:	f7ff fee8 	bl	8004a72 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8004ca2:	4805      	ldr	r0, [pc, #20]	@ (8004cb8 <HW_IPCC_Init+0x28>)
 8004ca4:	f7ff fed5 	bl	8004a52 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8004ca8:	202c      	movs	r0, #44	@ 0x2c
 8004caa:	f002 fba2 	bl	80073f2 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8004cae:	202d      	movs	r0, #45	@ 0x2d
 8004cb0:	f002 fb9f 	bl	80073f2 <HAL_NVIC_EnableIRQ>

  return;
 8004cb4:	bf00      	nop
}
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	58000c00 	.word	0x58000c00

08004cbc <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cc2:	f3ef 8310 	mrs	r3, PRIMASK
 8004cc6:	607b      	str	r3, [r7, #4]
  return(result);
 8004cc8:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 8004cca:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8004ccc:	b672      	cpsid	i
}
 8004cce:	bf00      	nop
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8004cd0:	2101      	movs	r1, #1
 8004cd2:	4806      	ldr	r0, [pc, #24]	@ (8004cec <HW_IPCC_BLE_Init+0x30>)
 8004cd4:	f7ff ff02 	bl	8004adc <LL_C1_IPCC_EnableReceiveChannel>
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	f383 8810 	msr	PRIMASK, r3
}
 8004ce2:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 8004ce4:	bf00      	nop
}
 8004ce6:	3710      	adds	r7, #16
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	58000c00 	.word	0x58000c00

08004cf0 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8004cf4:	2101      	movs	r1, #1
 8004cf6:	4802      	ldr	r0, [pc, #8]	@ (8004d00 <HW_IPCC_BLE_SendCmd+0x10>)
 8004cf8:	f7ff ff10 	bl	8004b1c <LL_C1_IPCC_SetFlag_CHx>

  return;
 8004cfc:	bf00      	nop
}
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	58000c00 	.word	0x58000c00

08004d04 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8004d08:	f00b f8fa 	bl	800ff00 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8004d0c:	2101      	movs	r1, #1
 8004d0e:	4802      	ldr	r0, [pc, #8]	@ (8004d18 <HW_IPCC_BLE_EvtHandler+0x14>)
 8004d10:	f7ff fef6 	bl	8004b00 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8004d14:	bf00      	nop
}
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	58000c00 	.word	0x58000c00

08004d1c <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d22:	f3ef 8310 	mrs	r3, PRIMASK
 8004d26:	607b      	str	r3, [r7, #4]
  return(result);
 8004d28:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 8004d2a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8004d2c:	b672      	cpsid	i
}
 8004d2e:	bf00      	nop
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8004d30:	2120      	movs	r1, #32
 8004d32:	4807      	ldr	r0, [pc, #28]	@ (8004d50 <HW_IPCC_BLE_AclDataEvtHandler+0x34>)
 8004d34:	f7ff fec0 	bl	8004ab8 <LL_C1_IPCC_DisableTransmitChannel>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	f383 8810 	msr	PRIMASK, r3
}
 8004d42:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  HW_IPCC_BLE_AclDataAckNot();
 8004d44:	f00b f90c 	bl	800ff60 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8004d48:	bf00      	nop
}
 8004d4a:	3710      	adds	r7, #16
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	58000c00 	.word	0x58000c00

08004d54 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d5a:	f3ef 8310 	mrs	r3, PRIMASK
 8004d5e:	607b      	str	r3, [r7, #4]
  return(result);
 8004d60:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 8004d62:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8004d64:	b672      	cpsid	i
}
 8004d66:	bf00      	nop
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8004d68:	2102      	movs	r1, #2
 8004d6a:	4806      	ldr	r0, [pc, #24]	@ (8004d84 <HW_IPCC_SYS_Init+0x30>)
 8004d6c:	f7ff feb6 	bl	8004adc <LL_C1_IPCC_EnableReceiveChannel>
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	f383 8810 	msr	PRIMASK, r3
}
 8004d7a:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 8004d7c:	bf00      	nop
}
 8004d7e:	3710      	adds	r7, #16
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	58000c00 	.word	0x58000c00

08004d88 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8004d8e:	2102      	movs	r1, #2
 8004d90:	480b      	ldr	r0, [pc, #44]	@ (8004dc0 <HW_IPCC_SYS_SendCmd+0x38>)
 8004d92:	f7ff fec3 	bl	8004b1c <LL_C1_IPCC_SetFlag_CHx>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d96:	f3ef 8310 	mrs	r3, PRIMASK
 8004d9a:	607b      	str	r3, [r7, #4]
  return(result);
 8004d9c:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 8004d9e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8004da0:	b672      	cpsid	i
}
 8004da2:	bf00      	nop
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8004da4:	2102      	movs	r1, #2
 8004da6:	4806      	ldr	r0, [pc, #24]	@ (8004dc0 <HW_IPCC_SYS_SendCmd+0x38>)
 8004da8:	f7ff fe73 	bl	8004a92 <LL_C1_IPCC_EnableTransmitChannel>
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	f383 8810 	msr	PRIMASK, r3
}
 8004db6:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 8004db8:	bf00      	nop
}
 8004dba:	3710      	adds	r7, #16
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	58000c00 	.word	0x58000c00

08004dc4 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dca:	f3ef 8310 	mrs	r3, PRIMASK
 8004dce:	607b      	str	r3, [r7, #4]
  return(result);
 8004dd0:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 8004dd2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8004dd4:	b672      	cpsid	i
}
 8004dd6:	bf00      	nop
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8004dd8:	2102      	movs	r1, #2
 8004dda:	4807      	ldr	r0, [pc, #28]	@ (8004df8 <HW_IPCC_SYS_CmdEvtHandler+0x34>)
 8004ddc:	f7ff fe6c 	bl	8004ab8 <LL_C1_IPCC_DisableTransmitChannel>
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	f383 8810 	msr	PRIMASK, r3
}
 8004dea:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  HW_IPCC_SYS_CmdEvtNot();
 8004dec:	f00b f90c 	bl	8010008 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8004df0:	bf00      	nop
}
 8004df2:	3710      	adds	r7, #16
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	58000c00 	.word	0x58000c00

08004dfc <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8004e00:	f00b f918 	bl	8010034 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8004e04:	2102      	movs	r1, #2
 8004e06:	4802      	ldr	r0, [pc, #8]	@ (8004e10 <HW_IPCC_SYS_EvtHandler+0x14>)
 8004e08:	f7ff fe7a 	bl	8004b00 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8004e0c:	bf00      	nop
}
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	58000c00 	.word	0x58000c00

08004e14 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b086      	sub	sp, #24
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8004e1c:	2108      	movs	r1, #8
 8004e1e:	4812      	ldr	r0, [pc, #72]	@ (8004e68 <HW_IPCC_MM_SendFreeBuf+0x54>)
 8004e20:	f7ff fe8b 	bl	8004b3a <LL_C1_IPCC_IsActiveFlag_CHx>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d013      	beq.n	8004e52 <HW_IPCC_MM_SendFreeBuf+0x3e>
  {
    FreeBufCb = cb;
 8004e2a:	4a10      	ldr	r2, [pc, #64]	@ (8004e6c <HW_IPCC_MM_SendFreeBuf+0x58>)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e30:	f3ef 8310 	mrs	r3, PRIMASK
 8004e34:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e36:	68fb      	ldr	r3, [r7, #12]
    UTILS_ENTER_CRITICAL_SECTION();
 8004e38:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8004e3a:	b672      	cpsid	i
}
 8004e3c:	bf00      	nop
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8004e3e:	2108      	movs	r1, #8
 8004e40:	4809      	ldr	r0, [pc, #36]	@ (8004e68 <HW_IPCC_MM_SendFreeBuf+0x54>)
 8004e42:	f7ff fe26 	bl	8004a92 <LL_C1_IPCC_EnableTransmitChannel>
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	f383 8810 	msr	PRIMASK, r3
}
 8004e50:	e005      	b.n	8004e5e <HW_IPCC_MM_SendFreeBuf+0x4a>
    UTILS_EXIT_CRITICAL_SECTION();
  }
  else
  {
    cb();
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4798      	blx	r3

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8004e56:	2108      	movs	r1, #8
 8004e58:	4803      	ldr	r0, [pc, #12]	@ (8004e68 <HW_IPCC_MM_SendFreeBuf+0x54>)
 8004e5a:	f7ff fe5f 	bl	8004b1c <LL_C1_IPCC_SetFlag_CHx>
  }

  return;
 8004e5e:	bf00      	nop
}
 8004e60:	3718      	adds	r7, #24
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	58000c00 	.word	0x58000c00
 8004e6c:	20000694 	.word	0x20000694

08004e70 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e76:	f3ef 8310 	mrs	r3, PRIMASK
 8004e7a:	607b      	str	r3, [r7, #4]
  return(result);
 8004e7c:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 8004e7e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8004e80:	b672      	cpsid	i
}
 8004e82:	bf00      	nop
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8004e84:	2108      	movs	r1, #8
 8004e86:	480a      	ldr	r0, [pc, #40]	@ (8004eb0 <HW_IPCC_MM_FreeBufHandler+0x40>)
 8004e88:	f7ff fe16 	bl	8004ab8 <LL_C1_IPCC_DisableTransmitChannel>
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	f383 8810 	msr	PRIMASK, r3
}
 8004e96:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  FreeBufCb();
 8004e98:	4b06      	ldr	r3, [pc, #24]	@ (8004eb4 <HW_IPCC_MM_FreeBufHandler+0x44>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8004e9e:	2108      	movs	r1, #8
 8004ea0:	4803      	ldr	r0, [pc, #12]	@ (8004eb0 <HW_IPCC_MM_FreeBufHandler+0x40>)
 8004ea2:	f7ff fe3b 	bl	8004b1c <LL_C1_IPCC_SetFlag_CHx>

  return;
 8004ea6:	bf00      	nop
}
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	58000c00 	.word	0x58000c00
 8004eb4:	20000694 	.word	0x20000694

08004eb8 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ebe:	f3ef 8310 	mrs	r3, PRIMASK
 8004ec2:	607b      	str	r3, [r7, #4]
  return(result);
 8004ec4:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 8004ec6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8004ec8:	b672      	cpsid	i
}
 8004eca:	bf00      	nop
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8004ecc:	2108      	movs	r1, #8
 8004ece:	4806      	ldr	r0, [pc, #24]	@ (8004ee8 <HW_IPCC_TRACES_Init+0x30>)
 8004ed0:	f7ff fe04 	bl	8004adc <LL_C1_IPCC_EnableReceiveChannel>
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	f383 8810 	msr	PRIMASK, r3
}
 8004ede:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 8004ee0:	bf00      	nop
}
 8004ee2:	3710      	adds	r7, #16
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	58000c00 	.word	0x58000c00

08004eec <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8004ef0:	f00b f948 	bl	8010184 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8004ef4:	2108      	movs	r1, #8
 8004ef6:	4802      	ldr	r0, [pc, #8]	@ (8004f00 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8004ef8:	f7ff fe02 	bl	8004b00 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8004efc:	bf00      	nop
}
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	58000c00 	.word	0x58000c00

08004f04 <SSD1315_RegisterBusIO>:
  * @param  pObj Component object pointer.
  * @param  pIO  Component IO structure pointer.
  * @retval Component status.
  */
int32_t SSD1315_RegisterBusIO(SSD1315_Object_t *pObj, SSD1315_IO_t *pIO)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if(pObj == NULL)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d103      	bne.n	8004f1c <SSD1315_RegisterBusIO+0x18>
  {
    ret = SSD1315_ERROR;
 8004f14:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004f18:	60fb      	str	r3, [r7, #12]
 8004f1a:	e01c      	b.n	8004f56 <SSD1315_RegisterBusIO+0x52>
  }
  else
  {
    pObj->IO.Init           = pIO->Init;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit         = pIO->DeInit;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	685a      	ldr	r2, [r3, #4]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	605a      	str	r2, [r3, #4]
    pObj->IO.WriteReg       = pIO->WriteReg;
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	689a      	ldr	r2, [r3, #8]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	609a      	str	r2, [r3, #8]
    pObj->IO.ReadReg        = pIO->ReadReg;
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	68da      	ldr	r2, [r3, #12]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	60da      	str	r2, [r3, #12]
    pObj->IO.GetTick        = pIO->GetTick;
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	691a      	ldr	r2, [r3, #16]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	611a      	str	r2, [r3, #16]

    pObj->Ctx.ReadReg       = SSD1315_ReadRegWrap;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a0c      	ldr	r2, [pc, #48]	@ (8004f78 <SSD1315_RegisterBusIO+0x74>)
 8004f48:	619a      	str	r2, [r3, #24]
    pObj->Ctx.WriteReg      = SSD1315_WriteRegWrap;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a0b      	ldr	r2, [pc, #44]	@ (8004f7c <SSD1315_RegisterBusIO+0x78>)
 8004f4e:	615a      	str	r2, [r3, #20]
    pObj->Ctx.handle    = pObj;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	61da      	str	r2, [r3, #28]
  }

  if (pObj->IO.Init != NULL)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d004      	beq.n	8004f68 <SSD1315_RegisterBusIO+0x64>
  {
      ret = pObj->IO.Init();
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4798      	blx	r3
 8004f64:	60f8      	str	r0, [r7, #12]
 8004f66:	e002      	b.n	8004f6e <SSD1315_RegisterBusIO+0x6a>
  }
  else
  {
     ret = SSD1315_ERROR;
 8004f68:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004f6c:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3710      	adds	r7, #16
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	08005e09 	.word	0x08005e09
 8004f7c:	08005e37 	.word	0x08005e37

08004f80 <SSD1315_Init>:
  * @param  ColorCoding RGB mode.
  * @param  Orientation Display orientation.
  * @retval Component status.
  */
int32_t SSD1315_Init(SSD1315_Object_t *pObj, uint32_t ColorCoding, uint32_t Orientation)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b086      	sub	sp, #24
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	607a      	str	r2, [r7, #4]
  int32_t ret = SSD1315_OK;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	617b      	str	r3, [r7, #20]
  uint8_t data;

  if((pObj == NULL) || (Orientation > SSD1315_ORIENTATION_LANDSCAPE))
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d002      	beq.n	8004f9c <SSD1315_Init+0x1c>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d003      	beq.n	8004fa4 <SSD1315_Init+0x24>
  {
    ret = SSD1315_ERROR;
 8004f9c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004fa0:	617b      	str	r3, [r7, #20]
 8004fa2:	e0ab      	b.n	80050fc <SSD1315_Init+0x17c>
  }
  else
  {
    if (pObj->IsInitialized == 0)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	f040 80a3 	bne.w	80050f6 <SSD1315_Init+0x176>
    {
      pObj->IsInitialized = 1;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2020 	strb.w	r2, [r3, #32]
	  pObj->Orientation = Orientation;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	625a      	str	r2, [r3, #36]	@ 0x24
      (void)SSD1315_IO_Delay(pObj, 100);
 8004fbe:	2164      	movs	r1, #100	@ 0x64
 8004fc0:	68f8      	ldr	r0, [r7, #12]
 8004fc2:	f000 ff6b 	bl	8005e9c <SSD1315_IO_Delay>
      /* Driving ability setting */
      data = SSD1315_READWRITE_CMD;
 8004fc6:	2380      	movs	r3, #128	@ 0x80
 8004fc8:	74fb      	strb	r3, [r7, #19]
      ret += ssd1315_write_reg(&pObj->Ctx, 1,&data, 1);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f103 0014 	add.w	r0, r3, #20
 8004fd0:	f107 0213 	add.w	r2, r7, #19
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	2101      	movs	r1, #1
 8004fd8:	f000 ff7a 	bl	8005ed0 <ssd1315_write_reg>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	4413      	add	r3, r2
 8004fe2:	617b      	str	r3, [r7, #20]
      data = SSD1315_CHARGE_PUMP_SETTING;
 8004fe4:	238d      	movs	r3, #141	@ 0x8d
 8004fe6:	74fb      	strb	r3, [r7, #19]
      ret += ssd1315_write_reg(&pObj->Ctx, 1,&data, 1);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f103 0014 	add.w	r0, r3, #20
 8004fee:	f107 0213 	add.w	r2, r7, #19
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	2101      	movs	r1, #1
 8004ff6:	f000 ff6b 	bl	8005ed0 <ssd1315_write_reg>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	4413      	add	r3, r2
 8005000:	617b      	str	r3, [r7, #20]
      data = SSD1315_HIGHER_COLUMN_START_ADRESS_5;
 8005002:	2314      	movs	r3, #20
 8005004:	74fb      	strb	r3, [r7, #19]
      ret += ssd1315_write_reg(&pObj->Ctx, 1,&data, 1);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f103 0014 	add.w	r0, r3, #20
 800500c:	f107 0213 	add.w	r2, r7, #19
 8005010:	2301      	movs	r3, #1
 8005012:	2101      	movs	r1, #1
 8005014:	f000 ff5c 	bl	8005ed0 <ssd1315_write_reg>
 8005018:	4602      	mov	r2, r0
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	4413      	add	r3, r2
 800501e:	617b      	str	r3, [r7, #20]
      data = SSD1315_MEMORY_ADRESS_MODE;
 8005020:	2320      	movs	r3, #32
 8005022:	74fb      	strb	r3, [r7, #19]
      ret += ssd1315_write_reg(&pObj->Ctx, 1,&data, 1);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f103 0014 	add.w	r0, r3, #20
 800502a:	f107 0213 	add.w	r2, r7, #19
 800502e:	2301      	movs	r3, #1
 8005030:	2101      	movs	r1, #1
 8005032:	f000 ff4d 	bl	8005ed0 <ssd1315_write_reg>
 8005036:	4602      	mov	r2, r0
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	4413      	add	r3, r2
 800503c:	617b      	str	r3, [r7, #20]
      data = SSD1315_LOWER_COLUMN_START_ADRESS;
 800503e:	2300      	movs	r3, #0
 8005040:	74fb      	strb	r3, [r7, #19]
      ret += ssd1315_write_reg(&pObj->Ctx, 1,&data, 1);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f103 0014 	add.w	r0, r3, #20
 8005048:	f107 0213 	add.w	r2, r7, #19
 800504c:	2301      	movs	r3, #1
 800504e:	2101      	movs	r1, #1
 8005050:	f000 ff3e 	bl	8005ed0 <ssd1315_write_reg>
 8005054:	4602      	mov	r2, r0
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	4413      	add	r3, r2
 800505a:	617b      	str	r3, [r7, #20]
      data = SSD1315_DISPLAY_START_LINE_1;
 800505c:	2340      	movs	r3, #64	@ 0x40
 800505e:	74fb      	strb	r3, [r7, #19]
      ret += ssd1315_write_reg(&pObj->Ctx, 1,&data, 1);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f103 0014 	add.w	r0, r3, #20
 8005066:	f107 0213 	add.w	r2, r7, #19
 800506a:	2301      	movs	r3, #1
 800506c:	2101      	movs	r1, #1
 800506e:	f000 ff2f 	bl	8005ed0 <ssd1315_write_reg>
 8005072:	4602      	mov	r2, r0
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	4413      	add	r3, r2
 8005078:	617b      	str	r3, [r7, #20]
      data = SSD1315_REMAPPED_MODE;
 800507a:	23c8      	movs	r3, #200	@ 0xc8
 800507c:	74fb      	strb	r3, [r7, #19]
      ret += ssd1315_write_reg(&pObj->Ctx, 1,&data, 1);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f103 0014 	add.w	r0, r3, #20
 8005084:	f107 0213 	add.w	r2, r7, #19
 8005088:	2301      	movs	r3, #1
 800508a:	2101      	movs	r1, #1
 800508c:	f000 ff20 	bl	8005ed0 <ssd1315_write_reg>
 8005090:	4602      	mov	r2, r0
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	4413      	add	r3, r2
 8005096:	617b      	str	r3, [r7, #20]
      data = SSD1315_CONTRAST_CONTROL;
 8005098:	23a1      	movs	r3, #161	@ 0xa1
 800509a:	74fb      	strb	r3, [r7, #19]
      ret += ssd1315_write_reg(&pObj->Ctx, 1,&data, 1);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f103 0014 	add.w	r0, r3, #20
 80050a2:	f107 0213 	add.w	r2, r7, #19
 80050a6:	2301      	movs	r3, #1
 80050a8:	2101      	movs	r1, #1
 80050aa:	f000 ff11 	bl	8005ed0 <ssd1315_write_reg>
 80050ae:	4602      	mov	r2, r0
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	4413      	add	r3, r2
 80050b4:	617b      	str	r3, [r7, #20]
      data = SSD1315_DISPLAY_ON;
 80050b6:	23af      	movs	r3, #175	@ 0xaf
 80050b8:	74fb      	strb	r3, [r7, #19]
      ret += ssd1315_write_reg(&pObj->Ctx, 1,&data, 1);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f103 0014 	add.w	r0, r3, #20
 80050c0:	f107 0213 	add.w	r2, r7, #19
 80050c4:	2301      	movs	r3, #1
 80050c6:	2101      	movs	r1, #1
 80050c8:	f000 ff02 	bl	8005ed0 <ssd1315_write_reg>
 80050cc:	4602      	mov	r2, r0
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	4413      	add	r3, r2
 80050d2:	617b      	str	r3, [r7, #20]
      ssd1315_Clear(SSD1315_COLOR_BLACK); 
 80050d4:	2000      	movs	r0, #0
 80050d6:	f000 fec5 	bl	8005e64 <ssd1315_Clear>
      ret += ssd1315_write_reg(&pObj->Ctx, 1, PhysFrameBuffer,  SSD1315_LCD_COLUMN_NUMBER*SSD1315_LCD_PAGE_NUMBER);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f103 0014 	add.w	r0, r3, #20
 80050e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80050e4:	4a0b      	ldr	r2, [pc, #44]	@ (8005114 <SSD1315_Init+0x194>)
 80050e6:	2101      	movs	r1, #1
 80050e8:	f000 fef2 	bl	8005ed0 <ssd1315_write_reg>
 80050ec:	4602      	mov	r2, r0
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	4413      	add	r3, r2
 80050f2:	617b      	str	r3, [r7, #20]
 80050f4:	e002      	b.n	80050fc <SSD1315_Init+0x17c>
    }
    else
    {
      ret = SSD1315_ERROR;
 80050f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80050fa:	617b      	str	r3, [r7, #20]
    }
  }
  if(ret != SSD1315_OK)
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d002      	beq.n	8005108 <SSD1315_Init+0x188>
  {
    ret = SSD1315_ERROR;
 8005102:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005106:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8005108:	697b      	ldr	r3, [r7, #20]
}
 800510a:	4618      	mov	r0, r3
 800510c:	3718      	adds	r7, #24
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	200006a0 	.word	0x200006a0

08005118 <SSD1315_DeInit>:
  * @brief  De-Initialize the ssd1315 LCD Component.
  * @param  pObj Component object.
  * @retval Component status.
  */
int32_t SSD1315_DeInit(SSD1315_Object_t *pObj)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  int32_t ret = SSD1315_OK;
 8005120:	2300      	movs	r3, #0
 8005122:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized != 0U)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f893 3020 	ldrb.w	r3, [r3, #32]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00a      	beq.n	8005144 <SSD1315_DeInit+0x2c>
  {
    ret += SSD1315_DisplayOff(pObj);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 f85e 	bl	80051f0 <SSD1315_DisplayOff>
 8005134:	4602      	mov	r2, r0
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	4413      	add	r3, r2
 800513a:	60fb      	str	r3, [r7, #12]

    pObj->IsInitialized = 0;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	f883 2020 	strb.w	r2, [r3, #32]
  }

  if(ret != SSD1315_OK)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d002      	beq.n	8005150 <SSD1315_DeInit+0x38>
  {
    ret = SSD1315_ERROR;
 800514a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800514e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8005150:	68fb      	ldr	r3, [r7, #12]
}
 8005152:	4618      	mov	r0, r3
 8005154:	3710      	adds	r7, #16
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}

0800515a <SSD1315_ReadID>:
  * @param  pObj Component object.
  * @param  Id Component ID.
  * @retval The component status.
  */
int32_t SSD1315_ReadID(SSD1315_Object_t *pObj, uint32_t *Id)
{
 800515a:	b480      	push	{r7}
 800515c:	b083      	sub	sp, #12
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
 8005162:	6039      	str	r1, [r7, #0]
  /* Feature not supported */
  (void)pObj;
  (void)Id;
  return SSD1315_ERROR;
 8005164:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8005168:	4618      	mov	r0, r3
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <SSD1315_DisplayOn>:
  * @brief  Enables the Display.
  * @param  pObj Component object.
  * @retval The component status.
  */
int32_t SSD1315_DisplayOn(SSD1315_Object_t *pObj)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  int32_t ret = SSD1315_OK;
 800517c:	2300      	movs	r3, #0
 800517e:	60fb      	str	r3, [r7, #12]
  uint8_t data;
  data = SSD1315_CHARGE_PUMP_SETTING;
 8005180:	238d      	movs	r3, #141	@ 0x8d
 8005182:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f103 0014 	add.w	r0, r3, #20
 800518a:	f107 020b 	add.w	r2, r7, #11
 800518e:	2301      	movs	r3, #1
 8005190:	2101      	movs	r1, #1
 8005192:	f000 fe9d 	bl	8005ed0 <ssd1315_write_reg>
 8005196:	4602      	mov	r2, r0
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	4413      	add	r3, r2
 800519c:	60fb      	str	r3, [r7, #12]
  data = SSD1315_HIGHER_COLUMN_START_ADRESS_5;
 800519e:	2314      	movs	r3, #20
 80051a0:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f103 0014 	add.w	r0, r3, #20
 80051a8:	f107 020b 	add.w	r2, r7, #11
 80051ac:	2301      	movs	r3, #1
 80051ae:	2101      	movs	r1, #1
 80051b0:	f000 fe8e 	bl	8005ed0 <ssd1315_write_reg>
 80051b4:	4602      	mov	r2, r0
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	4413      	add	r3, r2
 80051ba:	60fb      	str	r3, [r7, #12]
  data = SSD1315_DISPLAY_ON;
 80051bc:	23af      	movs	r3, #175	@ 0xaf
 80051be:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f103 0014 	add.w	r0, r3, #20
 80051c6:	f107 020b 	add.w	r2, r7, #11
 80051ca:	2301      	movs	r3, #1
 80051cc:	2101      	movs	r1, #1
 80051ce:	f000 fe7f 	bl	8005ed0 <ssd1315_write_reg>
 80051d2:	4602      	mov	r2, r0
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	4413      	add	r3, r2
 80051d8:	60fb      	str	r3, [r7, #12]
  
  if (ret != SSD1315_OK)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d002      	beq.n	80051e6 <SSD1315_DisplayOn+0x72>
  {
    ret = SSD1315_ERROR;
 80051e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80051e4:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 80051e6:	68fb      	ldr	r3, [r7, #12]
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3710      	adds	r7, #16
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <SSD1315_DisplayOff>:
  * @brief  Disables the Display.
  * @param  pObj Component object.
  * @retval The component status.
  */
int32_t SSD1315_DisplayOff(SSD1315_Object_t *pObj)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  int32_t ret = SSD1315_OK;
 80051f8:	2300      	movs	r3, #0
 80051fa:	60fb      	str	r3, [r7, #12]
  uint8_t data;
  
  data = SSD1315_CHARGE_PUMP_SETTING;
 80051fc:	238d      	movs	r3, #141	@ 0x8d
 80051fe:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f103 0014 	add.w	r0, r3, #20
 8005206:	f107 020b 	add.w	r2, r7, #11
 800520a:	2301      	movs	r3, #1
 800520c:	2101      	movs	r1, #1
 800520e:	f000 fe5f 	bl	8005ed0 <ssd1315_write_reg>
 8005212:	4602      	mov	r2, r0
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	4413      	add	r3, r2
 8005218:	60fb      	str	r3, [r7, #12]
  data = SSD1315_HIGHER_COLUMN_START_ADRESS_1;
 800521a:	2310      	movs	r3, #16
 800521c:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f103 0014 	add.w	r0, r3, #20
 8005224:	f107 020b 	add.w	r2, r7, #11
 8005228:	2301      	movs	r3, #1
 800522a:	2101      	movs	r1, #1
 800522c:	f000 fe50 	bl	8005ed0 <ssd1315_write_reg>
 8005230:	4602      	mov	r2, r0
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	4413      	add	r3, r2
 8005236:	60fb      	str	r3, [r7, #12]
  data = SSD1315_DISPLAY_OFF;
 8005238:	23ae      	movs	r3, #174	@ 0xae
 800523a:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f103 0014 	add.w	r0, r3, #20
 8005242:	f107 020b 	add.w	r2, r7, #11
 8005246:	2301      	movs	r3, #1
 8005248:	2101      	movs	r1, #1
 800524a:	f000 fe41 	bl	8005ed0 <ssd1315_write_reg>
 800524e:	4602      	mov	r2, r0
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	4413      	add	r3, r2
 8005254:	60fb      	str	r3, [r7, #12]
  
  if (ret != SSD1315_OK)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d002      	beq.n	8005262 <SSD1315_DisplayOff+0x72>
  {
    ret = SSD1315_ERROR;
 800525c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005260:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8005262:	68fb      	ldr	r3, [r7, #12]
}
 8005264:	4618      	mov	r0, r3
 8005266:	3710      	adds	r7, #16
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <SSD1315_SetBrightness>:
  * @param  pObj Component object.
  * @param  Brightness display brightness to be set.
  * @retval Component status.
  */
int32_t SSD1315_SetBrightness(SSD1315_Object_t *pObj, uint32_t Brightness)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  /* Feature not supported */
  (void)pObj;
  (void)Brightness;
  return SSD1315_ERROR;
 8005276:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800527a:	4618      	mov	r0, r3
 800527c:	370c      	adds	r7, #12
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr

08005286 <SSD1315_GetBrightness>:
  * @param  pObj Component object.
  * @param  Brightness display brightness to be returned.
  * @retval Component status.
  */
int32_t SSD1315_GetBrightness(SSD1315_Object_t *pObj, uint32_t *Brightness)
{
 8005286:	b480      	push	{r7}
 8005288:	b083      	sub	sp, #12
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
 800528e:	6039      	str	r1, [r7, #0]
  /* Feature not supported */
  (void)pObj;
  (void)Brightness;
  return SSD1315_ERROR;
 8005290:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8005294:	4618      	mov	r0, r3
 8005296:	370c      	adds	r7, #12
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <SSD1315_SetOrientation>:
  * @param  pObj Component object.
  * @param  Orientation SSSD1315_ORIENTATION_LANDSCAPE.
  * @retval The component status.
  */
int32_t SSD1315_SetOrientation(SSD1315_Object_t *pObj, uint32_t Orientation)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
  /* Feature not supported */
  (void)pObj;
  (void)Orientation;
  return SSD1315_ERROR;
 80052aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	370c      	adds	r7, #12
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr

080052ba <SSD1315_GetOrientation>:
  * @param  pObj Component object.
  * @param  Orientation SSD1315_ORIENTATION_LANDSCAPE.
  * @retval The component status.
  */
int32_t SSD1315_GetOrientation(SSD1315_Object_t *pObj, uint32_t *Orientation)
{
 80052ba:	b480      	push	{r7}
 80052bc:	b083      	sub	sp, #12
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
 80052c2:	6039      	str	r1, [r7, #0]
  /* Feature not supported */
  (void)pObj;
  (void)Orientation;
  return SSD1315_ERROR;
 80052c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <SSD1315_SetCursor>:
  * @param  Xpos specifies the X position.
  * @param  Ypos specifies the Y position.
  * @retval The component status.
  */
int32_t SSD1315_SetCursor(SSD1315_Object_t *pObj, uint32_t Xpos, uint32_t Ypos)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b085      	sub	sp, #20
 80052d8:	af00      	add	r7, sp, #0
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	607a      	str	r2, [r7, #4]
 /* Feature not supported */
 (void)pObj;
 (void)Xpos;
 (void)Ypos;
 return SSD1315_ERROR;
 80052e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3714      	adds	r7, #20
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <SSD1315_Refresh>:
  * @param  pObj Component object.
  * @retval The component status.
  */

int32_t SSD1315_Refresh(SSD1315_Object_t *pObj)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  int32_t ret = SSD1315_OK; 
 80052f8:	2300      	movs	r3, #0
 80052fa:	60fb      	str	r3, [r7, #12]
  uint8_t data;

  data = SSD1315_DISPLAY_START_LINE_1;
 80052fc:	2340      	movs	r3, #64	@ 0x40
 80052fe:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1,&data, 1);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f103 0014 	add.w	r0, r3, #20
 8005306:	f107 020b 	add.w	r2, r7, #11
 800530a:	2301      	movs	r3, #1
 800530c:	2101      	movs	r1, #1
 800530e:	f000 fddf 	bl	8005ed0 <ssd1315_write_reg>
 8005312:	4602      	mov	r2, r0
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	4413      	add	r3, r2
 8005318:	60fb      	str	r3, [r7, #12]
  data = SSD1315_SET_COLUMN_ADRESS;
 800531a:	2321      	movs	r3, #33	@ 0x21
 800531c:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1,&data, 1);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f103 0014 	add.w	r0, r3, #20
 8005324:	f107 020b 	add.w	r2, r7, #11
 8005328:	2301      	movs	r3, #1
 800532a:	2101      	movs	r1, #1
 800532c:	f000 fdd0 	bl	8005ed0 <ssd1315_write_reg>
 8005330:	4602      	mov	r2, r0
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	4413      	add	r3, r2
 8005336:	60fb      	str	r3, [r7, #12]
  data = SSD1315_LOWER_COLUMN_START_ADRESS;
 8005338:	2300      	movs	r3, #0
 800533a:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1,&data, 1);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f103 0014 	add.w	r0, r3, #20
 8005342:	f107 020b 	add.w	r2, r7, #11
 8005346:	2301      	movs	r3, #1
 8005348:	2101      	movs	r1, #1
 800534a:	f000 fdc1 	bl	8005ed0 <ssd1315_write_reg>
 800534e:	4602      	mov	r2, r0
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	4413      	add	r3, r2
 8005354:	60fb      	str	r3, [r7, #12]
  data = SSD1315_DISPLAY_START_LINE_64;
 8005356:	237f      	movs	r3, #127	@ 0x7f
 8005358:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1,&data, 1);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f103 0014 	add.w	r0, r3, #20
 8005360:	f107 020b 	add.w	r2, r7, #11
 8005364:	2301      	movs	r3, #1
 8005366:	2101      	movs	r1, #1
 8005368:	f000 fdb2 	bl	8005ed0 <ssd1315_write_reg>
 800536c:	4602      	mov	r2, r0
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	4413      	add	r3, r2
 8005372:	60fb      	str	r3, [r7, #12]
  data = SSD1315_SET_PAGE_ADRESS;
 8005374:	2322      	movs	r3, #34	@ 0x22
 8005376:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1,&data, 1);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f103 0014 	add.w	r0, r3, #20
 800537e:	f107 020b 	add.w	r2, r7, #11
 8005382:	2301      	movs	r3, #1
 8005384:	2101      	movs	r1, #1
 8005386:	f000 fda3 	bl	8005ed0 <ssd1315_write_reg>
 800538a:	4602      	mov	r2, r0
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	4413      	add	r3, r2
 8005390:	60fb      	str	r3, [r7, #12]
  data = SSD1315_LOWER_COLUMN_START_ADRESS;
 8005392:	2300      	movs	r3, #0
 8005394:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1,&data, 1);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f103 0014 	add.w	r0, r3, #20
 800539c:	f107 020b 	add.w	r2, r7, #11
 80053a0:	2301      	movs	r3, #1
 80053a2:	2101      	movs	r1, #1
 80053a4:	f000 fd94 	bl	8005ed0 <ssd1315_write_reg>
 80053a8:	4602      	mov	r2, r0
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	4413      	add	r3, r2
 80053ae:	60fb      	str	r3, [r7, #12]
  data = SSD1315_LOWER_COLUMN_START_ADRESS_15;
 80053b0:	230f      	movs	r3, #15
 80053b2:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1,&data, 1);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f103 0014 	add.w	r0, r3, #20
 80053ba:	f107 020b 	add.w	r2, r7, #11
 80053be:	2301      	movs	r3, #1
 80053c0:	2101      	movs	r1, #1
 80053c2:	f000 fd85 	bl	8005ed0 <ssd1315_write_reg>
 80053c6:	4602      	mov	r2, r0
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	4413      	add	r3, r2
 80053cc:	60fb      	str	r3, [r7, #12]
  ret += ssd1315_write_reg(&pObj->Ctx, 1,PhysFrameBuffer, SSD1315_LCD_COLUMN_NUMBER*SSD1315_LCD_PAGE_NUMBER);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f103 0014 	add.w	r0, r3, #20
 80053d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80053d8:	4a09      	ldr	r2, [pc, #36]	@ (8005400 <SSD1315_Refresh+0x110>)
 80053da:	2101      	movs	r1, #1
 80053dc:	f000 fd78 	bl	8005ed0 <ssd1315_write_reg>
 80053e0:	4602      	mov	r2, r0
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	4413      	add	r3, r2
 80053e6:	60fb      	str	r3, [r7, #12]

  if (ret != SSD1315_OK)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d002      	beq.n	80053f4 <SSD1315_Refresh+0x104>
  {
    ret = SSD1315_ERROR;
 80053ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80053f2:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 80053f4:	68fb      	ldr	r3, [r7, #12]
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3710      	adds	r7, #16
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	200006a0 	.word	0x200006a0

08005404 <SSD1315_DrawBitmap>:
  * @param  pBmp Bmp picture address.
  * @retval The component status.
  */

int32_t SSD1315_DrawBitmap(SSD1315_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b08e      	sub	sp, #56	@ 0x38
 8005408:	af00      	add	r7, sp, #0
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	607a      	str	r2, [r7, #4]
 8005410:	603b      	str	r3, [r7, #0]
  int32_t  ret = SSD1315_OK;
 8005412:	2300      	movs	r3, #0
 8005414:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t index = 0, size = 0;
 8005416:	2300      	movs	r3, #0
 8005418:	62bb      	str	r3, [r7, #40]	@ 0x28
 800541a:	2300      	movs	r3, #0
 800541c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t height = 0, width  = 0;
 800541e:	2300      	movs	r3, #0
 8005420:	623b      	str	r3, [r7, #32]
 8005422:	2300      	movs	r3, #0
 8005424:	61fb      	str	r3, [r7, #28]
  uint32_t x = 0, y  = 0, y0 = 0;
 8005426:	2300      	movs	r3, #0
 8005428:	61bb      	str	r3, [r7, #24]
 800542a:	2300      	movs	r3, #0
 800542c:	617b      	str	r3, [r7, #20]
 800542e:	2300      	movs	r3, #0
 8005430:	613b      	str	r3, [r7, #16]
  uint32_t XposBMP = 0, YposBMP  = 0;
 8005432:	2300      	movs	r3, #0
 8005434:	633b      	str	r3, [r7, #48]	@ 0x30
 8005436:	2300      	movs	r3, #0
 8005438:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Read bitmap size */
  size = pBmp[2] + (pBmp[3] << 8) + (pBmp[4] << 16)  + (pBmp[5] << 24);
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	3302      	adds	r3, #2
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	461a      	mov	r2, r3
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	3303      	adds	r3, #3
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	021b      	lsls	r3, r3, #8
 800544a:	441a      	add	r2, r3
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	3304      	adds	r3, #4
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	041b      	lsls	r3, r3, #16
 8005454:	441a      	add	r2, r3
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	3305      	adds	r3, #5
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	061b      	lsls	r3, r3, #24
 800545e:	4413      	add	r3, r2
 8005460:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Get bitmap data address offset */
  index = pBmp[10] + (pBmp[11] << 8) + (pBmp[12] << 16)  + (pBmp[13] << 24);
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	330a      	adds	r3, #10
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	461a      	mov	r2, r3
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	330b      	adds	r3, #11
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	021b      	lsls	r3, r3, #8
 8005472:	441a      	add	r2, r3
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	330c      	adds	r3, #12
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	041b      	lsls	r3, r3, #16
 800547c:	441a      	add	r2, r3
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	330d      	adds	r3, #13
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	061b      	lsls	r3, r3, #24
 8005486:	4413      	add	r3, r2
 8005488:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Read bitmap width */
  width = pBmp[18] + (pBmp[19] << 8) + (pBmp[20] << 16)  + (pBmp[21] << 24);
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	3312      	adds	r3, #18
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	461a      	mov	r2, r3
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	3313      	adds	r3, #19
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	021b      	lsls	r3, r3, #8
 800549a:	441a      	add	r2, r3
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	3314      	adds	r3, #20
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	041b      	lsls	r3, r3, #16
 80054a4:	441a      	add	r2, r3
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	3315      	adds	r3, #21
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	061b      	lsls	r3, r3, #24
 80054ae:	4413      	add	r3, r2
 80054b0:	61fb      	str	r3, [r7, #28]

  /* Read bitmap height */
  height = pBmp[22] + (pBmp[23] << 8) + (pBmp[24] << 16)  + (pBmp[25] << 24);
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	3316      	adds	r3, #22
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	461a      	mov	r2, r3
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	3317      	adds	r3, #23
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	021b      	lsls	r3, r3, #8
 80054c2:	441a      	add	r2, r3
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	3318      	adds	r3, #24
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	041b      	lsls	r3, r3, #16
 80054cc:	441a      	add	r2, r3
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	3319      	adds	r3, #25
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	061b      	lsls	r3, r3, #24
 80054d6:	4413      	add	r3, r2
 80054d8:	623b      	str	r3, [r7, #32]

  /* Size conversion */
  size = (size - index)/2;
 80054da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	085b      	lsrs	r3, r3, #1
 80054e2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Apply offset to bypass header */
  pBmp += index;
 80054e4:	683a      	ldr	r2, [r7, #0]
 80054e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054e8:	4413      	add	r3, r2
 80054ea:	603b      	str	r3, [r7, #0]

  /* if bitmap cover whole screen */
  if((Xpos == 0) && (Xpos == 0) & (size == (SSD1315_LCD_PIXEL_WIDTH * SSD1315_LCD_PIXEL_HEIGHT/8)))
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d116      	bne.n	8005520 <SSD1315_DrawBitmap+0x11c>
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	bf0c      	ite	eq
 80054f8:	2301      	moveq	r3, #1
 80054fa:	2300      	movne	r3, #0
 80054fc:	b2da      	uxtb	r2, r3
 80054fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005500:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005504:	bf0c      	ite	eq
 8005506:	2301      	moveq	r3, #1
 8005508:	2300      	movne	r3, #0
 800550a:	b2db      	uxtb	r3, r3
 800550c:	4013      	ands	r3, r2
 800550e:	b2db      	uxtb	r3, r3
 8005510:	2b00      	cmp	r3, #0
 8005512:	d005      	beq.n	8005520 <SSD1315_DrawBitmap+0x11c>
  {
    memcpy(PhysFrameBuffer, pBmp, size);
 8005514:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005516:	6839      	ldr	r1, [r7, #0]
 8005518:	4843      	ldr	r0, [pc, #268]	@ (8005628 <SSD1315_DrawBitmap+0x224>)
 800551a:	f00c facb 	bl	8011ab4 <memcpy>
 800551e:	e078      	b.n	8005612 <SSD1315_DrawBitmap+0x20e>
  }
  else
  {
    x=Xpos+width;
 8005520:	68ba      	ldr	r2, [r7, #8]
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	4413      	add	r3, r2
 8005526:	61bb      	str	r3, [r7, #24]
    y=Ypos+height;
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	6a3b      	ldr	r3, [r7, #32]
 800552c:	4413      	add	r3, r2
 800552e:	617b      	str	r3, [r7, #20]
    y0 = Ypos;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	613b      	str	r3, [r7, #16]

    for(; Xpos < x; Xpos++, XposBMP++)
 8005534:	e069      	b.n	800560a <SSD1315_DrawBitmap+0x206>
    {
      for(Ypos = y0, YposBMP = 0; Ypos < y; Ypos++, YposBMP++)
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	607b      	str	r3, [r7, #4]
 800553a:	2300      	movs	r3, #0
 800553c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800553e:	e05a      	b.n	80055f6 <SSD1315_DrawBitmap+0x1f2>
      {
        /* if bitmap and screen are aligned on a Page */
        if(((Ypos%8) == 0) && (y-Ypos >= 8) && ((YposBMP%8) == 0))
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f003 0307 	and.w	r3, r3, #7
 8005546:	2b00      	cmp	r3, #0
 8005548:	d121      	bne.n	800558e <SSD1315_DrawBitmap+0x18a>
 800554a:	697a      	ldr	r2, [r7, #20]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	2b07      	cmp	r3, #7
 8005552:	d91c      	bls.n	800558e <SSD1315_DrawBitmap+0x18a>
 8005554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005556:	f003 0307 	and.w	r3, r3, #7
 800555a:	2b00      	cmp	r3, #0
 800555c:	d117      	bne.n	800558e <SSD1315_DrawBitmap+0x18a>
        {
          PhysFrameBuffer[Xpos+ (Ypos/8)*SSD1315_LCD_PIXEL_WIDTH] = pBmp[XposBMP+((YposBMP/8)*width)];
 800555e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005560:	08db      	lsrs	r3, r3, #3
 8005562:	69fa      	ldr	r2, [r7, #28]
 8005564:	fb03 f202 	mul.w	r2, r3, r2
 8005568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800556a:	4413      	add	r3, r2
 800556c:	683a      	ldr	r2, [r7, #0]
 800556e:	441a      	add	r2, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	08db      	lsrs	r3, r3, #3
 8005574:	01d9      	lsls	r1, r3, #7
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	440b      	add	r3, r1
 800557a:	7811      	ldrb	r1, [r2, #0]
 800557c:	4a2a      	ldr	r2, [pc, #168]	@ (8005628 <SSD1315_DrawBitmap+0x224>)
 800557e:	54d1      	strb	r1, [r2, r3]
          Ypos+=7;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	3307      	adds	r3, #7
 8005584:	607b      	str	r3, [r7, #4]
          YposBMP+=7;
 8005586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005588:	3307      	adds	r3, #7
 800558a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800558c:	e02d      	b.n	80055ea <SSD1315_DrawBitmap+0x1e6>
        }
        else
        {
          /* Draw bitmap pixel per pixel */
          if( (pBmp[XposBMP+((YposBMP/8)*width)]&(1<<(YposBMP%8))) != 0)
 800558e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005590:	08db      	lsrs	r3, r3, #3
 8005592:	69fa      	ldr	r2, [r7, #28]
 8005594:	fb03 f202 	mul.w	r2, r3, r2
 8005598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800559a:	4413      	add	r3, r2
 800559c:	683a      	ldr	r2, [r7, #0]
 800559e:	4413      	add	r3, r2
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	461a      	mov	r2, r3
 80055a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055a6:	f003 0307 	and.w	r3, r3, #7
 80055aa:	fa42 f303 	asr.w	r3, r2, r3
 80055ae:	f003 0301 	and.w	r3, r3, #1
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00c      	beq.n	80055d0 <SSD1315_DrawBitmap+0x1cc>
            {
              if (SSD1315_SetPixel(pObj, Xpos, Ypos, SSD1315_COLOR_WHITE) != SSD1315_OK)
 80055b6:	23ff      	movs	r3, #255	@ 0xff
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	68b9      	ldr	r1, [r7, #8]
 80055bc:	68f8      	ldr	r0, [r7, #12]
 80055be:	f000 fa3d 	bl	8005a3c <SSD1315_SetPixel>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d010      	beq.n	80055ea <SSD1315_DrawBitmap+0x1e6>
              {
                ret = SSD1315_ERROR;
 80055c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80055cc:	637b      	str	r3, [r7, #52]	@ 0x34
                break;
 80055ce:	e016      	b.n	80055fe <SSD1315_DrawBitmap+0x1fa>
              }
            }
            else
            {
              if (SSD1315_SetPixel(pObj, Xpos, Ypos, SSD1315_COLOR_BLACK) != SSD1315_OK)
 80055d0:	2300      	movs	r3, #0
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	68b9      	ldr	r1, [r7, #8]
 80055d6:	68f8      	ldr	r0, [r7, #12]
 80055d8:	f000 fa30 	bl	8005a3c <SSD1315_SetPixel>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d003      	beq.n	80055ea <SSD1315_DrawBitmap+0x1e6>
                {
                  ret = SSD1315_ERROR;
 80055e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80055e6:	637b      	str	r3, [r7, #52]	@ 0x34
                  break;
 80055e8:	e009      	b.n	80055fe <SSD1315_DrawBitmap+0x1fa>
      for(Ypos = y0, YposBMP = 0; Ypos < y; Ypos++, YposBMP++)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	3301      	adds	r3, #1
 80055ee:	607b      	str	r3, [r7, #4]
 80055f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055f2:	3301      	adds	r3, #1
 80055f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d3a0      	bcc.n	8005540 <SSD1315_DrawBitmap+0x13c>
    for(; Xpos < x; Xpos++, XposBMP++)
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	3301      	adds	r3, #1
 8005602:	60bb      	str	r3, [r7, #8]
 8005604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005606:	3301      	adds	r3, #1
 8005608:	633b      	str	r3, [r7, #48]	@ 0x30
 800560a:	68ba      	ldr	r2, [r7, #8]
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	429a      	cmp	r2, r3
 8005610:	d391      	bcc.n	8005536 <SSD1315_DrawBitmap+0x132>
            }
        }
      }
    }
  }
  if(ret != SSD1315_OK)
 8005612:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005614:	2b00      	cmp	r3, #0
 8005616:	d002      	beq.n	800561e <SSD1315_DrawBitmap+0x21a>
   {
     ret = SSD1315_ERROR;
 8005618:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800561c:	637b      	str	r3, [r7, #52]	@ 0x34
   }
  return ret;
 800561e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005620:	4618      	mov	r0, r3
 8005622:	3738      	adds	r7, #56	@ 0x38
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}
 8005628:	200006a0 	.word	0x200006a0

0800562c <SSD1315_ShiftBitmap>:
  * @param  Yshift specifies number of pixel to shift on Y position.
  * @param  pbmp Bmp picture address in the internal Flash.
  * @retval The component status.
  */
int32_t SSD1315_ShiftBitmap(SSD1315_Object_t *pObj,uint16_t Xpos, uint16_t Ypos, int16_t Xshift, int16_t Yshift, uint8_t *pbmp)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b090      	sub	sp, #64	@ 0x40
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	4608      	mov	r0, r1
 8005636:	4611      	mov	r1, r2
 8005638:	461a      	mov	r2, r3
 800563a:	4603      	mov	r3, r0
 800563c:	817b      	strh	r3, [r7, #10]
 800563e:	460b      	mov	r3, r1
 8005640:	813b      	strh	r3, [r7, #8]
 8005642:	4613      	mov	r3, r2
 8005644:	80fb      	strh	r3, [r7, #6]
  int32_t  ret = SSD1315_OK;
 8005646:	2300      	movs	r3, #0
 8005648:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t index = 0, size = 0;
 800564a:	2300      	movs	r3, #0
 800564c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800564e:	2300      	movs	r3, #0
 8005650:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t height = 0, width  = 0, original_width  = 0;
 8005652:	2300      	movs	r3, #0
 8005654:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005656:	2300      	movs	r3, #0
 8005658:	637b      	str	r3, [r7, #52]	@ 0x34
 800565a:	2300      	movs	r3, #0
 800565c:	623b      	str	r3, [r7, #32]
  uint32_t x = 0, y  = 0, y0 = 0;
 800565e:	2300      	movs	r3, #0
 8005660:	61fb      	str	r3, [r7, #28]
 8005662:	2300      	movs	r3, #0
 8005664:	61bb      	str	r3, [r7, #24]
 8005666:	2300      	movs	r3, #0
 8005668:	617b      	str	r3, [r7, #20]
  uint32_t XposBMP = 0, YposBMP  = 0, original_YposBMP = 0;
 800566a:	2300      	movs	r3, #0
 800566c:	633b      	str	r3, [r7, #48]	@ 0x30
 800566e:	2300      	movs	r3, #0
 8005670:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005672:	2300      	movs	r3, #0
 8005674:	613b      	str	r3, [r7, #16]
  
  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 8005676:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005678:	3302      	adds	r3, #2
 800567a:	881b      	ldrh	r3, [r3, #0]
 800567c:	b29b      	uxth	r3, r3
 800567e:	627b      	str	r3, [r7, #36]	@ 0x24
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 8005680:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005682:	3304      	adds	r3, #4
 8005684:	881b      	ldrh	r3, [r3, #0]
 8005686:	b29b      	uxth	r3, r3
 8005688:	041b      	lsls	r3, r3, #16
 800568a:	461a      	mov	r2, r3
 800568c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800568e:	4313      	orrs	r3, r2
 8005690:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 8005692:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005694:	330a      	adds	r3, #10
 8005696:	881b      	ldrh	r3, [r3, #0]
 8005698:	b29b      	uxth	r3, r3
 800569a:	62bb      	str	r3, [r7, #40]	@ 0x28
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 800569c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800569e:	330c      	adds	r3, #12
 80056a0:	881b      	ldrh	r3, [r3, #0]
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	041b      	lsls	r3, r3, #16
 80056a6:	461a      	mov	r2, r3
 80056a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056aa:	4313      	orrs	r3, r2
 80056ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  
  /* Read bitmap width */
  width = *(uint16_t *) (pbmp + 18);
 80056ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056b0:	3312      	adds	r3, #18
 80056b2:	881b      	ldrh	r3, [r3, #0]
 80056b4:	637b      	str	r3, [r7, #52]	@ 0x34
  width |= (*(uint16_t *) (pbmp + 20)) << 16;
 80056b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056b8:	3314      	adds	r3, #20
 80056ba:	881b      	ldrh	r3, [r3, #0]
 80056bc:	041b      	lsls	r3, r3, #16
 80056be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80056c0:	4313      	orrs	r3, r2
 80056c2:	637b      	str	r3, [r7, #52]	@ 0x34
  original_width = width;
 80056c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056c6:	623b      	str	r3, [r7, #32]
  if( Xshift>=0)
 80056c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	db09      	blt.n	80056e4 <SSD1315_ShiftBitmap+0xb8>
  {
    Xpos = Xpos + Xshift;
 80056d0:	88fa      	ldrh	r2, [r7, #6]
 80056d2:	897b      	ldrh	r3, [r7, #10]
 80056d4:	4413      	add	r3, r2
 80056d6:	817b      	strh	r3, [r7, #10]
    width = width - Xshift;
 80056d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80056e2:	e008      	b.n	80056f6 <SSD1315_ShiftBitmap+0xca>
  }
  else
  {
    width = width + Xshift;
 80056e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80056ea:	4413      	add	r3, r2
 80056ec:	637b      	str	r3, [r7, #52]	@ 0x34
    XposBMP = -Xshift;
 80056ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056f2:	425b      	negs	r3, r3
 80056f4:	633b      	str	r3, [r7, #48]	@ 0x30
  }
  
  /* Read bitmap height */
  height = *(uint16_t *) (pbmp + 22);
 80056f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056f8:	3316      	adds	r3, #22
 80056fa:	881b      	ldrh	r3, [r3, #0]
 80056fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  height |= (*(uint16_t *) (pbmp + 24)) << 16;
 80056fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005700:	3318      	adds	r3, #24
 8005702:	881b      	ldrh	r3, [r3, #0]
 8005704:	041b      	lsls	r3, r3, #16
 8005706:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005708:	4313      	orrs	r3, r2
 800570a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if( Yshift>=0)
 800570c:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	@ 0x48
 8005710:	2b00      	cmp	r3, #0
 8005712:	db0a      	blt.n	800572a <SSD1315_ShiftBitmap+0xfe>
  {
    height = height - Yshift;
 8005714:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	@ 0x48
 8005718:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	63bb      	str	r3, [r7, #56]	@ 0x38
    Ypos = Ypos + Yshift;
 800571e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8005722:	893b      	ldrh	r3, [r7, #8]
 8005724:	4413      	add	r3, r2
 8005726:	813b      	strh	r3, [r7, #8]
 8005728:	e008      	b.n	800573c <SSD1315_ShiftBitmap+0x110>
  }
  else
  {
    height = height + Yshift;
 800572a:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	@ 0x48
 800572e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005730:	4413      	add	r3, r2
 8005732:	63bb      	str	r3, [r7, #56]	@ 0x38
    YposBMP = -Yshift;
 8005734:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	@ 0x48
 8005738:	425b      	negs	r3, r3
 800573a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  original_YposBMP = YposBMP;
 800573c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800573e:	613b      	str	r3, [r7, #16]
  
  /* Size conversion */
  size = (size - index)/2;
 8005740:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	085b      	lsrs	r3, r3, #1
 8005748:	627b      	str	r3, [r7, #36]	@ 0x24
  size = size - ((Xshift*height/8)+(Yshift*width/8 ));
 800574a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800574e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005750:	fb02 f303 	mul.w	r3, r2, r3
 8005754:	08da      	lsrs	r2, r3, #3
 8005756:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	@ 0x48
 800575a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800575c:	fb01 f303 	mul.w	r3, r1, r3
 8005760:	08db      	lsrs	r3, r3, #3
 8005762:	4413      	add	r3, r2
 8005764:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Apply offset to bypass header */
  pbmp += index;
 800576a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800576c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800576e:	4413      	add	r3, r2
 8005770:	64fb      	str	r3, [r7, #76]	@ 0x4c
  
  /* if bitmap cover whole screen */
  if((Xpos == 0) && (Xpos == 0) & (size == (SSD1315_LCD_PIXEL_WIDTH * SSD1315_LCD_PIXEL_HEIGHT/8)))
 8005772:	897b      	ldrh	r3, [r7, #10]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d116      	bne.n	80057a6 <SSD1315_ShiftBitmap+0x17a>
 8005778:	897b      	ldrh	r3, [r7, #10]
 800577a:	2b00      	cmp	r3, #0
 800577c:	bf0c      	ite	eq
 800577e:	2301      	moveq	r3, #1
 8005780:	2300      	movne	r3, #0
 8005782:	b2da      	uxtb	r2, r3
 8005784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005786:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800578a:	bf0c      	ite	eq
 800578c:	2301      	moveq	r3, #1
 800578e:	2300      	movne	r3, #0
 8005790:	b2db      	uxtb	r3, r3
 8005792:	4013      	ands	r3, r2
 8005794:	b2db      	uxtb	r3, r3
 8005796:	2b00      	cmp	r3, #0
 8005798:	d005      	beq.n	80057a6 <SSD1315_ShiftBitmap+0x17a>
  {
    memcpy(PhysFrameBuffer, pbmp, size);
 800579a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800579c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800579e:	4845      	ldr	r0, [pc, #276]	@ (80058b4 <SSD1315_ShiftBitmap+0x288>)
 80057a0:	f00c f988 	bl	8011ab4 <memcpy>
 80057a4:	e07a      	b.n	800589c <SSD1315_ShiftBitmap+0x270>
  }
  else
  {
    x=Xpos+width;
 80057a6:	897b      	ldrh	r3, [r7, #10]
 80057a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80057aa:	4413      	add	r3, r2
 80057ac:	61fb      	str	r3, [r7, #28]
    y=Ypos+height;
 80057ae:	893b      	ldrh	r3, [r7, #8]
 80057b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80057b2:	4413      	add	r3, r2
 80057b4:	61bb      	str	r3, [r7, #24]
    y0 = Ypos;
 80057b6:	893b      	ldrh	r3, [r7, #8]
 80057b8:	617b      	str	r3, [r7, #20]
    
    for(; Xpos < x; Xpos++, XposBMP++)
 80057ba:	e06b      	b.n	8005894 <SSD1315_ShiftBitmap+0x268>
    {
      for(Ypos = y0, YposBMP = original_YposBMP; Ypos < y; Ypos++, YposBMP++)
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	813b      	strh	r3, [r7, #8]
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057c4:	e05c      	b.n	8005880 <SSD1315_ShiftBitmap+0x254>
      {
        /* if bitmap and screen are aligned on a Page */
        if(((Ypos%8) == 0) && (y-Ypos >= 8) && ((YposBMP%8) == 0))
 80057c6:	893b      	ldrh	r3, [r7, #8]
 80057c8:	f003 0307 	and.w	r3, r3, #7
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d122      	bne.n	8005818 <SSD1315_ShiftBitmap+0x1ec>
 80057d2:	893b      	ldrh	r3, [r7, #8]
 80057d4:	69ba      	ldr	r2, [r7, #24]
 80057d6:	1ad3      	subs	r3, r2, r3
 80057d8:	2b07      	cmp	r3, #7
 80057da:	d91d      	bls.n	8005818 <SSD1315_ShiftBitmap+0x1ec>
 80057dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057de:	f003 0307 	and.w	r3, r3, #7
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d118      	bne.n	8005818 <SSD1315_ShiftBitmap+0x1ec>
        {
          PhysFrameBuffer[Xpos+ (Ypos/8)*SSD1315_LCD_PIXEL_WIDTH] = pbmp[XposBMP+((YposBMP/8)*original_width)];
 80057e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057e8:	08db      	lsrs	r3, r3, #3
 80057ea:	6a3a      	ldr	r2, [r7, #32]
 80057ec:	fb03 f202 	mul.w	r2, r3, r2
 80057f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057f2:	4413      	add	r3, r2
 80057f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80057f6:	441a      	add	r2, r3
 80057f8:	8979      	ldrh	r1, [r7, #10]
 80057fa:	893b      	ldrh	r3, [r7, #8]
 80057fc:	08db      	lsrs	r3, r3, #3
 80057fe:	b29b      	uxth	r3, r3
 8005800:	01db      	lsls	r3, r3, #7
 8005802:	440b      	add	r3, r1
 8005804:	7811      	ldrb	r1, [r2, #0]
 8005806:	4a2b      	ldr	r2, [pc, #172]	@ (80058b4 <SSD1315_ShiftBitmap+0x288>)
 8005808:	54d1      	strb	r1, [r2, r3]
          Ypos+=7;
 800580a:	893b      	ldrh	r3, [r7, #8]
 800580c:	3307      	adds	r3, #7
 800580e:	813b      	strh	r3, [r7, #8]
          YposBMP+=7;
 8005810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005812:	3307      	adds	r3, #7
 8005814:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005816:	e02d      	b.n	8005874 <SSD1315_ShiftBitmap+0x248>
        }
        else
        {
          /* Draw bitmap pixel per pixel */
          if( (pbmp[XposBMP+((YposBMP/8)*original_width)]&(1<<(YposBMP%8))) != 0)
 8005818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800581a:	08db      	lsrs	r3, r3, #3
 800581c:	6a3a      	ldr	r2, [r7, #32]
 800581e:	fb03 f202 	mul.w	r2, r3, r2
 8005822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005824:	4413      	add	r3, r2
 8005826:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005828:	4413      	add	r3, r2
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	461a      	mov	r2, r3
 800582e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005830:	f003 0307 	and.w	r3, r3, #7
 8005834:	fa42 f303 	asr.w	r3, r2, r3
 8005838:	f003 0301 	and.w	r3, r3, #1
 800583c:	2b00      	cmp	r3, #0
 800583e:	d00c      	beq.n	800585a <SSD1315_ShiftBitmap+0x22e>
          {
            if (SSD1315_SetPixel(pObj, Xpos, Ypos, SSD1315_COLOR_WHITE) != SSD1315_OK)
 8005840:	8979      	ldrh	r1, [r7, #10]
 8005842:	893a      	ldrh	r2, [r7, #8]
 8005844:	23ff      	movs	r3, #255	@ 0xff
 8005846:	68f8      	ldr	r0, [r7, #12]
 8005848:	f000 f8f8 	bl	8005a3c <SSD1315_SetPixel>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d010      	beq.n	8005874 <SSD1315_ShiftBitmap+0x248>
            {
              ret = SSD1315_ERROR;
 8005852:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005856:	63fb      	str	r3, [r7, #60]	@ 0x3c
              break;
 8005858:	e016      	b.n	8005888 <SSD1315_ShiftBitmap+0x25c>
            }
          }
          else
          {
            if (SSD1315_SetPixel(pObj, Xpos, Ypos, SSD1315_COLOR_BLACK) != SSD1315_OK)
 800585a:	8979      	ldrh	r1, [r7, #10]
 800585c:	893a      	ldrh	r2, [r7, #8]
 800585e:	2300      	movs	r3, #0
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f000 f8eb 	bl	8005a3c <SSD1315_SetPixel>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d003      	beq.n	8005874 <SSD1315_ShiftBitmap+0x248>
            {
              ret = SSD1315_ERROR;
 800586c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005870:	63fb      	str	r3, [r7, #60]	@ 0x3c
              break;
 8005872:	e009      	b.n	8005888 <SSD1315_ShiftBitmap+0x25c>
      for(Ypos = y0, YposBMP = original_YposBMP; Ypos < y; Ypos++, YposBMP++)
 8005874:	893b      	ldrh	r3, [r7, #8]
 8005876:	3301      	adds	r3, #1
 8005878:	813b      	strh	r3, [r7, #8]
 800587a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800587c:	3301      	adds	r3, #1
 800587e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005880:	893b      	ldrh	r3, [r7, #8]
 8005882:	69ba      	ldr	r2, [r7, #24]
 8005884:	429a      	cmp	r2, r3
 8005886:	d89e      	bhi.n	80057c6 <SSD1315_ShiftBitmap+0x19a>
    for(; Xpos < x; Xpos++, XposBMP++)
 8005888:	897b      	ldrh	r3, [r7, #10]
 800588a:	3301      	adds	r3, #1
 800588c:	817b      	strh	r3, [r7, #10]
 800588e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005890:	3301      	adds	r3, #1
 8005892:	633b      	str	r3, [r7, #48]	@ 0x30
 8005894:	897b      	ldrh	r3, [r7, #10]
 8005896:	69fa      	ldr	r2, [r7, #28]
 8005898:	429a      	cmp	r2, r3
 800589a:	d88f      	bhi.n	80057bc <SSD1315_ShiftBitmap+0x190>
          }
        }
      }
    }
  }
  if(ret != SSD1315_OK)
 800589c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d002      	beq.n	80058a8 <SSD1315_ShiftBitmap+0x27c>
  {
    ret = SSD1315_ERROR;
 80058a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80058a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  return ret;
 80058a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3740      	adds	r7, #64	@ 0x40
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	200006a0 	.word	0x200006a0

080058b8 <SSD1315_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle height.
  * @retval The component status.
  */
int32_t SSD1315_FillRGBRect(SSD1315_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b088      	sub	sp, #32
 80058bc:	af00      	add	r7, sp, #0
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	60b9      	str	r1, [r7, #8]
 80058c2:	607a      	str	r2, [r7, #4]
 80058c4:	603b      	str	r3, [r7, #0]
  int32_t  ret = SSD1315_OK;
 80058c6:	2300      	movs	r3, #0
 80058c8:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t color, j;
  for(i = 0; i < Height; i++)
 80058ca:	2300      	movs	r3, #0
 80058cc:	61bb      	str	r3, [r7, #24]
 80058ce:	e032      	b.n	8005936 <SSD1315_FillRGBRect+0x7e>
  {
    for(j = 0; j < Width; j++)
 80058d0:	2300      	movs	r3, #0
 80058d2:	617b      	str	r3, [r7, #20]
 80058d4:	e028      	b.n	8005928 <SSD1315_FillRGBRect+0x70>
    {
      color = *pData | (*(pData + 1) << 8) | (*(pData + 2) << 16) | (*(pData + 3) << 24);
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	461a      	mov	r2, r3
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	3301      	adds	r3, #1
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	021b      	lsls	r3, r3, #8
 80058e4:	431a      	orrs	r2, r3
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	3302      	adds	r3, #2
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	041b      	lsls	r3, r3, #16
 80058ee:	431a      	orrs	r2, r3
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	3303      	adds	r3, #3
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	061b      	lsls	r3, r3, #24
 80058f8:	4313      	orrs	r3, r2
 80058fa:	613b      	str	r3, [r7, #16]
      if(SSD1315_SetPixel (pObj, Xpos + j, Ypos + i, color)!= SSD1315_OK)
 80058fc:	68ba      	ldr	r2, [r7, #8]
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	18d1      	adds	r1, r2, r3
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	441a      	add	r2, r3
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	f000 f896 	bl	8005a3c <SSD1315_SetPixel>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d002      	beq.n	800591c <SSD1315_FillRGBRect+0x64>
      {
        ret = SSD1315_ERROR;
 8005916:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800591a:	61fb      	str	r3, [r7, #28]
      }
      pData += 4;
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	3304      	adds	r3, #4
 8005920:	603b      	str	r3, [r7, #0]
    for(j = 0; j < Width; j++)
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	3301      	adds	r3, #1
 8005926:	617b      	str	r3, [r7, #20]
 8005928:	697a      	ldr	r2, [r7, #20]
 800592a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800592c:	429a      	cmp	r2, r3
 800592e:	d3d2      	bcc.n	80058d6 <SSD1315_FillRGBRect+0x1e>
  for(i = 0; i < Height; i++)
 8005930:	69bb      	ldr	r3, [r7, #24]
 8005932:	3301      	adds	r3, #1
 8005934:	61bb      	str	r3, [r7, #24]
 8005936:	69ba      	ldr	r2, [r7, #24]
 8005938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800593a:	429a      	cmp	r2, r3
 800593c:	d3c8      	bcc.n	80058d0 <SSD1315_FillRGBRect+0x18>
    }
  }

  return ret;
 800593e:	69fb      	ldr	r3, [r7, #28]
}
 8005940:	4618      	mov	r0, r3
 8005942:	3720      	adds	r7, #32
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <SSD1315_DrawHLine>:
  * @param  Length specifies the Line length.
  * @param  Color Specifies the RGB color.
  * @retval The component status.
  */
int32_t SSD1315_DrawHLine(SSD1315_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b086      	sub	sp, #24
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	607a      	str	r2, [r7, #4]
 8005954:	603b      	str	r3, [r7, #0]
  int32_t  ret = SSD1315_OK;
 8005956:	2300      	movs	r3, #0
 8005958:	617b      	str	r3, [r7, #20]
  uint32_t i = 0;
 800595a:	2300      	movs	r3, #0
 800595c:	613b      	str	r3, [r7, #16]

  /* Sent a complete horizontal line */
  for (i = Xpos; i < (Xpos+Length); i++)
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	613b      	str	r3, [r7, #16]
 8005962:	e008      	b.n	8005976 <SSD1315_DrawHLine+0x2e>
  {
    SSD1315_SetPixel(pObj,i, Ypos, Color);
 8005964:	6a3b      	ldr	r3, [r7, #32]
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	6939      	ldr	r1, [r7, #16]
 800596a:	68f8      	ldr	r0, [r7, #12]
 800596c:	f000 f866 	bl	8005a3c <SSD1315_SetPixel>
  for (i = Xpos; i < (Xpos+Length); i++)
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	3301      	adds	r3, #1
 8005974:	613b      	str	r3, [r7, #16]
 8005976:	68ba      	ldr	r2, [r7, #8]
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	4413      	add	r3, r2
 800597c:	693a      	ldr	r2, [r7, #16]
 800597e:	429a      	cmp	r2, r3
 8005980:	d3f0      	bcc.n	8005964 <SSD1315_DrawHLine+0x1c>
  }
  if(ret != SSD1315_OK)
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d002      	beq.n	800598e <SSD1315_DrawHLine+0x46>
  {
    ret = SSD1315_ERROR;
 8005988:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800598c:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800598e:	697b      	ldr	r3, [r7, #20]
}
 8005990:	4618      	mov	r0, r3
 8005992:	3718      	adds	r7, #24
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <SSD1315_DrawVLine>:
  * @param  Length specifies the Line length.
  * @param  Color Specifies the RGB color.
  * @retval The component status.
  */
int32_t SSD1315_DrawVLine(SSD1315_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b086      	sub	sp, #24
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	607a      	str	r2, [r7, #4]
 80059a4:	603b      	str	r3, [r7, #0]
  int32_t  ret = SSD1315_OK;
 80059a6:	2300      	movs	r3, #0
 80059a8:	617b      	str	r3, [r7, #20]
  uint32_t i = 0;
 80059aa:	2300      	movs	r3, #0
 80059ac:	613b      	str	r3, [r7, #16]
  
  for (i = Ypos; i < (Ypos+Length); i++)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	613b      	str	r3, [r7, #16]
 80059b2:	e008      	b.n	80059c6 <SSD1315_DrawVLine+0x2e>
  {
    SSD1315_SetPixel(pObj,Xpos, i, Color);
 80059b4:	6a3b      	ldr	r3, [r7, #32]
 80059b6:	693a      	ldr	r2, [r7, #16]
 80059b8:	68b9      	ldr	r1, [r7, #8]
 80059ba:	68f8      	ldr	r0, [r7, #12]
 80059bc:	f000 f83e 	bl	8005a3c <SSD1315_SetPixel>
  for (i = Ypos; i < (Ypos+Length); i++)
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	3301      	adds	r3, #1
 80059c4:	613b      	str	r3, [r7, #16]
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	4413      	add	r3, r2
 80059cc:	693a      	ldr	r2, [r7, #16]
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d3f0      	bcc.n	80059b4 <SSD1315_DrawVLine+0x1c>
  }
  if(ret != SSD1315_OK)
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d002      	beq.n	80059de <SSD1315_DrawVLine+0x46>
  {
    ret = SSD1315_ERROR;
 80059d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80059dc:	617b      	str	r3, [r7, #20]
  }
  return ret;
 80059de:	697b      	ldr	r3, [r7, #20]
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3718      	adds	r7, #24
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <SSD1315_FillRect>:
  * @param  Height Rectangle height.
  * @param  Color Draw color.
  * @retval Component status.
  */
int32_t SSD1315_FillRect(SSD1315_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b088      	sub	sp, #32
 80059ec:	af02      	add	r7, sp, #8
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	607a      	str	r2, [r7, #4]
 80059f4:	603b      	str	r3, [r7, #0]
  int32_t ret = SSD1315_OK;
 80059f6:	2300      	movs	r3, #0
 80059f8:	617b      	str	r3, [r7, #20]
  uint32_t i;

  for(i = 0U; i < Height; i++)
 80059fa:	2300      	movs	r3, #0
 80059fc:	613b      	str	r3, [r7, #16]
 80059fe:	e013      	b.n	8005a28 <SSD1315_FillRect+0x40>
  {
    if (SSD1315_DrawHLine(pObj, Xpos, (i + Ypos), Width, Color) != SSD1315_OK)
 8005a00:	693a      	ldr	r2, [r7, #16]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	441a      	add	r2, r3
 8005a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a08:	9300      	str	r3, [sp, #0]
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	68b9      	ldr	r1, [r7, #8]
 8005a0e:	68f8      	ldr	r0, [r7, #12]
 8005a10:	f7ff ff9a 	bl	8005948 <SSD1315_DrawHLine>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d003      	beq.n	8005a22 <SSD1315_FillRect+0x3a>
    {
      ret = SSD1315_ERROR;
 8005a1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005a1e:	617b      	str	r3, [r7, #20]
      break;
 8005a20:	e006      	b.n	8005a30 <SSD1315_FillRect+0x48>
  for(i = 0U; i < Height; i++)
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	3301      	adds	r3, #1
 8005a26:	613b      	str	r3, [r7, #16]
 8005a28:	693a      	ldr	r2, [r7, #16]
 8005a2a:	6a3b      	ldr	r3, [r7, #32]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d3e7      	bcc.n	8005a00 <SSD1315_FillRect+0x18>
    }
  }

  return ret;
 8005a30:	697b      	ldr	r3, [r7, #20]
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3718      	adds	r7, #24
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
	...

08005a3c <SSD1315_SetPixel>:
  * @param  Ypos specifies the Y position.
  * @param  Color the RGB pixel color.
  * @retval The component status.
  */
int32_t SSD1315_SetPixel(SSD1315_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b087      	sub	sp, #28
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	607a      	str	r2, [r7, #4]
 8005a48:	603b      	str	r3, [r7, #0]
  int32_t  ret = SSD1315_OK;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	617b      	str	r3, [r7, #20]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  /* Set color */
  if (Color == SSD1315_COLOR_WHITE)
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	2bff      	cmp	r3, #255	@ 0xff
 8005a52:	d117      	bne.n	8005a84 <SSD1315_SetPixel+0x48>
  {
    PhysFrameBuffer[Xpos + (Ypos / 8) * SSD1315_LCD_PIXEL_WIDTH] |= 1 << (Ypos % 8);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	08db      	lsrs	r3, r3, #3
 8005a58:	01d9      	lsls	r1, r3, #7
 8005a5a:	68ba      	ldr	r2, [r7, #8]
 8005a5c:	440a      	add	r2, r1
 8005a5e:	491c      	ldr	r1, [pc, #112]	@ (8005ad0 <SSD1315_SetPixel+0x94>)
 8005a60:	5c8a      	ldrb	r2, [r1, r2]
 8005a62:	b251      	sxtb	r1, r2
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	f002 0207 	and.w	r2, r2, #7
 8005a6a:	2001      	movs	r0, #1
 8005a6c:	fa00 f202 	lsl.w	r2, r0, r2
 8005a70:	b252      	sxtb	r2, r2
 8005a72:	430a      	orrs	r2, r1
 8005a74:	b251      	sxtb	r1, r2
 8005a76:	01da      	lsls	r2, r3, #7
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	4413      	add	r3, r2
 8005a7c:	b2c9      	uxtb	r1, r1
 8005a7e:	4a14      	ldr	r2, [pc, #80]	@ (8005ad0 <SSD1315_SetPixel+0x94>)
 8005a80:	54d1      	strb	r1, [r2, r3]
 8005a82:	e018      	b.n	8005ab6 <SSD1315_SetPixel+0x7a>
  }
  else
  {
    PhysFrameBuffer[Xpos + (Ypos / 8) * SSD1315_LCD_PIXEL_WIDTH] &= ~(1 << (Ypos % 8));
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	08db      	lsrs	r3, r3, #3
 8005a88:	01d9      	lsls	r1, r3, #7
 8005a8a:	68ba      	ldr	r2, [r7, #8]
 8005a8c:	440a      	add	r2, r1
 8005a8e:	4910      	ldr	r1, [pc, #64]	@ (8005ad0 <SSD1315_SetPixel+0x94>)
 8005a90:	5c8a      	ldrb	r2, [r1, r2]
 8005a92:	b251      	sxtb	r1, r2
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	f002 0207 	and.w	r2, r2, #7
 8005a9a:	2001      	movs	r0, #1
 8005a9c:	fa00 f202 	lsl.w	r2, r0, r2
 8005aa0:	b252      	sxtb	r2, r2
 8005aa2:	43d2      	mvns	r2, r2
 8005aa4:	b252      	sxtb	r2, r2
 8005aa6:	400a      	ands	r2, r1
 8005aa8:	b251      	sxtb	r1, r2
 8005aaa:	01da      	lsls	r2, r3, #7
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	4413      	add	r3, r2
 8005ab0:	b2c9      	uxtb	r1, r1
 8005ab2:	4a07      	ldr	r2, [pc, #28]	@ (8005ad0 <SSD1315_SetPixel+0x94>)
 8005ab4:	54d1      	strb	r1, [r2, r3]
  }
  if(ret != SSD1315_OK)
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d002      	beq.n	8005ac2 <SSD1315_SetPixel+0x86>
  {
    ret = SSD1315_ERROR;
 8005abc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005ac0:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8005ac2:	697b      	ldr	r3, [r7, #20]
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	371c      	adds	r7, #28
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr
 8005ad0:	200006a0 	.word	0x200006a0

08005ad4 <SSD1315_GetPixel>:
  * @param  Ypos specifies the Y position.
  * @param  Color the LCD pixel color.
  * @retval The component status.
  */
int32_t SSD1315_GetPixel(SSD1315_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b087      	sub	sp, #28
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	607a      	str	r2, [r7, #4]
 8005ae0:	603b      	str	r3, [r7, #0]
   int32_t  ret = SSD1315_OK;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	617b      	str	r3, [r7, #20]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  if ((Xpos >= SSD1315_LCD_PIXEL_WIDTH) || (Ypos >= SSD1315_LCD_PIXEL_HEIGHT)) 
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	2b7f      	cmp	r3, #127	@ 0x7f
 8005aea:	d802      	bhi.n	8005af2 <SSD1315_GetPixel+0x1e>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2b3f      	cmp	r3, #63	@ 0x3f
 8005af0:	d903      	bls.n	8005afa <SSD1315_GetPixel+0x26>
  {
    *Color = 0;
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	2200      	movs	r2, #0
 8005af6:	601a      	str	r2, [r3, #0]
 8005af8:	e01c      	b.n	8005b34 <SSD1315_GetPixel+0x60>
  }
  else
  {
    *Color = PhysFrameBuffer[Xpos+ (Ypos/8)*SSD1315_LCD_PIXEL_WIDTH] & (1 << Ypos%8);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	08db      	lsrs	r3, r3, #3
 8005afe:	01da      	lsls	r2, r3, #7
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	4413      	add	r3, r2
 8005b04:	4a0f      	ldr	r2, [pc, #60]	@ (8005b44 <SSD1315_GetPixel+0x70>)
 8005b06:	5cd3      	ldrb	r3, [r2, r3]
 8005b08:	4619      	mov	r1, r3
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f003 0307 	and.w	r3, r3, #7
 8005b10:	2201      	movs	r2, #1
 8005b12:	fa02 f303 	lsl.w	r3, r2, r3
 8005b16:	400b      	ands	r3, r1
 8005b18:	461a      	mov	r2, r3
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	601a      	str	r2, [r3, #0]
    if (*Color != 0)
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d003      	beq.n	8005b2e <SSD1315_GetPixel+0x5a>
    {
      *Color = 1;
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	601a      	str	r2, [r3, #0]
 8005b2c:	e002      	b.n	8005b34 <SSD1315_GetPixel+0x60>
    }
    else
    {
      *Color = 0;
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	2200      	movs	r2, #0
 8005b32:	601a      	str	r2, [r3, #0]
    }
  }
  
  return ret;
 8005b34:	697b      	ldr	r3, [r7, #20]
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	371c      	adds	r7, #28
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	200006a0 	.word	0x200006a0

08005b48 <SSD1315_GetXSize>:
  * @param  pObj Component object.
  * @param  The Lcd Pixel Width.
  * @retval The component status.
  */
int32_t SSD1315_GetXSize(SSD1315_Object_t *pObj, uint32_t *XSize)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b085      	sub	sp, #20
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
  int32_t  ret = SSD1315_OK;
 8005b52:	2300      	movs	r3, #0
 8005b54:	60fb      	str	r3, [r7, #12]

  if (pObj->Orientation == SSD1315_ORIENTATION_LANDSCAPE)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d103      	bne.n	8005b66 <SSD1315_GetXSize+0x1e>
  {
    *XSize = 128;
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	2280      	movs	r2, #128	@ 0x80
 8005b62:	601a      	str	r2, [r3, #0]
 8005b64:	e002      	b.n	8005b6c <SSD1315_GetXSize+0x24>
  }
  else
  {
    ret = SSD1315_ERROR;
 8005b66:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005b6a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3714      	adds	r7, #20
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr

08005b7a <SSD1315_GetYSize>:
  * @param  pObj Component object.
  * @param  The Lcd Pixel Height.
  * @retval The component status.
  */
int32_t SSD1315_GetYSize(SSD1315_Object_t *pObj, uint32_t *YSize)
{
 8005b7a:	b480      	push	{r7}
 8005b7c:	b085      	sub	sp, #20
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
 8005b82:	6039      	str	r1, [r7, #0]
  int32_t  ret = SSD1315_OK;
 8005b84:	2300      	movs	r3, #0
 8005b86:	60fb      	str	r3, [r7, #12]

  if (pObj->Orientation == SSD1315_ORIENTATION_LANDSCAPE)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d103      	bne.n	8005b98 <SSD1315_GetYSize+0x1e>
  {
    *YSize = 64;
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	2240      	movs	r2, #64	@ 0x40
 8005b94:	601a      	str	r2, [r3, #0]
 8005b96:	e002      	b.n	8005b9e <SSD1315_GetYSize+0x24>
  }
  else
  {
    ret = SSD1315_ERROR;
 8005b98:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005b9c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3714      	adds	r7, #20
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <SSD1315_SetPage>:
  * @param  pObj Component object.
  * @param  Page specifies the Page position (0-7).
  * @retval The component status.
  */
int32_t SSD1315_SetPage(SSD1315_Object_t *pObj, uint16_t Page)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	807b      	strh	r3, [r7, #2]
  int32_t ret = SSD1315_OK;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	60fb      	str	r3, [r7, #12]
  uint8_t data;

  /* Set Page position  */
  data = (SSD1315_SET_PAGE_START_ADRESS | Page);
 8005bbc:	887b      	ldrh	r3, [r7, #2]
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f103 0014 	add.w	r0, r3, #20
 8005bce:	f107 020b 	add.w	r2, r7, #11
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	2101      	movs	r1, #1
 8005bd6:	f000 f97b 	bl	8005ed0 <ssd1315_write_reg>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	4413      	add	r3, r2
 8005be0:	60fb      	str	r3, [r7, #12]

  if (ret != SSD1315_OK)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d002      	beq.n	8005bee <SSD1315_SetPage+0x42>
  {
    ret = SSD1315_ERROR;
 8005be8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005bec:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8005bee:	68fb      	ldr	r3, [r7, #12]
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3710      	adds	r7, #16
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <SSD1315_SetColumn>:
  * @param  pObj Component object.
  * @param  Column specifies the Column position (0-127).
  * @retval The component status.
  */
int32_t SSD1315_SetColumn(SSD1315_Object_t *pObj, uint16_t Column)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	460b      	mov	r3, r1
 8005c02:	807b      	strh	r3, [r7, #2]
  int32_t ret = SSD1315_OK;
 8005c04:	2300      	movs	r3, #0
 8005c06:	60fb      	str	r3, [r7, #12]
  uint8_t data;
  /* Set Column position  */

  data = SSD1315_LOWER_COLUMN_START_ADRESS;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f103 0014 	add.w	r0, r3, #20
 8005c12:	f107 020b 	add.w	r2, r7, #11
 8005c16:	2301      	movs	r3, #1
 8005c18:	2101      	movs	r1, #1
 8005c1a:	f000 f959 	bl	8005ed0 <ssd1315_write_reg>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	4413      	add	r3, r2
 8005c24:	60fb      	str	r3, [r7, #12]
  data = (SSD1315_LOWER_COLUMN_START_ADRESS | Column);
 8005c26:	887b      	ldrh	r3, [r7, #2]
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f103 0014 	add.w	r0, r3, #20
 8005c32:	f107 020b 	add.w	r2, r7, #11
 8005c36:	2301      	movs	r3, #1
 8005c38:	2101      	movs	r1, #1
 8005c3a:	f000 f949 	bl	8005ed0 <ssd1315_write_reg>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	4413      	add	r3, r2
 8005c44:	60fb      	str	r3, [r7, #12]
  data = SSD1315_DISPLAY_START_LINE_32;
 8005c46:	231f      	movs	r3, #31
 8005c48:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f103 0014 	add.w	r0, r3, #20
 8005c50:	f107 020b 	add.w	r2, r7, #11
 8005c54:	2301      	movs	r3, #1
 8005c56:	2101      	movs	r1, #1
 8005c58:	f000 f93a 	bl	8005ed0 <ssd1315_write_reg>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	4413      	add	r3, r2
 8005c62:	60fb      	str	r3, [r7, #12]

  if (ret != SSD1315_OK)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d002      	beq.n	8005c70 <SSD1315_SetColumn+0x78>
  {
    ret = SSD1315_ERROR;
 8005c6a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005c6e:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8005c70:	68fb      	ldr	r3, [r7, #12]
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3710      	adds	r7, #16
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}

08005c7a <SSD1315_ScrollingSetup>:
            @arg  0..7
  * @param  Frequency SSD1315_SCROLL_FREQ_2FRAMES to SSD1315_SCROLL_FREQ_256FRAMES
  * @retval The component status.
  */
int32_t SSD1315_ScrollingSetup(SSD1315_Object_t *pObj, uint16_t ScrollMode, uint16_t StartPage, uint16_t EndPage, uint16_t Frequency)
{
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b086      	sub	sp, #24
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	60f8      	str	r0, [r7, #12]
 8005c82:	4608      	mov	r0, r1
 8005c84:	4611      	mov	r1, r2
 8005c86:	461a      	mov	r2, r3
 8005c88:	4603      	mov	r3, r0
 8005c8a:	817b      	strh	r3, [r7, #10]
 8005c8c:	460b      	mov	r3, r1
 8005c8e:	813b      	strh	r3, [r7, #8]
 8005c90:	4613      	mov	r3, r2
 8005c92:	80fb      	strh	r3, [r7, #6]
  int32_t ret = SSD1315_OK;
 8005c94:	2300      	movs	r3, #0
 8005c96:	617b      	str	r3, [r7, #20]
  uint8_t data;

  /* Scrolling setup sequence */
  data = ScrollMode;                                     /* Right/Left Horizontal Scroll */
 8005c98:	897b      	ldrh	r3, [r7, #10]
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	74fb      	strb	r3, [r7, #19]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f103 0014 	add.w	r0, r3, #20
 8005ca4:	f107 0213 	add.w	r2, r7, #19
 8005ca8:	2301      	movs	r3, #1
 8005caa:	2101      	movs	r1, #1
 8005cac:	f000 f910 	bl	8005ed0 <ssd1315_write_reg>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	4413      	add	r3, r2
 8005cb6:	617b      	str	r3, [r7, #20]
  data = SSD1315_LOWER_COLUMN_START_ADRESS;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	74fb      	strb	r3, [r7, #19]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f103 0014 	add.w	r0, r3, #20
 8005cc2:	f107 0213 	add.w	r2, r7, #19
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	2101      	movs	r1, #1
 8005cca:	f000 f901 	bl	8005ed0 <ssd1315_write_reg>
 8005cce:	4602      	mov	r2, r0
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	617b      	str	r3, [r7, #20]
  data = StartPage;                                      /* start page address*/
 8005cd6:	893b      	ldrh	r3, [r7, #8]
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	74fb      	strb	r3, [r7, #19]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f103 0014 	add.w	r0, r3, #20
 8005ce2:	f107 0213 	add.w	r2, r7, #19
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	2101      	movs	r1, #1
 8005cea:	f000 f8f1 	bl	8005ed0 <ssd1315_write_reg>
 8005cee:	4602      	mov	r2, r0
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	4413      	add	r3, r2
 8005cf4:	617b      	str	r3, [r7, #20]
  data = Frequency;                                      /* Frequency*/
 8005cf6:	8c3b      	ldrh	r3, [r7, #32]
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	74fb      	strb	r3, [r7, #19]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f103 0014 	add.w	r0, r3, #20
 8005d02:	f107 0213 	add.w	r2, r7, #19
 8005d06:	2301      	movs	r3, #1
 8005d08:	2101      	movs	r1, #1
 8005d0a:	f000 f8e1 	bl	8005ed0 <ssd1315_write_reg>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	4413      	add	r3, r2
 8005d14:	617b      	str	r3, [r7, #20]
  data = EndPage;                                        /* End page address*/
 8005d16:	88fb      	ldrh	r3, [r7, #6]
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	74fb      	strb	r3, [r7, #19]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f103 0014 	add.w	r0, r3, #20
 8005d22:	f107 0213 	add.w	r2, r7, #19
 8005d26:	2301      	movs	r3, #1
 8005d28:	2101      	movs	r1, #1
 8005d2a:	f000 f8d1 	bl	8005ed0 <ssd1315_write_reg>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	4413      	add	r3, r2
 8005d34:	617b      	str	r3, [r7, #20]
  data = SSD1315_LOWER_COLUMN_START_ADRESS;           
 8005d36:	2300      	movs	r3, #0
 8005d38:	74fb      	strb	r3, [r7, #19]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f103 0014 	add.w	r0, r3, #20
 8005d40:	f107 0213 	add.w	r2, r7, #19
 8005d44:	2301      	movs	r3, #1
 8005d46:	2101      	movs	r1, #1
 8005d48:	f000 f8c2 	bl	8005ed0 <ssd1315_write_reg>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	4413      	add	r3, r2
 8005d52:	617b      	str	r3, [r7, #20]
  data = SSD1315_CONTRAST_CONTROL_2;
 8005d54:	23ff      	movs	r3, #255	@ 0xff
 8005d56:	74fb      	strb	r3, [r7, #19]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f103 0014 	add.w	r0, r3, #20
 8005d5e:	f107 0213 	add.w	r2, r7, #19
 8005d62:	2301      	movs	r3, #1
 8005d64:	2101      	movs	r1, #1
 8005d66:	f000 f8b3 	bl	8005ed0 <ssd1315_write_reg>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	4413      	add	r3, r2
 8005d70:	617b      	str	r3, [r7, #20]

  if (ret != SSD1315_OK)
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d002      	beq.n	8005d7e <SSD1315_ScrollingSetup+0x104>
  {
    ret = SSD1315_ERROR;
 8005d78:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005d7c:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8005d7e:	697b      	ldr	r3, [r7, #20]
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3718      	adds	r7, #24
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <SSD1315_ScrollingStart>:
  * @brief  Start Display Scrolling.
  * @param  pObj Component object.
  * @retval The component status.
  */
int32_t SSD1315_ScrollingStart(SSD1315_Object_t *pObj)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  int32_t ret = SSD1315_OK;
 8005d90:	2300      	movs	r3, #0
 8005d92:	60fb      	str	r3, [r7, #12]
  uint8_t data;

  /* Start scrolling sequence */
  data = SSD1315_ACTIVATE_SCROLL;
 8005d94:	232f      	movs	r3, #47	@ 0x2f
 8005d96:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f103 0014 	add.w	r0, r3, #20
 8005d9e:	f107 020b 	add.w	r2, r7, #11
 8005da2:	2301      	movs	r3, #1
 8005da4:	2101      	movs	r1, #1
 8005da6:	f000 f893 	bl	8005ed0 <ssd1315_write_reg>
 8005daa:	4602      	mov	r2, r0
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	4413      	add	r3, r2
 8005db0:	60fb      	str	r3, [r7, #12]

  if (ret != SSD1315_OK)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d002      	beq.n	8005dbe <SSD1315_ScrollingStart+0x36>
  {
    ret = SSD1315_ERROR;
 8005db8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005dbc:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3710      	adds	r7, #16
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <SSD1315_ScrollingStop>:
  * @brief  Stop Display Scrolling.
  * @param  pObj Component object.
  * @retval The component status.
  */
int32_t SSD1315_ScrollingStop(SSD1315_Object_t *pObj)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b084      	sub	sp, #16
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  int32_t ret = SSD1315_OK;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	60fb      	str	r3, [r7, #12]
  uint8_t data;

  /* Stop scrolling  sequence */
  data = SSD1315_DESACTIVATE_SCROLL;
 8005dd4:	232e      	movs	r3, #46	@ 0x2e
 8005dd6:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f103 0014 	add.w	r0, r3, #20
 8005dde:	f107 020b 	add.w	r2, r7, #11
 8005de2:	2301      	movs	r3, #1
 8005de4:	2101      	movs	r1, #1
 8005de6:	f000 f873 	bl	8005ed0 <ssd1315_write_reg>
 8005dea:	4602      	mov	r2, r0
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	4413      	add	r3, r2
 8005df0:	60fb      	str	r3, [r7, #12]

  if (ret != SSD1315_OK)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d002      	beq.n	8005dfe <SSD1315_ScrollingStop+0x36>
  {
    ret = SSD1315_ERROR;
 8005df8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005dfc:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3710      	adds	r7, #16
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <SSD1315_ReadRegWrap>:
  * @param  pData The target register value to be red.
  * @param  Length Buffer size to be red.
  * @retval error status.
  */
static int32_t SSD1315_ReadRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b086      	sub	sp, #24
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	607a      	str	r2, [r7, #4]
 8005e12:	461a      	mov	r2, r3
 8005e14:	460b      	mov	r3, r1
 8005e16:	817b      	strh	r3, [r7, #10]
 8005e18:	4613      	mov	r3, r2
 8005e1a:	813b      	strh	r3, [r7, #8]
  SSD1315_Object_t *pObj = (SSD1315_Object_t *)handle;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(Reg, pData, Length);
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	893a      	ldrh	r2, [r7, #8]
 8005e26:	8978      	ldrh	r0, [r7, #10]
 8005e28:	6879      	ldr	r1, [r7, #4]
 8005e2a:	4798      	blx	r3
 8005e2c:	4603      	mov	r3, r0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3718      	adds	r7, #24
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}

08005e36 <SSD1315_WriteRegWrap>:
  * @param  pData The target register value to be written.
  * @param  Length Buffer size to be written.
  * @retval error status.
  */
static int32_t SSD1315_WriteRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8005e36:	b580      	push	{r7, lr}
 8005e38:	b086      	sub	sp, #24
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	60f8      	str	r0, [r7, #12]
 8005e3e:	607a      	str	r2, [r7, #4]
 8005e40:	461a      	mov	r2, r3
 8005e42:	460b      	mov	r3, r1
 8005e44:	817b      	strh	r3, [r7, #10]
 8005e46:	4613      	mov	r3, r2
 8005e48:	813b      	strh	r3, [r7, #8]
  SSD1315_Object_t *pObj = (SSD1315_Object_t *)handle;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(Reg, pData, Length);
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	893a      	ldrh	r2, [r7, #8]
 8005e54:	8978      	ldrh	r0, [r7, #10]
 8005e56:	6879      	ldr	r1, [r7, #4]
 8005e58:	4798      	blx	r3
 8005e5a:	4603      	mov	r3, r0
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3718      	adds	r7, #24
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <ssd1315_Clear>:
  * @brief  Clear Display screen.
  * @param  ColorCode the color use to clear the screen (SSD1315_COLOR_WHITE or SSD1315_COLOR_BLACK).
  * @retval None
  */
static void ssd1315_Clear(uint16_t ColorCode)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b082      	sub	sp, #8
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	80fb      	strh	r3, [r7, #6]
  /* Check color */
  if (ColorCode == SSD1315_COLOR_WHITE) 
 8005e6e:	88fb      	ldrh	r3, [r7, #6]
 8005e70:	2bff      	cmp	r3, #255	@ 0xff
 8005e72:	d106      	bne.n	8005e82 <ssd1315_Clear+0x1e>
  {
    memset(PhysFrameBuffer, SSD1315_COLOR_WHITE, SSD1315_LCD_COLUMN_NUMBER*SSD1315_LCD_PAGE_NUMBER);
 8005e74:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005e78:	21ff      	movs	r1, #255	@ 0xff
 8005e7a:	4807      	ldr	r0, [pc, #28]	@ (8005e98 <ssd1315_Clear+0x34>)
 8005e7c:	f00b fde0 	bl	8011a40 <memset>
  }
  else
  {
    memset(PhysFrameBuffer, SSD1315_COLOR_BLACK, SSD1315_LCD_COLUMN_NUMBER*SSD1315_LCD_PAGE_NUMBER);
  }
}
 8005e80:	e005      	b.n	8005e8e <ssd1315_Clear+0x2a>
    memset(PhysFrameBuffer, SSD1315_COLOR_BLACK, SSD1315_LCD_COLUMN_NUMBER*SSD1315_LCD_PAGE_NUMBER);
 8005e82:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005e86:	2100      	movs	r1, #0
 8005e88:	4803      	ldr	r0, [pc, #12]	@ (8005e98 <ssd1315_Clear+0x34>)
 8005e8a:	f00b fdd9 	bl	8011a40 <memset>
}
 8005e8e:	bf00      	nop
 8005e90:	3708      	adds	r7, #8
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	200006a0 	.word	0x200006a0

08005e9c <SSD1315_IO_Delay>:
  * @brief  SSD1315 delay.
  * @param  Delay Delay in ms.
  * @retval Component error status.
  */
static int32_t SSD1315_IO_Delay(SSD1315_Object_t *pObj, uint32_t Delay)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	4798      	blx	r3
 8005eac:	4603      	mov	r3, r0
 8005eae:	60fb      	str	r3, [r7, #12]
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8005eb0:	bf00      	nop
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	4798      	blx	r3
 8005eb8:	4603      	mov	r3, r0
 8005eba:	461a      	mov	r2, r3
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	1ad3      	subs	r3, r2, r3
 8005ec0:	683a      	ldr	r2, [r7, #0]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d8f5      	bhi.n	8005eb2 <SSD1315_IO_Delay+0x16>
  {
  }
  return SSD1315_OK;
 8005ec6:	2300      	movs	r3, #0
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3710      	adds	r7, #16
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <ssd1315_write_reg>:
  * @param  uint8_t reg: register to write
  * @param  uint8_t* data: pointer to data to write in register reg
  *
*/
int32_t ssd1315_write_reg(ssd1315_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 8005ed0:	b590      	push	{r4, r7, lr}
 8005ed2:	b085      	sub	sp, #20
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	607a      	str	r2, [r7, #4]
 8005eda:	461a      	mov	r2, r3
 8005edc:	460b      	mov	r3, r1
 8005ede:	817b      	strh	r3, [r7, #10]
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681c      	ldr	r4, [r3, #0]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6898      	ldr	r0, [r3, #8]
 8005eec:	893b      	ldrh	r3, [r7, #8]
 8005eee:	8979      	ldrh	r1, [r7, #10]
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	47a0      	blx	r4
 8005ef4:	4603      	mov	r3, r0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3714      	adds	r7, #20
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd90      	pop	{r4, r7, pc}

08005efe <LL_AHB2_GRP1_EnableClock>:
{
 8005efe:	b480      	push	{r7}
 8005f00:	b085      	sub	sp, #20
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005f06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f0a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005f0c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005f16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f1a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	4013      	ands	r3, r2
 8005f20:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005f22:	68fb      	ldr	r3, [r7, #12]
}
 8005f24:	bf00      	nop
 8005f26:	3714      	adds	r7, #20
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <LL_APB2_GRP1_EnableClock>:
{
 8005f30:	b480      	push	{r7}
 8005f32:	b085      	sub	sp, #20
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8005f38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f3c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005f3e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005f48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f4c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4013      	ands	r3, r2
 8005f52:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005f54:	68fb      	ldr	r3, [r7, #12]
}
 8005f56:	bf00      	nop
 8005f58:	3714      	adds	r7, #20
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr

08005f62 <LL_APB2_GRP1_DisableClock>:
{
 8005f62:	b480      	push	{r7}
 8005f64:	b083      	sub	sp, #12
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8005f6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f6e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	43db      	mvns	r3, r3
 8005f74:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005f78:	4013      	ands	r3, r2
 8005f7a:	660b      	str	r3, [r1, #96]	@ 0x60
}
 8005f7c:	bf00      	nop
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <BSP_PWM_LED_Init>:
/**
  * @brief  Configure PWM LED Driver.
  * @retval BSP error code
  */
int32_t BSP_PWM_LED_Init(void)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b086      	sub	sp, #24
 8005f8c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	617b      	str	r3, [r7, #20]
  
  GPIO_InitTypeDef  gpio_config = {0};
 8005f92:	463b      	mov	r3, r7
 8005f94:	2200      	movs	r2, #0
 8005f96:	601a      	str	r2, [r3, #0]
 8005f98:	605a      	str	r2, [r3, #4]
 8005f9a:	609a      	str	r2, [r3, #8]
 8005f9c:	60da      	str	r2, [r3, #12]
 8005f9e:	611a      	str	r2, [r3, #16]
  
  PWM_LED_SDI_GPIO_CLK_ENABLE();
 8005fa0:	2001      	movs	r0, #1
 8005fa2:	f7ff ffac 	bl	8005efe <LL_AHB2_GRP1_EnableClock>
  gpio_config.Pin       = PWM_LED_SDI_GPIO_PIN;
 8005fa6:	2380      	movs	r3, #128	@ 0x80
 8005fa8:	603b      	str	r3, [r7, #0]
  gpio_config.Mode      = GPIO_MODE_OUTPUT_PP;
 8005faa:	2301      	movs	r3, #1
 8005fac:	607b      	str	r3, [r7, #4]
  gpio_config.Pull      = GPIO_PULLDOWN;
 8005fae:	2302      	movs	r3, #2
 8005fb0:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(PWM_LED_SDI_GPIO_PORT, &gpio_config);
 8005fb2:	463b      	mov	r3, r7
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005fba:	f001 fde1 	bl	8007b80 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(PWM_LED_SDI_GPIO_PORT, PWM_LED_SDI_GPIO_PIN, GPIO_PIN_RESET);
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	2180      	movs	r1, #128	@ 0x80
 8005fc2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005fc6:	f002 f829 	bl	800801c <HAL_GPIO_WritePin>
  
  PWM_LED_SELECT_GPIO_CLK_ENABLE();
 8005fca:	2080      	movs	r0, #128	@ 0x80
 8005fcc:	f7ff ff97 	bl	8005efe <LL_AHB2_GRP1_EnableClock>
  gpio_config.Pin       = PWM_LED_SELECT_GPIO_PIN;
 8005fd0:	2302      	movs	r3, #2
 8005fd2:	603b      	str	r3, [r7, #0]
  gpio_config.Mode      = GPIO_MODE_OUTPUT_PP;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	607b      	str	r3, [r7, #4]
  gpio_config.Pull      = GPIO_PULLDOWN;
 8005fd8:	2302      	movs	r3, #2
 8005fda:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(PWM_LED_SELECT_GPIO_PORT, &gpio_config);
 8005fdc:	463b      	mov	r3, r7
 8005fde:	4619      	mov	r1, r3
 8005fe0:	4814      	ldr	r0, [pc, #80]	@ (8006034 <BSP_PWM_LED_Init+0xac>)
 8005fe2:	f001 fdcd 	bl	8007b80 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(PWM_LED_SELECT_GPIO_PORT, PWM_LED_SELECT_GPIO_PIN, GPIO_PIN_RESET);
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	2102      	movs	r1, #2
 8005fea:	4812      	ldr	r0, [pc, #72]	@ (8006034 <BSP_PWM_LED_Init+0xac>)
 8005fec:	f002 f816 	bl	800801c <HAL_GPIO_WritePin>

  PwmLed_TimerHandle.Instance = PWM_LED_TIM;
 8005ff0:	4b11      	ldr	r3, [pc, #68]	@ (8006038 <BSP_PWM_LED_Init+0xb0>)
 8005ff2:	4a12      	ldr	r2, [pc, #72]	@ (800603c <BSP_PWM_LED_Init+0xb4>)
 8005ff4:	601a      	str	r2, [r3, #0]
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#else
    /* TIM17 MSP initialization */
    TIM17_MspInit(&PwmLed_TimerHandle);
 8005ff6:	4810      	ldr	r0, [pc, #64]	@ (8006038 <BSP_PWM_LED_Init+0xb0>)
 8005ff8:	f000 fa2a 	bl	8006450 <TIM17_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS == 1*/
      
  PwmLed_TimerHandle.Init.Prescaler = (PWM_LED_TIM_GET_COUNTER_CLK_FREQ()/1000000) -1;
 8005ffc:	f003 f9c6 	bl	800938c <HAL_RCC_GetPCLK2Freq>
 8006000:	4603      	mov	r3, r0
 8006002:	4a0f      	ldr	r2, [pc, #60]	@ (8006040 <BSP_PWM_LED_Init+0xb8>)
 8006004:	fba2 2303 	umull	r2, r3, r2, r3
 8006008:	0c9b      	lsrs	r3, r3, #18
 800600a:	3b01      	subs	r3, #1
 800600c:	4a0a      	ldr	r2, [pc, #40]	@ (8006038 <BSP_PWM_LED_Init+0xb0>)
 800600e:	6053      	str	r3, [r2, #4]
  PwmLed_TimerHandle.Init.Period = (PWM_LED_TIM_COUNTER_FREQ/PWM_LED_TIM_FREQ) - 1;
 8006010:	4b09      	ldr	r3, [pc, #36]	@ (8006038 <BSP_PWM_LED_Init+0xb0>)
 8006012:	2204      	movs	r2, #4
 8006014:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_Base_Init(&PwmLed_TimerHandle) != HAL_OK) 
 8006016:	4808      	ldr	r0, [pc, #32]	@ (8006038 <BSP_PWM_LED_Init+0xb0>)
 8006018:	f004 fd9c 	bl	800ab54 <HAL_TIM_Base_Init>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d002      	beq.n	8006028 <BSP_PWM_LED_Init+0xa0>
  {
    ret = BSP_ERROR_NO_INIT;
 8006022:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006026:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8006028:	697b      	ldr	r3, [r7, #20]
}
 800602a:	4618      	mov	r0, r3
 800602c:	3718      	adds	r7, #24
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	48001c00 	.word	0x48001c00
 8006038:	20000ab0 	.word	0x20000ab0
 800603c:	40014800 	.word	0x40014800
 8006040:	431bde83 	.word	0x431bde83

08006044 <BSP_PWM_LED_DeInit>:
/**
  * @brief  DeInitialize PWM LED Driver.
  * @retval BSP error code
  */
int32_t BSP_PWM_LED_DeInit(void)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b082      	sub	sp, #8
 8006048:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800604a:	2300      	movs	r3, #0
 800604c:	607b      	str	r3, [r7, #4]

  HAL_GPIO_DeInit(PWM_LED_SELECT_GPIO_PORT, PWM_LED_SELECT_GPIO_PIN);
 800604e:	2102      	movs	r1, #2
 8006050:	4810      	ldr	r0, [pc, #64]	@ (8006094 <BSP_PWM_LED_DeInit+0x50>)
 8006052:	f001 ff05 	bl	8007e60 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(PWM_LED_SDI_GPIO_PORT, PWM_LED_SDI_GPIO_PIN);
 8006056:	2180      	movs	r1, #128	@ 0x80
 8006058:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800605c:	f001 ff00 	bl	8007e60 <HAL_GPIO_DeInit>
  __HAL_TIM_DISABLE_IT(&PwmLed_TimerHandle, TIM_IT_UPDATE);
 8006060:	4b0d      	ldr	r3, [pc, #52]	@ (8006098 <BSP_PWM_LED_DeInit+0x54>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	68da      	ldr	r2, [r3, #12]
 8006066:	4b0c      	ldr	r3, [pc, #48]	@ (8006098 <BSP_PWM_LED_DeInit+0x54>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f022 0201 	bic.w	r2, r2, #1
 800606e:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_DeInit(&PwmLed_TimerHandle) != HAL_OK)
 8006070:	4809      	ldr	r0, [pc, #36]	@ (8006098 <BSP_PWM_LED_DeInit+0x54>)
 8006072:	f004 fe3f 	bl	800acf4 <HAL_TIM_PWM_DeInit>
 8006076:	4603      	mov	r3, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	d002      	beq.n	8006082 <BSP_PWM_LED_DeInit+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 800607c:	f06f 0305 	mvn.w	r3, #5
 8006080:	607b      	str	r3, [r7, #4]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
#else
    /* TIM17 MSP de-initialization */
    TIM17_MspDeInit(&PwmLed_TimerHandle);
 8006082:	4805      	ldr	r0, [pc, #20]	@ (8006098 <BSP_PWM_LED_DeInit+0x54>)
 8006084:	f000 fa00 	bl	8006488 <TIM17_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS == 1*/
#if (PA7_AUTO_MANAGEMENT == 1)
    BSP_PWM_LED_Pin_AutoManagement();
#endif /* PA7_AUTO_MANAGEMENT == 1*/
  
  return ret;
 8006088:	687b      	ldr	r3, [r7, #4]
}
 800608a:	4618      	mov	r0, r3
 800608c:	3708      	adds	r7, #8
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
 8006092:	bf00      	nop
 8006094:	48001c00 	.word	0x48001c00
 8006098:	20000ab0 	.word	0x20000ab0

0800609c <BSP_PWM_LED_On>:
  * @brief  Set the GS data (PWM Control) for each output.
  * @param  aPwmLedGsData GS Data array (one element per output)
  * @retval BSP error code
  */
int32_t BSP_PWM_LED_On(aPwmLedGsData_TypeDef aPwmLedGsData)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b082      	sub	sp, #8
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  return PWM_LED_WriteData(aPwmLedGsData);
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f000 f8c7 	bl	8006238 <PWM_LED_WriteData>
 80060aa:	4603      	mov	r3, r0
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3708      	adds	r7, #8
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <BSP_PWM_LED_Off>:
/**
  * @brief  Turn each output Off.
  * @retval BSP error code
  */
int32_t BSP_PWM_LED_Off(void)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
  aPwmLedGsData_TypeDef aPwmLedGsData = {PWM_LED_GSDATA_OFF, PWM_LED_GSDATA_OFF, PWM_LED_GSDATA_OFF};
 80060ba:	1d3b      	adds	r3, r7, #4
 80060bc:	2100      	movs	r1, #0
 80060be:	460a      	mov	r2, r1
 80060c0:	801a      	strh	r2, [r3, #0]
 80060c2:	460a      	mov	r2, r1
 80060c4:	709a      	strb	r2, [r3, #2]
  return PWM_LED_WriteData(aPwmLedGsData);
 80060c6:	1d3b      	adds	r3, r7, #4
 80060c8:	4618      	mov	r0, r3
 80060ca:	f000 f8b5 	bl	8006238 <PWM_LED_WriteData>
 80060ce:	4603      	mov	r3, r0
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3708      	adds	r7, #8
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <BSP_PWM_LED_IRQHandler>:
/**
  * @brief  BSP PWM LED interrupt handler.
  * @retval None
  */
void BSP_PWM_LED_IRQHandler(void)
{
 80060d8:	b480      	push	{r7}
 80060da:	af00      	add	r7, sp, #0
  __HAL_TIM_CLEAR_FLAG(&PwmLed_TimerHandle, TIM_IT_UPDATE);
 80060dc:	4b07      	ldr	r3, [pc, #28]	@ (80060fc <BSP_PWM_LED_IRQHandler+0x24>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f06f 0201 	mvn.w	r2, #1
 80060e4:	611a      	str	r2, [r3, #16]
  CycleCount++;
 80060e6:	4b06      	ldr	r3, [pc, #24]	@ (8006100 <BSP_PWM_LED_IRQHandler+0x28>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	3301      	adds	r3, #1
 80060ec:	4a04      	ldr	r2, [pc, #16]	@ (8006100 <BSP_PWM_LED_IRQHandler+0x28>)
 80060ee:	6013      	str	r3, [r2, #0]
}
 80060f0:	bf00      	nop
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr
 80060fa:	bf00      	nop
 80060fc:	20000ab0 	.word	0x20000ab0
 8006100:	20000afc 	.word	0x20000afc

08006104 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  * @retval BSP error code
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b088      	sub	sp, #32
 8006108:	af00      	add	r7, sp, #0
 800610a:	4603      	mov	r3, r0
 800610c:	460a      	mov	r2, r1
 800610e:	71fb      	strb	r3, [r7, #7]
 8006110:	4613      	mov	r3, r2
 8006112:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure = {0};
 8006114:	f107 030c 	add.w	r3, r7, #12
 8006118:	2200      	movs	r2, #0
 800611a:	601a      	str	r2, [r3, #0]
 800611c:	605a      	str	r2, [r3, #4]
 800611e:	609a      	str	r2, [r3, #8]
 8006120:	60da      	str	r2, [r3, #12]
 8006122:	611a      	str	r2, [r3, #16]
  static BSP_EXTI_LineCallback button_callback[BUTTONn] = {BUTTON_USER1_EXTI_Callback, BUTTON_USER2_EXTI_Callback};
  static uint32_t button_interrupt_priority[BUTTONn] = {BSP_BUTTON_USERx_IT_PRIORITY, BSP_BUTTON_USERx_IT_PRIORITY};
  static const uint32_t button_exti_line[BUTTONn] = {BUTTON_USER1_EXTI_LINE, BUTTON_USER2_EXTI_LINE};

  /* Enable the BUTTON Clock */
  BUTTON_USERx_GPIO_CLK_ENABLE(Button);
 8006124:	79fb      	ldrb	r3, [r7, #7]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d103      	bne.n	8006132 <BSP_PB_Init+0x2e>
 800612a:	2004      	movs	r0, #4
 800612c:	f7ff fee7 	bl	8005efe <LL_AHB2_GRP1_EnableClock>
 8006130:	e005      	b.n	800613e <BSP_PB_Init+0x3a>
 8006132:	79fb      	ldrb	r3, [r7, #7]
 8006134:	2b01      	cmp	r3, #1
 8006136:	d102      	bne.n	800613e <BSP_PB_Init+0x3a>
 8006138:	2004      	movs	r0, #4
 800613a:	f7ff fee0 	bl	8005efe <LL_AHB2_GRP1_EnableClock>

  gpio_init_structure.Pin = BUTTON_PIN[Button];
 800613e:	79fb      	ldrb	r3, [r7, #7]
 8006140:	4a29      	ldr	r2, [pc, #164]	@ (80061e8 <BSP_PB_Init+0xe4>)
 8006142:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006146:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8006148:	2301      	movs	r3, #1
 800614a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800614c:	2302      	movs	r3, #2
 800614e:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8006150:	79bb      	ldrb	r3, [r7, #6]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d10c      	bne.n	8006170 <BSP_PB_Init+0x6c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8006156:	2300      	movs	r3, #0
 8006158:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800615a:	79fb      	ldrb	r3, [r7, #7]
 800615c:	4a23      	ldr	r2, [pc, #140]	@ (80061ec <BSP_PB_Init+0xe8>)
 800615e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006162:	f107 020c 	add.w	r2, r7, #12
 8006166:	4611      	mov	r1, r2
 8006168:	4618      	mov	r0, r3
 800616a:	f001 fd09 	bl	8007b80 <HAL_GPIO_Init>
 800616e:	e035      	b.n	80061dc <BSP_PB_Init+0xd8>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 8006170:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8006174:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8006176:	79fb      	ldrb	r3, [r7, #7]
 8006178:	4a1c      	ldr	r2, [pc, #112]	@ (80061ec <BSP_PB_Init+0xe8>)
 800617a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800617e:	f107 020c 	add.w	r2, r7, #12
 8006182:	4611      	mov	r1, r2
 8006184:	4618      	mov	r0, r3
 8006186:	f001 fcfb 	bl	8007b80 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], button_exti_line[Button]);
 800618a:	79fb      	ldrb	r3, [r7, #7]
 800618c:	00db      	lsls	r3, r3, #3
 800618e:	4a18      	ldr	r2, [pc, #96]	@ (80061f0 <BSP_PB_Init+0xec>)
 8006190:	441a      	add	r2, r3
 8006192:	79fb      	ldrb	r3, [r7, #7]
 8006194:	4917      	ldr	r1, [pc, #92]	@ (80061f4 <BSP_PB_Init+0xf0>)
 8006196:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800619a:	4619      	mov	r1, r3
 800619c:	4610      	mov	r0, r2
 800619e:	f001 fcb9 	bl	8007b14 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button], HAL_EXTI_COMMON_CB_ID, button_callback[Button]);
 80061a2:	79fb      	ldrb	r3, [r7, #7]
 80061a4:	00db      	lsls	r3, r3, #3
 80061a6:	4a12      	ldr	r2, [pc, #72]	@ (80061f0 <BSP_PB_Init+0xec>)
 80061a8:	1898      	adds	r0, r3, r2
 80061aa:	79fb      	ldrb	r3, [r7, #7]
 80061ac:	4a12      	ldr	r2, [pc, #72]	@ (80061f8 <BSP_PB_Init+0xf4>)
 80061ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061b2:	461a      	mov	r2, r3
 80061b4:	2100      	movs	r1, #0
 80061b6:	f001 fc93 	bl	8007ae0 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), button_interrupt_priority[Button], 0x00);
 80061ba:	79fb      	ldrb	r3, [r7, #7]
 80061bc:	4a0f      	ldr	r2, [pc, #60]	@ (80061fc <BSP_PB_Init+0xf8>)
 80061be:	56d0      	ldrsb	r0, [r2, r3]
 80061c0:	79fb      	ldrb	r3, [r7, #7]
 80061c2:	4a0f      	ldr	r2, [pc, #60]	@ (8006200 <BSP_PB_Init+0xfc>)
 80061c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061c8:	2200      	movs	r2, #0
 80061ca:	4619      	mov	r1, r3
 80061cc:	f001 f8f7 	bl	80073be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80061d0:	79fb      	ldrb	r3, [r7, #7]
 80061d2:	4a0a      	ldr	r2, [pc, #40]	@ (80061fc <BSP_PB_Init+0xf8>)
 80061d4:	56d3      	ldrsb	r3, [r2, r3]
 80061d6:	4618      	mov	r0, r3
 80061d8:	f001 f90b 	bl	80073f2 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80061dc:	2300      	movs	r3, #0
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3720      	adds	r7, #32
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	08015448 	.word	0x08015448
 80061ec:	20000088 	.word	0x20000088
 80061f0:	20000aa0 	.word	0x20000aa0
 80061f4:	08015450 	.word	0x08015450
 80061f8:	20000090 	.word	0x20000090
 80061fc:	0801544c 	.word	0x0801544c
 8006200:	20000098 	.word	0x20000098

08006204 <BSP_PB_Callback>:
  *           @arg BUTTON_SW1
  *           @arg BUTTON_SW2
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
 800620a:	4603      	mov	r3, r0
 800620c:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 800620e:	bf00      	nop
 8006210:	370c      	adds	r7, #12
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr

0800621a <BUTTON_USER1_EXTI_Callback>:
/**
  * @brief  BUTTON1 EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER1_EXTI_Callback(void)
{
 800621a:	b580      	push	{r7, lr}
 800621c:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER1);
 800621e:	2000      	movs	r0, #0
 8006220:	f7ff fff0 	bl	8006204 <BSP_PB_Callback>
}
 8006224:	bf00      	nop
 8006226:	bd80      	pop	{r7, pc}

08006228 <BUTTON_USER2_EXTI_Callback>:
/**
  * @brief  BUTTON2 EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER2_EXTI_Callback(void)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER2);
 800622c:	2001      	movs	r0, #1
 800622e:	f7ff ffe9 	bl	8006204 <BSP_PB_Callback>
}
 8006232:	bf00      	nop
 8006234:	bd80      	pop	{r7, pc}
	...

08006238 <PWM_LED_WriteData>:
  * @brief  Write GS data into the PWM LED driver through a single-wire interface
  * @param  aPwmLedGsData GS (Gray Scale) data
  * @retval BSP status
  */
static int32_t PWM_LED_WriteData(aPwmLedGsData_TypeDef aPwmLedGsData)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b084      	sub	sp, #16
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  if (aPwmLedGsData == NULL)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d102      	bne.n	800624c <PWM_LED_WriteData+0x14>
  {
    return BSP_ERROR_WRONG_PARAM;
 8006246:	f06f 0301 	mvn.w	r3, #1
 800624a:	e069      	b.n	8006320 <PWM_LED_WriteData+0xe8>
  }
  
  __HAL_TIM_ENABLE_IT(&PwmLed_TimerHandle, TIM_IT_UPDATE);
 800624c:	4b36      	ldr	r3, [pc, #216]	@ (8006328 <PWM_LED_WriteData+0xf0>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	68da      	ldr	r2, [r3, #12]
 8006252:	4b35      	ldr	r3, [pc, #212]	@ (8006328 <PWM_LED_WriteData+0xf0>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f042 0201 	orr.w	r2, r2, #1
 800625a:	60da      	str	r2, [r3, #12]
  
  /* Start time base */
  if (HAL_TIM_Base_Start(&PwmLed_TimerHandle) != HAL_OK)
 800625c:	4832      	ldr	r0, [pc, #200]	@ (8006328 <PWM_LED_WriteData+0xf0>)
 800625e:	f004 fcdb 	bl	800ac18 <HAL_TIM_Base_Start>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d002      	beq.n	800626e <PWM_LED_WriteData+0x36>
  {
    return BSP_ERROR_UNKNOWN_FAILURE;   
 8006268:	f06f 0305 	mvn.w	r3, #5
 800626c:	e058      	b.n	8006320 <PWM_LED_WriteData+0xe8>
  }
  
  /* Enable Grayscale (GS) Control */
  HAL_GPIO_WritePin(PWM_LED_SELECT_GPIO_PORT, PWM_LED_SELECT_GPIO_PIN, GPIO_PIN_RESET);
 800626e:	2200      	movs	r2, #0
 8006270:	2102      	movs	r1, #2
 8006272:	482e      	ldr	r0, [pc, #184]	@ (800632c <PWM_LED_WriteData+0xf4>)
 8006274:	f001 fed2 	bl	800801c <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8006278:	200a      	movs	r0, #10
 800627a:	f7fb fa83 	bl	8001784 <HAL_Delay>
  HAL_GPIO_WritePin(PWM_LED_SELECT_GPIO_PORT, PWM_LED_SELECT_GPIO_PIN, GPIO_PIN_SET);
 800627e:	2201      	movs	r2, #1
 8006280:	2102      	movs	r1, #2
 8006282:	482a      	ldr	r0, [pc, #168]	@ (800632c <PWM_LED_WriteData+0xf4>)
 8006284:	f001 feca 	bl	800801c <HAL_GPIO_WritePin>
  
  /* TCycle measurement sequence */
  HAL_GPIO_WritePin(PWM_LED_SDI_GPIO_PORT, PWM_LED_SDI_GPIO_PIN, GPIO_PIN_RESET);
 8006288:	2200      	movs	r2, #0
 800628a:	2180      	movs	r1, #128	@ 0x80
 800628c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006290:	f001 fec4 	bl	800801c <HAL_GPIO_WritePin>
  PWM_LED_Wait(DELAY);
 8006294:	2001      	movs	r0, #1
 8006296:	f000 f8c3 	bl	8006420 <PWM_LED_Wait>
  HAL_GPIO_WritePin(PWM_LED_SDI_GPIO_PORT, PWM_LED_SDI_GPIO_PIN, GPIO_PIN_SET);
 800629a:	2201      	movs	r2, #1
 800629c:	2180      	movs	r1, #128	@ 0x80
 800629e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80062a2:	f001 febb 	bl	800801c <HAL_GPIO_WritePin>
  PWM_LED_Wait(T_CYCLE_0);
 80062a6:	2004      	movs	r0, #4
 80062a8:	f000 f8ba 	bl	8006420 <PWM_LED_Wait>
  HAL_GPIO_WritePin(PWM_LED_SDI_GPIO_PORT, PWM_LED_SDI_GPIO_PIN, GPIO_PIN_RESET);
 80062ac:	2200      	movs	r2, #0
 80062ae:	2180      	movs	r1, #128	@ 0x80
 80062b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80062b4:	f001 feb2 	bl	800801c <HAL_GPIO_WritePin>
  PWM_LED_Wait(DELAY);
 80062b8:	2001      	movs	r0, #1
 80062ba:	f000 f8b1 	bl	8006420 <PWM_LED_Wait>
  HAL_GPIO_WritePin(PWM_LED_SDI_GPIO_PORT, PWM_LED_SDI_GPIO_PIN, GPIO_PIN_SET);
 80062be:	2201      	movs	r2, #1
 80062c0:	2180      	movs	r1, #128	@ 0x80
 80062c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80062c6:	f001 fea9 	bl	800801c <HAL_GPIO_WritePin>
  PWM_LED_Wait(T_CYCLE_0);
 80062ca:	2004      	movs	r0, #4
 80062cc:	f000 f8a8 	bl	8006420 <PWM_LED_Wait>
  
  /* Write command */
  PWM_LED_SenByte(WRITE_COMMAND);
 80062d0:	203a      	movs	r0, #58	@ 0x3a
 80062d2:	f000 f863 	bl	800639c <PWM_LED_SenByte>
  
  /* Write the GS data */
  for (uint8_t gsdata = 0; gsdata < PWM_LED_NB; gsdata++)
 80062d6:	2300      	movs	r3, #0
 80062d8:	73fb      	strb	r3, [r7, #15]
 80062da:	e00f      	b.n	80062fc <PWM_LED_WriteData+0xc4>
  {
    PWM_LED_GSDATA[gsdata] = aPwmLedGsData[gsdata];
 80062dc:	7bfb      	ldrb	r3, [r7, #15]
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	441a      	add	r2, r3
 80062e2:	7bfb      	ldrb	r3, [r7, #15]
 80062e4:	7811      	ldrb	r1, [r2, #0]
 80062e6:	4a12      	ldr	r2, [pc, #72]	@ (8006330 <PWM_LED_WriteData+0xf8>)
 80062e8:	54d1      	strb	r1, [r2, r3]
    PWM_LED_SenByte(PWM_LED_GSDATA[gsdata]);
 80062ea:	7bfb      	ldrb	r3, [r7, #15]
 80062ec:	4a10      	ldr	r2, [pc, #64]	@ (8006330 <PWM_LED_WriteData+0xf8>)
 80062ee:	5cd3      	ldrb	r3, [r2, r3]
 80062f0:	4618      	mov	r0, r3
 80062f2:	f000 f853 	bl	800639c <PWM_LED_SenByte>
  for (uint8_t gsdata = 0; gsdata < PWM_LED_NB; gsdata++)
 80062f6:	7bfb      	ldrb	r3, [r7, #15]
 80062f8:	3301      	adds	r3, #1
 80062fa:	73fb      	strb	r3, [r7, #15]
 80062fc:	7bfb      	ldrb	r3, [r7, #15]
 80062fe:	2b02      	cmp	r3, #2
 8006300:	d9ec      	bls.n	80062dc <PWM_LED_WriteData+0xa4>
  }
  
  /* Disable Grayscale (GS) Control */
  HAL_GPIO_WritePin(PWM_LED_SELECT_GPIO_PORT, PWM_LED_SELECT_GPIO_PIN, GPIO_PIN_RESET);
 8006302:	2200      	movs	r2, #0
 8006304:	2102      	movs	r1, #2
 8006306:	4809      	ldr	r0, [pc, #36]	@ (800632c <PWM_LED_WriteData+0xf4>)
 8006308:	f001 fe88 	bl	800801c <HAL_GPIO_WritePin>
  
  /* Stop time base */
  if (HAL_TIM_Base_Stop(&PwmLed_TimerHandle) != HAL_OK)
 800630c:	4806      	ldr	r0, [pc, #24]	@ (8006328 <PWM_LED_WriteData+0xf0>)
 800630e:	f004 fcc9 	bl	800aca4 <HAL_TIM_Base_Stop>
 8006312:	4603      	mov	r3, r0
 8006314:	2b00      	cmp	r3, #0
 8006316:	d002      	beq.n	800631e <PWM_LED_WriteData+0xe6>
  {
    return BSP_ERROR_UNKNOWN_FAILURE;   
 8006318:	f06f 0305 	mvn.w	r3, #5
 800631c:	e000      	b.n	8006320 <PWM_LED_WriteData+0xe8>
  }

  return BSP_ERROR_NONE;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	3710      	adds	r7, #16
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}
 8006328:	20000ab0 	.word	0x20000ab0
 800632c:	48001c00 	.word	0x48001c00
 8006330:	20000b00 	.word	0x20000b00

08006334 <PWM_LED_SendBit>:
  * @brief  Data 0/1 write sequence
  * @param  bit
  * @retval None
  */
static void PWM_LED_SendBit(uint8_t bit)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b082      	sub	sp, #8
 8006338:	af00      	add	r7, sp, #0
 800633a:	4603      	mov	r3, r0
 800633c:	71fb      	strb	r3, [r7, #7]
  /* Start next cycle */
  HAL_GPIO_WritePin(PWM_LED_SDI_GPIO_PORT, PWM_LED_SDI_GPIO_PIN, GPIO_PIN_SET);
 800633e:	2201      	movs	r2, #1
 8006340:	2180      	movs	r1, #128	@ 0x80
 8006342:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006346:	f001 fe69 	bl	800801c <HAL_GPIO_WritePin>
  PWM_LED_Wait(DELAY); 
 800634a:	2001      	movs	r0, #1
 800634c:	f000 f868 	bl	8006420 <PWM_LED_Wait>
  HAL_GPIO_WritePin(PWM_LED_SDI_GPIO_PORT, PWM_LED_SDI_GPIO_PIN, GPIO_PIN_RESET);
 8006350:	2200      	movs	r2, #0
 8006352:	2180      	movs	r1, #128	@ 0x80
 8006354:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006358:	f001 fe60 	bl	800801c <HAL_GPIO_WritePin>
  PWM_LED_Wait(DELAY);
 800635c:	2001      	movs	r0, #1
 800635e:	f000 f85f 	bl	8006420 <PWM_LED_Wait>
  
  if (bit)
 8006362:	79fb      	ldrb	r3, [r7, #7]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d012      	beq.n	800638e <PWM_LED_SendBit+0x5a>
  {
    HAL_GPIO_WritePin(PWM_LED_SDI_GPIO_PORT, PWM_LED_SDI_GPIO_PIN, GPIO_PIN_SET);
 8006368:	2201      	movs	r2, #1
 800636a:	2180      	movs	r1, #128	@ 0x80
 800636c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006370:	f001 fe54 	bl	800801c <HAL_GPIO_WritePin>
    PWM_LED_Wait(DELAY);
 8006374:	2001      	movs	r0, #1
 8006376:	f000 f853 	bl	8006420 <PWM_LED_Wait>
    HAL_GPIO_WritePin(PWM_LED_SDI_GPIO_PORT, PWM_LED_SDI_GPIO_PIN, GPIO_PIN_RESET);
 800637a:	2200      	movs	r2, #0
 800637c:	2180      	movs	r1, #128	@ 0x80
 800637e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006382:	f001 fe4b 	bl	800801c <HAL_GPIO_WritePin>
    PWM_LED_Wait(T_CYCLE_1);
 8006386:	2001      	movs	r0, #1
 8006388:	f000 f84a 	bl	8006420 <PWM_LED_Wait>
  }
  else
  {
    PWM_LED_Wait(T_CYCLE_0);
  }
}
 800638c:	e002      	b.n	8006394 <PWM_LED_SendBit+0x60>
    PWM_LED_Wait(T_CYCLE_0);
 800638e:	2004      	movs	r0, #4
 8006390:	f000 f846 	bl	8006420 <PWM_LED_Wait>
}
 8006394:	bf00      	nop
 8006396:	3708      	adds	r7, #8
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <PWM_LED_SenByte>:
  * @brief  Byte write Sequence
  * @param  byte
  * @retval None
  */
static void PWM_LED_SenByte(uint8_t byte)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b082      	sub	sp, #8
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	4603      	mov	r3, r0
 80063a4:	71fb      	strb	r3, [r7, #7]
    PWM_LED_SendBit(byte & (1<<7));
 80063a6:	79fb      	ldrb	r3, [r7, #7]
 80063a8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	4618      	mov	r0, r3
 80063b0:	f7ff ffc0 	bl	8006334 <PWM_LED_SendBit>
    PWM_LED_SendBit(byte & (1<<6));
 80063b4:	79fb      	ldrb	r3, [r7, #7]
 80063b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	4618      	mov	r0, r3
 80063be:	f7ff ffb9 	bl	8006334 <PWM_LED_SendBit>
    PWM_LED_SendBit(byte & (1<<5));
 80063c2:	79fb      	ldrb	r3, [r7, #7]
 80063c4:	f003 0320 	and.w	r3, r3, #32
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	4618      	mov	r0, r3
 80063cc:	f7ff ffb2 	bl	8006334 <PWM_LED_SendBit>
    PWM_LED_SendBit(byte & (1<<4));
 80063d0:	79fb      	ldrb	r3, [r7, #7]
 80063d2:	f003 0310 	and.w	r3, r3, #16
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	4618      	mov	r0, r3
 80063da:	f7ff ffab 	bl	8006334 <PWM_LED_SendBit>
    PWM_LED_SendBit(byte & (1<<3));
 80063de:	79fb      	ldrb	r3, [r7, #7]
 80063e0:	f003 0308 	and.w	r3, r3, #8
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	4618      	mov	r0, r3
 80063e8:	f7ff ffa4 	bl	8006334 <PWM_LED_SendBit>
    PWM_LED_SendBit(byte & (1<<2));
 80063ec:	79fb      	ldrb	r3, [r7, #7]
 80063ee:	f003 0304 	and.w	r3, r3, #4
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	4618      	mov	r0, r3
 80063f6:	f7ff ff9d 	bl	8006334 <PWM_LED_SendBit>
    PWM_LED_SendBit(byte & (1<<1));
 80063fa:	79fb      	ldrb	r3, [r7, #7]
 80063fc:	f003 0302 	and.w	r3, r3, #2
 8006400:	b2db      	uxtb	r3, r3
 8006402:	4618      	mov	r0, r3
 8006404:	f7ff ff96 	bl	8006334 <PWM_LED_SendBit>
    PWM_LED_SendBit(byte & (1<<0));
 8006408:	79fb      	ldrb	r3, [r7, #7]
 800640a:	f003 0301 	and.w	r3, r3, #1
 800640e:	b2db      	uxtb	r3, r3
 8006410:	4618      	mov	r0, r3
 8006412:	f7ff ff8f 	bl	8006334 <PWM_LED_SendBit>
}
 8006416:	bf00      	nop
 8006418:	3708      	adds	r7, #8
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
	...

08006420 <PWM_LED_Wait>:
  * @brief  Byte write Sequence
  * @param  NbCycles Number of cycles to wait for
  * @retval None
  */
static void PWM_LED_Wait(uint32_t NbCycles)
{
 8006420:	b480      	push	{r7}
 8006422:	b085      	sub	sp, #20
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  uint32_t start = CycleCount;
 8006428:	4b08      	ldr	r3, [pc, #32]	@ (800644c <PWM_LED_Wait+0x2c>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	60fb      	str	r3, [r7, #12]
  
  while ((CycleCount - start) < NbCycles)
 800642e:	bf00      	nop
 8006430:	4b06      	ldr	r3, [pc, #24]	@ (800644c <PWM_LED_Wait+0x2c>)
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	1ad3      	subs	r3, r2, r3
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	429a      	cmp	r2, r3
 800643c:	d8f8      	bhi.n	8006430 <PWM_LED_Wait+0x10>
  {
  }
}
 800643e:	bf00      	nop
 8006440:	bf00      	nop
 8006442:	3714      	adds	r7, #20
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr
 800644c:	20000afc 	.word	0x20000afc

08006450 <TIM17_MspInit>:
  * @brief  Timer MSP initialization
  * @param  htim Timer instance
  * @retval None
  */
void TIM17_MspInit(TIM_HandleTypeDef *htim)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b082      	sub	sp, #8
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  if (htim->Instance == PWM_LED_TIM)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a09      	ldr	r2, [pc, #36]	@ (8006484 <TIM17_MspInit+0x34>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d10b      	bne.n	800647a <TIM17_MspInit+0x2a>
  {
    PWM_LED_TIM_CLOCK_ENABLE();
 8006462:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8006466:	f7ff fd63 	bl	8005f30 <LL_APB2_GRP1_EnableClock>
    
    HAL_NVIC_SetPriority(PWM_LED_TIM_UP_IRQN, PWM_LED_CLOCK_IT_PRIORITY, 0);
 800646a:	2200      	movs	r2, #0
 800646c:	2103      	movs	r1, #3
 800646e:	201a      	movs	r0, #26
 8006470:	f000 ffa5 	bl	80073be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(PWM_LED_TIM_UP_IRQN);
 8006474:	201a      	movs	r0, #26
 8006476:	f000 ffbc 	bl	80073f2 <HAL_NVIC_EnableIRQ>
  }
}
 800647a:	bf00      	nop
 800647c:	3708      	adds	r7, #8
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	40014800 	.word	0x40014800

08006488 <TIM17_MspDeInit>:
  * @brief  Timer MSP de-initialization
  * @param  htim Timer instance
  * @retval None
  */
void TIM17_MspDeInit(TIM_HandleTypeDef *htim)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  if (htim->Instance == PWM_LED_TIM)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a06      	ldr	r2, [pc, #24]	@ (80064b0 <TIM17_MspDeInit+0x28>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d106      	bne.n	80064a8 <TIM17_MspDeInit+0x20>
  {
    HAL_NVIC_DisableIRQ(PWM_LED_TIM_UP_IRQN);
 800649a:	201a      	movs	r0, #26
 800649c:	f000 ffb7 	bl	800740e <HAL_NVIC_DisableIRQ>
    PWM_LED_TIM_CLOCK_DISABLE();
 80064a0:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80064a4:	f7ff fd5d 	bl	8005f62 <LL_APB2_GRP1_DisableClock>
  }
}
 80064a8:	bf00      	nop
 80064aa:	3708      	adds	r7, #8
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}
 80064b0:	40014800 	.word	0x40014800

080064b4 <LL_AHB2_GRP1_EnableClock>:
{
 80064b4:	b480      	push	{r7}
 80064b6:	b085      	sub	sp, #20
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80064bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064c0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80064c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80064cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064d0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	4013      	ands	r3, r2
 80064d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80064d8:	68fb      	ldr	r3, [r7, #12]
}
 80064da:	bf00      	nop
 80064dc:	3714      	adds	r7, #20
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr

080064e6 <LL_APB2_GRP1_EnableClock>:
{
 80064e6:	b480      	push	{r7}
 80064e8:	b085      	sub	sp, #20
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80064ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064f2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80064f4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80064fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006502:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4013      	ands	r3, r2
 8006508:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800650a:	68fb      	ldr	r3, [r7, #12]
}
 800650c:	bf00      	nop
 800650e:	3714      	adds	r7, #20
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b082      	sub	sp, #8
 800651c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800651e:	2300      	movs	r3, #0
 8006520:	607b      	str	r3, [r7, #4]

  hbus_spi1.Instance  = BUS_SPI1_INSTANCE;
 8006522:	4b11      	ldr	r3, [pc, #68]	@ (8006568 <BSP_SPI1_Init+0x50>)
 8006524:	4a11      	ldr	r2, [pc, #68]	@ (800656c <BSP_SPI1_Init+0x54>)
 8006526:	601a      	str	r2, [r3, #0]

  if (HAL_SPI_GetState(&hbus_spi1) == HAL_SPI_STATE_RESET)
 8006528:	480f      	ldr	r0, [pc, #60]	@ (8006568 <BSP_SPI1_Init+0x50>)
 800652a:	f004 f9a1 	bl	800a870 <HAL_SPI_GetState>
 800652e:	4603      	mov	r3, r0
 8006530:	2b00      	cmp	r3, #0
 8006532:	d114      	bne.n	800655e <BSP_SPI1_Init+0x46>
  {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0)
    /* Init the SPI Msp */
    SPI1_MspInit(&hbus_spi1);
 8006534:	480c      	ldr	r0, [pc, #48]	@ (8006568 <BSP_SPI1_Init+0x50>)
 8006536:	f000 f89a 	bl	800666e <SPI1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    /* Init the SPI */
    if (MX_SPI1_Init(&hbus_spi1, SPI_GetPrescaler( HAL_RCC_GetPCLK1Freq(), BUS_SPI1_BAUDRATE)) != HAL_OK)
 800653a:	f002 ff11 	bl	8009360 <HAL_RCC_GetPCLK1Freq>
 800653e:	4603      	mov	r3, r0
 8006540:	490b      	ldr	r1, [pc, #44]	@ (8006570 <BSP_SPI1_Init+0x58>)
 8006542:	4618      	mov	r0, r3
 8006544:	f000 f8c4 	bl	80066d0 <SPI_GetPrescaler>
 8006548:	4603      	mov	r3, r0
 800654a:	4619      	mov	r1, r3
 800654c:	4806      	ldr	r0, [pc, #24]	@ (8006568 <BSP_SPI1_Init+0x50>)
 800654e:	f000 f811 	bl	8006574 <MX_SPI1_Init>
 8006552:	4603      	mov	r3, r0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d002      	beq.n	800655e <BSP_SPI1_Init+0x46>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8006558:	f06f 0307 	mvn.w	r3, #7
 800655c:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 800655e:	687b      	ldr	r3, [r7, #4]
}
 8006560:	4618      	mov	r0, r3
 8006562:	3708      	adds	r7, #8
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}
 8006568:	20000b04 	.word	0x20000b04
 800656c:	40013000 	.word	0x40013000
 8006570:	00bebc20 	.word	0x00bebc20

08006574 <MX_SPI1_Init>:
  * @param  phspi             SPI handler
  * @param  BaudratePrescaler prsecaler to set for SPI baudrate
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* phspi, uint32_t BaudratePrescaler)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b084      	sub	sp, #16
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800657e:	2300      	movs	r3, #0
 8006580:	73fb      	strb	r3, [r7, #15]

  phspi->Init.Mode              = SPI_MODE_MASTER;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8006588:	605a      	str	r2, [r3, #4]
  phspi->Init.Direction         = SPI_DIRECTION_2LINES;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2200      	movs	r2, #0
 800658e:	609a      	str	r2, [r3, #8]
  phspi->Init.DataSize          = SPI_DATASIZE_8BIT;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8006596:	60da      	str	r2, [r3, #12]
  phspi->Init.CLKPolarity       = SPI_POLARITY_HIGH;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2202      	movs	r2, #2
 800659c:	611a      	str	r2, [r3, #16]
  phspi->Init.CLKPhase          = SPI_PHASE_1EDGE;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	615a      	str	r2, [r3, #20]
  phspi->Init.NSS               = SPI_NSS_SOFT;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80065aa:	619a      	str	r2, [r3, #24]
  phspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2210      	movs	r2, #16
 80065b0:	61da      	str	r2, [r3, #28]
  phspi->Init.FirstBit          = SPI_FIRSTBIT_MSB;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	621a      	str	r2, [r3, #32]
  phspi->Init.TIMode            = SPI_TIMODE_DISABLE;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	625a      	str	r2, [r3, #36]	@ 0x24
  phspi->Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	629a      	str	r2, [r3, #40]	@ 0x28
  phspi->Init.CRCPolynomial     = 7;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2207      	movs	r2, #7
 80065c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  if(HAL_SPI_Init(phspi) != HAL_OK)
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f003 fd0e 	bl	8009fec <HAL_SPI_Init>
 80065d0:	4603      	mov	r3, r0
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d001      	beq.n	80065da <MX_SPI1_Init+0x66>
  {
    ret = HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80065da:	7bfb      	ldrb	r3, [r7, #15]
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3710      	adds	r7, #16
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <BSP_SPI1_Send>:
  * @param  pData  Pointer to data buffer to send
  * @param  Length Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_Send(uint8_t *pData, uint16_t Length)
{  
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	460b      	mov	r3, r1
 80065ee:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 80065f0:	2300      	movs	r3, #0
 80065f2:	60fb      	str	r3, [r7, #12]
  
  if(HAL_SPI_Transmit(&hbus_spi1, pData, Length, BUS_SPI1_TIMEOUT) == HAL_OK)
 80065f4:	887a      	ldrh	r2, [r7, #2]
 80065f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80065fa:	6879      	ldr	r1, [r7, #4]
 80065fc:	4806      	ldr	r0, [pc, #24]	@ (8006618 <BSP_SPI1_Send+0x34>)
 80065fe:	f003 fda2 	bl	800a146 <HAL_SPI_Transmit>
 8006602:	4603      	mov	r3, r0
 8006604:	2b00      	cmp	r3, #0
 8006606:	d101      	bne.n	800660c <BSP_SPI1_Send+0x28>
  {
    ret = BSP_ERROR_NONE;
 8006608:	2300      	movs	r3, #0
 800660a:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 800660c:	68fb      	ldr	r3, [r7, #12]
}
 800660e:	4618      	mov	r0, r3
 8006610:	3710      	adds	r7, #16
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	20000b04 	.word	0x20000b04

0800661c <BSP_SPI1_Recv>:
  * @param  pData  Pointer to data buffer to receive
  * @param  Length Length of data in byte
  * @retval BSP status
  */
int32_t  BSP_SPI1_Recv(uint8_t *pData, uint16_t Length)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b086      	sub	sp, #24
 8006620:	af02      	add	r7, sp, #8
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	460b      	mov	r3, r1
 8006626:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8006628:	f06f 0305 	mvn.w	r3, #5
 800662c:	60fb      	str	r3, [r7, #12]
  uint32_t tx_data = 0xFFFFFFFFU;
 800662e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006632:	60bb      	str	r3, [r7, #8]

  if(HAL_SPI_TransmitReceive(&hbus_spi1, (uint8_t*)&tx_data, pData, Length, BUS_SPI1_TIMEOUT) == HAL_OK)
 8006634:	887b      	ldrh	r3, [r7, #2]
 8006636:	f107 0108 	add.w	r1, r7, #8
 800663a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800663e:	9200      	str	r2, [sp, #0]
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	4806      	ldr	r0, [pc, #24]	@ (800665c <BSP_SPI1_Recv+0x40>)
 8006644:	f003 fef5 	bl	800a432 <HAL_SPI_TransmitReceive>
 8006648:	4603      	mov	r3, r0
 800664a:	2b00      	cmp	r3, #0
 800664c:	d101      	bne.n	8006652 <BSP_SPI1_Recv+0x36>
  {
    ret = BSP_ERROR_NONE;
 800664e:	2300      	movs	r3, #0
 8006650:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8006652:	68fb      	ldr	r3, [r7, #12]
}
 8006654:	4618      	mov	r0, r3
 8006656:	3710      	adds	r7, #16
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}
 800665c:	20000b04 	.word	0x20000b04

08006660 <BSP_GetTick>:
/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006664:	f000 fd40 	bl	80070e8 <HAL_GetTick>
 8006668:	4603      	mov	r3, r0
}
 800666a:	4618      	mov	r0, r3
 800666c:	bd80      	pop	{r7, pc}

0800666e <SPI1_MspInit>:
  * @brief  Initializes SPI MSP.
  * @param  hspi  SPI handler
  * @retval None
  */
static void SPI1_MspInit(SPI_HandleTypeDef* hspi)
{
 800666e:	b580      	push	{r7, lr}
 8006670:	b088      	sub	sp, #32
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock  */
  BUS_SPI1_CLOCK_ENABLE();
 8006676:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800667a:	f7ff ff34 	bl	80064e6 <LL_APB2_GRP1_EnableClock>

  /* enable SPIx gpio clock */
  BUS_SPI1_GPIO_CLKA_ENABLE();
 800667e:	2001      	movs	r0, #1
 8006680:	f7ff ff18 	bl	80064b4 <LL_AHB2_GRP1_EnableClock>

  /* configure SPIx SCK, MOSI */
  GPIO_InitStructure.Pin       = BUS_SPI1_MOSI_PIN;
 8006684:	2380      	movs	r3, #128	@ 0x80
 8006686:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode      = GPIO_MODE_AF_PP;
 8006688:	2302      	movs	r3, #2
 800668a:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull      = GPIO_PULLDOWN;
 800668c:	2302      	movs	r3, #2
 800668e:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed     = GPIO_SPEED_FREQ_LOW;
 8006690:	2300      	movs	r3, #0
 8006692:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Alternate = BUS_SPI1_AF;
 8006694:	2305      	movs	r3, #5
 8006696:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUS_SPI1_GPIO_PORTA, &GPIO_InitStructure);
 8006698:	f107 030c 	add.w	r3, r7, #12
 800669c:	4619      	mov	r1, r3
 800669e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80066a2:	f001 fa6d 	bl	8007b80 <HAL_GPIO_Init>
  
  GPIO_InitStructure.Pin       = BUS_SPI1_SCK_PIN;
 80066a6:	2302      	movs	r3, #2
 80066a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode      = GPIO_MODE_AF_PP;
 80066aa:	2302      	movs	r3, #2
 80066ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull      = GPIO_PULLDOWN;
 80066ae:	2302      	movs	r3, #2
 80066b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed     = GPIO_SPEED_FREQ_LOW;
 80066b2:	2300      	movs	r3, #0
 80066b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Alternate = BUS_SPI1_AF;
 80066b6:	2305      	movs	r3, #5
 80066b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUS_SPI1_GPIO_PORTA, &GPIO_InitStructure);
 80066ba:	f107 030c 	add.w	r3, r7, #12
 80066be:	4619      	mov	r1, r3
 80066c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80066c4:	f001 fa5c 	bl	8007b80 <HAL_GPIO_Init>

}
 80066c8:	bf00      	nop
 80066ca:	3720      	adds	r7, #32
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <SPI_GetPrescaler>:
  * @param  clock_src_freq : SPI source clock in HZ.
  * @param  baudfreq_mbps : SPI baud freq in mbps.
  * @retval Prescaler divisor
  */
static uint32_t SPI_GetPrescaler( uint32_t clock_src_freq, uint32_t baudfreq_mbps )
{
 80066d0:	b480      	push	{r7}
 80066d2:	b087      	sub	sp, #28
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]
  uint32_t divisor = 0;
 80066da:	2300      	movs	r3, #0
 80066dc:	617b      	str	r3, [r7, #20]
  uint32_t spi_clk = clock_src_freq;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	613b      	str	r3, [r7, #16]
  uint32_t presc = 0;
 80066e2:	2300      	movs	r3, #0
 80066e4:	60fb      	str	r3, [r7, #12]
    SPI_BAUDRATEPRESCALER_64,
    SPI_BAUDRATEPRESCALER_128,
    SPI_BAUDRATEPRESCALER_256,
  };

  while( spi_clk > baudfreq_mbps)
 80066e6:	e00d      	b.n	8006704 <SPI_GetPrescaler+0x34>
  {
    presc = baudfreq[divisor];
 80066e8:	4a0d      	ldr	r2, [pc, #52]	@ (8006720 <SPI_GetPrescaler+0x50>)
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066f0:	60fb      	str	r3, [r7, #12]
    if (++divisor > 7U)
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	3301      	adds	r3, #1
 80066f6:	617b      	str	r3, [r7, #20]
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	2b07      	cmp	r3, #7
 80066fc:	d807      	bhi.n	800670e <SPI_GetPrescaler+0x3e>
      break;

    spi_clk= ( spi_clk >> 1);
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	085b      	lsrs	r3, r3, #1
 8006702:	613b      	str	r3, [r7, #16]
  while( spi_clk > baudfreq_mbps)
 8006704:	693a      	ldr	r2, [r7, #16]
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	429a      	cmp	r2, r3
 800670a:	d8ed      	bhi.n	80066e8 <SPI_GetPrescaler+0x18>
 800670c:	e000      	b.n	8006710 <SPI_GetPrescaler+0x40>
      break;
 800670e:	bf00      	nop
  }

  return presc;
 8006710:	68fb      	ldr	r3, [r7, #12]
}
 8006712:	4618      	mov	r0, r3
 8006714:	371c      	adds	r7, #28
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr
 800671e:	bf00      	nop
 8006720:	08015458 	.word	0x08015458

08006724 <LL_AHB2_GRP1_EnableClock>:
{
 8006724:	b480      	push	{r7}
 8006726:	b085      	sub	sp, #20
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800672c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006730:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006732:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4313      	orrs	r3, r2
 800673a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800673c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006740:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4013      	ands	r3, r2
 8006746:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006748:	68fb      	ldr	r3, [r7, #12]
}
 800674a:	bf00      	nop
 800674c:	3714      	adds	r7, #20
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr
	...

08006758 <BSP_LCD_Init>:
  * @param  Instance LCD Instance
  * @param  Orientation LCD_ORIENTATION_LANDSCAPE
  * @retval BSP status
  */
int32_t BSP_LCD_Init(uint32_t Instance, uint32_t Orientation)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8006762:	2300      	movs	r3, #0
 8006764:	60fb      	str	r3, [r7, #12]

  if (Instance >= LCD_INSTANCES_NBR )
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d003      	beq.n	8006774 <BSP_LCD_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800676c:	f06f 0301 	mvn.w	r3, #1
 8006770:	60fb      	str	r3, [r7, #12]
 8006772:	e032      	b.n	80067da <BSP_LCD_Init+0x82>
  }
  else
  {
    if(Orientation == LCD_ORIENTATION_LANDSCAPE)
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d113      	bne.n	80067a2 <BSP_LCD_Init+0x4a>
    {
      LcdCtx[Instance].Width  = LCD_DEFAULT_WIDTH;
 800677a:	491a      	ldr	r1, [pc, #104]	@ (80067e4 <BSP_LCD_Init+0x8c>)
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	4613      	mov	r3, r2
 8006780:	005b      	lsls	r3, r3, #1
 8006782:	4413      	add	r3, r2
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	440b      	add	r3, r1
 8006788:	2280      	movs	r2, #128	@ 0x80
 800678a:	601a      	str	r2, [r3, #0]
      LcdCtx[Instance].Height = LCD_DEFAULT_HEIGHT;
 800678c:	4915      	ldr	r1, [pc, #84]	@ (80067e4 <BSP_LCD_Init+0x8c>)
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	4613      	mov	r3, r2
 8006792:	005b      	lsls	r3, r3, #1
 8006794:	4413      	add	r3, r2
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	440b      	add	r3, r1
 800679a:	3304      	adds	r3, #4
 800679c:	2240      	movs	r2, #64	@ 0x40
 800679e:	601a      	str	r2, [r3, #0]
 80067a0:	e012      	b.n	80067c8 <BSP_LCD_Init+0x70>
    }
    else
    {
      LcdCtx[Instance].Width  = LCD_DEFAULT_HEIGHT;
 80067a2:	4910      	ldr	r1, [pc, #64]	@ (80067e4 <BSP_LCD_Init+0x8c>)
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	4613      	mov	r3, r2
 80067a8:	005b      	lsls	r3, r3, #1
 80067aa:	4413      	add	r3, r2
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	440b      	add	r3, r1
 80067b0:	2240      	movs	r2, #64	@ 0x40
 80067b2:	601a      	str	r2, [r3, #0]
      LcdCtx[Instance].Height = LCD_DEFAULT_WIDTH;
 80067b4:	490b      	ldr	r1, [pc, #44]	@ (80067e4 <BSP_LCD_Init+0x8c>)
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	4613      	mov	r3, r2
 80067ba:	005b      	lsls	r3, r3, #1
 80067bc:	4413      	add	r3, r2
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	440b      	add	r3, r1
 80067c2:	3304      	adds	r3, #4
 80067c4:	2280      	movs	r2, #128	@ 0x80
 80067c6:	601a      	str	r2, [r3, #0]
    }
    
    /* registers the function and initialize the controller */
    if(SSD1315_Probe(Orientation) != BSP_ERROR_NONE)
 80067c8:	6838      	ldr	r0, [r7, #0]
 80067ca:	f000 fb27 	bl	8006e1c <SSD1315_Probe>
 80067ce:	4603      	mov	r3, r0
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d002      	beq.n	80067da <BSP_LCD_Init+0x82>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80067d4:	f06f 0306 	mvn.w	r3, #6
 80067d8:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80067da:	68fb      	ldr	r3, [r7, #12]
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3710      	adds	r7, #16
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}
 80067e4:	20000b6c 	.word	0x20000b6c

080067e8 <BSP_LCD_GetPixelFormat>:
  * @param  Instance LCD Instance
  * @param  PixelFormat Active LCD Pixel Format
  * @retval BSP status
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b085      	sub	sp, #20
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80067f2:	2300      	movs	r3, #0
 80067f4:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d003      	beq.n	8006804 <BSP_LCD_GetPixelFormat+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80067fc:	f06f 0301 	mvn.w	r3, #1
 8006800:	60fb      	str	r3, [r7, #12]
 8006802:	e002      	b.n	800680a <BSP_LCD_GetPixelFormat+0x22>
  }
  else
  {
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8006804:	f06f 030a 	mvn.w	r3, #10
 8006808:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800680a:	68fb      	ldr	r3, [r7, #12]
}
 800680c:	4618      	mov	r0, r3
 800680e:	3714      	adds	r7, #20
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr

08006818 <BSP_LCD_GetXSize>:
  * @param  Instance LCD Instance
  * @param  pXSize pointer to Used LCD X size
  * @retval BSP status
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *pXSize)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8006822:	2300      	movs	r3, #0
 8006824:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d003      	beq.n	8006834 <BSP_LCD_GetXSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800682c:	f06f 0301 	mvn.w	r3, #1
 8006830:	60fb      	str	r3, [r7, #12]
 8006832:	e01d      	b.n	8006870 <BSP_LCD_GetXSize+0x58>
  }
  else if(LcdDrv->GetXSize != NULL)
 8006834:	4b11      	ldr	r3, [pc, #68]	@ (800687c <BSP_LCD_GetXSize+0x64>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800683a:	2b00      	cmp	r3, #0
 800683c:	d00e      	beq.n	800685c <BSP_LCD_GetXSize+0x44>
  {
    if(LcdDrv->GetXSize(LcdCompObj, pXSize) < 0)
 800683e:	4b0f      	ldr	r3, [pc, #60]	@ (800687c <BSP_LCD_GetXSize+0x64>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006844:	4a0e      	ldr	r2, [pc, #56]	@ (8006880 <BSP_LCD_GetXSize+0x68>)
 8006846:	6812      	ldr	r2, [r2, #0]
 8006848:	6839      	ldr	r1, [r7, #0]
 800684a:	4610      	mov	r0, r2
 800684c:	4798      	blx	r3
 800684e:	4603      	mov	r3, r0
 8006850:	2b00      	cmp	r3, #0
 8006852:	da0d      	bge.n	8006870 <BSP_LCD_GetXSize+0x58>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006854:	f06f 0304 	mvn.w	r3, #4
 8006858:	60fb      	str	r3, [r7, #12]
 800685a:	e009      	b.n	8006870 <BSP_LCD_GetXSize+0x58>
    }
  }
  else
  {
    *pXSize = LcdCtx[Instance].Width;
 800685c:	4909      	ldr	r1, [pc, #36]	@ (8006884 <BSP_LCD_GetXSize+0x6c>)
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	4613      	mov	r3, r2
 8006862:	005b      	lsls	r3, r3, #1
 8006864:	4413      	add	r3, r2
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	440b      	add	r3, r1
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	601a      	str	r2, [r3, #0]
  }
  
  return ret;
 8006870:	68fb      	ldr	r3, [r7, #12]
}
 8006872:	4618      	mov	r0, r3
 8006874:	3710      	adds	r7, #16
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
 800687a:	bf00      	nop
 800687c:	20000b78 	.word	0x20000b78
 8006880:	20000b68 	.word	0x20000b68
 8006884:	20000b6c 	.word	0x20000b6c

08006888 <BSP_LCD_GetYSize>:
  * @param  Instance LCD Instance
  * @param  pYSize pointer to Used LCD Y size
  * @retval BSP status
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *pYSize)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8006892:	2300      	movs	r3, #0
 8006894:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d003      	beq.n	80068a4 <BSP_LCD_GetYSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800689c:	f06f 0301 	mvn.w	r3, #1
 80068a0:	60fb      	str	r3, [r7, #12]
 80068a2:	e01e      	b.n	80068e2 <BSP_LCD_GetYSize+0x5a>
  }
  else if(LcdDrv->GetYSize != NULL)
 80068a4:	4b11      	ldr	r3, [pc, #68]	@ (80068ec <BSP_LCD_GetYSize+0x64>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d00e      	beq.n	80068cc <BSP_LCD_GetYSize+0x44>
  {
    if(LcdDrv->GetYSize(LcdCompObj, pYSize) < 0)
 80068ae:	4b0f      	ldr	r3, [pc, #60]	@ (80068ec <BSP_LCD_GetYSize+0x64>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068b4:	4a0e      	ldr	r2, [pc, #56]	@ (80068f0 <BSP_LCD_GetYSize+0x68>)
 80068b6:	6812      	ldr	r2, [r2, #0]
 80068b8:	6839      	ldr	r1, [r7, #0]
 80068ba:	4610      	mov	r0, r2
 80068bc:	4798      	blx	r3
 80068be:	4603      	mov	r3, r0
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	da0e      	bge.n	80068e2 <BSP_LCD_GetYSize+0x5a>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80068c4:	f06f 0304 	mvn.w	r3, #4
 80068c8:	60fb      	str	r3, [r7, #12]
 80068ca:	e00a      	b.n	80068e2 <BSP_LCD_GetYSize+0x5a>
    }
  }
  else
  {
    *pYSize = LcdCtx[Instance].Height;
 80068cc:	4909      	ldr	r1, [pc, #36]	@ (80068f4 <BSP_LCD_GetYSize+0x6c>)
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	4613      	mov	r3, r2
 80068d2:	005b      	lsls	r3, r3, #1
 80068d4:	4413      	add	r3, r2
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	440b      	add	r3, r1
 80068da:	3304      	adds	r3, #4
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	601a      	str	r2, [r3, #0]
  }

  return ret;
 80068e2:	68fb      	ldr	r3, [r7, #12]
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3710      	adds	r7, #16
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}
 80068ec:	20000b78 	.word	0x20000b78
 80068f0:	20000b68 	.word	0x20000b68
 80068f4:	20000b6c 	.word	0x20000b6c

080068f8 <BSP_LCD_DisplayOn>:
  * @brief  Switch On the display.
  * @param  Instance LCD Instance
  * @retval BSP status
  */
int32_t BSP_LCD_DisplayOn(uint32_t Instance)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8006900:	2300      	movs	r3, #0
 8006902:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d003      	beq.n	8006912 <BSP_LCD_DisplayOn+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800690a:	f06f 0301 	mvn.w	r3, #1
 800690e:	60fb      	str	r3, [r7, #12]
 8006910:	e015      	b.n	800693e <BSP_LCD_DisplayOn+0x46>
  }
  else if(LcdDrv->DisplayOn != NULL)
 8006912:	4b0d      	ldr	r3, [pc, #52]	@ (8006948 <BSP_LCD_DisplayOn+0x50>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	68db      	ldr	r3, [r3, #12]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d00d      	beq.n	8006938 <BSP_LCD_DisplayOn+0x40>
  {
    if(LcdDrv->DisplayOn(LcdCompObj) < 0)
 800691c:	4b0a      	ldr	r3, [pc, #40]	@ (8006948 <BSP_LCD_DisplayOn+0x50>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	68db      	ldr	r3, [r3, #12]
 8006922:	4a0a      	ldr	r2, [pc, #40]	@ (800694c <BSP_LCD_DisplayOn+0x54>)
 8006924:	6812      	ldr	r2, [r2, #0]
 8006926:	4610      	mov	r0, r2
 8006928:	4798      	blx	r3
 800692a:	4603      	mov	r3, r0
 800692c:	2b00      	cmp	r3, #0
 800692e:	da06      	bge.n	800693e <BSP_LCD_DisplayOn+0x46>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006930:	f06f 0304 	mvn.w	r3, #4
 8006934:	60fb      	str	r3, [r7, #12]
 8006936:	e002      	b.n	800693e <BSP_LCD_DisplayOn+0x46>
    }
  }
  else
  {
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8006938:	f06f 030a 	mvn.w	r3, #10
 800693c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800693e:	68fb      	ldr	r3, [r7, #12]
}
 8006940:	4618      	mov	r0, r3
 8006942:	3710      	adds	r7, #16
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}
 8006948:	20000b78 	.word	0x20000b78
 800694c:	20000b68 	.word	0x20000b68

08006950 <BSP_LCD_Refresh>:
  * @brief  Refresh the display.
  * @param  Instance LCD Instance
  * @retval BSP status
  */
int32_t BSP_LCD_Refresh(uint32_t Instance)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8006958:	2300      	movs	r3, #0
 800695a:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d003      	beq.n	800696a <BSP_LCD_Refresh+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006962:	f06f 0301 	mvn.w	r3, #1
 8006966:	60fb      	str	r3, [r7, #12]
 8006968:	e015      	b.n	8006996 <BSP_LCD_Refresh+0x46>
  }
  else if(LcdDrv->Refresh != NULL)
 800696a:	4b0d      	ldr	r3, [pc, #52]	@ (80069a0 <BSP_LCD_Refresh+0x50>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006970:	2b00      	cmp	r3, #0
 8006972:	d00d      	beq.n	8006990 <BSP_LCD_Refresh+0x40>
  {
    if(LcdDrv->Refresh(LcdCompObj) < 0)
 8006974:	4b0a      	ldr	r3, [pc, #40]	@ (80069a0 <BSP_LCD_Refresh+0x50>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800697a:	4a0a      	ldr	r2, [pc, #40]	@ (80069a4 <BSP_LCD_Refresh+0x54>)
 800697c:	6812      	ldr	r2, [r2, #0]
 800697e:	4610      	mov	r0, r2
 8006980:	4798      	blx	r3
 8006982:	4603      	mov	r3, r0
 8006984:	2b00      	cmp	r3, #0
 8006986:	da06      	bge.n	8006996 <BSP_LCD_Refresh+0x46>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006988:	f06f 0304 	mvn.w	r3, #4
 800698c:	60fb      	str	r3, [r7, #12]
 800698e:	e002      	b.n	8006996 <BSP_LCD_Refresh+0x46>
    }
  }
  else
  {
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8006990:	f06f 030a 	mvn.w	r3, #10
 8006994:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8006996:	68fb      	ldr	r3, [r7, #12]
}
 8006998:	4618      	mov	r0, r3
 800699a:	3710      	adds	r7, #16
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	20000b78 	.word	0x20000b78
 80069a4:	20000b68 	.word	0x20000b68

080069a8 <BSP_LCD_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Pointer to Bmp picture address in the internal Flash
  * @retval BSP status
  */
int32_t BSP_LCD_DrawBitmap(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 80069a8:	b590      	push	{r4, r7, lr}
 80069aa:	b087      	sub	sp, #28
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	60f8      	str	r0, [r7, #12]
 80069b0:	60b9      	str	r1, [r7, #8]
 80069b2:	607a      	str	r2, [r7, #4]
 80069b4:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80069b6:	2300      	movs	r3, #0
 80069b8:	617b      	str	r3, [r7, #20]

  if(Instance >= LCD_INSTANCES_NBR)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d003      	beq.n	80069c8 <BSP_LCD_DrawBitmap+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80069c0:	f06f 0301 	mvn.w	r3, #1
 80069c4:	617b      	str	r3, [r7, #20]
 80069c6:	e017      	b.n	80069f8 <BSP_LCD_DrawBitmap+0x50>
  }
  else if(LcdDrv->DrawBitmap != NULL)
 80069c8:	4b0e      	ldr	r3, [pc, #56]	@ (8006a04 <BSP_LCD_DrawBitmap+0x5c>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d00f      	beq.n	80069f2 <BSP_LCD_DrawBitmap+0x4a>
  {
    /* Draw the bitmap on LCD */
    if (LcdDrv->DrawBitmap(LcdCompObj, Xpos, Ypos, pBmp) < 0)
 80069d2:	4b0c      	ldr	r3, [pc, #48]	@ (8006a04 <BSP_LCD_DrawBitmap+0x5c>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 80069d8:	4b0b      	ldr	r3, [pc, #44]	@ (8006a08 <BSP_LCD_DrawBitmap+0x60>)
 80069da:	6818      	ldr	r0, [r3, #0]
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	68b9      	ldr	r1, [r7, #8]
 80069e2:	47a0      	blx	r4
 80069e4:	4603      	mov	r3, r0
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	da06      	bge.n	80069f8 <BSP_LCD_DrawBitmap+0x50>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80069ea:	f06f 0304 	mvn.w	r3, #4
 80069ee:	617b      	str	r3, [r7, #20]
 80069f0:	e002      	b.n	80069f8 <BSP_LCD_DrawBitmap+0x50>
    }
  }
  else
  {
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80069f2:	f06f 030a 	mvn.w	r3, #10
 80069f6:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80069f8:	697b      	ldr	r3, [r7, #20]
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	371c      	adds	r7, #28
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd90      	pop	{r4, r7, pc}
 8006a02:	bf00      	nop
 8006a04:	20000b78 	.word	0x20000b78
 8006a08:	20000b68 	.word	0x20000b68

08006a0c <BSP_LCD_FillRGBRect>:
  * @param  Width width of the rectangle to fill.
  * @param  Height height of the rectangle to fill.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8006a0c:	b590      	push	{r4, r7, lr}
 8006a0e:	b089      	sub	sp, #36	@ 0x24
 8006a10:	af02      	add	r7, sp, #8
 8006a12:	60f8      	str	r0, [r7, #12]
 8006a14:	60b9      	str	r1, [r7, #8]
 8006a16:	607a      	str	r2, [r7, #4]
 8006a18:	603b      	str	r3, [r7, #0]
   int32_t ret = BSP_ERROR_NONE;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	617b      	str	r3, [r7, #20]

  if(Instance >= LCD_INSTANCES_NBR)
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d003      	beq.n	8006a2c <BSP_LCD_FillRGBRect+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006a24:	f06f 0301 	mvn.w	r3, #1
 8006a28:	617b      	str	r3, [r7, #20]
 8006a2a:	e01b      	b.n	8006a64 <BSP_LCD_FillRGBRect+0x58>
  }
  else if(LcdDrv->FillRGBRect != NULL)
 8006a2c:	4b10      	ldr	r3, [pc, #64]	@ (8006a70 <BSP_LCD_FillRGBRect+0x64>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d013      	beq.n	8006a5e <BSP_LCD_FillRGBRect+0x52>
  {
    /* shift bitmap on LCD */
    if (LcdDrv->FillRGBRect(LcdCompObj, Xpos, Ypos, pData, Width, Height) < 0)
 8006a36:	4b0e      	ldr	r3, [pc, #56]	@ (8006a70 <BSP_LCD_FillRGBRect+0x64>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
 8006a3c:	4b0d      	ldr	r3, [pc, #52]	@ (8006a74 <BSP_LCD_FillRGBRect+0x68>)
 8006a3e:	6818      	ldr	r0, [r3, #0]
 8006a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a42:	9301      	str	r3, [sp, #4]
 8006a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a46:	9300      	str	r3, [sp, #0]
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	68b9      	ldr	r1, [r7, #8]
 8006a4e:	47a0      	blx	r4
 8006a50:	4603      	mov	r3, r0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	da06      	bge.n	8006a64 <BSP_LCD_FillRGBRect+0x58>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006a56:	f06f 0304 	mvn.w	r3, #4
 8006a5a:	617b      	str	r3, [r7, #20]
 8006a5c:	e002      	b.n	8006a64 <BSP_LCD_FillRGBRect+0x58>
    }
  }
  else
  {
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8006a5e:	f06f 030a 	mvn.w	r3, #10
 8006a62:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8006a64:	697b      	ldr	r3, [r7, #20]
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	371c      	adds	r7, #28
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd90      	pop	{r4, r7, pc}
 8006a6e:	bf00      	nop
 8006a70:	20000b78 	.word	0x20000b78
 8006a74:	20000b68 	.word	0x20000b68

08006a78 <BSP_LCD_DrawHLine>:
  * @param  Length Line length
  * @param  Color Line color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawHLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8006a78:	b590      	push	{r4, r7, lr}
 8006a7a:	b089      	sub	sp, #36	@ 0x24
 8006a7c:	af02      	add	r7, sp, #8
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	60b9      	str	r1, [r7, #8]
 8006a82:	607a      	str	r2, [r7, #4]
 8006a84:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8006a86:	2300      	movs	r3, #0
 8006a88:	617b      	str	r3, [r7, #20]

  if(Instance >= LCD_INSTANCES_NBR)
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d003      	beq.n	8006a98 <BSP_LCD_DrawHLine+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006a90:	f06f 0301 	mvn.w	r3, #1
 8006a94:	617b      	str	r3, [r7, #20]
 8006a96:	e019      	b.n	8006acc <BSP_LCD_DrawHLine+0x54>
  }

  else if(LcdDrv->DrawHLine != NULL)
 8006a98:	4b0f      	ldr	r3, [pc, #60]	@ (8006ad8 <BSP_LCD_DrawHLine+0x60>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d011      	beq.n	8006ac6 <BSP_LCD_DrawHLine+0x4e>
  {
    /* Draw the horizontal line on LCD */
    if (LcdDrv->DrawHLine(LcdCompObj, Xpos, Ypos, Length, Color) < 0)
 8006aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8006ad8 <BSP_LCD_DrawHLine+0x60>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8006aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8006adc <BSP_LCD_DrawHLine+0x64>)
 8006aaa:	6818      	ldr	r0, [r3, #0]
 8006aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aae:	9300      	str	r3, [sp, #0]
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	68b9      	ldr	r1, [r7, #8]
 8006ab6:	47a0      	blx	r4
 8006ab8:	4603      	mov	r3, r0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	da06      	bge.n	8006acc <BSP_LCD_DrawHLine+0x54>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006abe:	f06f 0304 	mvn.w	r3, #4
 8006ac2:	617b      	str	r3, [r7, #20]
 8006ac4:	e002      	b.n	8006acc <BSP_LCD_DrawHLine+0x54>
    }
  }
  else
  {
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8006ac6:	f06f 030a 	mvn.w	r3, #10
 8006aca:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8006acc:	697b      	ldr	r3, [r7, #20]
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	371c      	adds	r7, #28
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd90      	pop	{r4, r7, pc}
 8006ad6:	bf00      	nop
 8006ad8:	20000b78 	.word	0x20000b78
 8006adc:	20000b68 	.word	0x20000b68

08006ae0 <BSP_LCD_DrawVLine>:
  * @param  Length Line length
  * @param  Color Line color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawVLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8006ae0:	b590      	push	{r4, r7, lr}
 8006ae2:	b089      	sub	sp, #36	@ 0x24
 8006ae4:	af02      	add	r7, sp, #8
 8006ae6:	60f8      	str	r0, [r7, #12]
 8006ae8:	60b9      	str	r1, [r7, #8]
 8006aea:	607a      	str	r2, [r7, #4]
 8006aec:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8006aee:	2300      	movs	r3, #0
 8006af0:	617b      	str	r3, [r7, #20]

  if(Instance >= LCD_INSTANCES_NBR)
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d003      	beq.n	8006b00 <BSP_LCD_DrawVLine+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006af8:	f06f 0301 	mvn.w	r3, #1
 8006afc:	617b      	str	r3, [r7, #20]
 8006afe:	e019      	b.n	8006b34 <BSP_LCD_DrawVLine+0x54>
  }
  else if(LcdDrv->DrawVLine != NULL)
 8006b00:	4b0f      	ldr	r3, [pc, #60]	@ (8006b40 <BSP_LCD_DrawVLine+0x60>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d011      	beq.n	8006b2e <BSP_LCD_DrawVLine+0x4e>
  {
    /* Draw the vertical line on LCD */
    if (LcdDrv->DrawVLine(LcdCompObj, Xpos, Ypos, Length, Color) < 0)
 8006b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8006b40 <BSP_LCD_DrawVLine+0x60>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
 8006b10:	4b0c      	ldr	r3, [pc, #48]	@ (8006b44 <BSP_LCD_DrawVLine+0x64>)
 8006b12:	6818      	ldr	r0, [r3, #0]
 8006b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b16:	9300      	str	r3, [sp, #0]
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	68b9      	ldr	r1, [r7, #8]
 8006b1e:	47a0      	blx	r4
 8006b20:	4603      	mov	r3, r0
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	da06      	bge.n	8006b34 <BSP_LCD_DrawVLine+0x54>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006b26:	f06f 0304 	mvn.w	r3, #4
 8006b2a:	617b      	str	r3, [r7, #20]
 8006b2c:	e002      	b.n	8006b34 <BSP_LCD_DrawVLine+0x54>
    }
  }
  else
  {
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8006b2e:	f06f 030a 	mvn.w	r3, #10
 8006b32:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8006b34:	697b      	ldr	r3, [r7, #20]
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	371c      	adds	r7, #28
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd90      	pop	{r4, r7, pc}
 8006b3e:	bf00      	nop
 8006b40:	20000b78 	.word	0x20000b78
 8006b44:	20000b68 	.word	0x20000b68

08006b48 <BSP_LCD_FillRect>:
  * @param  Height Rectangle height
  * @param  Color Color of rectangle
  * @retval BSP status
  */
int32_t BSP_LCD_FillRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8006b48:	b590      	push	{r4, r7, lr}
 8006b4a:	b089      	sub	sp, #36	@ 0x24
 8006b4c:	af02      	add	r7, sp, #8
 8006b4e:	60f8      	str	r0, [r7, #12]
 8006b50:	60b9      	str	r1, [r7, #8]
 8006b52:	607a      	str	r2, [r7, #4]
 8006b54:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8006b56:	2300      	movs	r3, #0
 8006b58:	617b      	str	r3, [r7, #20]

  if(Instance >= LCD_INSTANCES_NBR)
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d003      	beq.n	8006b68 <BSP_LCD_FillRect+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006b60:	f06f 0301 	mvn.w	r3, #1
 8006b64:	617b      	str	r3, [r7, #20]
 8006b66:	e012      	b.n	8006b8e <BSP_LCD_FillRect+0x46>
  }
  else
  {
    if(LcdDrv->FillRect(LcdCompObj, Xpos, Ypos, Width, Height, Color) < 0)
 8006b68:	4b0b      	ldr	r3, [pc, #44]	@ (8006b98 <BSP_LCD_FillRect+0x50>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	6d5c      	ldr	r4, [r3, #84]	@ 0x54
 8006b6e:	4b0b      	ldr	r3, [pc, #44]	@ (8006b9c <BSP_LCD_FillRect+0x54>)
 8006b70:	6818      	ldr	r0, [r3, #0]
 8006b72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b74:	9301      	str	r3, [sp, #4]
 8006b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b78:	9300      	str	r3, [sp, #0]
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	68b9      	ldr	r1, [r7, #8]
 8006b80:	47a0      	blx	r4
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	da02      	bge.n	8006b8e <BSP_LCD_FillRect+0x46>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006b88:	f06f 0304 	mvn.w	r3, #4
 8006b8c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8006b8e:	697b      	ldr	r3, [r7, #20]
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	371c      	adds	r7, #28
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd90      	pop	{r4, r7, pc}
 8006b98:	20000b78 	.word	0x20000b78
 8006b9c:	20000b68 	.word	0x20000b68

08006ba0 <BSP_LCD_Clear>:
  * @param  Instance LCD Instance
  * @param  Color to set
  * @retval BSP status
  */
int32_t BSP_LCD_Clear(uint32_t Instance, uint32_t Color)
{
 8006ba0:	b5b0      	push	{r4, r5, r7, lr}
 8006ba2:	b086      	sub	sp, #24
 8006ba4:	af02      	add	r7, sp, #8
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8006baa:	2300      	movs	r3, #0
 8006bac:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d003      	beq.n	8006bbc <BSP_LCD_Clear+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006bb4:	f06f 0301 	mvn.w	r3, #1
 8006bb8:	60fb      	str	r3, [r7, #12]
 8006bba:	e022      	b.n	8006c02 <BSP_LCD_Clear+0x62>
  }
  else
  {
    if(LcdDrv->FillRect(LcdCompObj, 0, 0, LcdCtx[Instance].Width, LcdCtx[Instance].Height, Color) < 0)
 8006bbc:	4b13      	ldr	r3, [pc, #76]	@ (8006c0c <BSP_LCD_Clear+0x6c>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	6d5c      	ldr	r4, [r3, #84]	@ 0x54
 8006bc2:	4b13      	ldr	r3, [pc, #76]	@ (8006c10 <BSP_LCD_Clear+0x70>)
 8006bc4:	6818      	ldr	r0, [r3, #0]
 8006bc6:	4913      	ldr	r1, [pc, #76]	@ (8006c14 <BSP_LCD_Clear+0x74>)
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	4613      	mov	r3, r2
 8006bcc:	005b      	lsls	r3, r3, #1
 8006bce:	4413      	add	r3, r2
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	440b      	add	r3, r1
 8006bd4:	6819      	ldr	r1, [r3, #0]
 8006bd6:	4d0f      	ldr	r5, [pc, #60]	@ (8006c14 <BSP_LCD_Clear+0x74>)
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	4613      	mov	r3, r2
 8006bdc:	005b      	lsls	r3, r3, #1
 8006bde:	4413      	add	r3, r2
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	442b      	add	r3, r5
 8006be4:	3304      	adds	r3, #4
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	683a      	ldr	r2, [r7, #0]
 8006bea:	9201      	str	r2, [sp, #4]
 8006bec:	9300      	str	r3, [sp, #0]
 8006bee:	460b      	mov	r3, r1
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	2100      	movs	r1, #0
 8006bf4:	47a0      	blx	r4
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	da02      	bge.n	8006c02 <BSP_LCD_Clear+0x62>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006bfc:	f06f 0304 	mvn.w	r3, #4
 8006c00:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8006c02:	68fb      	ldr	r3, [r7, #12]
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3710      	adds	r7, #16
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bdb0      	pop	{r4, r5, r7, pc}
 8006c0c:	20000b78 	.word	0x20000b78
 8006c10:	20000b68 	.word	0x20000b68
 8006c14:	20000b6c 	.word	0x20000b6c

08006c18 <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position
  * @param  Color pointer to RGB pixel color
  * @retval BSP status
  */
int32_t  BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 8006c18:	b590      	push	{r4, r7, lr}
 8006c1a:	b087      	sub	sp, #28
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	607a      	str	r2, [r7, #4]
 8006c24:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8006c26:	2300      	movs	r3, #0
 8006c28:	617b      	str	r3, [r7, #20]

  if(Instance >= LCD_INSTANCES_NBR)
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d003      	beq.n	8006c38 <BSP_LCD_ReadPixel+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006c30:	f06f 0301 	mvn.w	r3, #1
 8006c34:	617b      	str	r3, [r7, #20]
 8006c36:	e00e      	b.n	8006c56 <BSP_LCD_ReadPixel+0x3e>
  }
  else
  {
    if(LcdDrv->GetPixel(LcdCompObj, Xpos, Ypos, Color) < 0)
 8006c38:	4b09      	ldr	r3, [pc, #36]	@ (8006c60 <BSP_LCD_ReadPixel+0x48>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
 8006c3e:	4b09      	ldr	r3, [pc, #36]	@ (8006c64 <BSP_LCD_ReadPixel+0x4c>)
 8006c40:	6818      	ldr	r0, [r3, #0]
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	68b9      	ldr	r1, [r7, #8]
 8006c48:	47a0      	blx	r4
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	da02      	bge.n	8006c56 <BSP_LCD_ReadPixel+0x3e>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006c50:	f06f 0304 	mvn.w	r3, #4
 8006c54:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8006c56:	697b      	ldr	r3, [r7, #20]
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	371c      	adds	r7, #28
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd90      	pop	{r4, r7, pc}
 8006c60:	20000b78 	.word	0x20000b78
 8006c64:	20000b68 	.word	0x20000b68

08006c68 <BSP_LCD_WritePixel>:
  * @param  Ypos Y position
  * @param  Color RGB pixel color
  * @retval BSP status
  */
int32_t  BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 8006c68:	b590      	push	{r4, r7, lr}
 8006c6a:	b087      	sub	sp, #28
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	60b9      	str	r1, [r7, #8]
 8006c72:	607a      	str	r2, [r7, #4]
 8006c74:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8006c76:	2300      	movs	r3, #0
 8006c78:	617b      	str	r3, [r7, #20]

  if(Instance >= LCD_INSTANCES_NBR)
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d003      	beq.n	8006c88 <BSP_LCD_WritePixel+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006c80:	f06f 0301 	mvn.w	r3, #1
 8006c84:	617b      	str	r3, [r7, #20]
 8006c86:	e00e      	b.n	8006ca6 <BSP_LCD_WritePixel+0x3e>
  }
  else
  {
    if(LcdDrv->SetPixel(LcdCompObj, Xpos, Ypos, Color) < 0)
 8006c88:	4b09      	ldr	r3, [pc, #36]	@ (8006cb0 <BSP_LCD_WritePixel+0x48>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	6ddc      	ldr	r4, [r3, #92]	@ 0x5c
 8006c8e:	4b09      	ldr	r3, [pc, #36]	@ (8006cb4 <BSP_LCD_WritePixel+0x4c>)
 8006c90:	6818      	ldr	r0, [r3, #0]
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	68b9      	ldr	r1, [r7, #8]
 8006c98:	47a0      	blx	r4
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	da02      	bge.n	8006ca6 <BSP_LCD_WritePixel+0x3e>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006ca0:	f06f 0304 	mvn.w	r3, #4
 8006ca4:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8006ca6:	697b      	ldr	r3, [r7, #20]
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	371c      	adds	r7, #28
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd90      	pop	{r4, r7, pc}
 8006cb0:	20000b78 	.word	0x20000b78
 8006cb4:	20000b68 	.word	0x20000b68

08006cb8 <BSP_LCD_WriteReg>:
  * @param  pData pointer to the read data from LCD SRAM.
  * @param  Length length of data be read from the LCD SRAM
  * @retval BSP status
  */
int32_t BSP_LCD_WriteReg(uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	6039      	str	r1, [r7, #0]
 8006cc2:	80fb      	strh	r3, [r7, #6]
 8006cc4:	4613      	mov	r3, r2
 8006cc6:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	60fb      	str	r3, [r7, #12]

  /* Send Data */
  if((ret == BSP_ERROR_NONE) && (Length > 0U))
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d10d      	bne.n	8006cee <BSP_LCD_WriteReg+0x36>
 8006cd2:	88bb      	ldrh	r3, [r7, #4]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d00a      	beq.n	8006cee <BSP_LCD_WriteReg+0x36>
  {
    if(BSP_LCD_SendData(pData, Length) != BSP_ERROR_NONE)
 8006cd8:	88bb      	ldrh	r3, [r7, #4]
 8006cda:	4619      	mov	r1, r3
 8006cdc:	6838      	ldr	r0, [r7, #0]
 8006cde:	f000 f80b 	bl	8006cf8 <BSP_LCD_SendData>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d002      	beq.n	8006cee <BSP_LCD_WriteReg+0x36>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8006ce8:	f06f 0307 	mvn.w	r3, #7
 8006cec:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8006cee:	68fb      	ldr	r3, [r7, #12]
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3710      	adds	r7, #16
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <BSP_LCD_SendData>:
  * @param  pData pointer to data to write to LCD SRAM.
  * @param  Length length of data to write to LCD SRAM
  * @retval Error status
  */
int32_t BSP_LCD_SendData(uint8_t *pData, uint16_t Length)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	460b      	mov	r3, r1
 8006d02:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 8006d04:	2300      	movs	r3, #0
 8006d06:	60fb      	str	r3, [r7, #12]
  if(Length==1)
 8006d08:	887b      	ldrh	r3, [r7, #2]
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d11b      	bne.n	8006d46 <BSP_LCD_SendData+0x4e>
  {
    /* Reset LCD control line CS */
    LCD_CS_LOW();
 8006d0e:	2200      	movs	r2, #0
 8006d10:	2101      	movs	r1, #1
 8006d12:	4820      	ldr	r0, [pc, #128]	@ (8006d94 <BSP_LCD_SendData+0x9c>)
 8006d14:	f001 f982 	bl	800801c <HAL_GPIO_WritePin>
    LCD_DC_LOW();
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006d1e:	481e      	ldr	r0, [pc, #120]	@ (8006d98 <BSP_LCD_SendData+0xa0>)
 8006d20:	f001 f97c 	bl	800801c <HAL_GPIO_WritePin>
      /* Send Data */
      if(BSP_SPI1_Send(pData, Length)!= BSP_ERROR_NONE)
 8006d24:	887b      	ldrh	r3, [r7, #2]
 8006d26:	4619      	mov	r1, r3
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f7ff fc5b 	bl	80065e4 <BSP_SPI1_Send>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d002      	beq.n	8006d3a <BSP_LCD_SendData+0x42>
    {
        ret = BSP_ERROR_BUS_FAILURE;
 8006d34:	f06f 0307 	mvn.w	r3, #7
 8006d38:	60fb      	str	r3, [r7, #12]
    }
    /* Deselect : Chip Select high */
    LCD_CS_HIGH();
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	2101      	movs	r1, #1
 8006d3e:	4815      	ldr	r0, [pc, #84]	@ (8006d94 <BSP_LCD_SendData+0x9c>)
 8006d40:	f001 f96c 	bl	800801c <HAL_GPIO_WritePin>
 8006d44:	e020      	b.n	8006d88 <BSP_LCD_SendData+0x90>
  }
  else
  { 
    LCD_CS_LOW();
 8006d46:	2200      	movs	r2, #0
 8006d48:	2101      	movs	r1, #1
 8006d4a:	4812      	ldr	r0, [pc, #72]	@ (8006d94 <BSP_LCD_SendData+0x9c>)
 8006d4c:	f001 f966 	bl	800801c <HAL_GPIO_WritePin>
    LCD_DC_HIGH();
 8006d50:	2201      	movs	r2, #1
 8006d52:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006d56:	4810      	ldr	r0, [pc, #64]	@ (8006d98 <BSP_LCD_SendData+0xa0>)
 8006d58:	f001 f960 	bl	800801c <HAL_GPIO_WritePin>
      /* Send Data */
      if(BSP_SPI1_Send(pData, Length)!= BSP_ERROR_NONE)
 8006d5c:	887b      	ldrh	r3, [r7, #2]
 8006d5e:	4619      	mov	r1, r3
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f7ff fc3f 	bl	80065e4 <BSP_SPI1_Send>
 8006d66:	4603      	mov	r3, r0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d002      	beq.n	8006d72 <BSP_LCD_SendData+0x7a>
    {
        ret = BSP_ERROR_BUS_FAILURE;
 8006d6c:	f06f 0307 	mvn.w	r3, #7
 8006d70:	60fb      	str	r3, [r7, #12]
    }
    LCD_DC_LOW() ;
 8006d72:	2200      	movs	r2, #0
 8006d74:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006d78:	4807      	ldr	r0, [pc, #28]	@ (8006d98 <BSP_LCD_SendData+0xa0>)
 8006d7a:	f001 f94f 	bl	800801c <HAL_GPIO_WritePin>
    /* Deselect : Chip Select high */
    LCD_CS_HIGH();
 8006d7e:	2201      	movs	r2, #1
 8006d80:	2101      	movs	r1, #1
 8006d82:	4804      	ldr	r0, [pc, #16]	@ (8006d94 <BSP_LCD_SendData+0x9c>)
 8006d84:	f001 f94a 	bl	800801c <HAL_GPIO_WritePin>
  }
  
  return ret;
 8006d88:	68fb      	ldr	r3, [r7, #12]
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3710      	adds	r7, #16
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}
 8006d92:	bf00      	nop
 8006d94:	48001c00 	.word	0x48001c00
 8006d98:	48000800 	.word	0x48000800

08006d9c <BSP_LCD_ReadReg>:
  * @param  pData pointer to the read data from LCD SRAM.
  * @param  Length length of data be read from the LCD SRAM
  * @retval BSP status
  */
int32_t BSP_LCD_ReadReg(uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b084      	sub	sp, #16
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	4603      	mov	r3, r0
 8006da4:	6039      	str	r1, [r7, #0]
 8006da6:	80fb      	strh	r3, [r7, #6]
 8006da8:	4613      	mov	r3, r2
 8006daa:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8006dac:	2300      	movs	r3, #0
 8006dae:	60fb      	str	r3, [r7, #12]
  UNUSED(Length);
  
  /* Send Reg value to Read */
  if(BSP_LCD_WriteReg(Reg, pData, 0) != BSP_ERROR_NONE)
 8006db0:	88fb      	ldrh	r3, [r7, #6]
 8006db2:	2200      	movs	r2, #0
 8006db4:	6839      	ldr	r1, [r7, #0]
 8006db6:	4618      	mov	r0, r3
 8006db8:	f7ff ff7e 	bl	8006cb8 <BSP_LCD_WriteReg>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d002      	beq.n	8006dc8 <BSP_LCD_ReadReg+0x2c>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 8006dc2:	f06f 0307 	mvn.w	r3, #7
 8006dc6:	60fb      	str	r3, [r7, #12]
  }
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8006dc8:	2200      	movs	r2, #0
 8006dca:	2101      	movs	r1, #1
 8006dcc:	480c      	ldr	r0, [pc, #48]	@ (8006e00 <BSP_LCD_ReadReg+0x64>)
 8006dce:	f001 f925 	bl	800801c <HAL_GPIO_WritePin>
  
  if (ret == BSP_ERROR_NONE)
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d109      	bne.n	8006dec <BSP_LCD_ReadReg+0x50>
  { 
    if(BSP_SPI1_Recv(pData, 2) != BSP_ERROR_NONE)
 8006dd8:	2102      	movs	r1, #2
 8006dda:	6838      	ldr	r0, [r7, #0]
 8006ddc:	f7ff fc1e 	bl	800661c <BSP_SPI1_Recv>
 8006de0:	4603      	mov	r3, r0
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d002      	beq.n	8006dec <BSP_LCD_ReadReg+0x50>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8006de6:	f06f 0307 	mvn.w	r3, #7
 8006dea:	60fb      	str	r3, [r7, #12]
    }
  }
  /* Deselect : Chip Select high */
  LCD_CS_HIGH();
 8006dec:	2201      	movs	r2, #1
 8006dee:	2101      	movs	r1, #1
 8006df0:	4803      	ldr	r0, [pc, #12]	@ (8006e00 <BSP_LCD_ReadReg+0x64>)
 8006df2:	f001 f913 	bl	800801c <HAL_GPIO_WritePin>
  
  return ret;
 8006df6:	68fb      	ldr	r3, [r7, #12]
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3710      	adds	r7, #16
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}
 8006e00:	48001c00 	.word	0x48001c00

08006e04 <LCD_MspInit>:
/**
  * @brief  Initialize the BSP LTDC Msp.
  * @retval None
  */
static void LCD_MspInit(void)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	af00      	add	r7, sp, #0
  /* turn LCD on = drive pin low (active low) */
  LCD_CS_LOW();
 8006e08:	2200      	movs	r2, #0
 8006e0a:	2101      	movs	r1, #1
 8006e0c:	4802      	ldr	r0, [pc, #8]	@ (8006e18 <LCD_MspInit+0x14>)
 8006e0e:	f001 f905 	bl	800801c <HAL_GPIO_WritePin>
}
 8006e12:	bf00      	nop
 8006e14:	bd80      	pop	{r7, pc}
 8006e16:	bf00      	nop
 8006e18:	48001c00 	.word	0x48001c00

08006e1c <SSD1315_Probe>:
  * @brief  Register Bus IOs for instance 0 if SSD1315 ID is OK
  * @param  Orientation
  * @retval BSP status
  */
static int32_t SSD1315_Probe(uint32_t Orientation)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b088      	sub	sp, #32
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  int32_t                 ret = BSP_ERROR_NONE;
 8006e24:	2300      	movs	r3, #0
 8006e26:	61fb      	str	r3, [r7, #28]
  SSD1315_IO_t            IOCtx;
  static SSD1315_Object_t SSD1315Obj;
  
  /* Configure the lcd driver : map to LCD_IO function*/
  IOCtx.Init             = LCD_IO_Init;
 8006e28:	4b18      	ldr	r3, [pc, #96]	@ (8006e8c <SSD1315_Probe+0x70>)
 8006e2a:	60bb      	str	r3, [r7, #8]
  IOCtx.DeInit           = LCD_IO_DeInit;
 8006e2c:	4b18      	ldr	r3, [pc, #96]	@ (8006e90 <SSD1315_Probe+0x74>)
 8006e2e:	60fb      	str	r3, [r7, #12]
  IOCtx.ReadReg          = BSP_LCD_ReadReg;
 8006e30:	4b18      	ldr	r3, [pc, #96]	@ (8006e94 <SSD1315_Probe+0x78>)
 8006e32:	617b      	str	r3, [r7, #20]
  IOCtx.WriteReg         = BSP_LCD_WriteReg;
 8006e34:	4b18      	ldr	r3, [pc, #96]	@ (8006e98 <SSD1315_Probe+0x7c>)
 8006e36:	613b      	str	r3, [r7, #16]
  IOCtx.GetTick          = BSP_GetTick;
 8006e38:	4b18      	ldr	r3, [pc, #96]	@ (8006e9c <SSD1315_Probe+0x80>)
 8006e3a:	61bb      	str	r3, [r7, #24]
  
  if(SSD1315_RegisterBusIO(&SSD1315Obj, &IOCtx) != SSD1315_OK)
 8006e3c:	f107 0308 	add.w	r3, r7, #8
 8006e40:	4619      	mov	r1, r3
 8006e42:	4817      	ldr	r0, [pc, #92]	@ (8006ea0 <SSD1315_Probe+0x84>)
 8006e44:	f7fe f85e 	bl	8004f04 <SSD1315_RegisterBusIO>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d003      	beq.n	8006e56 <SSD1315_Probe+0x3a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006e4e:	f06f 0306 	mvn.w	r3, #6
 8006e52:	61fb      	str	r3, [r7, #28]
 8006e54:	e015      	b.n	8006e82 <SSD1315_Probe+0x66>
  }
  else
  {
    LcdCompObj = &SSD1315Obj;
 8006e56:	4b13      	ldr	r3, [pc, #76]	@ (8006ea4 <SSD1315_Probe+0x88>)
 8006e58:	4a11      	ldr	r2, [pc, #68]	@ (8006ea0 <SSD1315_Probe+0x84>)
 8006e5a:	601a      	str	r2, [r3, #0]
    
    LCD_MspInit();
 8006e5c:	f7ff ffd2 	bl	8006e04 <LCD_MspInit>
    
    /* LCD Initialization */
    LcdDrv = (SSD1315_Drv_t *)&SSD1315_Driver;
 8006e60:	4b11      	ldr	r3, [pc, #68]	@ (8006ea8 <SSD1315_Probe+0x8c>)
 8006e62:	4a12      	ldr	r2, [pc, #72]	@ (8006eac <SSD1315_Probe+0x90>)
 8006e64:	601a      	str	r2, [r3, #0]
    if(LcdDrv->Init(LcdCompObj, SSD1315_FORMAT_DEFAULT, Orientation) != SSD1315_OK)
 8006e66:	4b10      	ldr	r3, [pc, #64]	@ (8006ea8 <SSD1315_Probe+0x8c>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a0d      	ldr	r2, [pc, #52]	@ (8006ea4 <SSD1315_Probe+0x88>)
 8006e6e:	6810      	ldr	r0, [r2, #0]
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	2100      	movs	r1, #0
 8006e74:	4798      	blx	r3
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d002      	beq.n	8006e82 <SSD1315_Probe+0x66>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006e7c:	f06f 0304 	mvn.w	r3, #4
 8006e80:	61fb      	str	r3, [r7, #28]
    }
  }
  
  return ret;
 8006e82:	69fb      	ldr	r3, [r7, #28]
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3720      	adds	r7, #32
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}
 8006e8c:	08006eb1 	.word	0x08006eb1
 8006e90:	08006f75 	.word	0x08006f75
 8006e94:	08006d9d 	.word	0x08006d9d
 8006e98:	08006cb9 	.word	0x08006cb9
 8006e9c:	08006661 	.word	0x08006661
 8006ea0:	20000b7c 	.word	0x20000b7c
 8006ea4:	20000b68 	.word	0x20000b68
 8006ea8:	20000b78 	.word	0x20000b78
 8006eac:	20000020 	.word	0x20000020

08006eb0 <LCD_IO_Init>:
/**
  * @brief  Initializes LCD low level.
  * @retval BSP status
  */
static int32_t LCD_IO_Init(void)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b086      	sub	sp, #24
 8006eb4:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	617b      	str	r3, [r7, #20]
  
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Configure the LCD Chip Select pin --------------------------------------*/
  LCD_CS_GPIO_CLK_ENABLE();
 8006eba:	2080      	movs	r0, #128	@ 0x80
 8006ebc:	f7ff fc32 	bl	8006724 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure NCS in Output Push-Pull mode */
  GPIO_InitStruct.Pin     = LCD_CS_PIN;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode    = GPIO_MODE_OUTPUT_PP;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull    = GPIO_NOPULL;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed   = GPIO_SPEED_FREQ_LOW;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(LCD_CS_GPIO_PORT, &GPIO_InitStruct);
 8006ed0:	463b      	mov	r3, r7
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	4825      	ldr	r0, [pc, #148]	@ (8006f6c <LCD_IO_Init+0xbc>)
 8006ed6:	f000 fe53 	bl	8007b80 <HAL_GPIO_Init>
  
  /* Set or Reset the control line */
  LCD_CS_LOW();
 8006eda:	2200      	movs	r2, #0
 8006edc:	2101      	movs	r1, #1
 8006ede:	4823      	ldr	r0, [pc, #140]	@ (8006f6c <LCD_IO_Init+0xbc>)
 8006ee0:	f001 f89c 	bl	800801c <HAL_GPIO_WritePin>
  
  /* Configure the LCD Data/Control pin -------------------------------------*/
  LCD_DC_GPIO_CLK_ENABLE();
 8006ee4:	2004      	movs	r0, #4
 8006ee6:	f7ff fc1d 	bl	8006724 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure NCS in Output Push-Pull mode */
  GPIO_InitStruct.Pin     = LCD_DC_PIN;
 8006eea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006eee:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode    = GPIO_MODE_OUTPUT_PP;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull    = GPIO_NOPULL;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed   = GPIO_SPEED_FREQ_LOW;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(LCD_DC_GPIO_PORT, &GPIO_InitStruct);
 8006efc:	463b      	mov	r3, r7
 8006efe:	4619      	mov	r1, r3
 8006f00:	481b      	ldr	r0, [pc, #108]	@ (8006f70 <LCD_IO_Init+0xc0>)
 8006f02:	f000 fe3d 	bl	8007b80 <HAL_GPIO_Init>
  
  /* Set or Reset the control line */
  LCD_DC_LOW();
 8006f06:	2200      	movs	r2, #0
 8006f08:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006f0c:	4818      	ldr	r0, [pc, #96]	@ (8006f70 <LCD_IO_Init+0xc0>)
 8006f0e:	f001 f885 	bl	800801c <HAL_GPIO_WritePin>
  
  /* Configure the LCD Reset pin --------------------------------------------*/
  LCD_RST_GPIO_CLK_ENABLE();
 8006f12:	2004      	movs	r0, #4
 8006f14:	f7ff fc06 	bl	8006724 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure NCS in Output Push-Pull mode */
  GPIO_InitStruct.Pin     = LCD_RST_PIN;
 8006f18:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006f1c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode    = GPIO_MODE_OUTPUT_PP;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull    = GPIO_NOPULL;
 8006f22:	2300      	movs	r3, #0
 8006f24:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed   = GPIO_SPEED_FREQ_LOW;
 8006f26:	2300      	movs	r3, #0
 8006f28:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(LCD_RST_GPIO_PORT, &GPIO_InitStruct);
 8006f2a:	463b      	mov	r3, r7
 8006f2c:	4619      	mov	r1, r3
 8006f2e:	4810      	ldr	r0, [pc, #64]	@ (8006f70 <LCD_IO_Init+0xc0>)
 8006f30:	f000 fe26 	bl	8007b80 <HAL_GPIO_Init>
  
  if (BSP_SPI1_Init() != BSP_ERROR_NONE)
 8006f34:	f7ff faf0 	bl	8006518 <BSP_SPI1_Init>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d002      	beq.n	8006f44 <LCD_IO_Init+0x94>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 8006f3e:	f06f 0307 	mvn.w	r3, #7
 8006f42:	617b      	str	r3, [r7, #20]
  }
  LCD_RST_LOW();
 8006f44:	2200      	movs	r2, #0
 8006f46:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006f4a:	4809      	ldr	r0, [pc, #36]	@ (8006f70 <LCD_IO_Init+0xc0>)
 8006f4c:	f001 f866 	bl	800801c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8006f50:	2001      	movs	r0, #1
 8006f52:	f7fa fc17 	bl	8001784 <HAL_Delay>
  LCD_RST_HIGH();
 8006f56:	2201      	movs	r2, #1
 8006f58:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006f5c:	4804      	ldr	r0, [pc, #16]	@ (8006f70 <LCD_IO_Init+0xc0>)
 8006f5e:	f001 f85d 	bl	800801c <HAL_GPIO_WritePin>
  return ret;
 8006f62:	697b      	ldr	r3, [r7, #20]
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3718      	adds	r7, #24
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}
 8006f6c:	48001c00 	.word	0x48001c00
 8006f70:	48000800 	.word	0x48000800

08006f74 <LCD_IO_DeInit>:
/**
  * @brief  DeInitializes LCD low level
  * @retval BSP status
  */
static int32_t LCD_IO_DeInit(void)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(LCD_CS_GPIO_PORT, LCD_CS_PIN);
 8006f78:	2101      	movs	r1, #1
 8006f7a:	4808      	ldr	r0, [pc, #32]	@ (8006f9c <LCD_IO_DeInit+0x28>)
 8006f7c:	f000 ff70 	bl	8007e60 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(LCD_DC_GPIO_PORT, LCD_DC_PIN);
 8006f80:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006f84:	4806      	ldr	r0, [pc, #24]	@ (8006fa0 <LCD_IO_DeInit+0x2c>)
 8006f86:	f000 ff6b 	bl	8007e60 <HAL_GPIO_DeInit>
  /* Uninitialize LCD Reset Pin */  
  HAL_GPIO_DeInit(LCD_RST_GPIO_PORT, LCD_RST_PIN);
 8006f8a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006f8e:	4804      	ldr	r0, [pc, #16]	@ (8006fa0 <LCD_IO_DeInit+0x2c>)
 8006f90:	f000 ff66 	bl	8007e60 <HAL_GPIO_DeInit>

  return BSP_ERROR_NONE;
 8006f94:	2300      	movs	r3, #0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop
 8006f9c:	48001c00 	.word	0x48001c00
 8006fa0:	48000800 	.word	0x48000800

08006fa4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8006fa8:	4b07      	ldr	r3, [pc, #28]	@ (8006fc8 <SystemInit+0x24>)
 8006faa:	2200      	movs	r2, #0
 8006fac:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8006fae:	4b06      	ldr	r3, [pc, #24]	@ (8006fc8 <SystemInit+0x24>)
 8006fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fb4:	4a04      	ldr	r2, [pc, #16]	@ (8006fc8 <SystemInit+0x24>)
 8006fb6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006fba:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  RCC->CR &= 0xFFFBFFFFU;

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
#endif
}
 8006fbe:	bf00      	nop
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr
 8006fc8:	e000ed00 	.word	0xe000ed00

08006fcc <LL_DBGMCU_EnableDBGSleepMode>:
{
 8006fcc:	b480      	push	{r7}
 8006fce:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8006fd0:	4b05      	ldr	r3, [pc, #20]	@ (8006fe8 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	4a04      	ldr	r2, [pc, #16]	@ (8006fe8 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8006fd6:	f043 0301 	orr.w	r3, r3, #1
 8006fda:	6053      	str	r3, [r2, #4]
}
 8006fdc:	bf00      	nop
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr
 8006fe6:	bf00      	nop
 8006fe8:	e0042000 	.word	0xe0042000

08006fec <LL_DBGMCU_EnableDBGStopMode>:
{
 8006fec:	b480      	push	{r7}
 8006fee:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8006ff0:	4b05      	ldr	r3, [pc, #20]	@ (8007008 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	4a04      	ldr	r2, [pc, #16]	@ (8007008 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8006ff6:	f043 0302 	orr.w	r3, r3, #2
 8006ffa:	6053      	str	r3, [r2, #4]
}
 8006ffc:	bf00      	nop
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr
 8007006:	bf00      	nop
 8007008:	e0042000 	.word	0xe0042000

0800700c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b082      	sub	sp, #8
 8007010:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8007012:	2300      	movs	r3, #0
 8007014:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007016:	4b0c      	ldr	r3, [pc, #48]	@ (8007048 <HAL_Init+0x3c>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a0b      	ldr	r2, [pc, #44]	@ (8007048 <HAL_Init+0x3c>)
 800701c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007020:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007022:	2003      	movs	r0, #3
 8007024:	f000 f9c0 	bl	80073a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007028:	2000      	movs	r0, #0
 800702a:	f000 f80f 	bl	800704c <HAL_InitTick>
 800702e:	4603      	mov	r3, r0
 8007030:	2b00      	cmp	r3, #0
 8007032:	d002      	beq.n	800703a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8007034:	2301      	movs	r3, #1
 8007036:	71fb      	strb	r3, [r7, #7]
 8007038:	e001      	b.n	800703e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800703a:	f7fc f805 	bl	8003048 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800703e:	79fb      	ldrb	r3, [r7, #7]
}
 8007040:	4618      	mov	r0, r3
 8007042:	3708      	adds	r7, #8
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}
 8007048:	58004000 	.word	0x58004000

0800704c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b084      	sub	sp, #16
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8007054:	2300      	movs	r3, #0
 8007056:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8007058:	4b17      	ldr	r3, [pc, #92]	@ (80070b8 <HAL_InitTick+0x6c>)
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d024      	beq.n	80070aa <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8007060:	f002 f96a 	bl	8009338 <HAL_RCC_GetHCLKFreq>
 8007064:	4602      	mov	r2, r0
 8007066:	4b14      	ldr	r3, [pc, #80]	@ (80070b8 <HAL_InitTick+0x6c>)
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	4619      	mov	r1, r3
 800706c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007070:	fbb3 f3f1 	udiv	r3, r3, r1
 8007074:	fbb2 f3f3 	udiv	r3, r2, r3
 8007078:	4618      	mov	r0, r3
 800707a:	f000 f9d6 	bl	800742a <HAL_SYSTICK_Config>
 800707e:	4603      	mov	r3, r0
 8007080:	2b00      	cmp	r3, #0
 8007082:	d10f      	bne.n	80070a4 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2b0f      	cmp	r3, #15
 8007088:	d809      	bhi.n	800709e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800708a:	2200      	movs	r2, #0
 800708c:	6879      	ldr	r1, [r7, #4]
 800708e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007092:	f000 f994 	bl	80073be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007096:	4a09      	ldr	r2, [pc, #36]	@ (80070bc <HAL_InitTick+0x70>)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6013      	str	r3, [r2, #0]
 800709c:	e007      	b.n	80070ae <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800709e:	2301      	movs	r3, #1
 80070a0:	73fb      	strb	r3, [r7, #15]
 80070a2:	e004      	b.n	80070ae <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	73fb      	strb	r3, [r7, #15]
 80070a8:	e001      	b.n	80070ae <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80070ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3710      	adds	r7, #16
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}
 80070b8:	200000a8 	.word	0x200000a8
 80070bc:	200000a4 	.word	0x200000a4

080070c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80070c0:	b480      	push	{r7}
 80070c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80070c4:	4b06      	ldr	r3, [pc, #24]	@ (80070e0 <HAL_IncTick+0x20>)
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	461a      	mov	r2, r3
 80070ca:	4b06      	ldr	r3, [pc, #24]	@ (80070e4 <HAL_IncTick+0x24>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4413      	add	r3, r2
 80070d0:	4a04      	ldr	r2, [pc, #16]	@ (80070e4 <HAL_IncTick+0x24>)
 80070d2:	6013      	str	r3, [r2, #0]
}
 80070d4:	bf00      	nop
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr
 80070de:	bf00      	nop
 80070e0:	200000a8 	.word	0x200000a8
 80070e4:	20000ba4 	.word	0x20000ba4

080070e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80070e8:	b480      	push	{r7}
 80070ea:	af00      	add	r7, sp, #0
  return uwTick;
 80070ec:	4b03      	ldr	r3, [pc, #12]	@ (80070fc <HAL_GetTick+0x14>)
 80070ee:	681b      	ldr	r3, [r3, #0]
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr
 80070fa:	bf00      	nop
 80070fc:	20000ba4 	.word	0x20000ba4

08007100 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8007100:	b480      	push	{r7}
 8007102:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8007104:	4b03      	ldr	r3, [pc, #12]	@ (8007114 <HAL_GetTickPrio+0x14>)
 8007106:	681b      	ldr	r3, [r3, #0]
}
 8007108:	4618      	mov	r0, r3
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr
 8007112:	bf00      	nop
 8007114:	200000a4 	.word	0x200000a4

08007118 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8007118:	b480      	push	{r7}
 800711a:	af00      	add	r7, sp, #0
  return uwTickFreq;
 800711c:	4b03      	ldr	r3, [pc, #12]	@ (800712c <HAL_GetTickFreq+0x14>)
 800711e:	781b      	ldrb	r3, [r3, #0]
}
 8007120:	4618      	mov	r0, r3
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr
 800712a:	bf00      	nop
 800712c:	200000a8 	.word	0x200000a8

08007130 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8007134:	f7ff ff4a 	bl	8006fcc <LL_DBGMCU_EnableDBGSleepMode>
}
 8007138:	bf00      	nop
 800713a:	bd80      	pop	{r7, pc}

0800713c <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8007140:	f7ff ff54 	bl	8006fec <LL_DBGMCU_EnableDBGStopMode>
}
 8007144:	bf00      	nop
 8007146:	bd80      	pop	{r7, pc}

08007148 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007148:	b480      	push	{r7}
 800714a:	b085      	sub	sp, #20
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f003 0307 	and.w	r3, r3, #7
 8007156:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007158:	4b0c      	ldr	r3, [pc, #48]	@ (800718c <__NVIC_SetPriorityGrouping+0x44>)
 800715a:	68db      	ldr	r3, [r3, #12]
 800715c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800715e:	68ba      	ldr	r2, [r7, #8]
 8007160:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007164:	4013      	ands	r3, r2
 8007166:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007170:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007174:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007178:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800717a:	4a04      	ldr	r2, [pc, #16]	@ (800718c <__NVIC_SetPriorityGrouping+0x44>)
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	60d3      	str	r3, [r2, #12]
}
 8007180:	bf00      	nop
 8007182:	3714      	adds	r7, #20
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr
 800718c:	e000ed00 	.word	0xe000ed00

08007190 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007190:	b480      	push	{r7}
 8007192:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007194:	4b04      	ldr	r3, [pc, #16]	@ (80071a8 <__NVIC_GetPriorityGrouping+0x18>)
 8007196:	68db      	ldr	r3, [r3, #12]
 8007198:	0a1b      	lsrs	r3, r3, #8
 800719a:	f003 0307 	and.w	r3, r3, #7
}
 800719e:	4618      	mov	r0, r3
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr
 80071a8:	e000ed00 	.word	0xe000ed00

080071ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b083      	sub	sp, #12
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	4603      	mov	r3, r0
 80071b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80071b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	db0b      	blt.n	80071d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80071be:	79fb      	ldrb	r3, [r7, #7]
 80071c0:	f003 021f 	and.w	r2, r3, #31
 80071c4:	4907      	ldr	r1, [pc, #28]	@ (80071e4 <__NVIC_EnableIRQ+0x38>)
 80071c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071ca:	095b      	lsrs	r3, r3, #5
 80071cc:	2001      	movs	r0, #1
 80071ce:	fa00 f202 	lsl.w	r2, r0, r2
 80071d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80071d6:	bf00      	nop
 80071d8:	370c      	adds	r7, #12
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr
 80071e2:	bf00      	nop
 80071e4:	e000e100 	.word	0xe000e100

080071e8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b083      	sub	sp, #12
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	4603      	mov	r3, r0
 80071f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80071f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	db12      	blt.n	8007220 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80071fa:	79fb      	ldrb	r3, [r7, #7]
 80071fc:	f003 021f 	and.w	r2, r3, #31
 8007200:	490a      	ldr	r1, [pc, #40]	@ (800722c <__NVIC_DisableIRQ+0x44>)
 8007202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007206:	095b      	lsrs	r3, r3, #5
 8007208:	2001      	movs	r0, #1
 800720a:	fa00 f202 	lsl.w	r2, r0, r2
 800720e:	3320      	adds	r3, #32
 8007210:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8007214:	f3bf 8f4f 	dsb	sy
}
 8007218:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800721a:	f3bf 8f6f 	isb	sy
}
 800721e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8007220:	bf00      	nop
 8007222:	370c      	adds	r7, #12
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr
 800722c:	e000e100 	.word	0xe000e100

08007230 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8007230:	b480      	push	{r7}
 8007232:	b083      	sub	sp, #12
 8007234:	af00      	add	r7, sp, #0
 8007236:	4603      	mov	r3, r0
 8007238:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800723a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800723e:	2b00      	cmp	r3, #0
 8007240:	db0c      	blt.n	800725c <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007242:	79fb      	ldrb	r3, [r7, #7]
 8007244:	f003 021f 	and.w	r2, r3, #31
 8007248:	4907      	ldr	r1, [pc, #28]	@ (8007268 <__NVIC_SetPendingIRQ+0x38>)
 800724a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800724e:	095b      	lsrs	r3, r3, #5
 8007250:	2001      	movs	r0, #1
 8007252:	fa00 f202 	lsl.w	r2, r0, r2
 8007256:	3340      	adds	r3, #64	@ 0x40
 8007258:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800725c:	bf00      	nop
 800725e:	370c      	adds	r7, #12
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr
 8007268:	e000e100 	.word	0xe000e100

0800726c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800726c:	b480      	push	{r7}
 800726e:	b083      	sub	sp, #12
 8007270:	af00      	add	r7, sp, #0
 8007272:	4603      	mov	r3, r0
 8007274:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800727a:	2b00      	cmp	r3, #0
 800727c:	db0c      	blt.n	8007298 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800727e:	79fb      	ldrb	r3, [r7, #7]
 8007280:	f003 021f 	and.w	r2, r3, #31
 8007284:	4907      	ldr	r1, [pc, #28]	@ (80072a4 <__NVIC_ClearPendingIRQ+0x38>)
 8007286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800728a:	095b      	lsrs	r3, r3, #5
 800728c:	2001      	movs	r0, #1
 800728e:	fa00 f202 	lsl.w	r2, r0, r2
 8007292:	3360      	adds	r3, #96	@ 0x60
 8007294:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007298:	bf00      	nop
 800729a:	370c      	adds	r7, #12
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr
 80072a4:	e000e100 	.word	0xe000e100

080072a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b083      	sub	sp, #12
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	4603      	mov	r3, r0
 80072b0:	6039      	str	r1, [r7, #0]
 80072b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80072b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	db0a      	blt.n	80072d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	b2da      	uxtb	r2, r3
 80072c0:	490c      	ldr	r1, [pc, #48]	@ (80072f4 <__NVIC_SetPriority+0x4c>)
 80072c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072c6:	0112      	lsls	r2, r2, #4
 80072c8:	b2d2      	uxtb	r2, r2
 80072ca:	440b      	add	r3, r1
 80072cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80072d0:	e00a      	b.n	80072e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	b2da      	uxtb	r2, r3
 80072d6:	4908      	ldr	r1, [pc, #32]	@ (80072f8 <__NVIC_SetPriority+0x50>)
 80072d8:	79fb      	ldrb	r3, [r7, #7]
 80072da:	f003 030f 	and.w	r3, r3, #15
 80072de:	3b04      	subs	r3, #4
 80072e0:	0112      	lsls	r2, r2, #4
 80072e2:	b2d2      	uxtb	r2, r2
 80072e4:	440b      	add	r3, r1
 80072e6:	761a      	strb	r2, [r3, #24]
}
 80072e8:	bf00      	nop
 80072ea:	370c      	adds	r7, #12
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr
 80072f4:	e000e100 	.word	0xe000e100
 80072f8:	e000ed00 	.word	0xe000ed00

080072fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b089      	sub	sp, #36	@ 0x24
 8007300:	af00      	add	r7, sp, #0
 8007302:	60f8      	str	r0, [r7, #12]
 8007304:	60b9      	str	r1, [r7, #8]
 8007306:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f003 0307 	and.w	r3, r3, #7
 800730e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007310:	69fb      	ldr	r3, [r7, #28]
 8007312:	f1c3 0307 	rsb	r3, r3, #7
 8007316:	2b04      	cmp	r3, #4
 8007318:	bf28      	it	cs
 800731a:	2304      	movcs	r3, #4
 800731c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800731e:	69fb      	ldr	r3, [r7, #28]
 8007320:	3304      	adds	r3, #4
 8007322:	2b06      	cmp	r3, #6
 8007324:	d902      	bls.n	800732c <NVIC_EncodePriority+0x30>
 8007326:	69fb      	ldr	r3, [r7, #28]
 8007328:	3b03      	subs	r3, #3
 800732a:	e000      	b.n	800732e <NVIC_EncodePriority+0x32>
 800732c:	2300      	movs	r3, #0
 800732e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007330:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007334:	69bb      	ldr	r3, [r7, #24]
 8007336:	fa02 f303 	lsl.w	r3, r2, r3
 800733a:	43da      	mvns	r2, r3
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	401a      	ands	r2, r3
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007344:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	fa01 f303 	lsl.w	r3, r1, r3
 800734e:	43d9      	mvns	r1, r3
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007354:	4313      	orrs	r3, r2
         );
}
 8007356:	4618      	mov	r0, r3
 8007358:	3724      	adds	r7, #36	@ 0x24
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr
	...

08007364 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b082      	sub	sp, #8
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	3b01      	subs	r3, #1
 8007370:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007374:	d301      	bcc.n	800737a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007376:	2301      	movs	r3, #1
 8007378:	e00f      	b.n	800739a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800737a:	4a0a      	ldr	r2, [pc, #40]	@ (80073a4 <SysTick_Config+0x40>)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	3b01      	subs	r3, #1
 8007380:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007382:	210f      	movs	r1, #15
 8007384:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007388:	f7ff ff8e 	bl	80072a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800738c:	4b05      	ldr	r3, [pc, #20]	@ (80073a4 <SysTick_Config+0x40>)
 800738e:	2200      	movs	r2, #0
 8007390:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007392:	4b04      	ldr	r3, [pc, #16]	@ (80073a4 <SysTick_Config+0x40>)
 8007394:	2207      	movs	r2, #7
 8007396:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007398:	2300      	movs	r3, #0
}
 800739a:	4618      	mov	r0, r3
 800739c:	3708      	adds	r7, #8
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
 80073a2:	bf00      	nop
 80073a4:	e000e010 	.word	0xe000e010

080073a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b082      	sub	sp, #8
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f7ff fec9 	bl	8007148 <__NVIC_SetPriorityGrouping>
}
 80073b6:	bf00      	nop
 80073b8:	3708      	adds	r7, #8
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}

080073be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80073be:	b580      	push	{r7, lr}
 80073c0:	b086      	sub	sp, #24
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	4603      	mov	r3, r0
 80073c6:	60b9      	str	r1, [r7, #8]
 80073c8:	607a      	str	r2, [r7, #4]
 80073ca:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80073cc:	f7ff fee0 	bl	8007190 <__NVIC_GetPriorityGrouping>
 80073d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	68b9      	ldr	r1, [r7, #8]
 80073d6:	6978      	ldr	r0, [r7, #20]
 80073d8:	f7ff ff90 	bl	80072fc <NVIC_EncodePriority>
 80073dc:	4602      	mov	r2, r0
 80073de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073e2:	4611      	mov	r1, r2
 80073e4:	4618      	mov	r0, r3
 80073e6:	f7ff ff5f 	bl	80072a8 <__NVIC_SetPriority>
}
 80073ea:	bf00      	nop
 80073ec:	3718      	adds	r7, #24
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}

080073f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80073f2:	b580      	push	{r7, lr}
 80073f4:	b082      	sub	sp, #8
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	4603      	mov	r3, r0
 80073fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80073fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007400:	4618      	mov	r0, r3
 8007402:	f7ff fed3 	bl	80071ac <__NVIC_EnableIRQ>
}
 8007406:	bf00      	nop
 8007408:	3708      	adds	r7, #8
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}

0800740e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800740e:	b580      	push	{r7, lr}
 8007410:	b082      	sub	sp, #8
 8007412:	af00      	add	r7, sp, #0
 8007414:	4603      	mov	r3, r0
 8007416:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800741c:	4618      	mov	r0, r3
 800741e:	f7ff fee3 	bl	80071e8 <__NVIC_DisableIRQ>
}
 8007422:	bf00      	nop
 8007424:	3708      	adds	r7, #8
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}

0800742a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800742a:	b580      	push	{r7, lr}
 800742c:	b082      	sub	sp, #8
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f7ff ff96 	bl	8007364 <SysTick_Config>
 8007438:	4603      	mov	r3, r0
}
 800743a:	4618      	mov	r0, r3
 800743c:	3708      	adds	r7, #8
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}

08007442 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8007442:	b580      	push	{r7, lr}
 8007444:	b082      	sub	sp, #8
 8007446:	af00      	add	r7, sp, #0
 8007448:	4603      	mov	r3, r0
 800744a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 800744c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007450:	4618      	mov	r0, r3
 8007452:	f7ff feed 	bl	8007230 <__NVIC_SetPendingIRQ>
}
 8007456:	bf00      	nop
 8007458:	3708      	adds	r7, #8
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}

0800745e <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800745e:	b580      	push	{r7, lr}
 8007460:	b082      	sub	sp, #8
 8007462:	af00      	add	r7, sp, #0
 8007464:	4603      	mov	r3, r0
 8007466:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8007468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800746c:	4618      	mov	r0, r3
 800746e:	f7ff fefd 	bl	800726c <__NVIC_ClearPendingIRQ>
}
 8007472:	bf00      	nop
 8007474:	3708      	adds	r7, #8
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}
	...

0800747c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b084      	sub	sp, #16
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d101      	bne.n	800748e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	e08e      	b.n	80075ac <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	461a      	mov	r2, r3
 8007494:	4b47      	ldr	r3, [pc, #284]	@ (80075b4 <HAL_DMA_Init+0x138>)
 8007496:	429a      	cmp	r2, r3
 8007498:	d80f      	bhi.n	80074ba <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	461a      	mov	r2, r3
 80074a0:	4b45      	ldr	r3, [pc, #276]	@ (80075b8 <HAL_DMA_Init+0x13c>)
 80074a2:	4413      	add	r3, r2
 80074a4:	4a45      	ldr	r2, [pc, #276]	@ (80075bc <HAL_DMA_Init+0x140>)
 80074a6:	fba2 2303 	umull	r2, r3, r2, r3
 80074aa:	091b      	lsrs	r3, r3, #4
 80074ac:	009a      	lsls	r2, r3, #2
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	4a42      	ldr	r2, [pc, #264]	@ (80075c0 <HAL_DMA_Init+0x144>)
 80074b6:	641a      	str	r2, [r3, #64]	@ 0x40
 80074b8:	e00e      	b.n	80074d8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	461a      	mov	r2, r3
 80074c0:	4b40      	ldr	r3, [pc, #256]	@ (80075c4 <HAL_DMA_Init+0x148>)
 80074c2:	4413      	add	r3, r2
 80074c4:	4a3d      	ldr	r2, [pc, #244]	@ (80075bc <HAL_DMA_Init+0x140>)
 80074c6:	fba2 2303 	umull	r2, r3, r2, r3
 80074ca:	091b      	lsrs	r3, r3, #4
 80074cc:	009a      	lsls	r2, r3, #2
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	4a3c      	ldr	r2, [pc, #240]	@ (80075c8 <HAL_DMA_Init+0x14c>)
 80074d6:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2202      	movs	r2, #2
 80074dc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80074ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074f2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80074fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	691b      	ldr	r3, [r3, #16]
 8007502:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007508:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	699b      	ldr	r3, [r3, #24]
 800750e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007514:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6a1b      	ldr	r3, [r3, #32]
 800751a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800751c:	68fa      	ldr	r2, [r7, #12]
 800751e:	4313      	orrs	r3, r2
 8007520:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	68fa      	ldr	r2, [r7, #12]
 8007528:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 fa74 	bl	8007a18 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007538:	d102      	bne.n	8007540 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2200      	movs	r2, #0
 800753e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	685a      	ldr	r2, [r3, #4]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007548:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800754c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007552:	687a      	ldr	r2, [r7, #4]
 8007554:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007556:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d010      	beq.n	8007582 <HAL_DMA_Init+0x106>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	2b04      	cmp	r3, #4
 8007566:	d80c      	bhi.n	8007582 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 fa93 	bl	8007a94 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007572:	2200      	movs	r2, #0
 8007574:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800757e:	605a      	str	r2, [r3, #4]
 8007580:	e008      	b.n	8007594 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2200      	movs	r2, #0
 8007592:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2201      	movs	r2, #1
 800759e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2200      	movs	r2, #0
 80075a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80075aa:	2300      	movs	r3, #0
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3710      	adds	r7, #16
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}
 80075b4:	40020407 	.word	0x40020407
 80075b8:	bffdfff8 	.word	0xbffdfff8
 80075bc:	cccccccd 	.word	0xcccccccd
 80075c0:	40020000 	.word	0x40020000
 80075c4:	bffdfbf8 	.word	0xbffdfbf8
 80075c8:	40020400 	.word	0x40020400

080075cc <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b086      	sub	sp, #24
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	60b9      	str	r1, [r7, #8]
 80075d6:	607a      	str	r2, [r7, #4]
 80075d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80075da:	2300      	movs	r3, #0
 80075dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d101      	bne.n	80075ec <HAL_DMA_Start_IT+0x20>
 80075e8:	2302      	movs	r3, #2
 80075ea:	e066      	b.n	80076ba <HAL_DMA_Start_IT+0xee>
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2201      	movs	r2, #1
 80075f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d155      	bne.n	80076ac <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2202      	movs	r2, #2
 8007604:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2200      	movs	r2, #0
 800760c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f022 0201 	bic.w	r2, r2, #1
 800761c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	68b9      	ldr	r1, [r7, #8]
 8007624:	68f8      	ldr	r0, [r7, #12]
 8007626:	f000 f9b9 	bl	800799c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800762e:	2b00      	cmp	r3, #0
 8007630:	d008      	beq.n	8007644 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f042 020e 	orr.w	r2, r2, #14
 8007640:	601a      	str	r2, [r3, #0]
 8007642:	e00f      	b.n	8007664 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f022 0204 	bic.w	r2, r2, #4
 8007652:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	681a      	ldr	r2, [r3, #0]
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f042 020a 	orr.w	r2, r2, #10
 8007662:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800766e:	2b00      	cmp	r3, #0
 8007670:	d007      	beq.n	8007682 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800767c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007680:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007686:	2b00      	cmp	r3, #0
 8007688:	d007      	beq.n	800769a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007694:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007698:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	681a      	ldr	r2, [r3, #0]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f042 0201 	orr.w	r2, r2, #1
 80076a8:	601a      	str	r2, [r3, #0]
 80076aa:	e005      	b.n	80076b8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80076b4:	2302      	movs	r3, #2
 80076b6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80076b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3718      	adds	r7, #24
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}

080076c2 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80076c2:	b480      	push	{r7}
 80076c4:	b083      	sub	sp, #12
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d101      	bne.n	80076d4 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80076d0:	2301      	movs	r3, #1
 80076d2:	e04f      	b.n	8007774 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80076da:	b2db      	uxtb	r3, r3
 80076dc:	2b02      	cmp	r3, #2
 80076de:	d008      	beq.n	80076f2 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2204      	movs	r2, #4
 80076e4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80076ee:	2301      	movs	r3, #1
 80076f0:	e040      	b.n	8007774 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	681a      	ldr	r2, [r3, #0]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f022 020e 	bic.w	r2, r2, #14
 8007700:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800770c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007710:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	681a      	ldr	r2, [r3, #0]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f022 0201 	bic.w	r2, r2, #1
 8007720:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007726:	f003 021c 	and.w	r2, r3, #28
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800772e:	2101      	movs	r1, #1
 8007730:	fa01 f202 	lsl.w	r2, r1, r2
 8007734:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800773e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007744:	2b00      	cmp	r3, #0
 8007746:	d00c      	beq.n	8007762 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007752:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007756:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007760:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2201      	movs	r2, #1
 8007766:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2200      	movs	r2, #0
 800776e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8007772:	2300      	movs	r3, #0
}
 8007774:	4618      	mov	r0, r3
 8007776:	370c      	adds	r7, #12
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr

08007780 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b084      	sub	sp, #16
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007788:	2300      	movs	r3, #0
 800778a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007792:	b2db      	uxtb	r3, r3
 8007794:	2b02      	cmp	r3, #2
 8007796:	d005      	beq.n	80077a4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2204      	movs	r2, #4
 800779c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800779e:	2301      	movs	r3, #1
 80077a0:	73fb      	strb	r3, [r7, #15]
 80077a2:	e047      	b.n	8007834 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f022 020e 	bic.w	r2, r2, #14
 80077b2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f022 0201 	bic.w	r2, r2, #1
 80077c2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077c8:	681a      	ldr	r2, [r3, #0]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077ce:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80077d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077d8:	f003 021c 	and.w	r2, r3, #28
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077e0:	2101      	movs	r1, #1
 80077e2:	fa01 f202 	lsl.w	r2, r1, r2
 80077e6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80077f0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d00c      	beq.n	8007814 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077fe:	681a      	ldr	r2, [r3, #0]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007804:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007808:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007812:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2201      	movs	r2, #1
 8007818:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007828:	2b00      	cmp	r3, #0
 800782a:	d003      	beq.n	8007834 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	4798      	blx	r3
    }
  }
  return status;
 8007834:	7bfb      	ldrb	r3, [r7, #15]
}
 8007836:	4618      	mov	r0, r3
 8007838:	3710      	adds	r7, #16
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}

0800783e <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800783e:	b580      	push	{r7, lr}
 8007840:	b084      	sub	sp, #16
 8007842:	af00      	add	r7, sp, #0
 8007844:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800785a:	f003 031c 	and.w	r3, r3, #28
 800785e:	2204      	movs	r2, #4
 8007860:	409a      	lsls	r2, r3
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	4013      	ands	r3, r2
 8007866:	2b00      	cmp	r3, #0
 8007868:	d026      	beq.n	80078b8 <HAL_DMA_IRQHandler+0x7a>
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	f003 0304 	and.w	r3, r3, #4
 8007870:	2b00      	cmp	r3, #0
 8007872:	d021      	beq.n	80078b8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f003 0320 	and.w	r3, r3, #32
 800787e:	2b00      	cmp	r3, #0
 8007880:	d107      	bne.n	8007892 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f022 0204 	bic.w	r2, r2, #4
 8007890:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007896:	f003 021c 	and.w	r2, r3, #28
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800789e:	2104      	movs	r1, #4
 80078a0:	fa01 f202 	lsl.w	r2, r1, r2
 80078a4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d071      	beq.n	8007992 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80078b6:	e06c      	b.n	8007992 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078bc:	f003 031c 	and.w	r3, r3, #28
 80078c0:	2202      	movs	r2, #2
 80078c2:	409a      	lsls	r2, r3
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	4013      	ands	r3, r2
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d02e      	beq.n	800792a <HAL_DMA_IRQHandler+0xec>
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	f003 0302 	and.w	r3, r3, #2
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d029      	beq.n	800792a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f003 0320 	and.w	r3, r3, #32
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d10b      	bne.n	80078fc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f022 020a 	bic.w	r2, r2, #10
 80078f2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2201      	movs	r2, #1
 80078f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007900:	f003 021c 	and.w	r2, r3, #28
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007908:	2102      	movs	r1, #2
 800790a:	fa01 f202 	lsl.w	r2, r1, r2
 800790e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2200      	movs	r2, #0
 8007914:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800791c:	2b00      	cmp	r3, #0
 800791e:	d038      	beq.n	8007992 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007928:	e033      	b.n	8007992 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800792e:	f003 031c 	and.w	r3, r3, #28
 8007932:	2208      	movs	r2, #8
 8007934:	409a      	lsls	r2, r3
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	4013      	ands	r3, r2
 800793a:	2b00      	cmp	r3, #0
 800793c:	d02a      	beq.n	8007994 <HAL_DMA_IRQHandler+0x156>
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	f003 0308 	and.w	r3, r3, #8
 8007944:	2b00      	cmp	r3, #0
 8007946:	d025      	beq.n	8007994 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f022 020e 	bic.w	r2, r2, #14
 8007956:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800795c:	f003 021c 	and.w	r2, r3, #28
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007964:	2101      	movs	r1, #1
 8007966:	fa01 f202 	lsl.w	r2, r1, r2
 800796a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2201      	movs	r2, #1
 8007970:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2201      	movs	r2, #1
 8007976:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2200      	movs	r2, #0
 800797e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007986:	2b00      	cmp	r3, #0
 8007988:	d004      	beq.n	8007994 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007992:	bf00      	nop
 8007994:	bf00      	nop
}
 8007996:	3710      	adds	r7, #16
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800799c:	b480      	push	{r7}
 800799e:	b085      	sub	sp, #20
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	60f8      	str	r0, [r7, #12]
 80079a4:	60b9      	str	r1, [r7, #8]
 80079a6:	607a      	str	r2, [r7, #4]
 80079a8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079ae:	68fa      	ldr	r2, [r7, #12]
 80079b0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80079b2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d004      	beq.n	80079c6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079c0:	68fa      	ldr	r2, [r7, #12]
 80079c2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80079c4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079ca:	f003 021c 	and.w	r2, r3, #28
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079d2:	2101      	movs	r1, #1
 80079d4:	fa01 f202 	lsl.w	r2, r1, r2
 80079d8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	683a      	ldr	r2, [r7, #0]
 80079e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	689b      	ldr	r3, [r3, #8]
 80079e6:	2b10      	cmp	r3, #16
 80079e8:	d108      	bne.n	80079fc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	687a      	ldr	r2, [r7, #4]
 80079f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	68ba      	ldr	r2, [r7, #8]
 80079f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80079fa:	e007      	b.n	8007a0c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	68ba      	ldr	r2, [r7, #8]
 8007a02:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	60da      	str	r2, [r3, #12]
}
 8007a0c:	bf00      	nop
 8007a0e:	3714      	adds	r7, #20
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b085      	sub	sp, #20
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	461a      	mov	r2, r3
 8007a26:	4b17      	ldr	r3, [pc, #92]	@ (8007a84 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d80a      	bhi.n	8007a42 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a30:	089b      	lsrs	r3, r3, #2
 8007a32:	009b      	lsls	r3, r3, #2
 8007a34:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007a38:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8007a3c:	687a      	ldr	r2, [r7, #4]
 8007a3e:	6493      	str	r3, [r2, #72]	@ 0x48
 8007a40:	e007      	b.n	8007a52 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a46:	089b      	lsrs	r3, r3, #2
 8007a48:	009a      	lsls	r2, r3, #2
 8007a4a:	4b0f      	ldr	r3, [pc, #60]	@ (8007a88 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007a4c:	4413      	add	r3, r2
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	3b08      	subs	r3, #8
 8007a5a:	4a0c      	ldr	r2, [pc, #48]	@ (8007a8c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8007a60:	091b      	lsrs	r3, r3, #4
 8007a62:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	4a0a      	ldr	r2, [pc, #40]	@ (8007a90 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8007a68:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	f003 031f 	and.w	r3, r3, #31
 8007a70:	2201      	movs	r2, #1
 8007a72:	409a      	lsls	r2, r3
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8007a78:	bf00      	nop
 8007a7a:	3714      	adds	r7, #20
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr
 8007a84:	40020407 	.word	0x40020407
 8007a88:	4002081c 	.word	0x4002081c
 8007a8c:	cccccccd 	.word	0xcccccccd
 8007a90:	40020880 	.word	0x40020880

08007a94 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b085      	sub	sp, #20
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007aa4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007aa6:	68fa      	ldr	r2, [r7, #12]
 8007aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8007ad8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8007aaa:	4413      	add	r3, r2
 8007aac:	009b      	lsls	r3, r3, #2
 8007aae:	461a      	mov	r2, r3
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	4a09      	ldr	r2, [pc, #36]	@ (8007adc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8007ab8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	3b01      	subs	r3, #1
 8007abe:	f003 0303 	and.w	r3, r3, #3
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	409a      	lsls	r2, r3
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8007aca:	bf00      	nop
 8007acc:	3714      	adds	r7, #20
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad4:	4770      	bx	lr
 8007ad6:	bf00      	nop
 8007ad8:	1000823f 	.word	0x1000823f
 8007adc:	40020940 	.word	0x40020940

08007ae0 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b087      	sub	sp, #28
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	460b      	mov	r3, r1
 8007aea:	607a      	str	r2, [r7, #4]
 8007aec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8007aee:	2300      	movs	r3, #0
 8007af0:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8007af2:	7afb      	ldrb	r3, [r7, #11]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d103      	bne.n	8007b00 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	687a      	ldr	r2, [r7, #4]
 8007afc:	605a      	str	r2, [r3, #4]
      break;
 8007afe:	e002      	b.n	8007b06 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8007b00:	2301      	movs	r3, #1
 8007b02:	75fb      	strb	r3, [r7, #23]
      break;
 8007b04:	bf00      	nop
  }

  return status;
 8007b06:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	371c      	adds	r7, #28
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr

08007b14 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d101      	bne.n	8007b28 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8007b24:	2301      	movs	r3, #1
 8007b26:	e003      	b.n	8007b30 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	683a      	ldr	r2, [r7, #0]
 8007b2c:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8007b2e:	2300      	movs	r3, #0
  }
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	370c      	adds	r7, #12
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr

08007b3c <HAL_EXTI_GenerateSWI>:
  * @brief  Generate a software interrupt for a dedicated line.
  * @param  hexti Exti handle.
  * @retval None.
  */
void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b087      	sub	sp, #28
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	0c1b      	lsrs	r3, r3, #16
 8007b4a:	f003 0301 	and.w	r3, r3, #1
 8007b4e:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f003 031f 	and.w	r3, r3, #31
 8007b58:	2201      	movs	r2, #1
 8007b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b5e:	613b      	str	r3, [r7, #16]

  regaddr = (&EXTI->SWIER1 + (EXTI_CONFIG_OFFSET * offset));
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	015b      	lsls	r3, r3, #5
 8007b64:	f103 43b0 	add.w	r3, r3, #1476395008	@ 0x58000000
 8007b68:	f603 0308 	addw	r3, r3, #2056	@ 0x808
 8007b6c:	60fb      	str	r3, [r7, #12]
  *regaddr = maskline;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	693a      	ldr	r2, [r7, #16]
 8007b72:	601a      	str	r2, [r3, #0]
}
 8007b74:	bf00      	nop
 8007b76:	371c      	adds	r7, #28
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr

08007b80 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b087      	sub	sp, #28
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007b8e:	e14c      	b.n	8007e2a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	681a      	ldr	r2, [r3, #0]
 8007b94:	2101      	movs	r1, #1
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	fa01 f303 	lsl.w	r3, r1, r3
 8007b9c:	4013      	ands	r3, r2
 8007b9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	f000 813e 	beq.w	8007e24 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	f003 0303 	and.w	r3, r3, #3
 8007bb0:	2b01      	cmp	r3, #1
 8007bb2:	d005      	beq.n	8007bc0 <HAL_GPIO_Init+0x40>
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	f003 0303 	and.w	r3, r3, #3
 8007bbc:	2b02      	cmp	r3, #2
 8007bbe:	d130      	bne.n	8007c22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	689b      	ldr	r3, [r3, #8]
 8007bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	005b      	lsls	r3, r3, #1
 8007bca:	2203      	movs	r2, #3
 8007bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8007bd0:	43db      	mvns	r3, r3
 8007bd2:	693a      	ldr	r2, [r7, #16]
 8007bd4:	4013      	ands	r3, r2
 8007bd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	68da      	ldr	r2, [r3, #12]
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	005b      	lsls	r3, r3, #1
 8007be0:	fa02 f303 	lsl.w	r3, r2, r3
 8007be4:	693a      	ldr	r2, [r7, #16]
 8007be6:	4313      	orrs	r3, r2
 8007be8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	693a      	ldr	r2, [r7, #16]
 8007bee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8007bfe:	43db      	mvns	r3, r3
 8007c00:	693a      	ldr	r2, [r7, #16]
 8007c02:	4013      	ands	r3, r2
 8007c04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	091b      	lsrs	r3, r3, #4
 8007c0c:	f003 0201 	and.w	r2, r3, #1
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	fa02 f303 	lsl.w	r3, r2, r3
 8007c16:	693a      	ldr	r2, [r7, #16]
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	693a      	ldr	r2, [r7, #16]
 8007c20:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	f003 0303 	and.w	r3, r3, #3
 8007c2a:	2b03      	cmp	r3, #3
 8007c2c:	d017      	beq.n	8007c5e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	68db      	ldr	r3, [r3, #12]
 8007c32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	005b      	lsls	r3, r3, #1
 8007c38:	2203      	movs	r2, #3
 8007c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c3e:	43db      	mvns	r3, r3
 8007c40:	693a      	ldr	r2, [r7, #16]
 8007c42:	4013      	ands	r3, r2
 8007c44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	689a      	ldr	r2, [r3, #8]
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	005b      	lsls	r3, r3, #1
 8007c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c52:	693a      	ldr	r2, [r7, #16]
 8007c54:	4313      	orrs	r3, r2
 8007c56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	693a      	ldr	r2, [r7, #16]
 8007c5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	f003 0303 	and.w	r3, r3, #3
 8007c66:	2b02      	cmp	r3, #2
 8007c68:	d123      	bne.n	8007cb2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	08da      	lsrs	r2, r3, #3
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	3208      	adds	r2, #8
 8007c72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	f003 0307 	and.w	r3, r3, #7
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	220f      	movs	r2, #15
 8007c82:	fa02 f303 	lsl.w	r3, r2, r3
 8007c86:	43db      	mvns	r3, r3
 8007c88:	693a      	ldr	r2, [r7, #16]
 8007c8a:	4013      	ands	r3, r2
 8007c8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	691a      	ldr	r2, [r3, #16]
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	f003 0307 	and.w	r3, r3, #7
 8007c98:	009b      	lsls	r3, r3, #2
 8007c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c9e:	693a      	ldr	r2, [r7, #16]
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	08da      	lsrs	r2, r3, #3
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	3208      	adds	r2, #8
 8007cac:	6939      	ldr	r1, [r7, #16]
 8007cae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	005b      	lsls	r3, r3, #1
 8007cbc:	2203      	movs	r2, #3
 8007cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8007cc2:	43db      	mvns	r3, r3
 8007cc4:	693a      	ldr	r2, [r7, #16]
 8007cc6:	4013      	ands	r3, r2
 8007cc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	f003 0203 	and.w	r2, r3, #3
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	005b      	lsls	r3, r3, #1
 8007cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8007cda:	693a      	ldr	r2, [r7, #16]
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	693a      	ldr	r2, [r7, #16]
 8007ce4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	f000 8098 	beq.w	8007e24 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8007cf4:	4a54      	ldr	r2, [pc, #336]	@ (8007e48 <HAL_GPIO_Init+0x2c8>)
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	089b      	lsrs	r3, r3, #2
 8007cfa:	3302      	adds	r3, #2
 8007cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	f003 0303 	and.w	r3, r3, #3
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	220f      	movs	r2, #15
 8007d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d10:	43db      	mvns	r3, r3
 8007d12:	693a      	ldr	r2, [r7, #16]
 8007d14:	4013      	ands	r3, r2
 8007d16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8007d1e:	d019      	beq.n	8007d54 <HAL_GPIO_Init+0x1d4>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	4a4a      	ldr	r2, [pc, #296]	@ (8007e4c <HAL_GPIO_Init+0x2cc>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d013      	beq.n	8007d50 <HAL_GPIO_Init+0x1d0>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	4a49      	ldr	r2, [pc, #292]	@ (8007e50 <HAL_GPIO_Init+0x2d0>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d00d      	beq.n	8007d4c <HAL_GPIO_Init+0x1cc>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	4a48      	ldr	r2, [pc, #288]	@ (8007e54 <HAL_GPIO_Init+0x2d4>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d007      	beq.n	8007d48 <HAL_GPIO_Init+0x1c8>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	4a47      	ldr	r2, [pc, #284]	@ (8007e58 <HAL_GPIO_Init+0x2d8>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d101      	bne.n	8007d44 <HAL_GPIO_Init+0x1c4>
 8007d40:	2304      	movs	r3, #4
 8007d42:	e008      	b.n	8007d56 <HAL_GPIO_Init+0x1d6>
 8007d44:	2307      	movs	r3, #7
 8007d46:	e006      	b.n	8007d56 <HAL_GPIO_Init+0x1d6>
 8007d48:	2303      	movs	r3, #3
 8007d4a:	e004      	b.n	8007d56 <HAL_GPIO_Init+0x1d6>
 8007d4c:	2302      	movs	r3, #2
 8007d4e:	e002      	b.n	8007d56 <HAL_GPIO_Init+0x1d6>
 8007d50:	2301      	movs	r3, #1
 8007d52:	e000      	b.n	8007d56 <HAL_GPIO_Init+0x1d6>
 8007d54:	2300      	movs	r3, #0
 8007d56:	697a      	ldr	r2, [r7, #20]
 8007d58:	f002 0203 	and.w	r2, r2, #3
 8007d5c:	0092      	lsls	r2, r2, #2
 8007d5e:	4093      	lsls	r3, r2
 8007d60:	693a      	ldr	r2, [r7, #16]
 8007d62:	4313      	orrs	r3, r2
 8007d64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007d66:	4938      	ldr	r1, [pc, #224]	@ (8007e48 <HAL_GPIO_Init+0x2c8>)
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	089b      	lsrs	r3, r3, #2
 8007d6c:	3302      	adds	r3, #2
 8007d6e:	693a      	ldr	r2, [r7, #16]
 8007d70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007d74:	4b39      	ldr	r3, [pc, #228]	@ (8007e5c <HAL_GPIO_Init+0x2dc>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	43db      	mvns	r3, r3
 8007d7e:	693a      	ldr	r2, [r7, #16]
 8007d80:	4013      	ands	r3, r2
 8007d82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d003      	beq.n	8007d98 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8007d90:	693a      	ldr	r2, [r7, #16]
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	4313      	orrs	r3, r2
 8007d96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007d98:	4a30      	ldr	r2, [pc, #192]	@ (8007e5c <HAL_GPIO_Init+0x2dc>)
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007d9e:	4b2f      	ldr	r3, [pc, #188]	@ (8007e5c <HAL_GPIO_Init+0x2dc>)
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	43db      	mvns	r3, r3
 8007da8:	693a      	ldr	r2, [r7, #16]
 8007daa:	4013      	ands	r3, r2
 8007dac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d003      	beq.n	8007dc2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8007dba:	693a      	ldr	r2, [r7, #16]
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007dc2:	4a26      	ldr	r2, [pc, #152]	@ (8007e5c <HAL_GPIO_Init+0x2dc>)
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007dc8:	4b24      	ldr	r3, [pc, #144]	@ (8007e5c <HAL_GPIO_Init+0x2dc>)
 8007dca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007dce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	43db      	mvns	r3, r3
 8007dd4:	693a      	ldr	r2, [r7, #16]
 8007dd6:	4013      	ands	r3, r2
 8007dd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d003      	beq.n	8007dee <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8007de6:	693a      	ldr	r2, [r7, #16]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	4313      	orrs	r3, r2
 8007dec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007dee:	4a1b      	ldr	r2, [pc, #108]	@ (8007e5c <HAL_GPIO_Init+0x2dc>)
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8007df6:	4b19      	ldr	r3, [pc, #100]	@ (8007e5c <HAL_GPIO_Init+0x2dc>)
 8007df8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	43db      	mvns	r3, r3
 8007e02:	693a      	ldr	r2, [r7, #16]
 8007e04:	4013      	ands	r3, r2
 8007e06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d003      	beq.n	8007e1c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8007e14:	693a      	ldr	r2, [r7, #16]
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007e1c:	4a0f      	ldr	r2, [pc, #60]	@ (8007e5c <HAL_GPIO_Init+0x2dc>)
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	3301      	adds	r3, #1
 8007e28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	681a      	ldr	r2, [r3, #0]
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	fa22 f303 	lsr.w	r3, r2, r3
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	f47f aeab 	bne.w	8007b90 <HAL_GPIO_Init+0x10>
  }
}
 8007e3a:	bf00      	nop
 8007e3c:	bf00      	nop
 8007e3e:	371c      	adds	r7, #28
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr
 8007e48:	40010000 	.word	0x40010000
 8007e4c:	48000400 	.word	0x48000400
 8007e50:	48000800 	.word	0x48000800
 8007e54:	48000c00 	.word	0x48000c00
 8007e58:	48001000 	.word	0x48001000
 8007e5c:	58000800 	.word	0x58000800

08007e60 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b087      	sub	sp, #28
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8007e6e:	e0bb      	b.n	8007fe8 <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8007e70:	2201      	movs	r2, #1
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	fa02 f303 	lsl.w	r3, r2, r3
 8007e78:	683a      	ldr	r2, [r7, #0]
 8007e7a:	4013      	ands	r3, r2
 8007e7c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	f000 80ae 	beq.w	8007fe2 <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8007e86:	4a5f      	ldr	r2, [pc, #380]	@ (8008004 <HAL_GPIO_DeInit+0x1a4>)
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	089b      	lsrs	r3, r3, #2
 8007e8c:	3302      	adds	r3, #2
 8007e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e92:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	f003 0303 	and.w	r3, r3, #3
 8007e9a:	009b      	lsls	r3, r3, #2
 8007e9c:	220f      	movs	r2, #15
 8007e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8007ea2:	68fa      	ldr	r2, [r7, #12]
 8007ea4:	4013      	ands	r3, r2
 8007ea6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8007eae:	d019      	beq.n	8007ee4 <HAL_GPIO_DeInit+0x84>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	4a55      	ldr	r2, [pc, #340]	@ (8008008 <HAL_GPIO_DeInit+0x1a8>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d013      	beq.n	8007ee0 <HAL_GPIO_DeInit+0x80>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	4a54      	ldr	r2, [pc, #336]	@ (800800c <HAL_GPIO_DeInit+0x1ac>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d00d      	beq.n	8007edc <HAL_GPIO_DeInit+0x7c>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	4a53      	ldr	r2, [pc, #332]	@ (8008010 <HAL_GPIO_DeInit+0x1b0>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d007      	beq.n	8007ed8 <HAL_GPIO_DeInit+0x78>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	4a52      	ldr	r2, [pc, #328]	@ (8008014 <HAL_GPIO_DeInit+0x1b4>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d101      	bne.n	8007ed4 <HAL_GPIO_DeInit+0x74>
 8007ed0:	2304      	movs	r3, #4
 8007ed2:	e008      	b.n	8007ee6 <HAL_GPIO_DeInit+0x86>
 8007ed4:	2307      	movs	r3, #7
 8007ed6:	e006      	b.n	8007ee6 <HAL_GPIO_DeInit+0x86>
 8007ed8:	2303      	movs	r3, #3
 8007eda:	e004      	b.n	8007ee6 <HAL_GPIO_DeInit+0x86>
 8007edc:	2302      	movs	r3, #2
 8007ede:	e002      	b.n	8007ee6 <HAL_GPIO_DeInit+0x86>
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	e000      	b.n	8007ee6 <HAL_GPIO_DeInit+0x86>
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	697a      	ldr	r2, [r7, #20]
 8007ee8:	f002 0203 	and.w	r2, r2, #3
 8007eec:	0092      	lsls	r2, r2, #2
 8007eee:	4093      	lsls	r3, r2
 8007ef0:	68fa      	ldr	r2, [r7, #12]
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d136      	bne.n	8007f64 <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8007ef6:	4b48      	ldr	r3, [pc, #288]	@ (8008018 <HAL_GPIO_DeInit+0x1b8>)
 8007ef8:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	43db      	mvns	r3, r3
 8007f00:	4945      	ldr	r1, [pc, #276]	@ (8008018 <HAL_GPIO_DeInit+0x1b8>)
 8007f02:	4013      	ands	r3, r2
 8007f04:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8007f08:	4b43      	ldr	r3, [pc, #268]	@ (8008018 <HAL_GPIO_DeInit+0x1b8>)
 8007f0a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	43db      	mvns	r3, r3
 8007f12:	4941      	ldr	r1, [pc, #260]	@ (8008018 <HAL_GPIO_DeInit+0x1b8>)
 8007f14:	4013      	ands	r3, r2
 8007f16:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8007f1a:	4b3f      	ldr	r3, [pc, #252]	@ (8008018 <HAL_GPIO_DeInit+0x1b8>)
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	43db      	mvns	r3, r3
 8007f22:	493d      	ldr	r1, [pc, #244]	@ (8008018 <HAL_GPIO_DeInit+0x1b8>)
 8007f24:	4013      	ands	r3, r2
 8007f26:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8007f28:	4b3b      	ldr	r3, [pc, #236]	@ (8008018 <HAL_GPIO_DeInit+0x1b8>)
 8007f2a:	685a      	ldr	r2, [r3, #4]
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	43db      	mvns	r3, r3
 8007f30:	4939      	ldr	r1, [pc, #228]	@ (8008018 <HAL_GPIO_DeInit+0x1b8>)
 8007f32:	4013      	ands	r3, r2
 8007f34:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	f003 0303 	and.w	r3, r3, #3
 8007f3c:	009b      	lsls	r3, r3, #2
 8007f3e:	220f      	movs	r2, #15
 8007f40:	fa02 f303 	lsl.w	r3, r2, r3
 8007f44:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8007f46:	4a2f      	ldr	r2, [pc, #188]	@ (8008004 <HAL_GPIO_DeInit+0x1a4>)
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	089b      	lsrs	r3, r3, #2
 8007f4c:	3302      	adds	r3, #2
 8007f4e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	43da      	mvns	r2, r3
 8007f56:	482b      	ldr	r0, [pc, #172]	@ (8008004 <HAL_GPIO_DeInit+0x1a4>)
 8007f58:	697b      	ldr	r3, [r7, #20]
 8007f5a:	089b      	lsrs	r3, r3, #2
 8007f5c:	400a      	ands	r2, r1
 8007f5e:	3302      	adds	r3, #2
 8007f60:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681a      	ldr	r2, [r3, #0]
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	005b      	lsls	r3, r3, #1
 8007f6c:	2103      	movs	r1, #3
 8007f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8007f72:	431a      	orrs	r2, r3
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	08da      	lsrs	r2, r3, #3
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	3208      	adds	r2, #8
 8007f80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	f003 0307 	and.w	r3, r3, #7
 8007f8a:	009b      	lsls	r3, r3, #2
 8007f8c:	220f      	movs	r2, #15
 8007f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f92:	43db      	mvns	r3, r3
 8007f94:	697a      	ldr	r2, [r7, #20]
 8007f96:	08d2      	lsrs	r2, r2, #3
 8007f98:	4019      	ands	r1, r3
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	3208      	adds	r2, #8
 8007f9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	68da      	ldr	r2, [r3, #12]
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	005b      	lsls	r3, r3, #1
 8007faa:	2103      	movs	r1, #3
 8007fac:	fa01 f303 	lsl.w	r3, r1, r3
 8007fb0:	43db      	mvns	r3, r3
 8007fb2:	401a      	ands	r2, r3
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	685a      	ldr	r2, [r3, #4]
 8007fbc:	2101      	movs	r1, #1
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8007fc4:	43db      	mvns	r3, r3
 8007fc6:	401a      	ands	r2, r3
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	689a      	ldr	r2, [r3, #8]
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	005b      	lsls	r3, r3, #1
 8007fd4:	2103      	movs	r1, #3
 8007fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8007fda:	43db      	mvns	r3, r3
 8007fdc:	401a      	ands	r2, r3
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	609a      	str	r2, [r3, #8]
    }

    position++;
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	3301      	adds	r3, #1
 8007fe6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8007fe8:	683a      	ldr	r2, [r7, #0]
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	fa22 f303 	lsr.w	r3, r2, r3
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	f47f af3d 	bne.w	8007e70 <HAL_GPIO_DeInit+0x10>
  }
}
 8007ff6:	bf00      	nop
 8007ff8:	bf00      	nop
 8007ffa:	371c      	adds	r7, #28
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008002:	4770      	bx	lr
 8008004:	40010000 	.word	0x40010000
 8008008:	48000400 	.word	0x48000400
 800800c:	48000800 	.word	0x48000800
 8008010:	48000c00 	.word	0x48000c00
 8008014:	48001000 	.word	0x48001000
 8008018:	58000800 	.word	0x58000800

0800801c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800801c:	b480      	push	{r7}
 800801e:	b083      	sub	sp, #12
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	460b      	mov	r3, r1
 8008026:	807b      	strh	r3, [r7, #2]
 8008028:	4613      	mov	r3, r2
 800802a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800802c:	787b      	ldrb	r3, [r7, #1]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d003      	beq.n	800803a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008032:	887a      	ldrh	r2, [r7, #2]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008038:	e002      	b.n	8008040 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800803a:	887a      	ldrh	r2, [r7, #2]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8008040:	bf00      	nop
 8008042:	370c      	adds	r7, #12
 8008044:	46bd      	mov	sp, r7
 8008046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804a:	4770      	bx	lr

0800804c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b082      	sub	sp, #8
 8008050:	af00      	add	r7, sp, #0
 8008052:	4603      	mov	r3, r0
 8008054:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008056:	4b08      	ldr	r3, [pc, #32]	@ (8008078 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008058:	68da      	ldr	r2, [r3, #12]
 800805a:	88fb      	ldrh	r3, [r7, #6]
 800805c:	4013      	ands	r3, r2
 800805e:	2b00      	cmp	r3, #0
 8008060:	d006      	beq.n	8008070 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008062:	4a05      	ldr	r2, [pc, #20]	@ (8008078 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008064:	88fb      	ldrh	r3, [r7, #6]
 8008066:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008068:	88fb      	ldrh	r3, [r7, #6]
 800806a:	4618      	mov	r0, r3
 800806c:	f7f9 fbe0 	bl	8001830 <HAL_GPIO_EXTI_Callback>
  }
}
 8008070:	bf00      	nop
 8008072:	3708      	adds	r7, #8
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}
 8008078:	58000800 	.word	0x58000800

0800807c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b082      	sub	sp, #8
 8008080:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8008082:	4b0a      	ldr	r3, [pc, #40]	@ (80080ac <HAL_HSEM_IRQHandler+0x30>)
 8008084:	68db      	ldr	r3, [r3, #12]
 8008086:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8008088:	4b08      	ldr	r3, [pc, #32]	@ (80080ac <HAL_HSEM_IRQHandler+0x30>)
 800808a:	681a      	ldr	r2, [r3, #0]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	43db      	mvns	r3, r3
 8008090:	4906      	ldr	r1, [pc, #24]	@ (80080ac <HAL_HSEM_IRQHandler+0x30>)
 8008092:	4013      	ands	r3, r2
 8008094:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8008096:	4a05      	ldr	r2, [pc, #20]	@ (80080ac <HAL_HSEM_IRQHandler+0x30>)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f000 f807 	bl	80080b0 <HAL_HSEM_FreeCallback>
}
 80080a2:	bf00      	nop
 80080a4:	3708      	adds	r7, #8
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	58001500 	.word	0x58001500

080080b0 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b083      	sub	sp, #12
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80080b8:	bf00      	nop
 80080ba:	370c      	adds	r7, #12
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr

080080c4 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b084      	sub	sp, #16
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 80080cc:	2300      	movs	r3, #0
 80080ce:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d01e      	beq.n	8008114 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 80080d6:	4b13      	ldr	r3, [pc, #76]	@ (8008124 <HAL_IPCC_Init+0x60>)
 80080d8:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80080e0:	b2db      	uxtb	r3, r3
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d102      	bne.n	80080ec <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f7fa ffbe 	bl	8003068 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 80080ec:	68b8      	ldr	r0, [r7, #8]
 80080ee:	f000 f85b 	bl	80081a8 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 f82c 	bl	800815c <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2200      	movs	r2, #0
 8008108:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2201      	movs	r2, #1
 800810e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8008112:	e001      	b.n	8008118 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8008114:	2301      	movs	r3, #1
 8008116:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8008118:	7bfb      	ldrb	r3, [r7, #15]
}
 800811a:	4618      	mov	r0, r3
 800811c:	3710      	adds	r7, #16
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}
 8008122:	bf00      	nop
 8008124:	58000c00 	.word	0x58000c00

08008128 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8008128:	b480      	push	{r7}
 800812a:	b085      	sub	sp, #20
 800812c:	af00      	add	r7, sp, #0
 800812e:	60f8      	str	r0, [r7, #12]
 8008130:	60b9      	str	r1, [r7, #8]
 8008132:	4613      	mov	r3, r2
 8008134:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8008136:	bf00      	nop
 8008138:	3714      	adds	r7, #20
 800813a:	46bd      	mov	sp, r7
 800813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008140:	4770      	bx	lr

08008142 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8008142:	b480      	push	{r7}
 8008144:	b085      	sub	sp, #20
 8008146:	af00      	add	r7, sp, #0
 8008148:	60f8      	str	r0, [r7, #12]
 800814a:	60b9      	str	r1, [r7, #8]
 800814c:	4613      	mov	r3, r2
 800814e:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8008150:	bf00      	nop
 8008152:	3714      	adds	r7, #20
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr

0800815c <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 800815c:	b480      	push	{r7}
 800815e:	b085      	sub	sp, #20
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8008164:	2300      	movs	r3, #0
 8008166:	60fb      	str	r3, [r7, #12]
 8008168:	e00f      	b.n	800818a <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800816a:	687a      	ldr	r2, [r7, #4]
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	009b      	lsls	r3, r3, #2
 8008170:	4413      	add	r3, r2
 8008172:	4a0b      	ldr	r2, [pc, #44]	@ (80081a0 <IPCC_SetDefaultCallbacks+0x44>)
 8008174:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	3306      	adds	r3, #6
 800817c:	009b      	lsls	r3, r3, #2
 800817e:	4413      	add	r3, r2
 8008180:	4a08      	ldr	r2, [pc, #32]	@ (80081a4 <IPCC_SetDefaultCallbacks+0x48>)
 8008182:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	3301      	adds	r3, #1
 8008188:	60fb      	str	r3, [r7, #12]
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	2b05      	cmp	r3, #5
 800818e:	d9ec      	bls.n	800816a <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8008190:	bf00      	nop
 8008192:	bf00      	nop
 8008194:	3714      	adds	r7, #20
 8008196:	46bd      	mov	sp, r7
 8008198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819c:	4770      	bx	lr
 800819e:	bf00      	nop
 80081a0:	08008129 	.word	0x08008129
 80081a4:	08008143 	.word	0x08008143

080081a8 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b083      	sub	sp, #12
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2200      	movs	r2, #0
 80081b4:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 80081bc:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	223f      	movs	r2, #63	@ 0x3f
 80081c2:	609a      	str	r2, [r3, #8]
}
 80081c4:	bf00      	nop
 80081c6:	370c      	adds	r7, #12
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr

080081d0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80081d0:	b480      	push	{r7}
 80081d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80081d4:	4b05      	ldr	r3, [pc, #20]	@ (80081ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a04      	ldr	r2, [pc, #16]	@ (80081ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80081da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80081de:	6013      	str	r3, [r2, #0]
}
 80081e0:	bf00      	nop
 80081e2:	46bd      	mov	sp, r7
 80081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e8:	4770      	bx	lr
 80081ea:	bf00      	nop
 80081ec:	58000400 	.word	0x58000400

080081f0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80081f0:	b480      	push	{r7}
 80081f2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80081f4:	4b04      	ldr	r3, [pc, #16]	@ (8008208 <HAL_PWREx_GetVoltageRange+0x18>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	46bd      	mov	sp, r7
 8008200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008204:	4770      	bx	lr
 8008206:	bf00      	nop
 8008208:	58000400 	.word	0x58000400

0800820c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800820c:	b480      	push	{r7}
 800820e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8008210:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800821a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800821e:	d101      	bne.n	8008224 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8008220:	2301      	movs	r3, #1
 8008222:	e000      	b.n	8008226 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8008224:	2300      	movs	r3, #0
}
 8008226:	4618      	mov	r0, r3
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr

08008230 <LL_RCC_HSE_Enable>:
{
 8008230:	b480      	push	{r7}
 8008232:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8008234:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800823e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008242:	6013      	str	r3, [r2, #0]
}
 8008244:	bf00      	nop
 8008246:	46bd      	mov	sp, r7
 8008248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824c:	4770      	bx	lr

0800824e <LL_RCC_HSE_Disable>:
{
 800824e:	b480      	push	{r7}
 8008250:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8008252:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800825c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008260:	6013      	str	r3, [r2, #0]
}
 8008262:	bf00      	nop
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr

0800826c <LL_RCC_HSE_IsReady>:
{
 800826c:	b480      	push	{r7}
 800826e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8008270:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800827a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800827e:	d101      	bne.n	8008284 <LL_RCC_HSE_IsReady+0x18>
 8008280:	2301      	movs	r3, #1
 8008282:	e000      	b.n	8008286 <LL_RCC_HSE_IsReady+0x1a>
 8008284:	2300      	movs	r3, #0
}
 8008286:	4618      	mov	r0, r3
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr

08008290 <LL_RCC_HSI_Enable>:
{
 8008290:	b480      	push	{r7}
 8008292:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8008294:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800829e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80082a2:	6013      	str	r3, [r2, #0]
}
 80082a4:	bf00      	nop
 80082a6:	46bd      	mov	sp, r7
 80082a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ac:	4770      	bx	lr

080082ae <LL_RCC_HSI_Disable>:
{
 80082ae:	b480      	push	{r7}
 80082b0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80082b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80082bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80082c0:	6013      	str	r3, [r2, #0]
}
 80082c2:	bf00      	nop
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr

080082cc <LL_RCC_HSI_IsReady>:
{
 80082cc:	b480      	push	{r7}
 80082ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80082d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80082da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80082de:	d101      	bne.n	80082e4 <LL_RCC_HSI_IsReady+0x18>
 80082e0:	2301      	movs	r3, #1
 80082e2:	e000      	b.n	80082e6 <LL_RCC_HSI_IsReady+0x1a>
 80082e4:	2300      	movs	r3, #0
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr

080082f0 <LL_RCC_HSI_SetCalibTrimming>:
{
 80082f0:	b480      	push	{r7}
 80082f2:	b083      	sub	sp, #12
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80082f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	061b      	lsls	r3, r3, #24
 8008306:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800830a:	4313      	orrs	r3, r2
 800830c:	604b      	str	r3, [r1, #4]
}
 800830e:	bf00      	nop
 8008310:	370c      	adds	r7, #12
 8008312:	46bd      	mov	sp, r7
 8008314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008318:	4770      	bx	lr

0800831a <LL_RCC_HSI48_Enable>:
{
 800831a:	b480      	push	{r7}
 800831c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800831e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008322:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008326:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800832a:	f043 0301 	orr.w	r3, r3, #1
 800832e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8008332:	bf00      	nop
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr

0800833c <LL_RCC_HSI48_Disable>:
{
 800833c:	b480      	push	{r7}
 800833e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8008340:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008344:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008348:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800834c:	f023 0301 	bic.w	r3, r3, #1
 8008350:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8008354:	bf00      	nop
 8008356:	46bd      	mov	sp, r7
 8008358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835c:	4770      	bx	lr

0800835e <LL_RCC_HSI48_IsReady>:
{
 800835e:	b480      	push	{r7}
 8008360:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8008362:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008366:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800836a:	f003 0302 	and.w	r3, r3, #2
 800836e:	2b02      	cmp	r3, #2
 8008370:	d101      	bne.n	8008376 <LL_RCC_HSI48_IsReady+0x18>
 8008372:	2301      	movs	r3, #1
 8008374:	e000      	b.n	8008378 <LL_RCC_HSI48_IsReady+0x1a>
 8008376:	2300      	movs	r3, #0
}
 8008378:	4618      	mov	r0, r3
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr

08008382 <LL_RCC_LSE_Enable>:
{
 8008382:	b480      	push	{r7}
 8008384:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008386:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800838a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800838e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008392:	f043 0301 	orr.w	r3, r3, #1
 8008396:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800839a:	bf00      	nop
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr

080083a4 <LL_RCC_LSE_Disable>:
{
 80083a4:	b480      	push	{r7}
 80083a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80083a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80083ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80083b4:	f023 0301 	bic.w	r3, r3, #1
 80083b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80083bc:	bf00      	nop
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr

080083c6 <LL_RCC_LSE_EnableBypass>:
{
 80083c6:	b480      	push	{r7}
 80083c8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80083ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80083ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80083d6:	f043 0304 	orr.w	r3, r3, #4
 80083da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80083de:	bf00      	nop
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr

080083e8 <LL_RCC_LSE_DisableBypass>:
{
 80083e8:	b480      	push	{r7}
 80083ea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80083ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80083f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083f4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80083f8:	f023 0304 	bic.w	r3, r3, #4
 80083fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8008400:	bf00      	nop
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr

0800840a <LL_RCC_LSE_IsReady>:
{
 800840a:	b480      	push	{r7}
 800840c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800840e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008412:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008416:	f003 0302 	and.w	r3, r3, #2
 800841a:	2b02      	cmp	r3, #2
 800841c:	d101      	bne.n	8008422 <LL_RCC_LSE_IsReady+0x18>
 800841e:	2301      	movs	r3, #1
 8008420:	e000      	b.n	8008424 <LL_RCC_LSE_IsReady+0x1a>
 8008422:	2300      	movs	r3, #0
}
 8008424:	4618      	mov	r0, r3
 8008426:	46bd      	mov	sp, r7
 8008428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842c:	4770      	bx	lr

0800842e <LL_RCC_LSI1_Enable>:
{
 800842e:	b480      	push	{r7}
 8008430:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8008432:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008436:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800843a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800843e:	f043 0301 	orr.w	r3, r3, #1
 8008442:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8008446:	bf00      	nop
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr

08008450 <LL_RCC_LSI1_Disable>:
{
 8008450:	b480      	push	{r7}
 8008452:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8008454:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008458:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800845c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008460:	f023 0301 	bic.w	r3, r3, #1
 8008464:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8008468:	bf00      	nop
 800846a:	46bd      	mov	sp, r7
 800846c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008470:	4770      	bx	lr

08008472 <LL_RCC_LSI1_IsReady>:
{
 8008472:	b480      	push	{r7}
 8008474:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8008476:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800847a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800847e:	f003 0302 	and.w	r3, r3, #2
 8008482:	2b02      	cmp	r3, #2
 8008484:	d101      	bne.n	800848a <LL_RCC_LSI1_IsReady+0x18>
 8008486:	2301      	movs	r3, #1
 8008488:	e000      	b.n	800848c <LL_RCC_LSI1_IsReady+0x1a>
 800848a:	2300      	movs	r3, #0
}
 800848c:	4618      	mov	r0, r3
 800848e:	46bd      	mov	sp, r7
 8008490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008494:	4770      	bx	lr

08008496 <LL_RCC_LSI2_Enable>:
{
 8008496:	b480      	push	{r7}
 8008498:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800849a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800849e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80084a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80084a6:	f043 0304 	orr.w	r3, r3, #4
 80084aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80084ae:	bf00      	nop
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr

080084b8 <LL_RCC_LSI2_Disable>:
{
 80084b8:	b480      	push	{r7}
 80084ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80084bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80084c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80084c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80084c8:	f023 0304 	bic.w	r3, r3, #4
 80084cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80084d0:	bf00      	nop
 80084d2:	46bd      	mov	sp, r7
 80084d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d8:	4770      	bx	lr

080084da <LL_RCC_LSI2_IsReady>:
{
 80084da:	b480      	push	{r7}
 80084dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80084de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80084e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80084e6:	f003 0308 	and.w	r3, r3, #8
 80084ea:	2b08      	cmp	r3, #8
 80084ec:	d101      	bne.n	80084f2 <LL_RCC_LSI2_IsReady+0x18>
 80084ee:	2301      	movs	r3, #1
 80084f0:	e000      	b.n	80084f4 <LL_RCC_LSI2_IsReady+0x1a>
 80084f2:	2300      	movs	r3, #0
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	46bd      	mov	sp, r7
 80084f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fc:	4770      	bx	lr

080084fe <LL_RCC_LSI2_SetTrimming>:
{
 80084fe:	b480      	push	{r7}
 8008500:	b083      	sub	sp, #12
 8008502:	af00      	add	r7, sp, #0
 8008504:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8008506:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800850a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800850e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	021b      	lsls	r3, r3, #8
 8008516:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800851a:	4313      	orrs	r3, r2
 800851c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8008520:	bf00      	nop
 8008522:	370c      	adds	r7, #12
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr

0800852c <LL_RCC_MSI_Enable>:
{
 800852c:	b480      	push	{r7}
 800852e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8008530:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800853a:	f043 0301 	orr.w	r3, r3, #1
 800853e:	6013      	str	r3, [r2, #0]
}
 8008540:	bf00      	nop
 8008542:	46bd      	mov	sp, r7
 8008544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008548:	4770      	bx	lr

0800854a <LL_RCC_MSI_Disable>:
{
 800854a:	b480      	push	{r7}
 800854c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800854e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008558:	f023 0301 	bic.w	r3, r3, #1
 800855c:	6013      	str	r3, [r2, #0]
}
 800855e:	bf00      	nop
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr

08008568 <LL_RCC_MSI_IsReady>:
{
 8008568:	b480      	push	{r7}
 800856a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800856c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f003 0302 	and.w	r3, r3, #2
 8008576:	2b02      	cmp	r3, #2
 8008578:	d101      	bne.n	800857e <LL_RCC_MSI_IsReady+0x16>
 800857a:	2301      	movs	r3, #1
 800857c:	e000      	b.n	8008580 <LL_RCC_MSI_IsReady+0x18>
 800857e:	2300      	movs	r3, #0
}
 8008580:	4618      	mov	r0, r3
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr

0800858a <LL_RCC_MSI_SetRange>:
{
 800858a:	b480      	push	{r7}
 800858c:	b083      	sub	sp, #12
 800858e:	af00      	add	r7, sp, #0
 8008590:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8008592:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800859c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	4313      	orrs	r3, r2
 80085a4:	600b      	str	r3, [r1, #0]
}
 80085a6:	bf00      	nop
 80085a8:	370c      	adds	r7, #12
 80085aa:	46bd      	mov	sp, r7
 80085ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b0:	4770      	bx	lr

080085b2 <LL_RCC_MSI_GetRange>:
{
 80085b2:	b480      	push	{r7}
 80085b4:	b083      	sub	sp, #12
 80085b6:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80085b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80085c2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2bb0      	cmp	r3, #176	@ 0xb0
 80085c8:	d901      	bls.n	80085ce <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80085ca:	23b0      	movs	r3, #176	@ 0xb0
 80085cc:	607b      	str	r3, [r7, #4]
  return msiRange;
 80085ce:	687b      	ldr	r3, [r7, #4]
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	370c      	adds	r7, #12
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr

080085dc <LL_RCC_MSI_SetCalibTrimming>:
{
 80085dc:	b480      	push	{r7}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80085e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	021b      	lsls	r3, r3, #8
 80085f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80085f6:	4313      	orrs	r3, r2
 80085f8:	604b      	str	r3, [r1, #4]
}
 80085fa:	bf00      	nop
 80085fc:	370c      	adds	r7, #12
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr

08008606 <LL_RCC_SetSysClkSource>:
{
 8008606:	b480      	push	{r7}
 8008608:	b083      	sub	sp, #12
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800860e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008612:	689b      	ldr	r3, [r3, #8]
 8008614:	f023 0203 	bic.w	r2, r3, #3
 8008618:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	4313      	orrs	r3, r2
 8008620:	608b      	str	r3, [r1, #8]
}
 8008622:	bf00      	nop
 8008624:	370c      	adds	r7, #12
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr

0800862e <LL_RCC_GetSysClkSource>:
{
 800862e:	b480      	push	{r7}
 8008630:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8008632:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008636:	689b      	ldr	r3, [r3, #8]
 8008638:	f003 030c 	and.w	r3, r3, #12
}
 800863c:	4618      	mov	r0, r3
 800863e:	46bd      	mov	sp, r7
 8008640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008644:	4770      	bx	lr

08008646 <LL_RCC_SetAHBPrescaler>:
{
 8008646:	b480      	push	{r7}
 8008648:	b083      	sub	sp, #12
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800864e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008652:	689b      	ldr	r3, [r3, #8]
 8008654:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008658:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	4313      	orrs	r3, r2
 8008660:	608b      	str	r3, [r1, #8]
}
 8008662:	bf00      	nop
 8008664:	370c      	adds	r7, #12
 8008666:	46bd      	mov	sp, r7
 8008668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866c:	4770      	bx	lr

0800866e <LL_C2_RCC_SetAHBPrescaler>:
{
 800866e:	b480      	push	{r7}
 8008670:	b083      	sub	sp, #12
 8008672:	af00      	add	r7, sp, #0
 8008674:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8008676:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800867a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800867e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008682:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	4313      	orrs	r3, r2
 800868a:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800868e:	bf00      	nop
 8008690:	370c      	adds	r7, #12
 8008692:	46bd      	mov	sp, r7
 8008694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008698:	4770      	bx	lr

0800869a <LL_RCC_SetAHB4Prescaler>:
{
 800869a:	b480      	push	{r7}
 800869c:	b083      	sub	sp, #12
 800869e:	af00      	add	r7, sp, #0
 80086a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80086a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80086a6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80086aa:	f023 020f 	bic.w	r2, r3, #15
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	091b      	lsrs	r3, r3, #4
 80086b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80086b6:	4313      	orrs	r3, r2
 80086b8:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80086bc:	bf00      	nop
 80086be:	370c      	adds	r7, #12
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr

080086c8 <LL_RCC_SetAPB1Prescaler>:
{
 80086c8:	b480      	push	{r7}
 80086ca:	b083      	sub	sp, #12
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80086d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80086d4:	689b      	ldr	r3, [r3, #8]
 80086d6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80086da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	4313      	orrs	r3, r2
 80086e2:	608b      	str	r3, [r1, #8]
}
 80086e4:	bf00      	nop
 80086e6:	370c      	adds	r7, #12
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr

080086f0 <LL_RCC_SetAPB2Prescaler>:
{
 80086f0:	b480      	push	{r7}
 80086f2:	b083      	sub	sp, #12
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80086f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80086fc:	689b      	ldr	r3, [r3, #8]
 80086fe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008702:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	4313      	orrs	r3, r2
 800870a:	608b      	str	r3, [r1, #8]
}
 800870c:	bf00      	nop
 800870e:	370c      	adds	r7, #12
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <LL_RCC_GetAHBPrescaler>:
{
 8008718:	b480      	push	{r7}
 800871a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800871c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008720:	689b      	ldr	r3, [r3, #8]
 8008722:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8008726:	4618      	mov	r0, r3
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr

08008730 <LL_RCC_GetAHB4Prescaler>:
{
 8008730:	b480      	push	{r7}
 8008732:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8008734:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008738:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800873c:	011b      	lsls	r3, r3, #4
 800873e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8008742:	4618      	mov	r0, r3
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr

0800874c <LL_RCC_GetAPB1Prescaler>:
{
 800874c:	b480      	push	{r7}
 800874e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8008750:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008754:	689b      	ldr	r3, [r3, #8]
 8008756:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800875a:	4618      	mov	r0, r3
 800875c:	46bd      	mov	sp, r7
 800875e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008762:	4770      	bx	lr

08008764 <LL_RCC_GetAPB2Prescaler>:
{
 8008764:	b480      	push	{r7}
 8008766:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8008768:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800876c:	689b      	ldr	r3, [r3, #8]
 800876e:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8008772:	4618      	mov	r0, r3
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr

0800877c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800877c:	b480      	push	{r7}
 800877e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8008780:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800878a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800878e:	6013      	str	r3, [r2, #0]
}
 8008790:	bf00      	nop
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr

0800879a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800879a:	b480      	push	{r7}
 800879c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800879e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80087a8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80087ac:	6013      	str	r3, [r2, #0]
}
 80087ae:	bf00      	nop
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr

080087b8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80087b8:	b480      	push	{r7}
 80087ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80087bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80087ca:	d101      	bne.n	80087d0 <LL_RCC_PLL_IsReady+0x18>
 80087cc:	2301      	movs	r3, #1
 80087ce:	e000      	b.n	80087d2 <LL_RCC_PLL_IsReady+0x1a>
 80087d0:	2300      	movs	r3, #0
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr

080087dc <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80087dc:	b480      	push	{r7}
 80087de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80087e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80087e4:	68db      	ldr	r3, [r3, #12]
 80087e6:	0a1b      	lsrs	r3, r3, #8
 80087e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	46bd      	mov	sp, r7
 80087f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f4:	4770      	bx	lr

080087f6 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80087f6:	b480      	push	{r7}
 80087f8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80087fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80087fe:	68db      	ldr	r3, [r3, #12]
 8008800:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8008804:	4618      	mov	r0, r3
 8008806:	46bd      	mov	sp, r7
 8008808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880c:	4770      	bx	lr

0800880e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800880e:	b480      	push	{r7}
 8008810:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8008812:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008816:	68db      	ldr	r3, [r3, #12]
 8008818:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800881c:	4618      	mov	r0, r3
 800881e:	46bd      	mov	sp, r7
 8008820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008824:	4770      	bx	lr

08008826 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8008826:	b480      	push	{r7}
 8008828:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800882a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800882e:	68db      	ldr	r3, [r3, #12]
 8008830:	f003 0303 	and.w	r3, r3, #3
}
 8008834:	4618      	mov	r0, r3
 8008836:	46bd      	mov	sp, r7
 8008838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883c:	4770      	bx	lr

0800883e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800883e:	b480      	push	{r7}
 8008840:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8008842:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008846:	689b      	ldr	r3, [r3, #8]
 8008848:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800884c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008850:	d101      	bne.n	8008856 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8008852:	2301      	movs	r3, #1
 8008854:	e000      	b.n	8008858 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8008856:	2300      	movs	r3, #0
}
 8008858:	4618      	mov	r0, r3
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr

08008862 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8008862:	b480      	push	{r7}
 8008864:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8008866:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800886a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800886e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008872:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008876:	d101      	bne.n	800887c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8008878:	2301      	movs	r3, #1
 800887a:	e000      	b.n	800887e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800887c:	2300      	movs	r3, #0
}
 800887e:	4618      	mov	r0, r3
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr

08008888 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8008888:	b480      	push	{r7}
 800888a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800888c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008890:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8008894:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008898:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800889c:	d101      	bne.n	80088a2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800889e:	2301      	movs	r3, #1
 80088a0:	e000      	b.n	80088a4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80088a2:	2300      	movs	r3, #0
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	46bd      	mov	sp, r7
 80088a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ac:	4770      	bx	lr

080088ae <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80088ae:	b480      	push	{r7}
 80088b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80088b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80088b6:	689b      	ldr	r3, [r3, #8]
 80088b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80088c0:	d101      	bne.n	80088c6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80088c2:	2301      	movs	r3, #1
 80088c4:	e000      	b.n	80088c8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80088c6:	2300      	movs	r3, #0
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr

080088d2 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80088d2:	b480      	push	{r7}
 80088d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80088d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80088da:	689b      	ldr	r3, [r3, #8]
 80088dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80088e0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80088e4:	d101      	bne.n	80088ea <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80088e6:	2301      	movs	r3, #1
 80088e8:	e000      	b.n	80088ec <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80088ea:	2300      	movs	r3, #0
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	46bd      	mov	sp, r7
 80088f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f4:	4770      	bx	lr
	...

080088f8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80088f8:	b590      	push	{r4, r7, lr}
 80088fa:	b08d      	sub	sp, #52	@ 0x34
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d101      	bne.n	800890a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008906:	2301      	movs	r3, #1
 8008908:	e363      	b.n	8008fd2 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f003 0320 	and.w	r3, r3, #32
 8008912:	2b00      	cmp	r3, #0
 8008914:	f000 808d 	beq.w	8008a32 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008918:	f7ff fe89 	bl	800862e <LL_RCC_GetSysClkSource>
 800891c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800891e:	f7ff ff82 	bl	8008826 <LL_RCC_PLL_GetMainSource>
 8008922:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8008924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008926:	2b00      	cmp	r3, #0
 8008928:	d005      	beq.n	8008936 <HAL_RCC_OscConfig+0x3e>
 800892a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800892c:	2b0c      	cmp	r3, #12
 800892e:	d147      	bne.n	80089c0 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8008930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008932:	2b01      	cmp	r3, #1
 8008934:	d144      	bne.n	80089c0 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	69db      	ldr	r3, [r3, #28]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d101      	bne.n	8008942 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800893e:	2301      	movs	r3, #1
 8008940:	e347      	b.n	8008fd2 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8008946:	f7ff fe34 	bl	80085b2 <LL_RCC_MSI_GetRange>
 800894a:	4603      	mov	r3, r0
 800894c:	429c      	cmp	r4, r3
 800894e:	d914      	bls.n	800897a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008954:	4618      	mov	r0, r3
 8008956:	f000 fd2f 	bl	80093b8 <RCC_SetFlashLatencyFromMSIRange>
 800895a:	4603      	mov	r3, r0
 800895c:	2b00      	cmp	r3, #0
 800895e:	d001      	beq.n	8008964 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8008960:	2301      	movs	r3, #1
 8008962:	e336      	b.n	8008fd2 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008968:	4618      	mov	r0, r3
 800896a:	f7ff fe0e 	bl	800858a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6a1b      	ldr	r3, [r3, #32]
 8008972:	4618      	mov	r0, r3
 8008974:	f7ff fe32 	bl	80085dc <LL_RCC_MSI_SetCalibTrimming>
 8008978:	e013      	b.n	80089a2 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800897e:	4618      	mov	r0, r3
 8008980:	f7ff fe03 	bl	800858a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6a1b      	ldr	r3, [r3, #32]
 8008988:	4618      	mov	r0, r3
 800898a:	f7ff fe27 	bl	80085dc <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008992:	4618      	mov	r0, r3
 8008994:	f000 fd10 	bl	80093b8 <RCC_SetFlashLatencyFromMSIRange>
 8008998:	4603      	mov	r3, r0
 800899a:	2b00      	cmp	r3, #0
 800899c:	d001      	beq.n	80089a2 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800899e:	2301      	movs	r3, #1
 80089a0:	e317      	b.n	8008fd2 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80089a2:	f000 fcc9 	bl	8009338 <HAL_RCC_GetHCLKFreq>
 80089a6:	4603      	mov	r3, r0
 80089a8:	4aa4      	ldr	r2, [pc, #656]	@ (8008c3c <HAL_RCC_OscConfig+0x344>)
 80089aa:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80089ac:	4ba4      	ldr	r3, [pc, #656]	@ (8008c40 <HAL_RCC_OscConfig+0x348>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4618      	mov	r0, r3
 80089b2:	f7fe fb4b 	bl	800704c <HAL_InitTick>
 80089b6:	4603      	mov	r3, r0
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d039      	beq.n	8008a30 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80089bc:	2301      	movs	r3, #1
 80089be:	e308      	b.n	8008fd2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	69db      	ldr	r3, [r3, #28]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d01e      	beq.n	8008a06 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80089c8:	f7ff fdb0 	bl	800852c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80089cc:	f7fe fb8c 	bl	80070e8 <HAL_GetTick>
 80089d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80089d2:	e008      	b.n	80089e6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80089d4:	f7fe fb88 	bl	80070e8 <HAL_GetTick>
 80089d8:	4602      	mov	r2, r0
 80089da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089dc:	1ad3      	subs	r3, r2, r3
 80089de:	2b02      	cmp	r3, #2
 80089e0:	d901      	bls.n	80089e6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80089e2:	2303      	movs	r3, #3
 80089e4:	e2f5      	b.n	8008fd2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80089e6:	f7ff fdbf 	bl	8008568 <LL_RCC_MSI_IsReady>
 80089ea:	4603      	mov	r3, r0
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d0f1      	beq.n	80089d4 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089f4:	4618      	mov	r0, r3
 80089f6:	f7ff fdc8 	bl	800858a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6a1b      	ldr	r3, [r3, #32]
 80089fe:	4618      	mov	r0, r3
 8008a00:	f7ff fdec 	bl	80085dc <LL_RCC_MSI_SetCalibTrimming>
 8008a04:	e015      	b.n	8008a32 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008a06:	f7ff fda0 	bl	800854a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008a0a:	f7fe fb6d 	bl	80070e8 <HAL_GetTick>
 8008a0e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8008a10:	e008      	b.n	8008a24 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008a12:	f7fe fb69 	bl	80070e8 <HAL_GetTick>
 8008a16:	4602      	mov	r2, r0
 8008a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a1a:	1ad3      	subs	r3, r2, r3
 8008a1c:	2b02      	cmp	r3, #2
 8008a1e:	d901      	bls.n	8008a24 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8008a20:	2303      	movs	r3, #3
 8008a22:	e2d6      	b.n	8008fd2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8008a24:	f7ff fda0 	bl	8008568 <LL_RCC_MSI_IsReady>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d1f1      	bne.n	8008a12 <HAL_RCC_OscConfig+0x11a>
 8008a2e:	e000      	b.n	8008a32 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8008a30:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f003 0301 	and.w	r3, r3, #1
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d047      	beq.n	8008ace <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008a3e:	f7ff fdf6 	bl	800862e <LL_RCC_GetSysClkSource>
 8008a42:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008a44:	f7ff feef 	bl	8008826 <LL_RCC_PLL_GetMainSource>
 8008a48:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8008a4a:	6a3b      	ldr	r3, [r7, #32]
 8008a4c:	2b08      	cmp	r3, #8
 8008a4e:	d005      	beq.n	8008a5c <HAL_RCC_OscConfig+0x164>
 8008a50:	6a3b      	ldr	r3, [r7, #32]
 8008a52:	2b0c      	cmp	r3, #12
 8008a54:	d108      	bne.n	8008a68 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8008a56:	69fb      	ldr	r3, [r7, #28]
 8008a58:	2b03      	cmp	r3, #3
 8008a5a:	d105      	bne.n	8008a68 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d134      	bne.n	8008ace <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8008a64:	2301      	movs	r3, #1
 8008a66:	e2b4      	b.n	8008fd2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a70:	d102      	bne.n	8008a78 <HAL_RCC_OscConfig+0x180>
 8008a72:	f7ff fbdd 	bl	8008230 <LL_RCC_HSE_Enable>
 8008a76:	e001      	b.n	8008a7c <HAL_RCC_OscConfig+0x184>
 8008a78:	f7ff fbe9 	bl	800824e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d012      	beq.n	8008aaa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a84:	f7fe fb30 	bl	80070e8 <HAL_GetTick>
 8008a88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8008a8a:	e008      	b.n	8008a9e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008a8c:	f7fe fb2c 	bl	80070e8 <HAL_GetTick>
 8008a90:	4602      	mov	r2, r0
 8008a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a94:	1ad3      	subs	r3, r2, r3
 8008a96:	2b64      	cmp	r3, #100	@ 0x64
 8008a98:	d901      	bls.n	8008a9e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8008a9a:	2303      	movs	r3, #3
 8008a9c:	e299      	b.n	8008fd2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8008a9e:	f7ff fbe5 	bl	800826c <LL_RCC_HSE_IsReady>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d0f1      	beq.n	8008a8c <HAL_RCC_OscConfig+0x194>
 8008aa8:	e011      	b.n	8008ace <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008aaa:	f7fe fb1d 	bl	80070e8 <HAL_GetTick>
 8008aae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8008ab0:	e008      	b.n	8008ac4 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008ab2:	f7fe fb19 	bl	80070e8 <HAL_GetTick>
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aba:	1ad3      	subs	r3, r2, r3
 8008abc:	2b64      	cmp	r3, #100	@ 0x64
 8008abe:	d901      	bls.n	8008ac4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8008ac0:	2303      	movs	r3, #3
 8008ac2:	e286      	b.n	8008fd2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8008ac4:	f7ff fbd2 	bl	800826c <LL_RCC_HSE_IsReady>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d1f1      	bne.n	8008ab2 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f003 0302 	and.w	r3, r3, #2
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d04c      	beq.n	8008b74 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008ada:	f7ff fda8 	bl	800862e <LL_RCC_GetSysClkSource>
 8008ade:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008ae0:	f7ff fea1 	bl	8008826 <LL_RCC_PLL_GetMainSource>
 8008ae4:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8008ae6:	69bb      	ldr	r3, [r7, #24]
 8008ae8:	2b04      	cmp	r3, #4
 8008aea:	d005      	beq.n	8008af8 <HAL_RCC_OscConfig+0x200>
 8008aec:	69bb      	ldr	r3, [r7, #24]
 8008aee:	2b0c      	cmp	r3, #12
 8008af0:	d10e      	bne.n	8008b10 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	2b02      	cmp	r3, #2
 8008af6:	d10b      	bne.n	8008b10 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	68db      	ldr	r3, [r3, #12]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d101      	bne.n	8008b04 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8008b00:	2301      	movs	r3, #1
 8008b02:	e266      	b.n	8008fd2 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	691b      	ldr	r3, [r3, #16]
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f7ff fbf1 	bl	80082f0 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8008b0e:	e031      	b.n	8008b74 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	68db      	ldr	r3, [r3, #12]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d019      	beq.n	8008b4c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008b18:	f7ff fbba 	bl	8008290 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b1c:	f7fe fae4 	bl	80070e8 <HAL_GetTick>
 8008b20:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8008b22:	e008      	b.n	8008b36 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008b24:	f7fe fae0 	bl	80070e8 <HAL_GetTick>
 8008b28:	4602      	mov	r2, r0
 8008b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b2c:	1ad3      	subs	r3, r2, r3
 8008b2e:	2b02      	cmp	r3, #2
 8008b30:	d901      	bls.n	8008b36 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8008b32:	2303      	movs	r3, #3
 8008b34:	e24d      	b.n	8008fd2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8008b36:	f7ff fbc9 	bl	80082cc <LL_RCC_HSI_IsReady>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d0f1      	beq.n	8008b24 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	691b      	ldr	r3, [r3, #16]
 8008b44:	4618      	mov	r0, r3
 8008b46:	f7ff fbd3 	bl	80082f0 <LL_RCC_HSI_SetCalibTrimming>
 8008b4a:	e013      	b.n	8008b74 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008b4c:	f7ff fbaf 	bl	80082ae <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b50:	f7fe faca 	bl	80070e8 <HAL_GetTick>
 8008b54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8008b56:	e008      	b.n	8008b6a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008b58:	f7fe fac6 	bl	80070e8 <HAL_GetTick>
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b60:	1ad3      	subs	r3, r2, r3
 8008b62:	2b02      	cmp	r3, #2
 8008b64:	d901      	bls.n	8008b6a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8008b66:	2303      	movs	r3, #3
 8008b68:	e233      	b.n	8008fd2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8008b6a:	f7ff fbaf 	bl	80082cc <LL_RCC_HSI_IsReady>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d1f1      	bne.n	8008b58 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f003 0308 	and.w	r3, r3, #8
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d106      	bne.n	8008b8e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	f000 80a3 	beq.w	8008cd4 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	695b      	ldr	r3, [r3, #20]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d076      	beq.n	8008c84 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f003 0310 	and.w	r3, r3, #16
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d046      	beq.n	8008c30 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8008ba2:	f7ff fc66 	bl	8008472 <LL_RCC_LSI1_IsReady>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d113      	bne.n	8008bd4 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8008bac:	f7ff fc3f 	bl	800842e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008bb0:	f7fe fa9a 	bl	80070e8 <HAL_GetTick>
 8008bb4:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8008bb6:	e008      	b.n	8008bca <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8008bb8:	f7fe fa96 	bl	80070e8 <HAL_GetTick>
 8008bbc:	4602      	mov	r2, r0
 8008bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bc0:	1ad3      	subs	r3, r2, r3
 8008bc2:	2b02      	cmp	r3, #2
 8008bc4:	d901      	bls.n	8008bca <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8008bc6:	2303      	movs	r3, #3
 8008bc8:	e203      	b.n	8008fd2 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8008bca:	f7ff fc52 	bl	8008472 <LL_RCC_LSI1_IsReady>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d0f1      	beq.n	8008bb8 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8008bd4:	f7ff fc5f 	bl	8008496 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bd8:	f7fe fa86 	bl	80070e8 <HAL_GetTick>
 8008bdc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8008bde:	e008      	b.n	8008bf2 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8008be0:	f7fe fa82 	bl	80070e8 <HAL_GetTick>
 8008be4:	4602      	mov	r2, r0
 8008be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008be8:	1ad3      	subs	r3, r2, r3
 8008bea:	2b03      	cmp	r3, #3
 8008bec:	d901      	bls.n	8008bf2 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8008bee:	2303      	movs	r3, #3
 8008bf0:	e1ef      	b.n	8008fd2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8008bf2:	f7ff fc72 	bl	80084da <LL_RCC_LSI2_IsReady>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d0f1      	beq.n	8008be0 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	699b      	ldr	r3, [r3, #24]
 8008c00:	4618      	mov	r0, r3
 8008c02:	f7ff fc7c 	bl	80084fe <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8008c06:	f7ff fc23 	bl	8008450 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c0a:	f7fe fa6d 	bl	80070e8 <HAL_GetTick>
 8008c0e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8008c10:	e008      	b.n	8008c24 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8008c12:	f7fe fa69 	bl	80070e8 <HAL_GetTick>
 8008c16:	4602      	mov	r2, r0
 8008c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c1a:	1ad3      	subs	r3, r2, r3
 8008c1c:	2b02      	cmp	r3, #2
 8008c1e:	d901      	bls.n	8008c24 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8008c20:	2303      	movs	r3, #3
 8008c22:	e1d6      	b.n	8008fd2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8008c24:	f7ff fc25 	bl	8008472 <LL_RCC_LSI1_IsReady>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d1f1      	bne.n	8008c12 <HAL_RCC_OscConfig+0x31a>
 8008c2e:	e051      	b.n	8008cd4 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8008c30:	f7ff fbfd 	bl	800842e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c34:	f7fe fa58 	bl	80070e8 <HAL_GetTick>
 8008c38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8008c3a:	e00c      	b.n	8008c56 <HAL_RCC_OscConfig+0x35e>
 8008c3c:	200000a0 	.word	0x200000a0
 8008c40:	200000a4 	.word	0x200000a4
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8008c44:	f7fe fa50 	bl	80070e8 <HAL_GetTick>
 8008c48:	4602      	mov	r2, r0
 8008c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c4c:	1ad3      	subs	r3, r2, r3
 8008c4e:	2b02      	cmp	r3, #2
 8008c50:	d901      	bls.n	8008c56 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8008c52:	2303      	movs	r3, #3
 8008c54:	e1bd      	b.n	8008fd2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8008c56:	f7ff fc0c 	bl	8008472 <LL_RCC_LSI1_IsReady>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d0f1      	beq.n	8008c44 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8008c60:	f7ff fc2a 	bl	80084b8 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8008c64:	e008      	b.n	8008c78 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8008c66:	f7fe fa3f 	bl	80070e8 <HAL_GetTick>
 8008c6a:	4602      	mov	r2, r0
 8008c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c6e:	1ad3      	subs	r3, r2, r3
 8008c70:	2b03      	cmp	r3, #3
 8008c72:	d901      	bls.n	8008c78 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8008c74:	2303      	movs	r3, #3
 8008c76:	e1ac      	b.n	8008fd2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8008c78:	f7ff fc2f 	bl	80084da <LL_RCC_LSI2_IsReady>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d1f1      	bne.n	8008c66 <HAL_RCC_OscConfig+0x36e>
 8008c82:	e027      	b.n	8008cd4 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8008c84:	f7ff fc18 	bl	80084b8 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c88:	f7fe fa2e 	bl	80070e8 <HAL_GetTick>
 8008c8c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8008c8e:	e008      	b.n	8008ca2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8008c90:	f7fe fa2a 	bl	80070e8 <HAL_GetTick>
 8008c94:	4602      	mov	r2, r0
 8008c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c98:	1ad3      	subs	r3, r2, r3
 8008c9a:	2b03      	cmp	r3, #3
 8008c9c:	d901      	bls.n	8008ca2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8008c9e:	2303      	movs	r3, #3
 8008ca0:	e197      	b.n	8008fd2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8008ca2:	f7ff fc1a 	bl	80084da <LL_RCC_LSI2_IsReady>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d1f1      	bne.n	8008c90 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8008cac:	f7ff fbd0 	bl	8008450 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008cb0:	f7fe fa1a 	bl	80070e8 <HAL_GetTick>
 8008cb4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8008cb6:	e008      	b.n	8008cca <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8008cb8:	f7fe fa16 	bl	80070e8 <HAL_GetTick>
 8008cbc:	4602      	mov	r2, r0
 8008cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cc0:	1ad3      	subs	r3, r2, r3
 8008cc2:	2b02      	cmp	r3, #2
 8008cc4:	d901      	bls.n	8008cca <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8008cc6:	2303      	movs	r3, #3
 8008cc8:	e183      	b.n	8008fd2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8008cca:	f7ff fbd2 	bl	8008472 <LL_RCC_LSI1_IsReady>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d1f1      	bne.n	8008cb8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f003 0304 	and.w	r3, r3, #4
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d05b      	beq.n	8008d98 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008ce0:	4ba7      	ldr	r3, [pc, #668]	@ (8008f80 <HAL_RCC_OscConfig+0x688>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d114      	bne.n	8008d16 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8008cec:	f7ff fa70 	bl	80081d0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008cf0:	f7fe f9fa 	bl	80070e8 <HAL_GetTick>
 8008cf4:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008cf6:	e008      	b.n	8008d0a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008cf8:	f7fe f9f6 	bl	80070e8 <HAL_GetTick>
 8008cfc:	4602      	mov	r2, r0
 8008cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d00:	1ad3      	subs	r3, r2, r3
 8008d02:	2b02      	cmp	r3, #2
 8008d04:	d901      	bls.n	8008d0a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8008d06:	2303      	movs	r3, #3
 8008d08:	e163      	b.n	8008fd2 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008d0a:	4b9d      	ldr	r3, [pc, #628]	@ (8008f80 <HAL_RCC_OscConfig+0x688>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d0f0      	beq.n	8008cf8 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	689b      	ldr	r3, [r3, #8]
 8008d1a:	2b01      	cmp	r3, #1
 8008d1c:	d102      	bne.n	8008d24 <HAL_RCC_OscConfig+0x42c>
 8008d1e:	f7ff fb30 	bl	8008382 <LL_RCC_LSE_Enable>
 8008d22:	e00c      	b.n	8008d3e <HAL_RCC_OscConfig+0x446>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	689b      	ldr	r3, [r3, #8]
 8008d28:	2b05      	cmp	r3, #5
 8008d2a:	d104      	bne.n	8008d36 <HAL_RCC_OscConfig+0x43e>
 8008d2c:	f7ff fb4b 	bl	80083c6 <LL_RCC_LSE_EnableBypass>
 8008d30:	f7ff fb27 	bl	8008382 <LL_RCC_LSE_Enable>
 8008d34:	e003      	b.n	8008d3e <HAL_RCC_OscConfig+0x446>
 8008d36:	f7ff fb35 	bl	80083a4 <LL_RCC_LSE_Disable>
 8008d3a:	f7ff fb55 	bl	80083e8 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	689b      	ldr	r3, [r3, #8]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d014      	beq.n	8008d70 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d46:	f7fe f9cf 	bl	80070e8 <HAL_GetTick>
 8008d4a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8008d4c:	e00a      	b.n	8008d64 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d4e:	f7fe f9cb 	bl	80070e8 <HAL_GetTick>
 8008d52:	4602      	mov	r2, r0
 8008d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d56:	1ad3      	subs	r3, r2, r3
 8008d58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d901      	bls.n	8008d64 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8008d60:	2303      	movs	r3, #3
 8008d62:	e136      	b.n	8008fd2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8008d64:	f7ff fb51 	bl	800840a <LL_RCC_LSE_IsReady>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d0ef      	beq.n	8008d4e <HAL_RCC_OscConfig+0x456>
 8008d6e:	e013      	b.n	8008d98 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d70:	f7fe f9ba 	bl	80070e8 <HAL_GetTick>
 8008d74:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8008d76:	e00a      	b.n	8008d8e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d78:	f7fe f9b6 	bl	80070e8 <HAL_GetTick>
 8008d7c:	4602      	mov	r2, r0
 8008d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d80:	1ad3      	subs	r3, r2, r3
 8008d82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d901      	bls.n	8008d8e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8008d8a:	2303      	movs	r3, #3
 8008d8c:	e121      	b.n	8008fd2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8008d8e:	f7ff fb3c 	bl	800840a <LL_RCC_LSE_IsReady>
 8008d92:	4603      	mov	r3, r0
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d1ef      	bne.n	8008d78 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d02c      	beq.n	8008dfe <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d014      	beq.n	8008dd6 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008dac:	f7ff fab5 	bl	800831a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008db0:	f7fe f99a 	bl	80070e8 <HAL_GetTick>
 8008db4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8008db6:	e008      	b.n	8008dca <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008db8:	f7fe f996 	bl	80070e8 <HAL_GetTick>
 8008dbc:	4602      	mov	r2, r0
 8008dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dc0:	1ad3      	subs	r3, r2, r3
 8008dc2:	2b02      	cmp	r3, #2
 8008dc4:	d901      	bls.n	8008dca <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8008dc6:	2303      	movs	r3, #3
 8008dc8:	e103      	b.n	8008fd2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8008dca:	f7ff fac8 	bl	800835e <LL_RCC_HSI48_IsReady>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d0f1      	beq.n	8008db8 <HAL_RCC_OscConfig+0x4c0>
 8008dd4:	e013      	b.n	8008dfe <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008dd6:	f7ff fab1 	bl	800833c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008dda:	f7fe f985 	bl	80070e8 <HAL_GetTick>
 8008dde:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8008de0:	e008      	b.n	8008df4 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008de2:	f7fe f981 	bl	80070e8 <HAL_GetTick>
 8008de6:	4602      	mov	r2, r0
 8008de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dea:	1ad3      	subs	r3, r2, r3
 8008dec:	2b02      	cmp	r3, #2
 8008dee:	d901      	bls.n	8008df4 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8008df0:	2303      	movs	r3, #3
 8008df2:	e0ee      	b.n	8008fd2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8008df4:	f7ff fab3 	bl	800835e <LL_RCC_HSI48_IsReady>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d1f1      	bne.n	8008de2 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	f000 80e4 	beq.w	8008fd0 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008e08:	f7ff fc11 	bl	800862e <LL_RCC_GetSysClkSource>
 8008e0c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8008e0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008e12:	68db      	ldr	r3, [r3, #12]
 8008e14:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e1a:	2b02      	cmp	r3, #2
 8008e1c:	f040 80b4 	bne.w	8008f88 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	f003 0203 	and.w	r2, r3, #3
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	d123      	bne.n	8008e76 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e38:	429a      	cmp	r2, r3
 8008e3a:	d11c      	bne.n	8008e76 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	0a1b      	lsrs	r3, r3, #8
 8008e40:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	d114      	bne.n	8008e76 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d10d      	bne.n	8008e76 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008e64:	429a      	cmp	r2, r3
 8008e66:	d106      	bne.n	8008e76 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008e72:	429a      	cmp	r2, r3
 8008e74:	d05d      	beq.n	8008f32 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008e76:	693b      	ldr	r3, [r7, #16]
 8008e78:	2b0c      	cmp	r3, #12
 8008e7a:	d058      	beq.n	8008f2e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008e7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d001      	beq.n	8008e8e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	e0a1      	b.n	8008fd2 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008e8e:	f7ff fc84 	bl	800879a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008e92:	f7fe f929 	bl	80070e8 <HAL_GetTick>
 8008e96:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008e98:	e008      	b.n	8008eac <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e9a:	f7fe f925 	bl	80070e8 <HAL_GetTick>
 8008e9e:	4602      	mov	r2, r0
 8008ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ea2:	1ad3      	subs	r3, r2, r3
 8008ea4:	2b02      	cmp	r3, #2
 8008ea6:	d901      	bls.n	8008eac <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8008ea8:	2303      	movs	r3, #3
 8008eaa:	e092      	b.n	8008fd2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008eac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d1ef      	bne.n	8008e9a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008eba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008ebe:	68da      	ldr	r2, [r3, #12]
 8008ec0:	4b30      	ldr	r3, [pc, #192]	@ (8008f84 <HAL_RCC_OscConfig+0x68c>)
 8008ec2:	4013      	ands	r3, r2
 8008ec4:	687a      	ldr	r2, [r7, #4]
 8008ec6:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8008ec8:	687a      	ldr	r2, [r7, #4]
 8008eca:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008ecc:	4311      	orrs	r1, r2
 8008ece:	687a      	ldr	r2, [r7, #4]
 8008ed0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008ed2:	0212      	lsls	r2, r2, #8
 8008ed4:	4311      	orrs	r1, r2
 8008ed6:	687a      	ldr	r2, [r7, #4]
 8008ed8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008eda:	4311      	orrs	r1, r2
 8008edc:	687a      	ldr	r2, [r7, #4]
 8008ede:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8008ee0:	4311      	orrs	r1, r2
 8008ee2:	687a      	ldr	r2, [r7, #4]
 8008ee4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8008ee6:	430a      	orrs	r2, r1
 8008ee8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008eec:	4313      	orrs	r3, r2
 8008eee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008ef0:	f7ff fc44 	bl	800877c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008ef4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008ef8:	68db      	ldr	r3, [r3, #12]
 8008efa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008efe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008f02:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008f04:	f7fe f8f0 	bl	80070e8 <HAL_GetTick>
 8008f08:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008f0a:	e008      	b.n	8008f1e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f0c:	f7fe f8ec 	bl	80070e8 <HAL_GetTick>
 8008f10:	4602      	mov	r2, r0
 8008f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f14:	1ad3      	subs	r3, r2, r3
 8008f16:	2b02      	cmp	r3, #2
 8008f18:	d901      	bls.n	8008f1e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8008f1a:	2303      	movs	r3, #3
 8008f1c:	e059      	b.n	8008fd2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008f1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d0ef      	beq.n	8008f0c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008f2c:	e050      	b.n	8008fd0 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008f2e:	2301      	movs	r3, #1
 8008f30:	e04f      	b.n	8008fd2 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008f32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d147      	bne.n	8008fd0 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008f40:	f7ff fc1c 	bl	800877c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008f44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008f48:	68db      	ldr	r3, [r3, #12]
 8008f4a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008f4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008f52:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008f54:	f7fe f8c8 	bl	80070e8 <HAL_GetTick>
 8008f58:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008f5a:	e008      	b.n	8008f6e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f5c:	f7fe f8c4 	bl	80070e8 <HAL_GetTick>
 8008f60:	4602      	mov	r2, r0
 8008f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f64:	1ad3      	subs	r3, r2, r3
 8008f66:	2b02      	cmp	r3, #2
 8008f68:	d901      	bls.n	8008f6e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8008f6a:	2303      	movs	r3, #3
 8008f6c:	e031      	b.n	8008fd2 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008f6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d0ef      	beq.n	8008f5c <HAL_RCC_OscConfig+0x664>
 8008f7c:	e028      	b.n	8008fd0 <HAL_RCC_OscConfig+0x6d8>
 8008f7e:	bf00      	nop
 8008f80:	58000400 	.word	0x58000400
 8008f84:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	2b0c      	cmp	r3, #12
 8008f8c:	d01e      	beq.n	8008fcc <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f8e:	f7ff fc04 	bl	800879a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f92:	f7fe f8a9 	bl	80070e8 <HAL_GetTick>
 8008f96:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008f98:	e008      	b.n	8008fac <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f9a:	f7fe f8a5 	bl	80070e8 <HAL_GetTick>
 8008f9e:	4602      	mov	r2, r0
 8008fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fa2:	1ad3      	subs	r3, r2, r3
 8008fa4:	2b02      	cmp	r3, #2
 8008fa6:	d901      	bls.n	8008fac <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8008fa8:	2303      	movs	r3, #3
 8008faa:	e012      	b.n	8008fd2 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008fac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d1ef      	bne.n	8008f9a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8008fba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008fbe:	68da      	ldr	r2, [r3, #12]
 8008fc0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008fc4:	4b05      	ldr	r3, [pc, #20]	@ (8008fdc <HAL_RCC_OscConfig+0x6e4>)
 8008fc6:	4013      	ands	r3, r2
 8008fc8:	60cb      	str	r3, [r1, #12]
 8008fca:	e001      	b.n	8008fd0 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008fcc:	2301      	movs	r3, #1
 8008fce:	e000      	b.n	8008fd2 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8008fd0:	2300      	movs	r3, #0
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3734      	adds	r7, #52	@ 0x34
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd90      	pop	{r4, r7, pc}
 8008fda:	bf00      	nop
 8008fdc:	eefefffc 	.word	0xeefefffc

08008fe0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b084      	sub	sp, #16
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
 8008fe8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d101      	bne.n	8008ff4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	e12d      	b.n	8009250 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008ff4:	4b98      	ldr	r3, [pc, #608]	@ (8009258 <HAL_RCC_ClockConfig+0x278>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f003 0307 	and.w	r3, r3, #7
 8008ffc:	683a      	ldr	r2, [r7, #0]
 8008ffe:	429a      	cmp	r2, r3
 8009000:	d91b      	bls.n	800903a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009002:	4b95      	ldr	r3, [pc, #596]	@ (8009258 <HAL_RCC_ClockConfig+0x278>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f023 0207 	bic.w	r2, r3, #7
 800900a:	4993      	ldr	r1, [pc, #588]	@ (8009258 <HAL_RCC_ClockConfig+0x278>)
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	4313      	orrs	r3, r2
 8009010:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009012:	f7fe f869 	bl	80070e8 <HAL_GetTick>
 8009016:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009018:	e008      	b.n	800902c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800901a:	f7fe f865 	bl	80070e8 <HAL_GetTick>
 800901e:	4602      	mov	r2, r0
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	1ad3      	subs	r3, r2, r3
 8009024:	2b02      	cmp	r3, #2
 8009026:	d901      	bls.n	800902c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8009028:	2303      	movs	r3, #3
 800902a:	e111      	b.n	8009250 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800902c:	4b8a      	ldr	r3, [pc, #552]	@ (8009258 <HAL_RCC_ClockConfig+0x278>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f003 0307 	and.w	r3, r3, #7
 8009034:	683a      	ldr	r2, [r7, #0]
 8009036:	429a      	cmp	r2, r3
 8009038:	d1ef      	bne.n	800901a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f003 0302 	and.w	r3, r3, #2
 8009042:	2b00      	cmp	r3, #0
 8009044:	d016      	beq.n	8009074 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	689b      	ldr	r3, [r3, #8]
 800904a:	4618      	mov	r0, r3
 800904c:	f7ff fafb 	bl	8008646 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8009050:	f7fe f84a 	bl	80070e8 <HAL_GetTick>
 8009054:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8009056:	e008      	b.n	800906a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8009058:	f7fe f846 	bl	80070e8 <HAL_GetTick>
 800905c:	4602      	mov	r2, r0
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	1ad3      	subs	r3, r2, r3
 8009062:	2b02      	cmp	r3, #2
 8009064:	d901      	bls.n	800906a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8009066:	2303      	movs	r3, #3
 8009068:	e0f2      	b.n	8009250 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800906a:	f7ff fbe8 	bl	800883e <LL_RCC_IsActiveFlag_HPRE>
 800906e:	4603      	mov	r3, r0
 8009070:	2b00      	cmp	r3, #0
 8009072:	d0f1      	beq.n	8009058 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f003 0320 	and.w	r3, r3, #32
 800907c:	2b00      	cmp	r3, #0
 800907e:	d016      	beq.n	80090ae <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	695b      	ldr	r3, [r3, #20]
 8009084:	4618      	mov	r0, r3
 8009086:	f7ff faf2 	bl	800866e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800908a:	f7fe f82d 	bl	80070e8 <HAL_GetTick>
 800908e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8009090:	e008      	b.n	80090a4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8009092:	f7fe f829 	bl	80070e8 <HAL_GetTick>
 8009096:	4602      	mov	r2, r0
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	1ad3      	subs	r3, r2, r3
 800909c:	2b02      	cmp	r3, #2
 800909e:	d901      	bls.n	80090a4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80090a0:	2303      	movs	r3, #3
 80090a2:	e0d5      	b.n	8009250 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80090a4:	f7ff fbdd 	bl	8008862 <LL_RCC_IsActiveFlag_C2HPRE>
 80090a8:	4603      	mov	r3, r0
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d0f1      	beq.n	8009092 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d016      	beq.n	80090e8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	699b      	ldr	r3, [r3, #24]
 80090be:	4618      	mov	r0, r3
 80090c0:	f7ff faeb 	bl	800869a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80090c4:	f7fe f810 	bl	80070e8 <HAL_GetTick>
 80090c8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80090ca:	e008      	b.n	80090de <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80090cc:	f7fe f80c 	bl	80070e8 <HAL_GetTick>
 80090d0:	4602      	mov	r2, r0
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	1ad3      	subs	r3, r2, r3
 80090d6:	2b02      	cmp	r3, #2
 80090d8:	d901      	bls.n	80090de <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80090da:	2303      	movs	r3, #3
 80090dc:	e0b8      	b.n	8009250 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80090de:	f7ff fbd3 	bl	8008888 <LL_RCC_IsActiveFlag_SHDHPRE>
 80090e2:	4603      	mov	r3, r0
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d0f1      	beq.n	80090cc <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f003 0304 	and.w	r3, r3, #4
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d016      	beq.n	8009122 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	68db      	ldr	r3, [r3, #12]
 80090f8:	4618      	mov	r0, r3
 80090fa:	f7ff fae5 	bl	80086c8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80090fe:	f7fd fff3 	bl	80070e8 <HAL_GetTick>
 8009102:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8009104:	e008      	b.n	8009118 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8009106:	f7fd ffef 	bl	80070e8 <HAL_GetTick>
 800910a:	4602      	mov	r2, r0
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	1ad3      	subs	r3, r2, r3
 8009110:	2b02      	cmp	r3, #2
 8009112:	d901      	bls.n	8009118 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8009114:	2303      	movs	r3, #3
 8009116:	e09b      	b.n	8009250 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8009118:	f7ff fbc9 	bl	80088ae <LL_RCC_IsActiveFlag_PPRE1>
 800911c:	4603      	mov	r3, r0
 800911e:	2b00      	cmp	r3, #0
 8009120:	d0f1      	beq.n	8009106 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f003 0308 	and.w	r3, r3, #8
 800912a:	2b00      	cmp	r3, #0
 800912c:	d017      	beq.n	800915e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	691b      	ldr	r3, [r3, #16]
 8009132:	00db      	lsls	r3, r3, #3
 8009134:	4618      	mov	r0, r3
 8009136:	f7ff fadb 	bl	80086f0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800913a:	f7fd ffd5 	bl	80070e8 <HAL_GetTick>
 800913e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8009140:	e008      	b.n	8009154 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8009142:	f7fd ffd1 	bl	80070e8 <HAL_GetTick>
 8009146:	4602      	mov	r2, r0
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	1ad3      	subs	r3, r2, r3
 800914c:	2b02      	cmp	r3, #2
 800914e:	d901      	bls.n	8009154 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8009150:	2303      	movs	r3, #3
 8009152:	e07d      	b.n	8009250 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8009154:	f7ff fbbd 	bl	80088d2 <LL_RCC_IsActiveFlag_PPRE2>
 8009158:	4603      	mov	r3, r0
 800915a:	2b00      	cmp	r3, #0
 800915c:	d0f1      	beq.n	8009142 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f003 0301 	and.w	r3, r3, #1
 8009166:	2b00      	cmp	r3, #0
 8009168:	d043      	beq.n	80091f2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	2b02      	cmp	r3, #2
 8009170:	d106      	bne.n	8009180 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8009172:	f7ff f87b 	bl	800826c <LL_RCC_HSE_IsReady>
 8009176:	4603      	mov	r3, r0
 8009178:	2b00      	cmp	r3, #0
 800917a:	d11e      	bne.n	80091ba <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800917c:	2301      	movs	r3, #1
 800917e:	e067      	b.n	8009250 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	2b03      	cmp	r3, #3
 8009186:	d106      	bne.n	8009196 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8009188:	f7ff fb16 	bl	80087b8 <LL_RCC_PLL_IsReady>
 800918c:	4603      	mov	r3, r0
 800918e:	2b00      	cmp	r3, #0
 8009190:	d113      	bne.n	80091ba <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8009192:	2301      	movs	r3, #1
 8009194:	e05c      	b.n	8009250 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	685b      	ldr	r3, [r3, #4]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d106      	bne.n	80091ac <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800919e:	f7ff f9e3 	bl	8008568 <LL_RCC_MSI_IsReady>
 80091a2:	4603      	mov	r3, r0
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d108      	bne.n	80091ba <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80091a8:	2301      	movs	r3, #1
 80091aa:	e051      	b.n	8009250 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80091ac:	f7ff f88e 	bl	80082cc <LL_RCC_HSI_IsReady>
 80091b0:	4603      	mov	r3, r0
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d101      	bne.n	80091ba <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80091b6:	2301      	movs	r3, #1
 80091b8:	e04a      	b.n	8009250 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	4618      	mov	r0, r3
 80091c0:	f7ff fa21 	bl	8008606 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091c4:	f7fd ff90 	bl	80070e8 <HAL_GetTick>
 80091c8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80091ca:	e00a      	b.n	80091e2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80091cc:	f7fd ff8c 	bl	80070e8 <HAL_GetTick>
 80091d0:	4602      	mov	r2, r0
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	1ad3      	subs	r3, r2, r3
 80091d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80091da:	4293      	cmp	r3, r2
 80091dc:	d901      	bls.n	80091e2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80091de:	2303      	movs	r3, #3
 80091e0:	e036      	b.n	8009250 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80091e2:	f7ff fa24 	bl	800862e <LL_RCC_GetSysClkSource>
 80091e6:	4602      	mov	r2, r0
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	685b      	ldr	r3, [r3, #4]
 80091ec:	009b      	lsls	r3, r3, #2
 80091ee:	429a      	cmp	r2, r3
 80091f0:	d1ec      	bne.n	80091cc <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80091f2:	4b19      	ldr	r3, [pc, #100]	@ (8009258 <HAL_RCC_ClockConfig+0x278>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f003 0307 	and.w	r3, r3, #7
 80091fa:	683a      	ldr	r2, [r7, #0]
 80091fc:	429a      	cmp	r2, r3
 80091fe:	d21b      	bcs.n	8009238 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009200:	4b15      	ldr	r3, [pc, #84]	@ (8009258 <HAL_RCC_ClockConfig+0x278>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f023 0207 	bic.w	r2, r3, #7
 8009208:	4913      	ldr	r1, [pc, #76]	@ (8009258 <HAL_RCC_ClockConfig+0x278>)
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	4313      	orrs	r3, r2
 800920e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009210:	f7fd ff6a 	bl	80070e8 <HAL_GetTick>
 8009214:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009216:	e008      	b.n	800922a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8009218:	f7fd ff66 	bl	80070e8 <HAL_GetTick>
 800921c:	4602      	mov	r2, r0
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	1ad3      	subs	r3, r2, r3
 8009222:	2b02      	cmp	r3, #2
 8009224:	d901      	bls.n	800922a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8009226:	2303      	movs	r3, #3
 8009228:	e012      	b.n	8009250 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800922a:	4b0b      	ldr	r3, [pc, #44]	@ (8009258 <HAL_RCC_ClockConfig+0x278>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f003 0307 	and.w	r3, r3, #7
 8009232:	683a      	ldr	r2, [r7, #0]
 8009234:	429a      	cmp	r2, r3
 8009236:	d1ef      	bne.n	8009218 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8009238:	f000 f87e 	bl	8009338 <HAL_RCC_GetHCLKFreq>
 800923c:	4603      	mov	r3, r0
 800923e:	4a07      	ldr	r2, [pc, #28]	@ (800925c <HAL_RCC_ClockConfig+0x27c>)
 8009240:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8009242:	f7fd ff5d 	bl	8007100 <HAL_GetTickPrio>
 8009246:	4603      	mov	r3, r0
 8009248:	4618      	mov	r0, r3
 800924a:	f7fd feff 	bl	800704c <HAL_InitTick>
 800924e:	4603      	mov	r3, r0
}
 8009250:	4618      	mov	r0, r3
 8009252:	3710      	adds	r7, #16
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}
 8009258:	58004000 	.word	0x58004000
 800925c:	200000a0 	.word	0x200000a0

08009260 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009260:	b590      	push	{r4, r7, lr}
 8009262:	b085      	sub	sp, #20
 8009264:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009266:	f7ff f9e2 	bl	800862e <LL_RCC_GetSysClkSource>
 800926a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d10a      	bne.n	8009288 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8009272:	f7ff f99e 	bl	80085b2 <LL_RCC_MSI_GetRange>
 8009276:	4603      	mov	r3, r0
 8009278:	091b      	lsrs	r3, r3, #4
 800927a:	f003 030f 	and.w	r3, r3, #15
 800927e:	4a2b      	ldr	r2, [pc, #172]	@ (800932c <HAL_RCC_GetSysClockFreq+0xcc>)
 8009280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009284:	60fb      	str	r3, [r7, #12]
 8009286:	e04b      	b.n	8009320 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2b04      	cmp	r3, #4
 800928c:	d102      	bne.n	8009294 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800928e:	4b28      	ldr	r3, [pc, #160]	@ (8009330 <HAL_RCC_GetSysClockFreq+0xd0>)
 8009290:	60fb      	str	r3, [r7, #12]
 8009292:	e045      	b.n	8009320 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2b08      	cmp	r3, #8
 8009298:	d10a      	bne.n	80092b0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800929a:	f7fe ffb7 	bl	800820c <LL_RCC_HSE_IsEnabledDiv2>
 800929e:	4603      	mov	r3, r0
 80092a0:	2b01      	cmp	r3, #1
 80092a2:	d102      	bne.n	80092aa <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80092a4:	4b22      	ldr	r3, [pc, #136]	@ (8009330 <HAL_RCC_GetSysClockFreq+0xd0>)
 80092a6:	60fb      	str	r3, [r7, #12]
 80092a8:	e03a      	b.n	8009320 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80092aa:	4b22      	ldr	r3, [pc, #136]	@ (8009334 <HAL_RCC_GetSysClockFreq+0xd4>)
 80092ac:	60fb      	str	r3, [r7, #12]
 80092ae:	e037      	b.n	8009320 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80092b0:	f7ff fab9 	bl	8008826 <LL_RCC_PLL_GetMainSource>
 80092b4:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	2b02      	cmp	r3, #2
 80092ba:	d003      	beq.n	80092c4 <HAL_RCC_GetSysClockFreq+0x64>
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	2b03      	cmp	r3, #3
 80092c0:	d003      	beq.n	80092ca <HAL_RCC_GetSysClockFreq+0x6a>
 80092c2:	e00d      	b.n	80092e0 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80092c4:	4b1a      	ldr	r3, [pc, #104]	@ (8009330 <HAL_RCC_GetSysClockFreq+0xd0>)
 80092c6:	60bb      	str	r3, [r7, #8]
        break;
 80092c8:	e015      	b.n	80092f6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80092ca:	f7fe ff9f 	bl	800820c <LL_RCC_HSE_IsEnabledDiv2>
 80092ce:	4603      	mov	r3, r0
 80092d0:	2b01      	cmp	r3, #1
 80092d2:	d102      	bne.n	80092da <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80092d4:	4b16      	ldr	r3, [pc, #88]	@ (8009330 <HAL_RCC_GetSysClockFreq+0xd0>)
 80092d6:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80092d8:	e00d      	b.n	80092f6 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80092da:	4b16      	ldr	r3, [pc, #88]	@ (8009334 <HAL_RCC_GetSysClockFreq+0xd4>)
 80092dc:	60bb      	str	r3, [r7, #8]
        break;
 80092de:	e00a      	b.n	80092f6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80092e0:	f7ff f967 	bl	80085b2 <LL_RCC_MSI_GetRange>
 80092e4:	4603      	mov	r3, r0
 80092e6:	091b      	lsrs	r3, r3, #4
 80092e8:	f003 030f 	and.w	r3, r3, #15
 80092ec:	4a0f      	ldr	r2, [pc, #60]	@ (800932c <HAL_RCC_GetSysClockFreq+0xcc>)
 80092ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092f2:	60bb      	str	r3, [r7, #8]
        break;
 80092f4:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80092f6:	f7ff fa71 	bl	80087dc <LL_RCC_PLL_GetN>
 80092fa:	4602      	mov	r2, r0
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	fb03 f402 	mul.w	r4, r3, r2
 8009302:	f7ff fa84 	bl	800880e <LL_RCC_PLL_GetDivider>
 8009306:	4603      	mov	r3, r0
 8009308:	091b      	lsrs	r3, r3, #4
 800930a:	3301      	adds	r3, #1
 800930c:	fbb4 f4f3 	udiv	r4, r4, r3
 8009310:	f7ff fa71 	bl	80087f6 <LL_RCC_PLL_GetR>
 8009314:	4603      	mov	r3, r0
 8009316:	0f5b      	lsrs	r3, r3, #29
 8009318:	3301      	adds	r3, #1
 800931a:	fbb4 f3f3 	udiv	r3, r4, r3
 800931e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8009320:	68fb      	ldr	r3, [r7, #12]
}
 8009322:	4618      	mov	r0, r3
 8009324:	3714      	adds	r7, #20
 8009326:	46bd      	mov	sp, r7
 8009328:	bd90      	pop	{r4, r7, pc}
 800932a:	bf00      	nop
 800932c:	08015504 	.word	0x08015504
 8009330:	00f42400 	.word	0x00f42400
 8009334:	01e84800 	.word	0x01e84800

08009338 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009338:	b598      	push	{r3, r4, r7, lr}
 800933a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800933c:	f7ff ff90 	bl	8009260 <HAL_RCC_GetSysClockFreq>
 8009340:	4604      	mov	r4, r0
 8009342:	f7ff f9e9 	bl	8008718 <LL_RCC_GetAHBPrescaler>
 8009346:	4603      	mov	r3, r0
 8009348:	091b      	lsrs	r3, r3, #4
 800934a:	f003 030f 	and.w	r3, r3, #15
 800934e:	4a03      	ldr	r2, [pc, #12]	@ (800935c <HAL_RCC_GetHCLKFreq+0x24>)
 8009350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009354:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8009358:	4618      	mov	r0, r3
 800935a:	bd98      	pop	{r3, r4, r7, pc}
 800935c:	080154a4 	.word	0x080154a4

08009360 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009360:	b598      	push	{r3, r4, r7, lr}
 8009362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8009364:	f7ff ffe8 	bl	8009338 <HAL_RCC_GetHCLKFreq>
 8009368:	4604      	mov	r4, r0
 800936a:	f7ff f9ef 	bl	800874c <LL_RCC_GetAPB1Prescaler>
 800936e:	4603      	mov	r3, r0
 8009370:	0a1b      	lsrs	r3, r3, #8
 8009372:	f003 0307 	and.w	r3, r3, #7
 8009376:	4a04      	ldr	r2, [pc, #16]	@ (8009388 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800937c:	f003 031f 	and.w	r3, r3, #31
 8009380:	fa24 f303 	lsr.w	r3, r4, r3
}
 8009384:	4618      	mov	r0, r3
 8009386:	bd98      	pop	{r3, r4, r7, pc}
 8009388:	080154e4 	.word	0x080154e4

0800938c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800938c:	b598      	push	{r3, r4, r7, lr}
 800938e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8009390:	f7ff ffd2 	bl	8009338 <HAL_RCC_GetHCLKFreq>
 8009394:	4604      	mov	r4, r0
 8009396:	f7ff f9e5 	bl	8008764 <LL_RCC_GetAPB2Prescaler>
 800939a:	4603      	mov	r3, r0
 800939c:	0adb      	lsrs	r3, r3, #11
 800939e:	f003 0307 	and.w	r3, r3, #7
 80093a2:	4a04      	ldr	r2, [pc, #16]	@ (80093b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80093a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093a8:	f003 031f 	and.w	r3, r3, #31
 80093ac:	fa24 f303 	lsr.w	r3, r4, r3
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	bd98      	pop	{r3, r4, r7, pc}
 80093b4:	080154e4 	.word	0x080154e4

080093b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80093b8:	b590      	push	{r4, r7, lr}
 80093ba:	b085      	sub	sp, #20
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2bb0      	cmp	r3, #176	@ 0xb0
 80093c4:	d903      	bls.n	80093ce <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80093c6:	4b15      	ldr	r3, [pc, #84]	@ (800941c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80093c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093ca:	60fb      	str	r3, [r7, #12]
 80093cc:	e007      	b.n	80093de <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	091b      	lsrs	r3, r3, #4
 80093d2:	f003 030f 	and.w	r3, r3, #15
 80093d6:	4a11      	ldr	r2, [pc, #68]	@ (800941c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80093d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093dc:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80093de:	f7ff f9a7 	bl	8008730 <LL_RCC_GetAHB4Prescaler>
 80093e2:	4603      	mov	r3, r0
 80093e4:	091b      	lsrs	r3, r3, #4
 80093e6:	f003 030f 	and.w	r3, r3, #15
 80093ea:	4a0d      	ldr	r2, [pc, #52]	@ (8009420 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80093ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093f0:	68fa      	ldr	r2, [r7, #12]
 80093f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80093f6:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	4a0a      	ldr	r2, [pc, #40]	@ (8009424 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80093fc:	fba2 2303 	umull	r2, r3, r2, r3
 8009400:	0c9c      	lsrs	r4, r3, #18
 8009402:	f7fe fef5 	bl	80081f0 <HAL_PWREx_GetVoltageRange>
 8009406:	4603      	mov	r3, r0
 8009408:	4619      	mov	r1, r3
 800940a:	4620      	mov	r0, r4
 800940c:	f000 f80c 	bl	8009428 <RCC_SetFlashLatency>
 8009410:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8009412:	4618      	mov	r0, r3
 8009414:	3714      	adds	r7, #20
 8009416:	46bd      	mov	sp, r7
 8009418:	bd90      	pop	{r4, r7, pc}
 800941a:	bf00      	nop
 800941c:	08015504 	.word	0x08015504
 8009420:	080154a4 	.word	0x080154a4
 8009424:	431bde83 	.word	0x431bde83

08009428 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8009428:	b590      	push	{r4, r7, lr}
 800942a:	b093      	sub	sp, #76	@ 0x4c
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
 8009430:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8009432:	4b37      	ldr	r3, [pc, #220]	@ (8009510 <RCC_SetFlashLatency+0xe8>)
 8009434:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8009438:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800943a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800943e:	4a35      	ldr	r2, [pc, #212]	@ (8009514 <RCC_SetFlashLatency+0xec>)
 8009440:	f107 031c 	add.w	r3, r7, #28
 8009444:	ca07      	ldmia	r2, {r0, r1, r2}
 8009446:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800944a:	4b33      	ldr	r3, [pc, #204]	@ (8009518 <RCC_SetFlashLatency+0xf0>)
 800944c:	f107 040c 	add.w	r4, r7, #12
 8009450:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009452:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8009456:	2300      	movs	r3, #0
 8009458:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009460:	d11a      	bne.n	8009498 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8009462:	2300      	movs	r3, #0
 8009464:	643b      	str	r3, [r7, #64]	@ 0x40
 8009466:	e013      	b.n	8009490 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8009468:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800946a:	009b      	lsls	r3, r3, #2
 800946c:	3348      	adds	r3, #72	@ 0x48
 800946e:	443b      	add	r3, r7
 8009470:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8009474:	687a      	ldr	r2, [r7, #4]
 8009476:	429a      	cmp	r2, r3
 8009478:	d807      	bhi.n	800948a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800947a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800947c:	009b      	lsls	r3, r3, #2
 800947e:	3348      	adds	r3, #72	@ 0x48
 8009480:	443b      	add	r3, r7
 8009482:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8009486:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8009488:	e020      	b.n	80094cc <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800948a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800948c:	3301      	adds	r3, #1
 800948e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009490:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009492:	2b03      	cmp	r3, #3
 8009494:	d9e8      	bls.n	8009468 <RCC_SetFlashLatency+0x40>
 8009496:	e019      	b.n	80094cc <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8009498:	2300      	movs	r3, #0
 800949a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800949c:	e013      	b.n	80094c6 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800949e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094a0:	009b      	lsls	r3, r3, #2
 80094a2:	3348      	adds	r3, #72	@ 0x48
 80094a4:	443b      	add	r3, r7
 80094a6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80094aa:	687a      	ldr	r2, [r7, #4]
 80094ac:	429a      	cmp	r2, r3
 80094ae:	d807      	bhi.n	80094c0 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80094b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094b2:	009b      	lsls	r3, r3, #2
 80094b4:	3348      	adds	r3, #72	@ 0x48
 80094b6:	443b      	add	r3, r7
 80094b8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80094bc:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 80094be:	e005      	b.n	80094cc <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80094c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094c2:	3301      	adds	r3, #1
 80094c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80094c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094c8:	2b02      	cmp	r3, #2
 80094ca:	d9e8      	bls.n	800949e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80094cc:	4b13      	ldr	r3, [pc, #76]	@ (800951c <RCC_SetFlashLatency+0xf4>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f023 0207 	bic.w	r2, r3, #7
 80094d4:	4911      	ldr	r1, [pc, #68]	@ (800951c <RCC_SetFlashLatency+0xf4>)
 80094d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80094d8:	4313      	orrs	r3, r2
 80094da:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80094dc:	f7fd fe04 	bl	80070e8 <HAL_GetTick>
 80094e0:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80094e2:	e008      	b.n	80094f6 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80094e4:	f7fd fe00 	bl	80070e8 <HAL_GetTick>
 80094e8:	4602      	mov	r2, r0
 80094ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094ec:	1ad3      	subs	r3, r2, r3
 80094ee:	2b02      	cmp	r3, #2
 80094f0:	d901      	bls.n	80094f6 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80094f2:	2303      	movs	r3, #3
 80094f4:	e007      	b.n	8009506 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80094f6:	4b09      	ldr	r3, [pc, #36]	@ (800951c <RCC_SetFlashLatency+0xf4>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f003 0307 	and.w	r3, r3, #7
 80094fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009500:	429a      	cmp	r2, r3
 8009502:	d1ef      	bne.n	80094e4 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8009504:	2300      	movs	r3, #0
}
 8009506:	4618      	mov	r0, r3
 8009508:	374c      	adds	r7, #76	@ 0x4c
 800950a:	46bd      	mov	sp, r7
 800950c:	bd90      	pop	{r4, r7, pc}
 800950e:	bf00      	nop
 8009510:	08015294 	.word	0x08015294
 8009514:	080152a4 	.word	0x080152a4
 8009518:	080152b0 	.word	0x080152b0
 800951c:	58004000 	.word	0x58004000

08009520 <LL_RCC_LSE_IsEnabled>:
{
 8009520:	b480      	push	{r7}
 8009522:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8009524:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009528:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800952c:	f003 0301 	and.w	r3, r3, #1
 8009530:	2b01      	cmp	r3, #1
 8009532:	d101      	bne.n	8009538 <LL_RCC_LSE_IsEnabled+0x18>
 8009534:	2301      	movs	r3, #1
 8009536:	e000      	b.n	800953a <LL_RCC_LSE_IsEnabled+0x1a>
 8009538:	2300      	movs	r3, #0
}
 800953a:	4618      	mov	r0, r3
 800953c:	46bd      	mov	sp, r7
 800953e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009542:	4770      	bx	lr

08009544 <LL_RCC_LSE_IsReady>:
{
 8009544:	b480      	push	{r7}
 8009546:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8009548:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800954c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009550:	f003 0302 	and.w	r3, r3, #2
 8009554:	2b02      	cmp	r3, #2
 8009556:	d101      	bne.n	800955c <LL_RCC_LSE_IsReady+0x18>
 8009558:	2301      	movs	r3, #1
 800955a:	e000      	b.n	800955e <LL_RCC_LSE_IsReady+0x1a>
 800955c:	2300      	movs	r3, #0
}
 800955e:	4618      	mov	r0, r3
 8009560:	46bd      	mov	sp, r7
 8009562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009566:	4770      	bx	lr

08009568 <LL_RCC_SetRFWKPClockSource>:
{
 8009568:	b480      	push	{r7}
 800956a:	b083      	sub	sp, #12
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8009570:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009574:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009578:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800957c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	4313      	orrs	r3, r2
 8009584:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8009588:	bf00      	nop
 800958a:	370c      	adds	r7, #12
 800958c:	46bd      	mov	sp, r7
 800958e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009592:	4770      	bx	lr

08009594 <LL_RCC_SetSMPSClockSource>:
{
 8009594:	b480      	push	{r7}
 8009596:	b083      	sub	sp, #12
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800959c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80095a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095a2:	f023 0203 	bic.w	r2, r3, #3
 80095a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	4313      	orrs	r3, r2
 80095ae:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80095b0:	bf00      	nop
 80095b2:	370c      	adds	r7, #12
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	4770      	bx	lr

080095bc <LL_RCC_SetSMPSPrescaler>:
{
 80095bc:	b480      	push	{r7}
 80095be:	b083      	sub	sp, #12
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80095c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80095c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095ca:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80095ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	4313      	orrs	r3, r2
 80095d6:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80095d8:	bf00      	nop
 80095da:	370c      	adds	r7, #12
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr

080095e4 <LL_RCC_SetUSARTClockSource>:
{
 80095e4:	b480      	push	{r7}
 80095e6:	b083      	sub	sp, #12
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80095ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80095f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095f4:	f023 0203 	bic.w	r2, r3, #3
 80095f8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	4313      	orrs	r3, r2
 8009600:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8009604:	bf00      	nop
 8009606:	370c      	adds	r7, #12
 8009608:	46bd      	mov	sp, r7
 800960a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960e:	4770      	bx	lr

08009610 <LL_RCC_SetLPUARTClockSource>:
{
 8009610:	b480      	push	{r7}
 8009612:	b083      	sub	sp, #12
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8009618:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800961c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009620:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009624:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	4313      	orrs	r3, r2
 800962c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8009630:	bf00      	nop
 8009632:	370c      	adds	r7, #12
 8009634:	46bd      	mov	sp, r7
 8009636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963a:	4770      	bx	lr

0800963c <LL_RCC_SetI2CClockSource>:
{
 800963c:	b480      	push	{r7}
 800963e:	b083      	sub	sp, #12
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8009644:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009648:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	091b      	lsrs	r3, r3, #4
 8009650:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8009654:	43db      	mvns	r3, r3
 8009656:	401a      	ands	r2, r3
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	011b      	lsls	r3, r3, #4
 800965c:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8009660:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009664:	4313      	orrs	r3, r2
 8009666:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800966a:	bf00      	nop
 800966c:	370c      	adds	r7, #12
 800966e:	46bd      	mov	sp, r7
 8009670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009674:	4770      	bx	lr

08009676 <LL_RCC_SetLPTIMClockSource>:
{
 8009676:	b480      	push	{r7}
 8009678:	b083      	sub	sp, #12
 800967a:	af00      	add	r7, sp, #0
 800967c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800967e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009682:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	0c1b      	lsrs	r3, r3, #16
 800968a:	041b      	lsls	r3, r3, #16
 800968c:	43db      	mvns	r3, r3
 800968e:	401a      	ands	r2, r3
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	041b      	lsls	r3, r3, #16
 8009694:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009698:	4313      	orrs	r3, r2
 800969a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800969e:	bf00      	nop
 80096a0:	370c      	adds	r7, #12
 80096a2:	46bd      	mov	sp, r7
 80096a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a8:	4770      	bx	lr

080096aa <LL_RCC_SetSAIClockSource>:
{
 80096aa:	b480      	push	{r7}
 80096ac:	b083      	sub	sp, #12
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80096b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80096b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096ba:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80096be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	4313      	orrs	r3, r2
 80096c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80096ca:	bf00      	nop
 80096cc:	370c      	adds	r7, #12
 80096ce:	46bd      	mov	sp, r7
 80096d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d4:	4770      	bx	lr

080096d6 <LL_RCC_SetRNGClockSource>:
{
 80096d6:	b480      	push	{r7}
 80096d8:	b083      	sub	sp, #12
 80096da:	af00      	add	r7, sp, #0
 80096dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80096de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80096e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096e6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80096ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	4313      	orrs	r3, r2
 80096f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80096f6:	bf00      	nop
 80096f8:	370c      	adds	r7, #12
 80096fa:	46bd      	mov	sp, r7
 80096fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009700:	4770      	bx	lr

08009702 <LL_RCC_SetCLK48ClockSource>:
{
 8009702:	b480      	push	{r7}
 8009704:	b083      	sub	sp, #12
 8009706:	af00      	add	r7, sp, #0
 8009708:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800970a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800970e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009712:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009716:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	4313      	orrs	r3, r2
 800971e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8009722:	bf00      	nop
 8009724:	370c      	adds	r7, #12
 8009726:	46bd      	mov	sp, r7
 8009728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972c:	4770      	bx	lr

0800972e <LL_RCC_SetUSBClockSource>:
{
 800972e:	b580      	push	{r7, lr}
 8009730:	b082      	sub	sp, #8
 8009732:	af00      	add	r7, sp, #0
 8009734:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f7ff ffe3 	bl	8009702 <LL_RCC_SetCLK48ClockSource>
}
 800973c:	bf00      	nop
 800973e:	3708      	adds	r7, #8
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}

08009744 <LL_RCC_SetADCClockSource>:
{
 8009744:	b480      	push	{r7}
 8009746:	b083      	sub	sp, #12
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800974c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009750:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009754:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8009758:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	4313      	orrs	r3, r2
 8009760:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8009764:	bf00      	nop
 8009766:	370c      	adds	r7, #12
 8009768:	46bd      	mov	sp, r7
 800976a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976e:	4770      	bx	lr

08009770 <LL_RCC_SetRTCClockSource>:
{
 8009770:	b480      	push	{r7}
 8009772:	b083      	sub	sp, #12
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8009778:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800977c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009780:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009784:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	4313      	orrs	r3, r2
 800978c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8009790:	bf00      	nop
 8009792:	370c      	adds	r7, #12
 8009794:	46bd      	mov	sp, r7
 8009796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979a:	4770      	bx	lr

0800979c <LL_RCC_GetRTCClockSource>:
{
 800979c:	b480      	push	{r7}
 800979e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80097a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80097a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	46bd      	mov	sp, r7
 80097b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b4:	4770      	bx	lr

080097b6 <LL_RCC_ForceBackupDomainReset>:
{
 80097b6:	b480      	push	{r7}
 80097b8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80097ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80097be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80097c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80097ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80097ce:	bf00      	nop
 80097d0:	46bd      	mov	sp, r7
 80097d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d6:	4770      	bx	lr

080097d8 <LL_RCC_ReleaseBackupDomainReset>:
{
 80097d8:	b480      	push	{r7}
 80097da:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80097dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80097e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80097e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80097ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80097f0:	bf00      	nop
 80097f2:	46bd      	mov	sp, r7
 80097f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f8:	4770      	bx	lr

080097fa <LL_RCC_PLLSAI1_Enable>:
{
 80097fa:	b480      	push	{r7}
 80097fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80097fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009808:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800980c:	6013      	str	r3, [r2, #0]
}
 800980e:	bf00      	nop
 8009810:	46bd      	mov	sp, r7
 8009812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009816:	4770      	bx	lr

08009818 <LL_RCC_PLLSAI1_Disable>:
{
 8009818:	b480      	push	{r7}
 800981a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800981c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009826:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800982a:	6013      	str	r3, [r2, #0]
}
 800982c:	bf00      	nop
 800982e:	46bd      	mov	sp, r7
 8009830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009834:	4770      	bx	lr

08009836 <LL_RCC_PLLSAI1_IsReady>:
{
 8009836:	b480      	push	{r7}
 8009838:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800983a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009844:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009848:	d101      	bne.n	800984e <LL_RCC_PLLSAI1_IsReady+0x18>
 800984a:	2301      	movs	r3, #1
 800984c:	e000      	b.n	8009850 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800984e:	2300      	movs	r3, #0
}
 8009850:	4618      	mov	r0, r3
 8009852:	46bd      	mov	sp, r7
 8009854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009858:	4770      	bx	lr

0800985a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800985a:	b580      	push	{r7, lr}
 800985c:	b088      	sub	sp, #32
 800985e:	af00      	add	r7, sp, #0
 8009860:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8009862:	2300      	movs	r3, #0
 8009864:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8009866:	2300      	movs	r3, #0
 8009868:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009872:	2b00      	cmp	r3, #0
 8009874:	d034      	beq.n	80098e0 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800987a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800987e:	d021      	beq.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8009880:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8009884:	d81b      	bhi.n	80098be <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009886:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800988a:	d01d      	beq.n	80098c8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800988c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009890:	d815      	bhi.n	80098be <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009892:	2b00      	cmp	r3, #0
 8009894:	d00b      	beq.n	80098ae <HAL_RCCEx_PeriphCLKConfig+0x54>
 8009896:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800989a:	d110      	bne.n	80098be <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800989c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80098a0:	68db      	ldr	r3, [r3, #12]
 80098a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80098a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80098aa:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80098ac:	e00d      	b.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	3304      	adds	r3, #4
 80098b2:	4618      	mov	r0, r3
 80098b4:	f000 f947 	bl	8009b46 <RCCEx_PLLSAI1_ConfigNP>
 80098b8:	4603      	mov	r3, r0
 80098ba:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80098bc:	e005      	b.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80098be:	2301      	movs	r3, #1
 80098c0:	77fb      	strb	r3, [r7, #31]
        break;
 80098c2:	e002      	b.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80098c4:	bf00      	nop
 80098c6:	e000      	b.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80098c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098ca:	7ffb      	ldrb	r3, [r7, #31]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d105      	bne.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098d4:	4618      	mov	r0, r3
 80098d6:	f7ff fee8 	bl	80096aa <LL_RCC_SetSAIClockSource>
 80098da:	e001      	b.n	80098e0 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098dc:	7ffb      	ldrb	r3, [r7, #31]
 80098de:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d046      	beq.n	800997a <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80098ec:	f7ff ff56 	bl	800979c <LL_RCC_GetRTCClockSource>
 80098f0:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098f6:	69ba      	ldr	r2, [r7, #24]
 80098f8:	429a      	cmp	r2, r3
 80098fa:	d03c      	beq.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80098fc:	f7fe fc68 	bl	80081d0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8009900:	69bb      	ldr	r3, [r7, #24]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d105      	bne.n	8009912 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800990a:	4618      	mov	r0, r3
 800990c:	f7ff ff30 	bl	8009770 <LL_RCC_SetRTCClockSource>
 8009910:	e02e      	b.n	8009970 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8009912:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009916:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800991a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800991c:	f7ff ff4b 	bl	80097b6 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8009920:	f7ff ff5a 	bl	80097d8 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800992e:	4313      	orrs	r3, r2
 8009930:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8009932:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800993c:	f7ff fdf0 	bl	8009520 <LL_RCC_LSE_IsEnabled>
 8009940:	4603      	mov	r3, r0
 8009942:	2b01      	cmp	r3, #1
 8009944:	d114      	bne.n	8009970 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009946:	f7fd fbcf 	bl	80070e8 <HAL_GetTick>
 800994a:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800994c:	e00b      	b.n	8009966 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800994e:	f7fd fbcb 	bl	80070e8 <HAL_GetTick>
 8009952:	4602      	mov	r2, r0
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	1ad3      	subs	r3, r2, r3
 8009958:	f241 3288 	movw	r2, #5000	@ 0x1388
 800995c:	4293      	cmp	r3, r2
 800995e:	d902      	bls.n	8009966 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8009960:	2303      	movs	r3, #3
 8009962:	77fb      	strb	r3, [r7, #31]
              break;
 8009964:	e004      	b.n	8009970 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8009966:	f7ff fded 	bl	8009544 <LL_RCC_LSE_IsReady>
 800996a:	4603      	mov	r3, r0
 800996c:	2b01      	cmp	r3, #1
 800996e:	d1ee      	bne.n	800994e <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8009970:	7ffb      	ldrb	r3, [r7, #31]
 8009972:	77bb      	strb	r3, [r7, #30]
 8009974:	e001      	b.n	800997a <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009976:	7ffb      	ldrb	r3, [r7, #31]
 8009978:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f003 0301 	and.w	r3, r3, #1
 8009982:	2b00      	cmp	r3, #0
 8009984:	d004      	beq.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	699b      	ldr	r3, [r3, #24]
 800998a:	4618      	mov	r0, r3
 800998c:	f7ff fe2a 	bl	80095e4 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f003 0302 	and.w	r3, r3, #2
 8009998:	2b00      	cmp	r3, #0
 800999a:	d004      	beq.n	80099a6 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	69db      	ldr	r3, [r3, #28]
 80099a0:	4618      	mov	r0, r3
 80099a2:	f7ff fe35 	bl	8009610 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f003 0310 	and.w	r3, r3, #16
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d004      	beq.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099b6:	4618      	mov	r0, r3
 80099b8:	f7ff fe5d 	bl	8009676 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f003 0320 	and.w	r3, r3, #32
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d004      	beq.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099cc:	4618      	mov	r0, r3
 80099ce:	f7ff fe52 	bl	8009676 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f003 0304 	and.w	r3, r3, #4
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d004      	beq.n	80099e8 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6a1b      	ldr	r3, [r3, #32]
 80099e2:	4618      	mov	r0, r3
 80099e4:	f7ff fe2a 	bl	800963c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f003 0308 	and.w	r3, r3, #8
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d004      	beq.n	80099fe <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099f8:	4618      	mov	r0, r3
 80099fa:	f7ff fe1f 	bl	800963c <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d022      	beq.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f7ff fe8d 	bl	800972e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a18:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009a1c:	d107      	bne.n	8009a2e <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8009a1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009a22:	68db      	ldr	r3, [r3, #12]
 8009a24:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009a28:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009a2c:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a32:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009a36:	d10b      	bne.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	3304      	adds	r3, #4
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	f000 f8dd 	bl	8009bfc <RCCEx_PLLSAI1_ConfigNQ>
 8009a42:	4603      	mov	r3, r0
 8009a44:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8009a46:	7ffb      	ldrb	r3, [r7, #31]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d001      	beq.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8009a4c:	7ffb      	ldrb	r3, [r7, #31]
 8009a4e:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d02b      	beq.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a64:	d008      	beq.n	8009a78 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a6a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009a6e:	d003      	beq.n	8009a78 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d105      	bne.n	8009a84 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f7ff fe2a 	bl	80096d6 <LL_RCC_SetRNGClockSource>
 8009a82:	e00a      	b.n	8009a9a <HAL_RCCEx_PeriphCLKConfig+0x240>
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009a8c:	60fb      	str	r3, [r7, #12]
 8009a8e:	2000      	movs	r0, #0
 8009a90:	f7ff fe21 	bl	80096d6 <LL_RCC_SetRNGClockSource>
 8009a94:	68f8      	ldr	r0, [r7, #12]
 8009a96:	f7ff fe34 	bl	8009702 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a9e:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8009aa2:	d107      	bne.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8009aa4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009aa8:	68db      	ldr	r3, [r3, #12]
 8009aaa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009aae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009ab2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d022      	beq.n	8009b06 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f7ff fe3d 	bl	8009744 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ace:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009ad2:	d107      	bne.n	8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009ad4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009ad8:	68db      	ldr	r3, [r3, #12]
 8009ada:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009ade:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009ae2:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ae8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009aec:	d10b      	bne.n	8009b06 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	3304      	adds	r3, #4
 8009af2:	4618      	mov	r0, r3
 8009af4:	f000 f8dd 	bl	8009cb2 <RCCEx_PLLSAI1_ConfigNR>
 8009af8:	4603      	mov	r3, r0
 8009afa:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8009afc:	7ffb      	ldrb	r3, [r7, #31]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d001      	beq.n	8009b06 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8009b02:	7ffb      	ldrb	r3, [r7, #31]
 8009b04:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d004      	beq.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b16:	4618      	mov	r0, r3
 8009b18:	f7ff fd26 	bl	8009568 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d009      	beq.n	8009b3c <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f7ff fd45 	bl	80095bc <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009b36:	4618      	mov	r0, r3
 8009b38:	f7ff fd2c 	bl	8009594 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8009b3c:	7fbb      	ldrb	r3, [r7, #30]
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3720      	adds	r7, #32
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}

08009b46 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8009b46:	b580      	push	{r7, lr}
 8009b48:	b084      	sub	sp, #16
 8009b4a:	af00      	add	r7, sp, #0
 8009b4c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8009b52:	f7ff fe61 	bl	8009818 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009b56:	f7fd fac7 	bl	80070e8 <HAL_GetTick>
 8009b5a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009b5c:	e009      	b.n	8009b72 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009b5e:	f7fd fac3 	bl	80070e8 <HAL_GetTick>
 8009b62:	4602      	mov	r2, r0
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	1ad3      	subs	r3, r2, r3
 8009b68:	2b02      	cmp	r3, #2
 8009b6a:	d902      	bls.n	8009b72 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8009b6c:	2303      	movs	r3, #3
 8009b6e:	73fb      	strb	r3, [r7, #15]
      break;
 8009b70:	e004      	b.n	8009b7c <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009b72:	f7ff fe60 	bl	8009836 <LL_RCC_PLLSAI1_IsReady>
 8009b76:	4603      	mov	r3, r0
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d1f0      	bne.n	8009b5e <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8009b7c:	7bfb      	ldrb	r3, [r7, #15]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d137      	bne.n	8009bf2 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8009b82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009b86:	691b      	ldr	r3, [r3, #16]
 8009b88:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	021b      	lsls	r3, r3, #8
 8009b92:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009b96:	4313      	orrs	r3, r2
 8009b98:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8009b9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009b9e:	691b      	ldr	r3, [r3, #16]
 8009ba0:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	685b      	ldr	r3, [r3, #4]
 8009ba8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009bac:	4313      	orrs	r3, r2
 8009bae:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8009bb0:	f7ff fe23 	bl	80097fa <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009bb4:	f7fd fa98 	bl	80070e8 <HAL_GetTick>
 8009bb8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009bba:	e009      	b.n	8009bd0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009bbc:	f7fd fa94 	bl	80070e8 <HAL_GetTick>
 8009bc0:	4602      	mov	r2, r0
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	1ad3      	subs	r3, r2, r3
 8009bc6:	2b02      	cmp	r3, #2
 8009bc8:	d902      	bls.n	8009bd0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8009bca:	2303      	movs	r3, #3
 8009bcc:	73fb      	strb	r3, [r7, #15]
        break;
 8009bce:	e004      	b.n	8009bda <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009bd0:	f7ff fe31 	bl	8009836 <LL_RCC_PLLSAI1_IsReady>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	2b01      	cmp	r3, #1
 8009bd8:	d1f0      	bne.n	8009bbc <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8009bda:	7bfb      	ldrb	r3, [r7, #15]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d108      	bne.n	8009bf2 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8009be0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009be4:	691a      	ldr	r2, [r3, #16]
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	691b      	ldr	r3, [r3, #16]
 8009bea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009bee:	4313      	orrs	r3, r2
 8009bf0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8009bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	3710      	adds	r7, #16
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}

08009bfc <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b084      	sub	sp, #16
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009c04:	2300      	movs	r3, #0
 8009c06:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8009c08:	f7ff fe06 	bl	8009818 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009c0c:	f7fd fa6c 	bl	80070e8 <HAL_GetTick>
 8009c10:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009c12:	e009      	b.n	8009c28 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009c14:	f7fd fa68 	bl	80070e8 <HAL_GetTick>
 8009c18:	4602      	mov	r2, r0
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	1ad3      	subs	r3, r2, r3
 8009c1e:	2b02      	cmp	r3, #2
 8009c20:	d902      	bls.n	8009c28 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8009c22:	2303      	movs	r3, #3
 8009c24:	73fb      	strb	r3, [r7, #15]
      break;
 8009c26:	e004      	b.n	8009c32 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009c28:	f7ff fe05 	bl	8009836 <LL_RCC_PLLSAI1_IsReady>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d1f0      	bne.n	8009c14 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8009c32:	7bfb      	ldrb	r3, [r7, #15]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d137      	bne.n	8009ca8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8009c38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009c3c:	691b      	ldr	r3, [r3, #16]
 8009c3e:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	021b      	lsls	r3, r3, #8
 8009c48:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009c4c:	4313      	orrs	r3, r2
 8009c4e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8009c50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009c54:	691b      	ldr	r3, [r3, #16]
 8009c56:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	689b      	ldr	r3, [r3, #8]
 8009c5e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009c62:	4313      	orrs	r3, r2
 8009c64:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8009c66:	f7ff fdc8 	bl	80097fa <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c6a:	f7fd fa3d 	bl	80070e8 <HAL_GetTick>
 8009c6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009c70:	e009      	b.n	8009c86 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009c72:	f7fd fa39 	bl	80070e8 <HAL_GetTick>
 8009c76:	4602      	mov	r2, r0
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	1ad3      	subs	r3, r2, r3
 8009c7c:	2b02      	cmp	r3, #2
 8009c7e:	d902      	bls.n	8009c86 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8009c80:	2303      	movs	r3, #3
 8009c82:	73fb      	strb	r3, [r7, #15]
        break;
 8009c84:	e004      	b.n	8009c90 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009c86:	f7ff fdd6 	bl	8009836 <LL_RCC_PLLSAI1_IsReady>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	2b01      	cmp	r3, #1
 8009c8e:	d1f0      	bne.n	8009c72 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8009c90:	7bfb      	ldrb	r3, [r7, #15]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d108      	bne.n	8009ca8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8009c96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009c9a:	691a      	ldr	r2, [r3, #16]
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	691b      	ldr	r3, [r3, #16]
 8009ca0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009ca4:	4313      	orrs	r3, r2
 8009ca6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8009ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3710      	adds	r7, #16
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}

08009cb2 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8009cb2:	b580      	push	{r7, lr}
 8009cb4:	b084      	sub	sp, #16
 8009cb6:	af00      	add	r7, sp, #0
 8009cb8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8009cbe:	f7ff fdab 	bl	8009818 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009cc2:	f7fd fa11 	bl	80070e8 <HAL_GetTick>
 8009cc6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009cc8:	e009      	b.n	8009cde <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009cca:	f7fd fa0d 	bl	80070e8 <HAL_GetTick>
 8009cce:	4602      	mov	r2, r0
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	1ad3      	subs	r3, r2, r3
 8009cd4:	2b02      	cmp	r3, #2
 8009cd6:	d902      	bls.n	8009cde <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8009cd8:	2303      	movs	r3, #3
 8009cda:	73fb      	strb	r3, [r7, #15]
      break;
 8009cdc:	e004      	b.n	8009ce8 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009cde:	f7ff fdaa 	bl	8009836 <LL_RCC_PLLSAI1_IsReady>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d1f0      	bne.n	8009cca <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8009ce8:	7bfb      	ldrb	r3, [r7, #15]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d137      	bne.n	8009d5e <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8009cee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009cf2:	691b      	ldr	r3, [r3, #16]
 8009cf4:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	021b      	lsls	r3, r3, #8
 8009cfe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009d02:	4313      	orrs	r3, r2
 8009d04:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8009d06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009d0a:	691b      	ldr	r3, [r3, #16]
 8009d0c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	68db      	ldr	r3, [r3, #12]
 8009d14:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009d18:	4313      	orrs	r3, r2
 8009d1a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8009d1c:	f7ff fd6d 	bl	80097fa <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d20:	f7fd f9e2 	bl	80070e8 <HAL_GetTick>
 8009d24:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009d26:	e009      	b.n	8009d3c <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009d28:	f7fd f9de 	bl	80070e8 <HAL_GetTick>
 8009d2c:	4602      	mov	r2, r0
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	1ad3      	subs	r3, r2, r3
 8009d32:	2b02      	cmp	r3, #2
 8009d34:	d902      	bls.n	8009d3c <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8009d36:	2303      	movs	r3, #3
 8009d38:	73fb      	strb	r3, [r7, #15]
        break;
 8009d3a:	e004      	b.n	8009d46 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009d3c:	f7ff fd7b 	bl	8009836 <LL_RCC_PLLSAI1_IsReady>
 8009d40:	4603      	mov	r3, r0
 8009d42:	2b01      	cmp	r3, #1
 8009d44:	d1f0      	bne.n	8009d28 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8009d46:	7bfb      	ldrb	r3, [r7, #15]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d108      	bne.n	8009d5e <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8009d4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009d50:	691a      	ldr	r2, [r3, #16]
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	691b      	ldr	r3, [r3, #16]
 8009d56:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009d5a:	4313      	orrs	r3, r2
 8009d5c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8009d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	3710      	adds	r7, #16
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}

08009d68 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b084      	sub	sp, #16
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d101      	bne.n	8009d7a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8009d76:	2301      	movs	r3, #1
 8009d78:	e07a      	b.n	8009e70 <HAL_RTC_Init+0x108>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009d80:	b2db      	uxtb	r3, r3
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d106      	bne.n	8009d94 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f7f9 f97e 	bl	8003090 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2202      	movs	r2, #2
 8009d98:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	68db      	ldr	r3, [r3, #12]
 8009da2:	f003 0310 	and.w	r3, r3, #16
 8009da6:	2b10      	cmp	r3, #16
 8009da8:	d058      	beq.n	8009e5c <HAL_RTC_Init+0xf4>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	22ca      	movs	r2, #202	@ 0xca
 8009db0:	625a      	str	r2, [r3, #36]	@ 0x24
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	2253      	movs	r2, #83	@ 0x53
 8009db8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f000 f882 	bl	8009ec4 <RTC_EnterInitMode>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8009dc4:	7bfb      	ldrb	r3, [r7, #15]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d12c      	bne.n	8009e24 <HAL_RTC_Init+0xbc>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	689b      	ldr	r3, [r3, #8]
 8009dd0:	687a      	ldr	r2, [r7, #4]
 8009dd2:	6812      	ldr	r2, [r2, #0]
 8009dd4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8009dd8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ddc:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	6899      	ldr	r1, [r3, #8]
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	685a      	ldr	r2, [r3, #4]
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	691b      	ldr	r3, [r3, #16]
 8009dec:	431a      	orrs	r2, r3
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	699b      	ldr	r3, [r3, #24]
 8009df2:	431a      	orrs	r2, r3
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	430a      	orrs	r2, r1
 8009dfa:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	687a      	ldr	r2, [r7, #4]
 8009e02:	68d2      	ldr	r2, [r2, #12]
 8009e04:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	6919      	ldr	r1, [r3, #16]
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	689b      	ldr	r3, [r3, #8]
 8009e10:	041a      	lsls	r2, r3, #16
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	430a      	orrs	r2, r1
 8009e18:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f000 f88a 	bl	8009f34 <RTC_ExitInitMode>
 8009e20:	4603      	mov	r3, r0
 8009e22:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8009e24:	7bfb      	ldrb	r3, [r7, #15]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d113      	bne.n	8009e52 <HAL_RTC_Init+0xea>
    {
#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f022 0203 	bic.w	r2, r2, #3
 8009e38:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	69da      	ldr	r2, [r3, #28]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	695b      	ldr	r3, [r3, #20]
 8009e48:	431a      	orrs	r2, r3
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	430a      	orrs	r2, r1
 8009e50:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutRemap);
#endif /* RTC_OR_ALARMOUTTYPE */
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	22ff      	movs	r2, #255	@ 0xff
 8009e58:	625a      	str	r2, [r3, #36]	@ 0x24
 8009e5a:	e001      	b.n	8009e60 <HAL_RTC_Init+0xf8>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8009e60:	7bfb      	ldrb	r3, [r7, #15]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d103      	bne.n	8009e6e <HAL_RTC_Init+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2201      	movs	r2, #1
 8009e6a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 8009e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3710      	adds	r7, #16
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}

08009e78 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b084      	sub	sp, #16
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009e80:	2300      	movs	r3, #0
 8009e82:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	4a0d      	ldr	r2, [pc, #52]	@ (8009ec0 <HAL_RTC_WaitForSynchro+0x48>)
 8009e8a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009e8c:	f7fd f92c 	bl	80070e8 <HAL_GetTick>
 8009e90:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009e92:	e009      	b.n	8009ea8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009e94:	f7fd f928 	bl	80070e8 <HAL_GetTick>
 8009e98:	4602      	mov	r2, r0
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	1ad3      	subs	r3, r2, r3
 8009e9e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009ea2:	d901      	bls.n	8009ea8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8009ea4:	2303      	movs	r3, #3
 8009ea6:	e007      	b.n	8009eb8 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	68db      	ldr	r3, [r3, #12]
 8009eae:	f003 0320 	and.w	r3, r3, #32
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d0ee      	beq.n	8009e94 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8009eb6:	2300      	movs	r3, #0
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	3710      	adds	r7, #16
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}
 8009ec0:	0001ff5f 	.word	0x0001ff5f

08009ec4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b084      	sub	sp, #16
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	68db      	ldr	r3, [r3, #12]
 8009eda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d123      	bne.n	8009f2a <RTC_EnterInitMode+0x66>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	68da      	ldr	r2, [r3, #12]
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009ef0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009ef2:	f7fd f8f9 	bl	80070e8 <HAL_GetTick>
 8009ef6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009ef8:	e00d      	b.n	8009f16 <RTC_EnterInitMode+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009efa:	f7fd f8f5 	bl	80070e8 <HAL_GetTick>
 8009efe:	4602      	mov	r2, r0
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	1ad3      	subs	r3, r2, r3
 8009f04:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009f08:	d905      	bls.n	8009f16 <RTC_EnterInitMode+0x52>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2204      	movs	r2, #4
 8009f0e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        status = HAL_ERROR;
 8009f12:	2301      	movs	r3, #1
 8009f14:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	68db      	ldr	r3, [r3, #12]
 8009f1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d102      	bne.n	8009f2a <RTC_EnterInitMode+0x66>
 8009f24:	7bfb      	ldrb	r3, [r7, #15]
 8009f26:	2b01      	cmp	r3, #1
 8009f28:	d1e7      	bne.n	8009efa <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8009f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	3710      	adds	r7, #16
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}

08009f34 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b084      	sub	sp, #16
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	68da      	ldr	r2, [r3, #12]
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009f4e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	689b      	ldr	r3, [r3, #8]
 8009f56:	f003 0320 	and.w	r3, r3, #32
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d10b      	bne.n	8009f76 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f7ff ff8a 	bl	8009e78 <HAL_RTC_WaitForSynchro>
 8009f64:	4603      	mov	r3, r0
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d005      	beq.n	8009f76 <RTC_ExitInitMode+0x42>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2204      	movs	r2, #4
 8009f6e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_ERROR;
 8009f72:	2301      	movs	r3, #1
 8009f74:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8009f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3710      	adds	r7, #16
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}

08009f80 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b083      	sub	sp, #12
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009f8e:	2b01      	cmp	r3, #1
 8009f90:	d101      	bne.n	8009f96 <HAL_RTCEx_EnableBypassShadow+0x16>
 8009f92:	2302      	movs	r3, #2
 8009f94:	e024      	b.n	8009fe0 <HAL_RTCEx_EnableBypassShadow+0x60>
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2201      	movs	r2, #1
 8009f9a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2202      	movs	r2, #2
 8009fa2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	22ca      	movs	r2, #202	@ 0xca
 8009fac:	625a      	str	r2, [r3, #36]	@ 0x24
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	2253      	movs	r2, #83	@ 0x53
 8009fb4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint32_t)RTC_CR_BYPSHAD;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	689a      	ldr	r2, [r3, #8]
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f042 0220 	orr.w	r2, r2, #32
 8009fc4:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	22ff      	movs	r2, #255	@ 0xff
 8009fcc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2201      	movs	r2, #1
 8009fd2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8009fde:	2300      	movs	r3, #0
}
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	370c      	adds	r7, #12
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fea:	4770      	bx	lr

08009fec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b084      	sub	sp, #16
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d101      	bne.n	8009ffe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	e095      	b.n	800a12a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a002:	2b00      	cmp	r3, #0
 800a004:	d108      	bne.n	800a018 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	685b      	ldr	r3, [r3, #4]
 800a00a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a00e:	d009      	beq.n	800a024 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2200      	movs	r2, #0
 800a014:	61da      	str	r2, [r3, #28]
 800a016:	e005      	b.n	800a024 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2200      	movs	r2, #0
 800a01c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2200      	movs	r2, #0
 800a022:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2200      	movs	r2, #0
 800a028:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a030:	b2db      	uxtb	r3, r3
 800a032:	2b00      	cmp	r3, #0
 800a034:	d106      	bne.n	800a044 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2200      	movs	r2, #0
 800a03a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f000 f877 	bl	800a132 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2202      	movs	r2, #2
 800a048:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	681a      	ldr	r2, [r3, #0]
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a05a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	68db      	ldr	r3, [r3, #12]
 800a060:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a064:	d902      	bls.n	800a06c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a066:	2300      	movs	r3, #0
 800a068:	60fb      	str	r3, [r7, #12]
 800a06a:	e002      	b.n	800a072 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a06c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a070:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	68db      	ldr	r3, [r3, #12]
 800a076:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800a07a:	d007      	beq.n	800a08c <HAL_SPI_Init+0xa0>
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	68db      	ldr	r3, [r3, #12]
 800a080:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a084:	d002      	beq.n	800a08c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2200      	movs	r2, #0
 800a08a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	685b      	ldr	r3, [r3, #4]
 800a090:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	689b      	ldr	r3, [r3, #8]
 800a098:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800a09c:	431a      	orrs	r2, r3
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	691b      	ldr	r3, [r3, #16]
 800a0a2:	f003 0302 	and.w	r3, r3, #2
 800a0a6:	431a      	orrs	r2, r3
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	695b      	ldr	r3, [r3, #20]
 800a0ac:	f003 0301 	and.w	r3, r3, #1
 800a0b0:	431a      	orrs	r2, r3
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	699b      	ldr	r3, [r3, #24]
 800a0b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a0ba:	431a      	orrs	r2, r3
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	69db      	ldr	r3, [r3, #28]
 800a0c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a0c4:	431a      	orrs	r2, r3
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6a1b      	ldr	r3, [r3, #32]
 800a0ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a0ce:	ea42 0103 	orr.w	r1, r2, r3
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0d6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	430a      	orrs	r2, r1
 800a0e0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	699b      	ldr	r3, [r3, #24]
 800a0e6:	0c1b      	lsrs	r3, r3, #16
 800a0e8:	f003 0204 	and.w	r2, r3, #4
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0f0:	f003 0310 	and.w	r3, r3, #16
 800a0f4:	431a      	orrs	r2, r3
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0fa:	f003 0308 	and.w	r3, r3, #8
 800a0fe:	431a      	orrs	r2, r3
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	68db      	ldr	r3, [r3, #12]
 800a104:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800a108:	ea42 0103 	orr.w	r1, r2, r3
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	430a      	orrs	r2, r1
 800a118:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2200      	movs	r2, #0
 800a11e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2201      	movs	r2, #1
 800a124:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800a128:	2300      	movs	r3, #0
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3710      	adds	r7, #16
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}

0800a132 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800a132:	b480      	push	{r7}
 800a134:	b083      	sub	sp, #12
 800a136:	af00      	add	r7, sp, #0
 800a138:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800a13a:	bf00      	nop
 800a13c:	370c      	adds	r7, #12
 800a13e:	46bd      	mov	sp, r7
 800a140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a144:	4770      	bx	lr

0800a146 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a146:	b580      	push	{r7, lr}
 800a148:	b088      	sub	sp, #32
 800a14a:	af00      	add	r7, sp, #0
 800a14c:	60f8      	str	r0, [r7, #12]
 800a14e:	60b9      	str	r1, [r7, #8]
 800a150:	603b      	str	r3, [r7, #0]
 800a152:	4613      	mov	r3, r2
 800a154:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a156:	f7fc ffc7 	bl	80070e8 <HAL_GetTick>
 800a15a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800a15c:	88fb      	ldrh	r3, [r7, #6]
 800a15e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a166:	b2db      	uxtb	r3, r3
 800a168:	2b01      	cmp	r3, #1
 800a16a:	d001      	beq.n	800a170 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800a16c:	2302      	movs	r3, #2
 800a16e:	e15c      	b.n	800a42a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800a170:	68bb      	ldr	r3, [r7, #8]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d002      	beq.n	800a17c <HAL_SPI_Transmit+0x36>
 800a176:	88fb      	ldrh	r3, [r7, #6]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d101      	bne.n	800a180 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800a17c:	2301      	movs	r3, #1
 800a17e:	e154      	b.n	800a42a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a186:	2b01      	cmp	r3, #1
 800a188:	d101      	bne.n	800a18e <HAL_SPI_Transmit+0x48>
 800a18a:	2302      	movs	r3, #2
 800a18c:	e14d      	b.n	800a42a <HAL_SPI_Transmit+0x2e4>
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	2201      	movs	r2, #1
 800a192:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	2203      	movs	r2, #3
 800a19a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	68ba      	ldr	r2, [r7, #8]
 800a1a8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	88fa      	ldrh	r2, [r7, #6]
 800a1ae:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	88fa      	ldrh	r2, [r7, #6]
 800a1b4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	2200      	movs	r2, #0
 800a1c0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	689b      	ldr	r3, [r3, #8]
 800a1dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a1e0:	d10f      	bne.n	800a202 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	681a      	ldr	r2, [r3, #0]
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a1f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	681a      	ldr	r2, [r3, #0]
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a200:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a20c:	2b40      	cmp	r3, #64	@ 0x40
 800a20e:	d007      	beq.n	800a220 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	681a      	ldr	r2, [r3, #0]
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a21e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	68db      	ldr	r3, [r3, #12]
 800a224:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a228:	d952      	bls.n	800a2d0 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	685b      	ldr	r3, [r3, #4]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d002      	beq.n	800a238 <HAL_SPI_Transmit+0xf2>
 800a232:	8b7b      	ldrh	r3, [r7, #26]
 800a234:	2b01      	cmp	r3, #1
 800a236:	d145      	bne.n	800a2c4 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a23c:	881a      	ldrh	r2, [r3, #0]
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a248:	1c9a      	adds	r2, r3, #2
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a252:	b29b      	uxth	r3, r3
 800a254:	3b01      	subs	r3, #1
 800a256:	b29a      	uxth	r2, r3
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a25c:	e032      	b.n	800a2c4 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	689b      	ldr	r3, [r3, #8]
 800a264:	f003 0302 	and.w	r3, r3, #2
 800a268:	2b02      	cmp	r3, #2
 800a26a:	d112      	bne.n	800a292 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a270:	881a      	ldrh	r2, [r3, #0]
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a27c:	1c9a      	adds	r2, r3, #2
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a286:	b29b      	uxth	r3, r3
 800a288:	3b01      	subs	r3, #1
 800a28a:	b29a      	uxth	r2, r3
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a290:	e018      	b.n	800a2c4 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a292:	f7fc ff29 	bl	80070e8 <HAL_GetTick>
 800a296:	4602      	mov	r2, r0
 800a298:	69fb      	ldr	r3, [r7, #28]
 800a29a:	1ad3      	subs	r3, r2, r3
 800a29c:	683a      	ldr	r2, [r7, #0]
 800a29e:	429a      	cmp	r2, r3
 800a2a0:	d803      	bhi.n	800a2aa <HAL_SPI_Transmit+0x164>
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a2a8:	d102      	bne.n	800a2b0 <HAL_SPI_Transmit+0x16a>
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d109      	bne.n	800a2c4 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	2201      	movs	r2, #1
 800a2b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800a2c0:	2303      	movs	r3, #3
 800a2c2:	e0b2      	b.n	800a42a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a2c8:	b29b      	uxth	r3, r3
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d1c7      	bne.n	800a25e <HAL_SPI_Transmit+0x118>
 800a2ce:	e083      	b.n	800a3d8 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	685b      	ldr	r3, [r3, #4]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d002      	beq.n	800a2de <HAL_SPI_Transmit+0x198>
 800a2d8:	8b7b      	ldrh	r3, [r7, #26]
 800a2da:	2b01      	cmp	r3, #1
 800a2dc:	d177      	bne.n	800a3ce <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a2e2:	b29b      	uxth	r3, r3
 800a2e4:	2b01      	cmp	r3, #1
 800a2e6:	d912      	bls.n	800a30e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2ec:	881a      	ldrh	r2, [r3, #0]
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2f8:	1c9a      	adds	r2, r3, #2
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a302:	b29b      	uxth	r3, r3
 800a304:	3b02      	subs	r3, #2
 800a306:	b29a      	uxth	r2, r3
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a30c:	e05f      	b.n	800a3ce <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	330c      	adds	r3, #12
 800a318:	7812      	ldrb	r2, [r2, #0]
 800a31a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a320:	1c5a      	adds	r2, r3, #1
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a32a:	b29b      	uxth	r3, r3
 800a32c:	3b01      	subs	r3, #1
 800a32e:	b29a      	uxth	r2, r3
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800a334:	e04b      	b.n	800a3ce <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	689b      	ldr	r3, [r3, #8]
 800a33c:	f003 0302 	and.w	r3, r3, #2
 800a340:	2b02      	cmp	r3, #2
 800a342:	d12b      	bne.n	800a39c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a348:	b29b      	uxth	r3, r3
 800a34a:	2b01      	cmp	r3, #1
 800a34c:	d912      	bls.n	800a374 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a352:	881a      	ldrh	r2, [r3, #0]
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a35e:	1c9a      	adds	r2, r3, #2
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a368:	b29b      	uxth	r3, r3
 800a36a:	3b02      	subs	r3, #2
 800a36c:	b29a      	uxth	r2, r3
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a372:	e02c      	b.n	800a3ce <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	330c      	adds	r3, #12
 800a37e:	7812      	ldrb	r2, [r2, #0]
 800a380:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a386:	1c5a      	adds	r2, r3, #1
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a390:	b29b      	uxth	r3, r3
 800a392:	3b01      	subs	r3, #1
 800a394:	b29a      	uxth	r2, r3
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a39a:	e018      	b.n	800a3ce <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a39c:	f7fc fea4 	bl	80070e8 <HAL_GetTick>
 800a3a0:	4602      	mov	r2, r0
 800a3a2:	69fb      	ldr	r3, [r7, #28]
 800a3a4:	1ad3      	subs	r3, r2, r3
 800a3a6:	683a      	ldr	r2, [r7, #0]
 800a3a8:	429a      	cmp	r2, r3
 800a3aa:	d803      	bhi.n	800a3b4 <HAL_SPI_Transmit+0x26e>
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a3b2:	d102      	bne.n	800a3ba <HAL_SPI_Transmit+0x274>
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d109      	bne.n	800a3ce <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	2201      	movs	r2, #1
 800a3be:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800a3ca:	2303      	movs	r3, #3
 800a3cc:	e02d      	b.n	800a42a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a3d2:	b29b      	uxth	r3, r3
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d1ae      	bne.n	800a336 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a3d8:	69fa      	ldr	r2, [r7, #28]
 800a3da:	6839      	ldr	r1, [r7, #0]
 800a3dc:	68f8      	ldr	r0, [r7, #12]
 800a3de:	f000 fb73 	bl	800aac8 <SPI_EndRxTxTransaction>
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d002      	beq.n	800a3ee <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	2220      	movs	r2, #32
 800a3ec:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	689b      	ldr	r3, [r3, #8]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d10a      	bne.n	800a40c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	617b      	str	r3, [r7, #20]
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	68db      	ldr	r3, [r3, #12]
 800a400:	617b      	str	r3, [r7, #20]
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	689b      	ldr	r3, [r3, #8]
 800a408:	617b      	str	r3, [r7, #20]
 800a40a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	2201      	movs	r2, #1
 800a410:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	2200      	movs	r2, #0
 800a418:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a420:	2b00      	cmp	r3, #0
 800a422:	d001      	beq.n	800a428 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800a424:	2301      	movs	r3, #1
 800a426:	e000      	b.n	800a42a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800a428:	2300      	movs	r3, #0
  }
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	3720      	adds	r7, #32
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}

0800a432 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800a432:	b580      	push	{r7, lr}
 800a434:	b08a      	sub	sp, #40	@ 0x28
 800a436:	af00      	add	r7, sp, #0
 800a438:	60f8      	str	r0, [r7, #12]
 800a43a:	60b9      	str	r1, [r7, #8]
 800a43c:	607a      	str	r2, [r7, #4]
 800a43e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a440:	2301      	movs	r3, #1
 800a442:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a444:	f7fc fe50 	bl	80070e8 <HAL_GetTick>
 800a448:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a450:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	685b      	ldr	r3, [r3, #4]
 800a456:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800a458:	887b      	ldrh	r3, [r7, #2]
 800a45a:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800a45c:	887b      	ldrh	r3, [r7, #2]
 800a45e:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a460:	7ffb      	ldrb	r3, [r7, #31]
 800a462:	2b01      	cmp	r3, #1
 800a464:	d00c      	beq.n	800a480 <HAL_SPI_TransmitReceive+0x4e>
 800a466:	69bb      	ldr	r3, [r7, #24]
 800a468:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a46c:	d106      	bne.n	800a47c <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	689b      	ldr	r3, [r3, #8]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d102      	bne.n	800a47c <HAL_SPI_TransmitReceive+0x4a>
 800a476:	7ffb      	ldrb	r3, [r7, #31]
 800a478:	2b04      	cmp	r3, #4
 800a47a:	d001      	beq.n	800a480 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800a47c:	2302      	movs	r3, #2
 800a47e:	e1f3      	b.n	800a868 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d005      	beq.n	800a492 <HAL_SPI_TransmitReceive+0x60>
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d002      	beq.n	800a492 <HAL_SPI_TransmitReceive+0x60>
 800a48c:	887b      	ldrh	r3, [r7, #2]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d101      	bne.n	800a496 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800a492:	2301      	movs	r3, #1
 800a494:	e1e8      	b.n	800a868 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a49c:	2b01      	cmp	r3, #1
 800a49e:	d101      	bne.n	800a4a4 <HAL_SPI_TransmitReceive+0x72>
 800a4a0:	2302      	movs	r3, #2
 800a4a2:	e1e1      	b.n	800a868 <HAL_SPI_TransmitReceive+0x436>
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a4b2:	b2db      	uxtb	r3, r3
 800a4b4:	2b04      	cmp	r3, #4
 800a4b6:	d003      	beq.n	800a4c0 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	2205      	movs	r2, #5
 800a4bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	687a      	ldr	r2, [r7, #4]
 800a4ca:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	887a      	ldrh	r2, [r7, #2]
 800a4d0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	887a      	ldrh	r2, [r7, #2]
 800a4d8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	68ba      	ldr	r2, [r7, #8]
 800a4e0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	887a      	ldrh	r2, [r7, #2]
 800a4e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	887a      	ldrh	r2, [r7, #2]
 800a4ec:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	68db      	ldr	r3, [r3, #12]
 800a4fe:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a502:	d802      	bhi.n	800a50a <HAL_SPI_TransmitReceive+0xd8>
 800a504:	8abb      	ldrh	r3, [r7, #20]
 800a506:	2b01      	cmp	r3, #1
 800a508:	d908      	bls.n	800a51c <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	685a      	ldr	r2, [r3, #4]
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a518:	605a      	str	r2, [r3, #4]
 800a51a:	e007      	b.n	800a52c <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	685a      	ldr	r2, [r3, #4]
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a52a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a536:	2b40      	cmp	r3, #64	@ 0x40
 800a538:	d007      	beq.n	800a54a <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	681a      	ldr	r2, [r3, #0]
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a548:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	68db      	ldr	r3, [r3, #12]
 800a54e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a552:	f240 8083 	bls.w	800a65c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	685b      	ldr	r3, [r3, #4]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d002      	beq.n	800a564 <HAL_SPI_TransmitReceive+0x132>
 800a55e:	8afb      	ldrh	r3, [r7, #22]
 800a560:	2b01      	cmp	r3, #1
 800a562:	d16f      	bne.n	800a644 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a568:	881a      	ldrh	r2, [r3, #0]
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a574:	1c9a      	adds	r2, r3, #2
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a57e:	b29b      	uxth	r3, r3
 800a580:	3b01      	subs	r3, #1
 800a582:	b29a      	uxth	r2, r3
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a588:	e05c      	b.n	800a644 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	689b      	ldr	r3, [r3, #8]
 800a590:	f003 0302 	and.w	r3, r3, #2
 800a594:	2b02      	cmp	r3, #2
 800a596:	d11b      	bne.n	800a5d0 <HAL_SPI_TransmitReceive+0x19e>
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a59c:	b29b      	uxth	r3, r3
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d016      	beq.n	800a5d0 <HAL_SPI_TransmitReceive+0x19e>
 800a5a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5a4:	2b01      	cmp	r3, #1
 800a5a6:	d113      	bne.n	800a5d0 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5ac:	881a      	ldrh	r2, [r3, #0]
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5b8:	1c9a      	adds	r2, r3, #2
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a5c2:	b29b      	uxth	r3, r3
 800a5c4:	3b01      	subs	r3, #1
 800a5c6:	b29a      	uxth	r2, r3
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	689b      	ldr	r3, [r3, #8]
 800a5d6:	f003 0301 	and.w	r3, r3, #1
 800a5da:	2b01      	cmp	r3, #1
 800a5dc:	d11c      	bne.n	800a618 <HAL_SPI_TransmitReceive+0x1e6>
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a5e4:	b29b      	uxth	r3, r3
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d016      	beq.n	800a618 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	68da      	ldr	r2, [r3, #12]
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5f4:	b292      	uxth	r2, r2
 800a5f6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5fc:	1c9a      	adds	r2, r3, #2
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a608:	b29b      	uxth	r3, r3
 800a60a:	3b01      	subs	r3, #1
 800a60c:	b29a      	uxth	r2, r3
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a614:	2301      	movs	r3, #1
 800a616:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a618:	f7fc fd66 	bl	80070e8 <HAL_GetTick>
 800a61c:	4602      	mov	r2, r0
 800a61e:	6a3b      	ldr	r3, [r7, #32]
 800a620:	1ad3      	subs	r3, r2, r3
 800a622:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a624:	429a      	cmp	r2, r3
 800a626:	d80d      	bhi.n	800a644 <HAL_SPI_TransmitReceive+0x212>
 800a628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a62a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a62e:	d009      	beq.n	800a644 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	2201      	movs	r2, #1
 800a634:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	2200      	movs	r2, #0
 800a63c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800a640:	2303      	movs	r3, #3
 800a642:	e111      	b.n	800a868 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a648:	b29b      	uxth	r3, r3
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d19d      	bne.n	800a58a <HAL_SPI_TransmitReceive+0x158>
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a654:	b29b      	uxth	r3, r3
 800a656:	2b00      	cmp	r3, #0
 800a658:	d197      	bne.n	800a58a <HAL_SPI_TransmitReceive+0x158>
 800a65a:	e0e5      	b.n	800a828 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	685b      	ldr	r3, [r3, #4]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d003      	beq.n	800a66c <HAL_SPI_TransmitReceive+0x23a>
 800a664:	8afb      	ldrh	r3, [r7, #22]
 800a666:	2b01      	cmp	r3, #1
 800a668:	f040 80d1 	bne.w	800a80e <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a670:	b29b      	uxth	r3, r3
 800a672:	2b01      	cmp	r3, #1
 800a674:	d912      	bls.n	800a69c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a67a:	881a      	ldrh	r2, [r3, #0]
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a686:	1c9a      	adds	r2, r3, #2
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a690:	b29b      	uxth	r3, r3
 800a692:	3b02      	subs	r3, #2
 800a694:	b29a      	uxth	r2, r3
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a69a:	e0b8      	b.n	800a80e <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	330c      	adds	r3, #12
 800a6a6:	7812      	ldrb	r2, [r2, #0]
 800a6a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6ae:	1c5a      	adds	r2, r3, #1
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a6b8:	b29b      	uxth	r3, r3
 800a6ba:	3b01      	subs	r3, #1
 800a6bc:	b29a      	uxth	r2, r3
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a6c2:	e0a4      	b.n	800a80e <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	689b      	ldr	r3, [r3, #8]
 800a6ca:	f003 0302 	and.w	r3, r3, #2
 800a6ce:	2b02      	cmp	r3, #2
 800a6d0:	d134      	bne.n	800a73c <HAL_SPI_TransmitReceive+0x30a>
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a6d6:	b29b      	uxth	r3, r3
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d02f      	beq.n	800a73c <HAL_SPI_TransmitReceive+0x30a>
 800a6dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6de:	2b01      	cmp	r3, #1
 800a6e0:	d12c      	bne.n	800a73c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a6e6:	b29b      	uxth	r3, r3
 800a6e8:	2b01      	cmp	r3, #1
 800a6ea:	d912      	bls.n	800a712 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6f0:	881a      	ldrh	r2, [r3, #0]
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6fc:	1c9a      	adds	r2, r3, #2
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a706:	b29b      	uxth	r3, r3
 800a708:	3b02      	subs	r3, #2
 800a70a:	b29a      	uxth	r2, r3
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a710:	e012      	b.n	800a738 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	330c      	adds	r3, #12
 800a71c:	7812      	ldrb	r2, [r2, #0]
 800a71e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a724:	1c5a      	adds	r2, r3, #1
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a72e:	b29b      	uxth	r3, r3
 800a730:	3b01      	subs	r3, #1
 800a732:	b29a      	uxth	r2, r3
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a738:	2300      	movs	r3, #0
 800a73a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	689b      	ldr	r3, [r3, #8]
 800a742:	f003 0301 	and.w	r3, r3, #1
 800a746:	2b01      	cmp	r3, #1
 800a748:	d148      	bne.n	800a7dc <HAL_SPI_TransmitReceive+0x3aa>
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a750:	b29b      	uxth	r3, r3
 800a752:	2b00      	cmp	r3, #0
 800a754:	d042      	beq.n	800a7dc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a75c:	b29b      	uxth	r3, r3
 800a75e:	2b01      	cmp	r3, #1
 800a760:	d923      	bls.n	800a7aa <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	68da      	ldr	r2, [r3, #12]
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a76c:	b292      	uxth	r2, r2
 800a76e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a774:	1c9a      	adds	r2, r3, #2
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a780:	b29b      	uxth	r3, r3
 800a782:	3b02      	subs	r3, #2
 800a784:	b29a      	uxth	r2, r3
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a792:	b29b      	uxth	r3, r3
 800a794:	2b01      	cmp	r3, #1
 800a796:	d81f      	bhi.n	800a7d8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	685a      	ldr	r2, [r3, #4]
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a7a6:	605a      	str	r2, [r3, #4]
 800a7a8:	e016      	b.n	800a7d8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f103 020c 	add.w	r2, r3, #12
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7b6:	7812      	ldrb	r2, [r2, #0]
 800a7b8:	b2d2      	uxtb	r2, r2
 800a7ba:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7c0:	1c5a      	adds	r2, r3, #1
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a7cc:	b29b      	uxth	r3, r3
 800a7ce:	3b01      	subs	r3, #1
 800a7d0:	b29a      	uxth	r2, r3
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a7d8:	2301      	movs	r3, #1
 800a7da:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a7dc:	f7fc fc84 	bl	80070e8 <HAL_GetTick>
 800a7e0:	4602      	mov	r2, r0
 800a7e2:	6a3b      	ldr	r3, [r7, #32]
 800a7e4:	1ad3      	subs	r3, r2, r3
 800a7e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a7e8:	429a      	cmp	r2, r3
 800a7ea:	d803      	bhi.n	800a7f4 <HAL_SPI_TransmitReceive+0x3c2>
 800a7ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a7f2:	d102      	bne.n	800a7fa <HAL_SPI_TransmitReceive+0x3c8>
 800a7f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d109      	bne.n	800a80e <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	2201      	movs	r2, #1
 800a7fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	2200      	movs	r2, #0
 800a806:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800a80a:	2303      	movs	r3, #3
 800a80c:	e02c      	b.n	800a868 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a812:	b29b      	uxth	r3, r3
 800a814:	2b00      	cmp	r3, #0
 800a816:	f47f af55 	bne.w	800a6c4 <HAL_SPI_TransmitReceive+0x292>
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a820:	b29b      	uxth	r3, r3
 800a822:	2b00      	cmp	r3, #0
 800a824:	f47f af4e 	bne.w	800a6c4 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a828:	6a3a      	ldr	r2, [r7, #32]
 800a82a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a82c:	68f8      	ldr	r0, [r7, #12]
 800a82e:	f000 f94b 	bl	800aac8 <SPI_EndRxTxTransaction>
 800a832:	4603      	mov	r3, r0
 800a834:	2b00      	cmp	r3, #0
 800a836:	d008      	beq.n	800a84a <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	2220      	movs	r2, #32
 800a83c:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	2200      	movs	r2, #0
 800a842:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800a846:	2301      	movs	r3, #1
 800a848:	e00e      	b.n	800a868 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	2201      	movs	r2, #1
 800a84e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	2200      	movs	r2, #0
 800a856:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d001      	beq.n	800a866 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800a862:	2301      	movs	r3, #1
 800a864:	e000      	b.n	800a868 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800a866:	2300      	movs	r3, #0
  }
}
 800a868:	4618      	mov	r0, r3
 800a86a:	3728      	adds	r7, #40	@ 0x28
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}

0800a870 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800a870:	b480      	push	{r7}
 800a872:	b083      	sub	sp, #12
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a87e:	b2db      	uxtb	r3, r3
}
 800a880:	4618      	mov	r0, r3
 800a882:	370c      	adds	r7, #12
 800a884:	46bd      	mov	sp, r7
 800a886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88a:	4770      	bx	lr

0800a88c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b088      	sub	sp, #32
 800a890:	af00      	add	r7, sp, #0
 800a892:	60f8      	str	r0, [r7, #12]
 800a894:	60b9      	str	r1, [r7, #8]
 800a896:	603b      	str	r3, [r7, #0]
 800a898:	4613      	mov	r3, r2
 800a89a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a89c:	f7fc fc24 	bl	80070e8 <HAL_GetTick>
 800a8a0:	4602      	mov	r2, r0
 800a8a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8a4:	1a9b      	subs	r3, r3, r2
 800a8a6:	683a      	ldr	r2, [r7, #0]
 800a8a8:	4413      	add	r3, r2
 800a8aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a8ac:	f7fc fc1c 	bl	80070e8 <HAL_GetTick>
 800a8b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a8b2:	4b39      	ldr	r3, [pc, #228]	@ (800a998 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	015b      	lsls	r3, r3, #5
 800a8b8:	0d1b      	lsrs	r3, r3, #20
 800a8ba:	69fa      	ldr	r2, [r7, #28]
 800a8bc:	fb02 f303 	mul.w	r3, r2, r3
 800a8c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a8c2:	e055      	b.n	800a970 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a8ca:	d051      	beq.n	800a970 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a8cc:	f7fc fc0c 	bl	80070e8 <HAL_GetTick>
 800a8d0:	4602      	mov	r2, r0
 800a8d2:	69bb      	ldr	r3, [r7, #24]
 800a8d4:	1ad3      	subs	r3, r2, r3
 800a8d6:	69fa      	ldr	r2, [r7, #28]
 800a8d8:	429a      	cmp	r2, r3
 800a8da:	d902      	bls.n	800a8e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800a8dc:	69fb      	ldr	r3, [r7, #28]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d13d      	bne.n	800a95e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	685a      	ldr	r2, [r3, #4]
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a8f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	685b      	ldr	r3, [r3, #4]
 800a8f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a8fa:	d111      	bne.n	800a920 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	689b      	ldr	r3, [r3, #8]
 800a900:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a904:	d004      	beq.n	800a910 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	689b      	ldr	r3, [r3, #8]
 800a90a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a90e:	d107      	bne.n	800a920 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	681a      	ldr	r2, [r3, #0]
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a91e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a924:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a928:	d10f      	bne.n	800a94a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	681a      	ldr	r2, [r3, #0]
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a938:	601a      	str	r2, [r3, #0]
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	681a      	ldr	r2, [r3, #0]
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a948:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	2201      	movs	r2, #1
 800a94e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	2200      	movs	r2, #0
 800a956:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a95a:	2303      	movs	r3, #3
 800a95c:	e018      	b.n	800a990 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d102      	bne.n	800a96a <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800a964:	2300      	movs	r3, #0
 800a966:	61fb      	str	r3, [r7, #28]
 800a968:	e002      	b.n	800a970 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800a96a:	697b      	ldr	r3, [r7, #20]
 800a96c:	3b01      	subs	r3, #1
 800a96e:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	689a      	ldr	r2, [r3, #8]
 800a976:	68bb      	ldr	r3, [r7, #8]
 800a978:	4013      	ands	r3, r2
 800a97a:	68ba      	ldr	r2, [r7, #8]
 800a97c:	429a      	cmp	r2, r3
 800a97e:	bf0c      	ite	eq
 800a980:	2301      	moveq	r3, #1
 800a982:	2300      	movne	r3, #0
 800a984:	b2db      	uxtb	r3, r3
 800a986:	461a      	mov	r2, r3
 800a988:	79fb      	ldrb	r3, [r7, #7]
 800a98a:	429a      	cmp	r2, r3
 800a98c:	d19a      	bne.n	800a8c4 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800a98e:	2300      	movs	r3, #0
}
 800a990:	4618      	mov	r0, r3
 800a992:	3720      	adds	r7, #32
 800a994:	46bd      	mov	sp, r7
 800a996:	bd80      	pop	{r7, pc}
 800a998:	200000a0 	.word	0x200000a0

0800a99c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b08a      	sub	sp, #40	@ 0x28
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	60f8      	str	r0, [r7, #12]
 800a9a4:	60b9      	str	r1, [r7, #8]
 800a9a6:	607a      	str	r2, [r7, #4]
 800a9a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a9ae:	f7fc fb9b 	bl	80070e8 <HAL_GetTick>
 800a9b2:	4602      	mov	r2, r0
 800a9b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9b6:	1a9b      	subs	r3, r3, r2
 800a9b8:	683a      	ldr	r2, [r7, #0]
 800a9ba:	4413      	add	r3, r2
 800a9bc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800a9be:	f7fc fb93 	bl	80070e8 <HAL_GetTick>
 800a9c2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	330c      	adds	r3, #12
 800a9ca:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a9cc:	4b3d      	ldr	r3, [pc, #244]	@ (800aac4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800a9ce:	681a      	ldr	r2, [r3, #0]
 800a9d0:	4613      	mov	r3, r2
 800a9d2:	009b      	lsls	r3, r3, #2
 800a9d4:	4413      	add	r3, r2
 800a9d6:	00da      	lsls	r2, r3, #3
 800a9d8:	1ad3      	subs	r3, r2, r3
 800a9da:	0d1b      	lsrs	r3, r3, #20
 800a9dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a9de:	fb02 f303 	mul.w	r3, r2, r3
 800a9e2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a9e4:	e061      	b.n	800aaaa <SPI_WaitFifoStateUntilTimeout+0x10e>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a9e6:	68bb      	ldr	r3, [r7, #8]
 800a9e8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a9ec:	d107      	bne.n	800a9fe <SPI_WaitFifoStateUntilTimeout+0x62>
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d104      	bne.n	800a9fe <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a9f4:	69fb      	ldr	r3, [r7, #28]
 800a9f6:	781b      	ldrb	r3, [r3, #0]
 800a9f8:	b2db      	uxtb	r3, r3
 800a9fa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a9fc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aa04:	d051      	beq.n	800aaaa <SPI_WaitFifoStateUntilTimeout+0x10e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800aa06:	f7fc fb6f 	bl	80070e8 <HAL_GetTick>
 800aa0a:	4602      	mov	r2, r0
 800aa0c:	6a3b      	ldr	r3, [r7, #32]
 800aa0e:	1ad3      	subs	r3, r2, r3
 800aa10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa12:	429a      	cmp	r2, r3
 800aa14:	d902      	bls.n	800aa1c <SPI_WaitFifoStateUntilTimeout+0x80>
 800aa16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d13d      	bne.n	800aa98 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	685a      	ldr	r2, [r3, #4]
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800aa2a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	685b      	ldr	r3, [r3, #4]
 800aa30:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800aa34:	d111      	bne.n	800aa5a <SPI_WaitFifoStateUntilTimeout+0xbe>
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	689b      	ldr	r3, [r3, #8]
 800aa3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aa3e:	d004      	beq.n	800aa4a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	689b      	ldr	r3, [r3, #8]
 800aa44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aa48:	d107      	bne.n	800aa5a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	681a      	ldr	r2, [r3, #0]
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800aa58:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa62:	d10f      	bne.n	800aa84 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	681a      	ldr	r2, [r3, #0]
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800aa72:	601a      	str	r2, [r3, #0]
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	681a      	ldr	r2, [r3, #0]
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800aa82:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	2201      	movs	r2, #1
 800aa88:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	2200      	movs	r2, #0
 800aa90:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800aa94:	2303      	movs	r3, #3
 800aa96:	e011      	b.n	800aabc <SPI_WaitFifoStateUntilTimeout+0x120>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800aa98:	69bb      	ldr	r3, [r7, #24]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d102      	bne.n	800aaa4 <SPI_WaitFifoStateUntilTimeout+0x108>
      {
        tmp_timeout = 0U;
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	627b      	str	r3, [r7, #36]	@ 0x24
 800aaa2:	e002      	b.n	800aaaa <SPI_WaitFifoStateUntilTimeout+0x10e>
      }
      else
      {
        count--;
 800aaa4:	69bb      	ldr	r3, [r7, #24]
 800aaa6:	3b01      	subs	r3, #1
 800aaa8:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	689a      	ldr	r2, [r3, #8]
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	4013      	ands	r3, r2
 800aab4:	687a      	ldr	r2, [r7, #4]
 800aab6:	429a      	cmp	r2, r3
 800aab8:	d195      	bne.n	800a9e6 <SPI_WaitFifoStateUntilTimeout+0x4a>
      }
    }
  }

  return HAL_OK;
 800aaba:	2300      	movs	r3, #0
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	3728      	adds	r7, #40	@ 0x28
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}
 800aac4:	200000a0 	.word	0x200000a0

0800aac8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b086      	sub	sp, #24
 800aacc:	af02      	add	r7, sp, #8
 800aace:	60f8      	str	r0, [r7, #12]
 800aad0:	60b9      	str	r1, [r7, #8]
 800aad2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	9300      	str	r3, [sp, #0]
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	2200      	movs	r2, #0
 800aadc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800aae0:	68f8      	ldr	r0, [r7, #12]
 800aae2:	f7ff ff5b 	bl	800a99c <SPI_WaitFifoStateUntilTimeout>
 800aae6:	4603      	mov	r3, r0
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d007      	beq.n	800aafc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aaf0:	f043 0220 	orr.w	r2, r3, #32
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800aaf8:	2303      	movs	r3, #3
 800aafa:	e027      	b.n	800ab4c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	9300      	str	r3, [sp, #0]
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	2200      	movs	r2, #0
 800ab04:	2180      	movs	r1, #128	@ 0x80
 800ab06:	68f8      	ldr	r0, [r7, #12]
 800ab08:	f7ff fec0 	bl	800a88c <SPI_WaitFlagStateUntilTimeout>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d007      	beq.n	800ab22 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ab16:	f043 0220 	orr.w	r2, r3, #32
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800ab1e:	2303      	movs	r3, #3
 800ab20:	e014      	b.n	800ab4c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	9300      	str	r3, [sp, #0]
 800ab26:	68bb      	ldr	r3, [r7, #8]
 800ab28:	2200      	movs	r2, #0
 800ab2a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800ab2e:	68f8      	ldr	r0, [r7, #12]
 800ab30:	f7ff ff34 	bl	800a99c <SPI_WaitFifoStateUntilTimeout>
 800ab34:	4603      	mov	r3, r0
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d007      	beq.n	800ab4a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ab3e:	f043 0220 	orr.w	r2, r3, #32
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800ab46:	2303      	movs	r3, #3
 800ab48:	e000      	b.n	800ab4c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800ab4a:	2300      	movs	r3, #0
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	3710      	adds	r7, #16
 800ab50:	46bd      	mov	sp, r7
 800ab52:	bd80      	pop	{r7, pc}

0800ab54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b082      	sub	sp, #8
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d101      	bne.n	800ab66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ab62:	2301      	movs	r3, #1
 800ab64:	e049      	b.n	800abfa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ab6c:	b2db      	uxtb	r3, r3
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d106      	bne.n	800ab80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2200      	movs	r2, #0
 800ab76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ab7a:	6878      	ldr	r0, [r7, #4]
 800ab7c:	f000 f841 	bl	800ac02 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2202      	movs	r2, #2
 800ab84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681a      	ldr	r2, [r3, #0]
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	3304      	adds	r3, #4
 800ab90:	4619      	mov	r1, r3
 800ab92:	4610      	mov	r0, r2
 800ab94:	f000 f916 	bl	800adc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2201      	movs	r2, #1
 800ab9c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2201      	movs	r2, #1
 800aba4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2201      	movs	r2, #1
 800abac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2201      	movs	r2, #1
 800abb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2201      	movs	r2, #1
 800abbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2201      	movs	r2, #1
 800abc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2201      	movs	r2, #1
 800abcc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2201      	movs	r2, #1
 800abd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2201      	movs	r2, #1
 800abdc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2201      	movs	r2, #1
 800abe4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2201      	movs	r2, #1
 800abec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2201      	movs	r2, #1
 800abf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800abf8:	2300      	movs	r3, #0
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	3708      	adds	r7, #8
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}

0800ac02 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800ac02:	b480      	push	{r7}
 800ac04:	b083      	sub	sp, #12
 800ac06:	af00      	add	r7, sp, #0
 800ac08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800ac0a:	bf00      	nop
 800ac0c:	370c      	adds	r7, #12
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac14:	4770      	bx	lr
	...

0800ac18 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800ac18:	b480      	push	{r7}
 800ac1a:	b085      	sub	sp, #20
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ac26:	b2db      	uxtb	r3, r3
 800ac28:	2b01      	cmp	r3, #1
 800ac2a:	d001      	beq.n	800ac30 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	e02e      	b.n	800ac8e <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2202      	movs	r2, #2
 800ac34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	4a17      	ldr	r2, [pc, #92]	@ (800ac9c <HAL_TIM_Base_Start+0x84>)
 800ac3e:	4293      	cmp	r3, r2
 800ac40:	d004      	beq.n	800ac4c <HAL_TIM_Base_Start+0x34>
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac4a:	d115      	bne.n	800ac78 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	689a      	ldr	r2, [r3, #8]
 800ac52:	4b13      	ldr	r3, [pc, #76]	@ (800aca0 <HAL_TIM_Base_Start+0x88>)
 800ac54:	4013      	ands	r3, r2
 800ac56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	2b06      	cmp	r3, #6
 800ac5c:	d015      	beq.n	800ac8a <HAL_TIM_Base_Start+0x72>
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac64:	d011      	beq.n	800ac8a <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	681a      	ldr	r2, [r3, #0]
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	f042 0201 	orr.w	r2, r2, #1
 800ac74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac76:	e008      	b.n	800ac8a <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	681a      	ldr	r2, [r3, #0]
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	f042 0201 	orr.w	r2, r2, #1
 800ac86:	601a      	str	r2, [r3, #0]
 800ac88:	e000      	b.n	800ac8c <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac8a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ac8c:	2300      	movs	r3, #0
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	3714      	adds	r7, #20
 800ac92:	46bd      	mov	sp, r7
 800ac94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac98:	4770      	bx	lr
 800ac9a:	bf00      	nop
 800ac9c:	40012c00 	.word	0x40012c00
 800aca0:	00010007 	.word	0x00010007

0800aca4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800aca4:	b480      	push	{r7}
 800aca6:	b083      	sub	sp, #12
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	6a1b      	ldr	r3, [r3, #32]
 800acb2:	f003 3311 	and.w	r3, r3, #286331153	@ 0x11111111
 800acb6:	f023 5388 	bic.w	r3, r3, #285212672	@ 0x11000000
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d10f      	bne.n	800acde <HAL_TIM_Base_Stop+0x3a>
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	6a1a      	ldr	r2, [r3, #32]
 800acc4:	f240 4344 	movw	r3, #1092	@ 0x444
 800acc8:	4013      	ands	r3, r2
 800acca:	2b00      	cmp	r3, #0
 800accc:	d107      	bne.n	800acde <HAL_TIM_Base_Stop+0x3a>
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	681a      	ldr	r2, [r3, #0]
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	f022 0201 	bic.w	r2, r2, #1
 800acdc:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2201      	movs	r2, #1
 800ace2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800ace6:	2300      	movs	r3, #0
}
 800ace8:	4618      	mov	r0, r3
 800acea:	370c      	adds	r7, #12
 800acec:	46bd      	mov	sp, r7
 800acee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf2:	4770      	bx	lr

0800acf4 <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b082      	sub	sp, #8
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2202      	movs	r2, #2
 800ad00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	6a1b      	ldr	r3, [r3, #32]
 800ad0a:	f003 3311 	and.w	r3, r3, #286331153	@ 0x11111111
 800ad0e:	f023 5388 	bic.w	r3, r3, #285212672	@ 0x11000000
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d10f      	bne.n	800ad36 <HAL_TIM_PWM_DeInit+0x42>
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	6a1a      	ldr	r2, [r3, #32]
 800ad1c:	f240 4344 	movw	r3, #1092	@ 0x444
 800ad20:	4013      	ands	r3, r2
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d107      	bne.n	800ad36 <HAL_TIM_PWM_DeInit+0x42>
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	681a      	ldr	r2, [r3, #0]
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	f022 0201 	bic.w	r2, r2, #1
 800ad34:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f000 f839 	bl	800adae <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2200      	movs	r2, #0
 800ad40:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2200      	movs	r2, #0
 800ad48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2200      	movs	r2, #0
 800ad50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2200      	movs	r2, #0
 800ad58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2200      	movs	r2, #0
 800ad60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2200      	movs	r2, #0
 800ad68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2200      	movs	r2, #0
 800ad78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2200      	movs	r2, #0
 800ad80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2200      	movs	r2, #0
 800ad88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2200      	movs	r2, #0
 800ad90:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2200      	movs	r2, #0
 800ad98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2200      	movs	r2, #0
 800ada0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ada4:	2300      	movs	r3, #0
}
 800ada6:	4618      	mov	r0, r3
 800ada8:	3708      	adds	r7, #8
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}

0800adae <HAL_TIM_PWM_MspDeInit>:
  * @brief  DeInitializes TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
{
 800adae:	b480      	push	{r7}
 800adb0:	b083      	sub	sp, #12
 800adb2:	af00      	add	r7, sp, #0
 800adb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspDeInit could be implemented in the user file
   */
}
 800adb6:	bf00      	nop
 800adb8:	370c      	adds	r7, #12
 800adba:	46bd      	mov	sp, r7
 800adbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc0:	4770      	bx	lr
	...

0800adc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800adc4:	b480      	push	{r7}
 800adc6:	b085      	sub	sp, #20
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
 800adcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	4a2d      	ldr	r2, [pc, #180]	@ (800ae8c <TIM_Base_SetConfig+0xc8>)
 800add8:	4293      	cmp	r3, r2
 800adda:	d003      	beq.n	800ade4 <TIM_Base_SetConfig+0x20>
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ade2:	d108      	bne.n	800adf6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800adea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	685b      	ldr	r3, [r3, #4]
 800adf0:	68fa      	ldr	r2, [r7, #12]
 800adf2:	4313      	orrs	r3, r2
 800adf4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	4a24      	ldr	r2, [pc, #144]	@ (800ae8c <TIM_Base_SetConfig+0xc8>)
 800adfa:	4293      	cmp	r3, r2
 800adfc:	d00b      	beq.n	800ae16 <TIM_Base_SetConfig+0x52>
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae04:	d007      	beq.n	800ae16 <TIM_Base_SetConfig+0x52>
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	4a21      	ldr	r2, [pc, #132]	@ (800ae90 <TIM_Base_SetConfig+0xcc>)
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	d003      	beq.n	800ae16 <TIM_Base_SetConfig+0x52>
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	4a20      	ldr	r2, [pc, #128]	@ (800ae94 <TIM_Base_SetConfig+0xd0>)
 800ae12:	4293      	cmp	r3, r2
 800ae14:	d108      	bne.n	800ae28 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ae1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	68db      	ldr	r3, [r3, #12]
 800ae22:	68fa      	ldr	r2, [r7, #12]
 800ae24:	4313      	orrs	r3, r2
 800ae26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	695b      	ldr	r3, [r3, #20]
 800ae32:	4313      	orrs	r3, r2
 800ae34:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	689a      	ldr	r2, [r3, #8]
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	681a      	ldr	r2, [r3, #0]
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	4a10      	ldr	r2, [pc, #64]	@ (800ae8c <TIM_Base_SetConfig+0xc8>)
 800ae4a:	4293      	cmp	r3, r2
 800ae4c:	d007      	beq.n	800ae5e <TIM_Base_SetConfig+0x9a>
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	4a0f      	ldr	r2, [pc, #60]	@ (800ae90 <TIM_Base_SetConfig+0xcc>)
 800ae52:	4293      	cmp	r3, r2
 800ae54:	d003      	beq.n	800ae5e <TIM_Base_SetConfig+0x9a>
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	4a0e      	ldr	r2, [pc, #56]	@ (800ae94 <TIM_Base_SetConfig+0xd0>)
 800ae5a:	4293      	cmp	r3, r2
 800ae5c:	d103      	bne.n	800ae66 <TIM_Base_SetConfig+0xa2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	691a      	ldr	r2, [r3, #16]
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	f043 0204 	orr.w	r2, r3, #4
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2201      	movs	r2, #1
 800ae76:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	68fa      	ldr	r2, [r7, #12]
 800ae7c:	601a      	str	r2, [r3, #0]
}
 800ae7e:	bf00      	nop
 800ae80:	3714      	adds	r7, #20
 800ae82:	46bd      	mov	sp, r7
 800ae84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae88:	4770      	bx	lr
 800ae8a:	bf00      	nop
 800ae8c:	40012c00 	.word	0x40012c00
 800ae90:	40014400 	.word	0x40014400
 800ae94:	40014800 	.word	0x40014800

0800ae98 <LL_RCC_GetUSARTClockSource>:
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b083      	sub	sp, #12
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800aea0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aea4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	4013      	ands	r3, r2
}
 800aeac:	4618      	mov	r0, r3
 800aeae:	370c      	adds	r7, #12
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb6:	4770      	bx	lr

0800aeb8 <LL_RCC_GetLPUARTClockSource>:
{
 800aeb8:	b480      	push	{r7}
 800aeba:	b083      	sub	sp, #12
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800aec0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aec4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	4013      	ands	r3, r2
}
 800aecc:	4618      	mov	r0, r3
 800aece:	370c      	adds	r7, #12
 800aed0:	46bd      	mov	sp, r7
 800aed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed6:	4770      	bx	lr

0800aed8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b082      	sub	sp, #8
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d101      	bne.n	800aeea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aee6:	2301      	movs	r3, #1
 800aee8:	e042      	b.n	800af70 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d106      	bne.n	800af02 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2200      	movs	r2, #0
 800aef8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	f7f8 f8ff 	bl	8003100 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2224      	movs	r2, #36	@ 0x24
 800af06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	681a      	ldr	r2, [r3, #0]
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	f022 0201 	bic.w	r2, r2, #1
 800af18:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d002      	beq.n	800af28 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800af22:	6878      	ldr	r0, [r7, #4]
 800af24:	f000 fe7e 	bl	800bc24 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	f000 fc53 	bl	800b7d4 <UART_SetConfig>
 800af2e:	4603      	mov	r3, r0
 800af30:	2b01      	cmp	r3, #1
 800af32:	d101      	bne.n	800af38 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800af34:	2301      	movs	r3, #1
 800af36:	e01b      	b.n	800af70 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	685a      	ldr	r2, [r3, #4]
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800af46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	689a      	ldr	r2, [r3, #8]
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800af56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	681a      	ldr	r2, [r3, #0]
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f042 0201 	orr.w	r2, r2, #1
 800af66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800af68:	6878      	ldr	r0, [r7, #4]
 800af6a:	f000 fefd 	bl	800bd68 <UART_CheckIdleState>
 800af6e:	4603      	mov	r3, r0
}
 800af70:	4618      	mov	r0, r3
 800af72:	3708      	adds	r7, #8
 800af74:	46bd      	mov	sp, r7
 800af76:	bd80      	pop	{r7, pc}

0800af78 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b08a      	sub	sp, #40	@ 0x28
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	60f8      	str	r0, [r7, #12]
 800af80:	60b9      	str	r1, [r7, #8]
 800af82:	4613      	mov	r3, r2
 800af84:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800af8c:	2b20      	cmp	r3, #32
 800af8e:	d137      	bne.n	800b000 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800af90:	68bb      	ldr	r3, [r7, #8]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d002      	beq.n	800af9c <HAL_UART_Receive_IT+0x24>
 800af96:	88fb      	ldrh	r3, [r7, #6]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d101      	bne.n	800afa0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800af9c:	2301      	movs	r3, #1
 800af9e:	e030      	b.n	800b002 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	2200      	movs	r2, #0
 800afa4:	66da      	str	r2, [r3, #108]	@ 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	4a18      	ldr	r2, [pc, #96]	@ (800b00c <HAL_UART_Receive_IT+0x94>)
 800afac:	4293      	cmp	r3, r2
 800afae:	d01f      	beq.n	800aff0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	685b      	ldr	r3, [r3, #4]
 800afb6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d018      	beq.n	800aff0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afc4:	697b      	ldr	r3, [r7, #20]
 800afc6:	e853 3f00 	ldrex	r3, [r3]
 800afca:	613b      	str	r3, [r7, #16]
   return(result);
 800afcc:	693b      	ldr	r3, [r7, #16]
 800afce:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800afd2:	627b      	str	r3, [r7, #36]	@ 0x24
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	461a      	mov	r2, r3
 800afda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afdc:	623b      	str	r3, [r7, #32]
 800afde:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afe0:	69f9      	ldr	r1, [r7, #28]
 800afe2:	6a3a      	ldr	r2, [r7, #32]
 800afe4:	e841 2300 	strex	r3, r2, [r1]
 800afe8:	61bb      	str	r3, [r7, #24]
   return(result);
 800afea:	69bb      	ldr	r3, [r7, #24]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d1e6      	bne.n	800afbe <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
 800aff0:	88fb      	ldrh	r3, [r7, #6]
 800aff2:	461a      	mov	r2, r3
 800aff4:	68b9      	ldr	r1, [r7, #8]
 800aff6:	68f8      	ldr	r0, [r7, #12]
 800aff8:	f000 ffce 	bl	800bf98 <UART_Start_Receive_IT>
 800affc:	4603      	mov	r3, r0
 800affe:	e000      	b.n	800b002 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b000:	2302      	movs	r3, #2
  }
}
 800b002:	4618      	mov	r0, r3
 800b004:	3728      	adds	r7, #40	@ 0x28
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}
 800b00a:	bf00      	nop
 800b00c:	40008000 	.word	0x40008000

0800b010 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b08a      	sub	sp, #40	@ 0x28
 800b014:	af00      	add	r7, sp, #0
 800b016:	60f8      	str	r0, [r7, #12]
 800b018:	60b9      	str	r1, [r7, #8]
 800b01a:	4613      	mov	r3, r2
 800b01c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b024:	2b20      	cmp	r3, #32
 800b026:	d167      	bne.n	800b0f8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d002      	beq.n	800b034 <HAL_UART_Transmit_DMA+0x24>
 800b02e:	88fb      	ldrh	r3, [r7, #6]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d101      	bne.n	800b038 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800b034:	2301      	movs	r3, #1
 800b036:	e060      	b.n	800b0fa <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	68ba      	ldr	r2, [r7, #8]
 800b03c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	88fa      	ldrh	r2, [r7, #6]
 800b042:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	88fa      	ldrh	r2, [r7, #6]
 800b04a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	2200      	movs	r2, #0
 800b052:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	2221      	movs	r2, #33	@ 0x21
 800b05a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b062:	2b00      	cmp	r3, #0
 800b064:	d028      	beq.n	800b0b8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b06a:	4a26      	ldr	r2, [pc, #152]	@ (800b104 <HAL_UART_Transmit_DMA+0xf4>)
 800b06c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b072:	4a25      	ldr	r2, [pc, #148]	@ (800b108 <HAL_UART_Transmit_DMA+0xf8>)
 800b074:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b07a:	4a24      	ldr	r2, [pc, #144]	@ (800b10c <HAL_UART_Transmit_DMA+0xfc>)
 800b07c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b082:	2200      	movs	r2, #0
 800b084:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b08e:	4619      	mov	r1, r3
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	3328      	adds	r3, #40	@ 0x28
 800b096:	461a      	mov	r2, r3
 800b098:	88fb      	ldrh	r3, [r7, #6]
 800b09a:	f7fc fa97 	bl	80075cc <HAL_DMA_Start_IT>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d009      	beq.n	800b0b8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	2210      	movs	r2, #16
 800b0a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	2220      	movs	r2, #32
 800b0b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800b0b4:	2301      	movs	r3, #1
 800b0b6:	e020      	b.n	800b0fa <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	2240      	movs	r2, #64	@ 0x40
 800b0be:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	3308      	adds	r3, #8
 800b0c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0c8:	697b      	ldr	r3, [r7, #20]
 800b0ca:	e853 3f00 	ldrex	r3, [r3]
 800b0ce:	613b      	str	r3, [r7, #16]
   return(result);
 800b0d0:	693b      	ldr	r3, [r7, #16]
 800b0d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b0d6:	627b      	str	r3, [r7, #36]	@ 0x24
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	3308      	adds	r3, #8
 800b0de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b0e0:	623a      	str	r2, [r7, #32]
 800b0e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0e4:	69f9      	ldr	r1, [r7, #28]
 800b0e6:	6a3a      	ldr	r2, [r7, #32]
 800b0e8:	e841 2300 	strex	r3, r2, [r1]
 800b0ec:	61bb      	str	r3, [r7, #24]
   return(result);
 800b0ee:	69bb      	ldr	r3, [r7, #24]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d1e5      	bne.n	800b0c0 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	e000      	b.n	800b0fa <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800b0f8:	2302      	movs	r3, #2
  }
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	3728      	adds	r7, #40	@ 0x28
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}
 800b102:	bf00      	nop
 800b104:	0800c32b 	.word	0x0800c32b
 800b108:	0800c3c5 	.word	0x0800c3c5
 800b10c:	0800c3e1 	.word	0x0800c3e1

0800b110 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b0ba      	sub	sp, #232	@ 0xe8
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	69db      	ldr	r3, [r3, #28]
 800b11e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	689b      	ldr	r3, [r3, #8]
 800b132:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b136:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b13a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800b13e:	4013      	ands	r3, r2
 800b140:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800b144:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d11b      	bne.n	800b184 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b14c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b150:	f003 0320 	and.w	r3, r3, #32
 800b154:	2b00      	cmp	r3, #0
 800b156:	d015      	beq.n	800b184 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b158:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b15c:	f003 0320 	and.w	r3, r3, #32
 800b160:	2b00      	cmp	r3, #0
 800b162:	d105      	bne.n	800b170 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b164:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b168:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d009      	beq.n	800b184 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b174:	2b00      	cmp	r3, #0
 800b176:	f000 8300 	beq.w	800b77a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b17e:	6878      	ldr	r0, [r7, #4]
 800b180:	4798      	blx	r3
      }
      return;
 800b182:	e2fa      	b.n	800b77a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b184:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b188:	2b00      	cmp	r3, #0
 800b18a:	f000 8123 	beq.w	800b3d4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b18e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b192:	4b8d      	ldr	r3, [pc, #564]	@ (800b3c8 <HAL_UART_IRQHandler+0x2b8>)
 800b194:	4013      	ands	r3, r2
 800b196:	2b00      	cmp	r3, #0
 800b198:	d106      	bne.n	800b1a8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b19a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800b19e:	4b8b      	ldr	r3, [pc, #556]	@ (800b3cc <HAL_UART_IRQHandler+0x2bc>)
 800b1a0:	4013      	ands	r3, r2
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	f000 8116 	beq.w	800b3d4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b1a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b1ac:	f003 0301 	and.w	r3, r3, #1
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d011      	beq.n	800b1d8 <HAL_UART_IRQHandler+0xc8>
 800b1b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b1b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d00b      	beq.n	800b1d8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	2201      	movs	r2, #1
 800b1c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b1ce:	f043 0201 	orr.w	r2, r3, #1
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b1d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b1dc:	f003 0302 	and.w	r3, r3, #2
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d011      	beq.n	800b208 <HAL_UART_IRQHandler+0xf8>
 800b1e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b1e8:	f003 0301 	and.w	r3, r3, #1
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d00b      	beq.n	800b208 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	2202      	movs	r2, #2
 800b1f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b1fe:	f043 0204 	orr.w	r2, r3, #4
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b208:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b20c:	f003 0304 	and.w	r3, r3, #4
 800b210:	2b00      	cmp	r3, #0
 800b212:	d011      	beq.n	800b238 <HAL_UART_IRQHandler+0x128>
 800b214:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b218:	f003 0301 	and.w	r3, r3, #1
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d00b      	beq.n	800b238 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	2204      	movs	r2, #4
 800b226:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b22e:	f043 0202 	orr.w	r2, r3, #2
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b23c:	f003 0308 	and.w	r3, r3, #8
 800b240:	2b00      	cmp	r3, #0
 800b242:	d017      	beq.n	800b274 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b244:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b248:	f003 0320 	and.w	r3, r3, #32
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d105      	bne.n	800b25c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b250:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b254:	4b5c      	ldr	r3, [pc, #368]	@ (800b3c8 <HAL_UART_IRQHandler+0x2b8>)
 800b256:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d00b      	beq.n	800b274 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	2208      	movs	r2, #8
 800b262:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b26a:	f043 0208 	orr.w	r2, r3, #8
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b274:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b278:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d012      	beq.n	800b2a6 <HAL_UART_IRQHandler+0x196>
 800b280:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b284:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d00c      	beq.n	800b2a6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b294:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b29c:	f043 0220 	orr.w	r2, r3, #32
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	f000 8266 	beq.w	800b77e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b2b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b2b6:	f003 0320 	and.w	r3, r3, #32
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d013      	beq.n	800b2e6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b2be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b2c2:	f003 0320 	and.w	r3, r3, #32
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d105      	bne.n	800b2d6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b2ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b2ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d007      	beq.n	800b2e6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d003      	beq.n	800b2e6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b2ec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	689b      	ldr	r3, [r3, #8]
 800b2f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b2fa:	2b40      	cmp	r3, #64	@ 0x40
 800b2fc:	d005      	beq.n	800b30a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b2fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b302:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b306:	2b00      	cmp	r3, #0
 800b308:	d054      	beq.n	800b3b4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f000 ffa7 	bl	800c25e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	689b      	ldr	r3, [r3, #8]
 800b316:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b31a:	2b40      	cmp	r3, #64	@ 0x40
 800b31c:	d146      	bne.n	800b3ac <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	3308      	adds	r3, #8
 800b324:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b328:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b32c:	e853 3f00 	ldrex	r3, [r3]
 800b330:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b334:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b338:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b33c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	3308      	adds	r3, #8
 800b346:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b34a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b34e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b352:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b356:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b35a:	e841 2300 	strex	r3, r2, [r1]
 800b35e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b362:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b366:	2b00      	cmp	r3, #0
 800b368:	d1d9      	bne.n	800b31e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b370:	2b00      	cmp	r3, #0
 800b372:	d017      	beq.n	800b3a4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b37a:	4a15      	ldr	r2, [pc, #84]	@ (800b3d0 <HAL_UART_IRQHandler+0x2c0>)
 800b37c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b384:	4618      	mov	r0, r3
 800b386:	f7fc f9fb 	bl	8007780 <HAL_DMA_Abort_IT>
 800b38a:	4603      	mov	r3, r0
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d019      	beq.n	800b3c4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b398:	687a      	ldr	r2, [r7, #4]
 800b39a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800b39e:	4610      	mov	r0, r2
 800b3a0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3a2:	e00f      	b.n	800b3c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b3a4:	6878      	ldr	r0, [r7, #4]
 800b3a6:	f000 f9ff 	bl	800b7a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3aa:	e00b      	b.n	800b3c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b3ac:	6878      	ldr	r0, [r7, #4]
 800b3ae:	f000 f9fb 	bl	800b7a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3b2:	e007      	b.n	800b3c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b3b4:	6878      	ldr	r0, [r7, #4]
 800b3b6:	f000 f9f7 	bl	800b7a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	2200      	movs	r2, #0
 800b3be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800b3c2:	e1dc      	b.n	800b77e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3c4:	bf00      	nop
    return;
 800b3c6:	e1da      	b.n	800b77e <HAL_UART_IRQHandler+0x66e>
 800b3c8:	10000001 	.word	0x10000001
 800b3cc:	04000120 	.word	0x04000120
 800b3d0:	0800c461 	.word	0x0800c461

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b3d8:	2b01      	cmp	r3, #1
 800b3da:	f040 8170 	bne.w	800b6be <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b3de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b3e2:	f003 0310 	and.w	r3, r3, #16
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	f000 8169 	beq.w	800b6be <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b3ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b3f0:	f003 0310 	and.w	r3, r3, #16
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	f000 8162 	beq.w	800b6be <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	2210      	movs	r2, #16
 800b400:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	689b      	ldr	r3, [r3, #8]
 800b408:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b40c:	2b40      	cmp	r3, #64	@ 0x40
 800b40e:	f040 80d8 	bne.w	800b5c2 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	685b      	ldr	r3, [r3, #4]
 800b41c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b420:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b424:	2b00      	cmp	r3, #0
 800b426:	f000 80af 	beq.w	800b588 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b430:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b434:	429a      	cmp	r2, r3
 800b436:	f080 80a7 	bcs.w	800b588 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b440:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	f003 0320 	and.w	r3, r3, #32
 800b452:	2b00      	cmp	r3, #0
 800b454:	f040 8087 	bne.w	800b566 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b460:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b464:	e853 3f00 	ldrex	r3, [r3]
 800b468:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b46c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b470:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b474:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	461a      	mov	r2, r3
 800b47e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b482:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b486:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b48a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b48e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b492:	e841 2300 	strex	r3, r2, [r1]
 800b496:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b49a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d1da      	bne.n	800b458 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	3308      	adds	r3, #8
 800b4a8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b4ac:	e853 3f00 	ldrex	r3, [r3]
 800b4b0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b4b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b4b4:	f023 0301 	bic.w	r3, r3, #1
 800b4b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	3308      	adds	r3, #8
 800b4c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b4c6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b4ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4cc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b4ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b4d2:	e841 2300 	strex	r3, r2, [r1]
 800b4d6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b4d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d1e1      	bne.n	800b4a2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	3308      	adds	r3, #8
 800b4e4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b4e8:	e853 3f00 	ldrex	r3, [r3]
 800b4ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b4ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b4f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b4f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	3308      	adds	r3, #8
 800b4fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b502:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b504:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b506:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b508:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b50a:	e841 2300 	strex	r3, r2, [r1]
 800b50e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b510:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b512:	2b00      	cmp	r3, #0
 800b514:	d1e3      	bne.n	800b4de <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	2220      	movs	r2, #32
 800b51a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2200      	movs	r2, #0
 800b522:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b52a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b52c:	e853 3f00 	ldrex	r3, [r3]
 800b530:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b532:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b534:	f023 0310 	bic.w	r3, r3, #16
 800b538:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	461a      	mov	r2, r3
 800b542:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b546:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b548:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b54a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b54c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b54e:	e841 2300 	strex	r3, r2, [r1]
 800b552:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b554:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b556:	2b00      	cmp	r3, #0
 800b558:	d1e4      	bne.n	800b524 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b560:	4618      	mov	r0, r3
 800b562:	f7fc f8ae 	bl	80076c2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2202      	movs	r2, #2
 800b56a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b578:	b29b      	uxth	r3, r3
 800b57a:	1ad3      	subs	r3, r2, r3
 800b57c:	b29b      	uxth	r3, r3
 800b57e:	4619      	mov	r1, r3
 800b580:	6878      	ldr	r0, [r7, #4]
 800b582:	f000 f91b 	bl	800b7bc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800b586:	e0fc      	b.n	800b782 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b58e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b592:	429a      	cmp	r2, r3
 800b594:	f040 80f5 	bne.w	800b782 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	f003 0320 	and.w	r3, r3, #32
 800b5a6:	2b20      	cmp	r3, #32
 800b5a8:	f040 80eb 	bne.w	800b782 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2202      	movs	r2, #2
 800b5b0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b5b8:	4619      	mov	r1, r3
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	f000 f8fe 	bl	800b7bc <HAL_UARTEx_RxEventCallback>
      return;
 800b5c0:	e0df      	b.n	800b782 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b5ce:	b29b      	uxth	r3, r3
 800b5d0:	1ad3      	subs	r3, r2, r3
 800b5d2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b5dc:	b29b      	uxth	r3, r3
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	f000 80d1 	beq.w	800b786 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800b5e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	f000 80cc 	beq.w	800b786 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5f6:	e853 3f00 	ldrex	r3, [r3]
 800b5fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b5fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b602:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	461a      	mov	r2, r3
 800b60c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b610:	647b      	str	r3, [r7, #68]	@ 0x44
 800b612:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b614:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b616:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b618:	e841 2300 	strex	r3, r2, [r1]
 800b61c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b61e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b620:	2b00      	cmp	r3, #0
 800b622:	d1e4      	bne.n	800b5ee <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	3308      	adds	r3, #8
 800b62a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b62c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b62e:	e853 3f00 	ldrex	r3, [r3]
 800b632:	623b      	str	r3, [r7, #32]
   return(result);
 800b634:	6a3b      	ldr	r3, [r7, #32]
 800b636:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b63a:	f023 0301 	bic.w	r3, r3, #1
 800b63e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	3308      	adds	r3, #8
 800b648:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b64c:	633a      	str	r2, [r7, #48]	@ 0x30
 800b64e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b650:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b652:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b654:	e841 2300 	strex	r3, r2, [r1]
 800b658:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b65a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d1e1      	bne.n	800b624 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2220      	movs	r2, #32
 800b664:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2200      	movs	r2, #0
 800b66c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2200      	movs	r2, #0
 800b672:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b67a:	693b      	ldr	r3, [r7, #16]
 800b67c:	e853 3f00 	ldrex	r3, [r3]
 800b680:	60fb      	str	r3, [r7, #12]
   return(result);
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	f023 0310 	bic.w	r3, r3, #16
 800b688:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	461a      	mov	r2, r3
 800b692:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b696:	61fb      	str	r3, [r7, #28]
 800b698:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b69a:	69b9      	ldr	r1, [r7, #24]
 800b69c:	69fa      	ldr	r2, [r7, #28]
 800b69e:	e841 2300 	strex	r3, r2, [r1]
 800b6a2:	617b      	str	r3, [r7, #20]
   return(result);
 800b6a4:	697b      	ldr	r3, [r7, #20]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d1e4      	bne.n	800b674 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2202      	movs	r2, #2
 800b6ae:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b6b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b6b4:	4619      	mov	r1, r3
 800b6b6:	6878      	ldr	r0, [r7, #4]
 800b6b8:	f000 f880 	bl	800b7bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b6bc:	e063      	b.n	800b786 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b6be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b6c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d00e      	beq.n	800b6e8 <HAL_UART_IRQHandler+0x5d8>
 800b6ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b6ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d008      	beq.n	800b6e8 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b6de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b6e0:	6878      	ldr	r0, [r7, #4]
 800b6e2:	f001 fc1b 	bl	800cf1c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b6e6:	e051      	b.n	800b78c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b6e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b6ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d014      	beq.n	800b71e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b6f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b6f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d105      	bne.n	800b70c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b700:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b704:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d008      	beq.n	800b71e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b710:	2b00      	cmp	r3, #0
 800b712:	d03a      	beq.n	800b78a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b718:	6878      	ldr	r0, [r7, #4]
 800b71a:	4798      	blx	r3
    }
    return;
 800b71c:	e035      	b.n	800b78a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b71e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b722:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b726:	2b00      	cmp	r3, #0
 800b728:	d009      	beq.n	800b73e <HAL_UART_IRQHandler+0x62e>
 800b72a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b72e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b732:	2b00      	cmp	r3, #0
 800b734:	d003      	beq.n	800b73e <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800b736:	6878      	ldr	r0, [r7, #4]
 800b738:	f000 fea4 	bl	800c484 <UART_EndTransmit_IT>
    return;
 800b73c:	e026      	b.n	800b78c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b73e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b742:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b746:	2b00      	cmp	r3, #0
 800b748:	d009      	beq.n	800b75e <HAL_UART_IRQHandler+0x64e>
 800b74a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b74e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b752:	2b00      	cmp	r3, #0
 800b754:	d003      	beq.n	800b75e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b756:	6878      	ldr	r0, [r7, #4]
 800b758:	f001 fbf4 	bl	800cf44 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b75c:	e016      	b.n	800b78c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b75e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b762:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b766:	2b00      	cmp	r3, #0
 800b768:	d010      	beq.n	800b78c <HAL_UART_IRQHandler+0x67c>
 800b76a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b76e:	2b00      	cmp	r3, #0
 800b770:	da0c      	bge.n	800b78c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b772:	6878      	ldr	r0, [r7, #4]
 800b774:	f001 fbdc 	bl	800cf30 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b778:	e008      	b.n	800b78c <HAL_UART_IRQHandler+0x67c>
      return;
 800b77a:	bf00      	nop
 800b77c:	e006      	b.n	800b78c <HAL_UART_IRQHandler+0x67c>
    return;
 800b77e:	bf00      	nop
 800b780:	e004      	b.n	800b78c <HAL_UART_IRQHandler+0x67c>
      return;
 800b782:	bf00      	nop
 800b784:	e002      	b.n	800b78c <HAL_UART_IRQHandler+0x67c>
      return;
 800b786:	bf00      	nop
 800b788:	e000      	b.n	800b78c <HAL_UART_IRQHandler+0x67c>
    return;
 800b78a:	bf00      	nop
  }
}
 800b78c:	37e8      	adds	r7, #232	@ 0xe8
 800b78e:	46bd      	mov	sp, r7
 800b790:	bd80      	pop	{r7, pc}
 800b792:	bf00      	nop

0800b794 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b794:	b480      	push	{r7}
 800b796:	b083      	sub	sp, #12
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b79c:	bf00      	nop
 800b79e:	370c      	adds	r7, #12
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a6:	4770      	bx	lr

0800b7a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b083      	sub	sp, #12
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b7b0:	bf00      	nop
 800b7b2:	370c      	adds	r7, #12
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ba:	4770      	bx	lr

0800b7bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b7bc:	b480      	push	{r7}
 800b7be:	b083      	sub	sp, #12
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
 800b7c4:	460b      	mov	r3, r1
 800b7c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b7c8:	bf00      	nop
 800b7ca:	370c      	adds	r7, #12
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d2:	4770      	bx	lr

0800b7d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b7d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b7d8:	b08c      	sub	sp, #48	@ 0x30
 800b7da:	af00      	add	r7, sp, #0
 800b7dc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b7de:	2300      	movs	r3, #0
 800b7e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b7e4:	697b      	ldr	r3, [r7, #20]
 800b7e6:	689a      	ldr	r2, [r3, #8]
 800b7e8:	697b      	ldr	r3, [r7, #20]
 800b7ea:	691b      	ldr	r3, [r3, #16]
 800b7ec:	431a      	orrs	r2, r3
 800b7ee:	697b      	ldr	r3, [r7, #20]
 800b7f0:	695b      	ldr	r3, [r3, #20]
 800b7f2:	431a      	orrs	r2, r3
 800b7f4:	697b      	ldr	r3, [r7, #20]
 800b7f6:	69db      	ldr	r3, [r3, #28]
 800b7f8:	4313      	orrs	r3, r2
 800b7fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b7fc:	697b      	ldr	r3, [r7, #20]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	681a      	ldr	r2, [r3, #0]
 800b802:	4baf      	ldr	r3, [pc, #700]	@ (800bac0 <UART_SetConfig+0x2ec>)
 800b804:	4013      	ands	r3, r2
 800b806:	697a      	ldr	r2, [r7, #20]
 800b808:	6812      	ldr	r2, [r2, #0]
 800b80a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b80c:	430b      	orrs	r3, r1
 800b80e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b810:	697b      	ldr	r3, [r7, #20]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	685b      	ldr	r3, [r3, #4]
 800b816:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b81a:	697b      	ldr	r3, [r7, #20]
 800b81c:	68da      	ldr	r2, [r3, #12]
 800b81e:	697b      	ldr	r3, [r7, #20]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	430a      	orrs	r2, r1
 800b824:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b826:	697b      	ldr	r3, [r7, #20]
 800b828:	699b      	ldr	r3, [r3, #24]
 800b82a:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b82c:	697b      	ldr	r3, [r7, #20]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	4aa4      	ldr	r2, [pc, #656]	@ (800bac4 <UART_SetConfig+0x2f0>)
 800b832:	4293      	cmp	r3, r2
 800b834:	d004      	beq.n	800b840 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b836:	697b      	ldr	r3, [r7, #20]
 800b838:	6a1b      	ldr	r3, [r3, #32]
 800b83a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b83c:	4313      	orrs	r3, r2
 800b83e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b840:	697b      	ldr	r3, [r7, #20]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	689b      	ldr	r3, [r3, #8]
 800b846:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800b84a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800b84e:	697a      	ldr	r2, [r7, #20]
 800b850:	6812      	ldr	r2, [r2, #0]
 800b852:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b854:	430b      	orrs	r3, r1
 800b856:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b858:	697b      	ldr	r3, [r7, #20]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b85e:	f023 010f 	bic.w	r1, r3, #15
 800b862:	697b      	ldr	r3, [r7, #20]
 800b864:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b866:	697b      	ldr	r3, [r7, #20]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	430a      	orrs	r2, r1
 800b86c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b86e:	697b      	ldr	r3, [r7, #20]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	4a95      	ldr	r2, [pc, #596]	@ (800bac8 <UART_SetConfig+0x2f4>)
 800b874:	4293      	cmp	r3, r2
 800b876:	d125      	bne.n	800b8c4 <UART_SetConfig+0xf0>
 800b878:	2003      	movs	r0, #3
 800b87a:	f7ff fb0d 	bl	800ae98 <LL_RCC_GetUSARTClockSource>
 800b87e:	4603      	mov	r3, r0
 800b880:	2b03      	cmp	r3, #3
 800b882:	d81b      	bhi.n	800b8bc <UART_SetConfig+0xe8>
 800b884:	a201      	add	r2, pc, #4	@ (adr r2, 800b88c <UART_SetConfig+0xb8>)
 800b886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b88a:	bf00      	nop
 800b88c:	0800b89d 	.word	0x0800b89d
 800b890:	0800b8ad 	.word	0x0800b8ad
 800b894:	0800b8a5 	.word	0x0800b8a5
 800b898:	0800b8b5 	.word	0x0800b8b5
 800b89c:	2301      	movs	r3, #1
 800b89e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b8a2:	e042      	b.n	800b92a <UART_SetConfig+0x156>
 800b8a4:	2302      	movs	r3, #2
 800b8a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b8aa:	e03e      	b.n	800b92a <UART_SetConfig+0x156>
 800b8ac:	2304      	movs	r3, #4
 800b8ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b8b2:	e03a      	b.n	800b92a <UART_SetConfig+0x156>
 800b8b4:	2308      	movs	r3, #8
 800b8b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b8ba:	e036      	b.n	800b92a <UART_SetConfig+0x156>
 800b8bc:	2310      	movs	r3, #16
 800b8be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b8c2:	e032      	b.n	800b92a <UART_SetConfig+0x156>
 800b8c4:	697b      	ldr	r3, [r7, #20]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	4a7e      	ldr	r2, [pc, #504]	@ (800bac4 <UART_SetConfig+0x2f0>)
 800b8ca:	4293      	cmp	r3, r2
 800b8cc:	d12a      	bne.n	800b924 <UART_SetConfig+0x150>
 800b8ce:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800b8d2:	f7ff faf1 	bl	800aeb8 <LL_RCC_GetLPUARTClockSource>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b8dc:	d01a      	beq.n	800b914 <UART_SetConfig+0x140>
 800b8de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b8e2:	d81b      	bhi.n	800b91c <UART_SetConfig+0x148>
 800b8e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b8e8:	d00c      	beq.n	800b904 <UART_SetConfig+0x130>
 800b8ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b8ee:	d815      	bhi.n	800b91c <UART_SetConfig+0x148>
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d003      	beq.n	800b8fc <UART_SetConfig+0x128>
 800b8f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b8f8:	d008      	beq.n	800b90c <UART_SetConfig+0x138>
 800b8fa:	e00f      	b.n	800b91c <UART_SetConfig+0x148>
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b902:	e012      	b.n	800b92a <UART_SetConfig+0x156>
 800b904:	2302      	movs	r3, #2
 800b906:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b90a:	e00e      	b.n	800b92a <UART_SetConfig+0x156>
 800b90c:	2304      	movs	r3, #4
 800b90e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b912:	e00a      	b.n	800b92a <UART_SetConfig+0x156>
 800b914:	2308      	movs	r3, #8
 800b916:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b91a:	e006      	b.n	800b92a <UART_SetConfig+0x156>
 800b91c:	2310      	movs	r3, #16
 800b91e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b922:	e002      	b.n	800b92a <UART_SetConfig+0x156>
 800b924:	2310      	movs	r3, #16
 800b926:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b92a:	697b      	ldr	r3, [r7, #20]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	4a65      	ldr	r2, [pc, #404]	@ (800bac4 <UART_SetConfig+0x2f0>)
 800b930:	4293      	cmp	r3, r2
 800b932:	f040 8097 	bne.w	800ba64 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b936:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b93a:	2b08      	cmp	r3, #8
 800b93c:	d823      	bhi.n	800b986 <UART_SetConfig+0x1b2>
 800b93e:	a201      	add	r2, pc, #4	@ (adr r2, 800b944 <UART_SetConfig+0x170>)
 800b940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b944:	0800b969 	.word	0x0800b969
 800b948:	0800b987 	.word	0x0800b987
 800b94c:	0800b971 	.word	0x0800b971
 800b950:	0800b987 	.word	0x0800b987
 800b954:	0800b977 	.word	0x0800b977
 800b958:	0800b987 	.word	0x0800b987
 800b95c:	0800b987 	.word	0x0800b987
 800b960:	0800b987 	.word	0x0800b987
 800b964:	0800b97f 	.word	0x0800b97f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b968:	f7fd fcfa 	bl	8009360 <HAL_RCC_GetPCLK1Freq>
 800b96c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b96e:	e010      	b.n	800b992 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b970:	4b56      	ldr	r3, [pc, #344]	@ (800bacc <UART_SetConfig+0x2f8>)
 800b972:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b974:	e00d      	b.n	800b992 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b976:	f7fd fc73 	bl	8009260 <HAL_RCC_GetSysClockFreq>
 800b97a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b97c:	e009      	b.n	800b992 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b97e:	f248 0306 	movw	r3, #32774	@ 0x8006
 800b982:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b984:	e005      	b.n	800b992 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800b986:	2300      	movs	r3, #0
 800b988:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b98a:	2301      	movs	r3, #1
 800b98c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b990:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b994:	2b00      	cmp	r3, #0
 800b996:	f000 812b 	beq.w	800bbf0 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b99a:	697b      	ldr	r3, [r7, #20]
 800b99c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b99e:	4a4c      	ldr	r2, [pc, #304]	@ (800bad0 <UART_SetConfig+0x2fc>)
 800b9a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b9a4:	461a      	mov	r2, r3
 800b9a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9a8:	fbb3 f3f2 	udiv	r3, r3, r2
 800b9ac:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b9ae:	697b      	ldr	r3, [r7, #20]
 800b9b0:	685a      	ldr	r2, [r3, #4]
 800b9b2:	4613      	mov	r3, r2
 800b9b4:	005b      	lsls	r3, r3, #1
 800b9b6:	4413      	add	r3, r2
 800b9b8:	69ba      	ldr	r2, [r7, #24]
 800b9ba:	429a      	cmp	r2, r3
 800b9bc:	d305      	bcc.n	800b9ca <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b9be:	697b      	ldr	r3, [r7, #20]
 800b9c0:	685b      	ldr	r3, [r3, #4]
 800b9c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b9c4:	69ba      	ldr	r2, [r7, #24]
 800b9c6:	429a      	cmp	r2, r3
 800b9c8:	d903      	bls.n	800b9d2 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800b9ca:	2301      	movs	r3, #1
 800b9cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b9d0:	e10e      	b.n	800bbf0 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b9d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	60bb      	str	r3, [r7, #8]
 800b9d8:	60fa      	str	r2, [r7, #12]
 800b9da:	697b      	ldr	r3, [r7, #20]
 800b9dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9de:	4a3c      	ldr	r2, [pc, #240]	@ (800bad0 <UART_SetConfig+0x2fc>)
 800b9e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b9e4:	b29b      	uxth	r3, r3
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	603b      	str	r3, [r7, #0]
 800b9ea:	607a      	str	r2, [r7, #4]
 800b9ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b9f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b9f4:	f7f5 f8c0 	bl	8000b78 <__aeabi_uldivmod>
 800b9f8:	4602      	mov	r2, r0
 800b9fa:	460b      	mov	r3, r1
 800b9fc:	4610      	mov	r0, r2
 800b9fe:	4619      	mov	r1, r3
 800ba00:	f04f 0200 	mov.w	r2, #0
 800ba04:	f04f 0300 	mov.w	r3, #0
 800ba08:	020b      	lsls	r3, r1, #8
 800ba0a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ba0e:	0202      	lsls	r2, r0, #8
 800ba10:	6979      	ldr	r1, [r7, #20]
 800ba12:	6849      	ldr	r1, [r1, #4]
 800ba14:	0849      	lsrs	r1, r1, #1
 800ba16:	2000      	movs	r0, #0
 800ba18:	460c      	mov	r4, r1
 800ba1a:	4605      	mov	r5, r0
 800ba1c:	eb12 0804 	adds.w	r8, r2, r4
 800ba20:	eb43 0905 	adc.w	r9, r3, r5
 800ba24:	697b      	ldr	r3, [r7, #20]
 800ba26:	685b      	ldr	r3, [r3, #4]
 800ba28:	2200      	movs	r2, #0
 800ba2a:	469a      	mov	sl, r3
 800ba2c:	4693      	mov	fp, r2
 800ba2e:	4652      	mov	r2, sl
 800ba30:	465b      	mov	r3, fp
 800ba32:	4640      	mov	r0, r8
 800ba34:	4649      	mov	r1, r9
 800ba36:	f7f5 f89f 	bl	8000b78 <__aeabi_uldivmod>
 800ba3a:	4602      	mov	r2, r0
 800ba3c:	460b      	mov	r3, r1
 800ba3e:	4613      	mov	r3, r2
 800ba40:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ba42:	6a3b      	ldr	r3, [r7, #32]
 800ba44:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ba48:	d308      	bcc.n	800ba5c <UART_SetConfig+0x288>
 800ba4a:	6a3b      	ldr	r3, [r7, #32]
 800ba4c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ba50:	d204      	bcs.n	800ba5c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800ba52:	697b      	ldr	r3, [r7, #20]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	6a3a      	ldr	r2, [r7, #32]
 800ba58:	60da      	str	r2, [r3, #12]
 800ba5a:	e0c9      	b.n	800bbf0 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800ba5c:	2301      	movs	r3, #1
 800ba5e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ba62:	e0c5      	b.n	800bbf0 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ba64:	697b      	ldr	r3, [r7, #20]
 800ba66:	69db      	ldr	r3, [r3, #28]
 800ba68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ba6c:	d16d      	bne.n	800bb4a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800ba6e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ba72:	3b01      	subs	r3, #1
 800ba74:	2b07      	cmp	r3, #7
 800ba76:	d82d      	bhi.n	800bad4 <UART_SetConfig+0x300>
 800ba78:	a201      	add	r2, pc, #4	@ (adr r2, 800ba80 <UART_SetConfig+0x2ac>)
 800ba7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba7e:	bf00      	nop
 800ba80:	0800baa1 	.word	0x0800baa1
 800ba84:	0800baa9 	.word	0x0800baa9
 800ba88:	0800bad5 	.word	0x0800bad5
 800ba8c:	0800baaf 	.word	0x0800baaf
 800ba90:	0800bad5 	.word	0x0800bad5
 800ba94:	0800bad5 	.word	0x0800bad5
 800ba98:	0800bad5 	.word	0x0800bad5
 800ba9c:	0800bab7 	.word	0x0800bab7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800baa0:	f7fd fc74 	bl	800938c <HAL_RCC_GetPCLK2Freq>
 800baa4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800baa6:	e01b      	b.n	800bae0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800baa8:	4b08      	ldr	r3, [pc, #32]	@ (800bacc <UART_SetConfig+0x2f8>)
 800baaa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800baac:	e018      	b.n	800bae0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800baae:	f7fd fbd7 	bl	8009260 <HAL_RCC_GetSysClockFreq>
 800bab2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bab4:	e014      	b.n	800bae0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bab6:	f248 0306 	movw	r3, #32774	@ 0x8006
 800baba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800babc:	e010      	b.n	800bae0 <UART_SetConfig+0x30c>
 800babe:	bf00      	nop
 800bac0:	cfff69f3 	.word	0xcfff69f3
 800bac4:	40008000 	.word	0x40008000
 800bac8:	40013800 	.word	0x40013800
 800bacc:	00f42400 	.word	0x00f42400
 800bad0:	08015544 	.word	0x08015544
      default:
        pclk = 0U;
 800bad4:	2300      	movs	r3, #0
 800bad6:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800bad8:	2301      	movs	r3, #1
 800bada:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800bade:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	f000 8084 	beq.w	800bbf0 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bae8:	697b      	ldr	r3, [r7, #20]
 800baea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800baec:	4a4b      	ldr	r2, [pc, #300]	@ (800bc1c <UART_SetConfig+0x448>)
 800baee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800baf2:	461a      	mov	r2, r3
 800baf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baf6:	fbb3 f3f2 	udiv	r3, r3, r2
 800bafa:	005a      	lsls	r2, r3, #1
 800bafc:	697b      	ldr	r3, [r7, #20]
 800bafe:	685b      	ldr	r3, [r3, #4]
 800bb00:	085b      	lsrs	r3, r3, #1
 800bb02:	441a      	add	r2, r3
 800bb04:	697b      	ldr	r3, [r7, #20]
 800bb06:	685b      	ldr	r3, [r3, #4]
 800bb08:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb0c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bb0e:	6a3b      	ldr	r3, [r7, #32]
 800bb10:	2b0f      	cmp	r3, #15
 800bb12:	d916      	bls.n	800bb42 <UART_SetConfig+0x36e>
 800bb14:	6a3b      	ldr	r3, [r7, #32]
 800bb16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bb1a:	d212      	bcs.n	800bb42 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bb1c:	6a3b      	ldr	r3, [r7, #32]
 800bb1e:	b29b      	uxth	r3, r3
 800bb20:	f023 030f 	bic.w	r3, r3, #15
 800bb24:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bb26:	6a3b      	ldr	r3, [r7, #32]
 800bb28:	085b      	lsrs	r3, r3, #1
 800bb2a:	b29b      	uxth	r3, r3
 800bb2c:	f003 0307 	and.w	r3, r3, #7
 800bb30:	b29a      	uxth	r2, r3
 800bb32:	8bfb      	ldrh	r3, [r7, #30]
 800bb34:	4313      	orrs	r3, r2
 800bb36:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800bb38:	697b      	ldr	r3, [r7, #20]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	8bfa      	ldrh	r2, [r7, #30]
 800bb3e:	60da      	str	r2, [r3, #12]
 800bb40:	e056      	b.n	800bbf0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800bb42:	2301      	movs	r3, #1
 800bb44:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800bb48:	e052      	b.n	800bbf0 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bb4a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bb4e:	3b01      	subs	r3, #1
 800bb50:	2b07      	cmp	r3, #7
 800bb52:	d822      	bhi.n	800bb9a <UART_SetConfig+0x3c6>
 800bb54:	a201      	add	r2, pc, #4	@ (adr r2, 800bb5c <UART_SetConfig+0x388>)
 800bb56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb5a:	bf00      	nop
 800bb5c:	0800bb7d 	.word	0x0800bb7d
 800bb60:	0800bb85 	.word	0x0800bb85
 800bb64:	0800bb9b 	.word	0x0800bb9b
 800bb68:	0800bb8b 	.word	0x0800bb8b
 800bb6c:	0800bb9b 	.word	0x0800bb9b
 800bb70:	0800bb9b 	.word	0x0800bb9b
 800bb74:	0800bb9b 	.word	0x0800bb9b
 800bb78:	0800bb93 	.word	0x0800bb93
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bb7c:	f7fd fc06 	bl	800938c <HAL_RCC_GetPCLK2Freq>
 800bb80:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bb82:	e010      	b.n	800bba6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bb84:	4b26      	ldr	r3, [pc, #152]	@ (800bc20 <UART_SetConfig+0x44c>)
 800bb86:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bb88:	e00d      	b.n	800bba6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bb8a:	f7fd fb69 	bl	8009260 <HAL_RCC_GetSysClockFreq>
 800bb8e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bb90:	e009      	b.n	800bba6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bb92:	f248 0306 	movw	r3, #32774	@ 0x8006
 800bb96:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bb98:	e005      	b.n	800bba6 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800bb9e:	2301      	movs	r3, #1
 800bba0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800bba4:	bf00      	nop
    }

    if (pclk != 0U)
 800bba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d021      	beq.n	800bbf0 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bbac:	697b      	ldr	r3, [r7, #20]
 800bbae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbb0:	4a1a      	ldr	r2, [pc, #104]	@ (800bc1c <UART_SetConfig+0x448>)
 800bbb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bbb6:	461a      	mov	r2, r3
 800bbb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbba:	fbb3 f2f2 	udiv	r2, r3, r2
 800bbbe:	697b      	ldr	r3, [r7, #20]
 800bbc0:	685b      	ldr	r3, [r3, #4]
 800bbc2:	085b      	lsrs	r3, r3, #1
 800bbc4:	441a      	add	r2, r3
 800bbc6:	697b      	ldr	r3, [r7, #20]
 800bbc8:	685b      	ldr	r3, [r3, #4]
 800bbca:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbce:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bbd0:	6a3b      	ldr	r3, [r7, #32]
 800bbd2:	2b0f      	cmp	r3, #15
 800bbd4:	d909      	bls.n	800bbea <UART_SetConfig+0x416>
 800bbd6:	6a3b      	ldr	r3, [r7, #32]
 800bbd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bbdc:	d205      	bcs.n	800bbea <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bbde:	6a3b      	ldr	r3, [r7, #32]
 800bbe0:	b29a      	uxth	r2, r3
 800bbe2:	697b      	ldr	r3, [r7, #20]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	60da      	str	r2, [r3, #12]
 800bbe8:	e002      	b.n	800bbf0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800bbea:	2301      	movs	r3, #1
 800bbec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bbf0:	697b      	ldr	r3, [r7, #20]
 800bbf2:	2201      	movs	r2, #1
 800bbf4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800bbf8:	697b      	ldr	r3, [r7, #20]
 800bbfa:	2201      	movs	r2, #1
 800bbfc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bc00:	697b      	ldr	r3, [r7, #20]
 800bc02:	2200      	movs	r2, #0
 800bc04:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800bc06:	697b      	ldr	r3, [r7, #20]
 800bc08:	2200      	movs	r2, #0
 800bc0a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800bc0c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800bc10:	4618      	mov	r0, r3
 800bc12:	3730      	adds	r7, #48	@ 0x30
 800bc14:	46bd      	mov	sp, r7
 800bc16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bc1a:	bf00      	nop
 800bc1c:	08015544 	.word	0x08015544
 800bc20:	00f42400 	.word	0x00f42400

0800bc24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bc24:	b480      	push	{r7}
 800bc26:	b083      	sub	sp, #12
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc30:	f003 0308 	and.w	r3, r3, #8
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d00a      	beq.n	800bc4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	685b      	ldr	r3, [r3, #4]
 800bc3e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	430a      	orrs	r2, r1
 800bc4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc52:	f003 0301 	and.w	r3, r3, #1
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d00a      	beq.n	800bc70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	685b      	ldr	r3, [r3, #4]
 800bc60:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	430a      	orrs	r2, r1
 800bc6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc74:	f003 0302 	and.w	r3, r3, #2
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d00a      	beq.n	800bc92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	685b      	ldr	r3, [r3, #4]
 800bc82:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	430a      	orrs	r2, r1
 800bc90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc96:	f003 0304 	and.w	r3, r3, #4
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d00a      	beq.n	800bcb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	685b      	ldr	r3, [r3, #4]
 800bca4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	430a      	orrs	r2, r1
 800bcb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcb8:	f003 0310 	and.w	r3, r3, #16
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d00a      	beq.n	800bcd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	689b      	ldr	r3, [r3, #8]
 800bcc6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	430a      	orrs	r2, r1
 800bcd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcda:	f003 0320 	and.w	r3, r3, #32
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d00a      	beq.n	800bcf8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	689b      	ldr	r3, [r3, #8]
 800bce8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	430a      	orrs	r2, r1
 800bcf6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d01a      	beq.n	800bd3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	685b      	ldr	r3, [r3, #4]
 800bd0a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	430a      	orrs	r2, r1
 800bd18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bd22:	d10a      	bne.n	800bd3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	685b      	ldr	r3, [r3, #4]
 800bd2a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	430a      	orrs	r2, r1
 800bd38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d00a      	beq.n	800bd5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	685b      	ldr	r3, [r3, #4]
 800bd4c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	430a      	orrs	r2, r1
 800bd5a:	605a      	str	r2, [r3, #4]
  }
}
 800bd5c:	bf00      	nop
 800bd5e:	370c      	adds	r7, #12
 800bd60:	46bd      	mov	sp, r7
 800bd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd66:	4770      	bx	lr

0800bd68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b098      	sub	sp, #96	@ 0x60
 800bd6c:	af02      	add	r7, sp, #8
 800bd6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2200      	movs	r2, #0
 800bd74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bd78:	f7fb f9b6 	bl	80070e8 <HAL_GetTick>
 800bd7c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	f003 0308 	and.w	r3, r3, #8
 800bd88:	2b08      	cmp	r3, #8
 800bd8a:	d12f      	bne.n	800bdec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bd8c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bd90:	9300      	str	r3, [sp, #0]
 800bd92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bd94:	2200      	movs	r2, #0
 800bd96:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800bd9a:	6878      	ldr	r0, [r7, #4]
 800bd9c:	f000 f88e 	bl	800bebc <UART_WaitOnFlagUntilTimeout>
 800bda0:	4603      	mov	r3, r0
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d022      	beq.n	800bdec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdae:	e853 3f00 	ldrex	r3, [r3]
 800bdb2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bdb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bdb6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bdba:	653b      	str	r3, [r7, #80]	@ 0x50
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	461a      	mov	r2, r3
 800bdc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bdc4:	647b      	str	r3, [r7, #68]	@ 0x44
 800bdc6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdc8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bdca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bdcc:	e841 2300 	strex	r3, r2, [r1]
 800bdd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bdd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d1e6      	bne.n	800bda6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2220      	movs	r2, #32
 800bddc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2200      	movs	r2, #0
 800bde4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bde8:	2303      	movs	r3, #3
 800bdea:	e063      	b.n	800beb4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	f003 0304 	and.w	r3, r3, #4
 800bdf6:	2b04      	cmp	r3, #4
 800bdf8:	d149      	bne.n	800be8e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bdfa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bdfe:	9300      	str	r3, [sp, #0]
 800be00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be02:	2200      	movs	r2, #0
 800be04:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800be08:	6878      	ldr	r0, [r7, #4]
 800be0a:	f000 f857 	bl	800bebc <UART_WaitOnFlagUntilTimeout>
 800be0e:	4603      	mov	r3, r0
 800be10:	2b00      	cmp	r3, #0
 800be12:	d03c      	beq.n	800be8e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be1c:	e853 3f00 	ldrex	r3, [r3]
 800be20:	623b      	str	r3, [r7, #32]
   return(result);
 800be22:	6a3b      	ldr	r3, [r7, #32]
 800be24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800be28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	461a      	mov	r2, r3
 800be30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be32:	633b      	str	r3, [r7, #48]	@ 0x30
 800be34:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800be38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800be3a:	e841 2300 	strex	r3, r2, [r1]
 800be3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800be40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be42:	2b00      	cmp	r3, #0
 800be44:	d1e6      	bne.n	800be14 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	3308      	adds	r3, #8
 800be4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be4e:	693b      	ldr	r3, [r7, #16]
 800be50:	e853 3f00 	ldrex	r3, [r3]
 800be54:	60fb      	str	r3, [r7, #12]
   return(result);
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	f023 0301 	bic.w	r3, r3, #1
 800be5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	3308      	adds	r3, #8
 800be64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800be66:	61fa      	str	r2, [r7, #28]
 800be68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be6a:	69b9      	ldr	r1, [r7, #24]
 800be6c:	69fa      	ldr	r2, [r7, #28]
 800be6e:	e841 2300 	strex	r3, r2, [r1]
 800be72:	617b      	str	r3, [r7, #20]
   return(result);
 800be74:	697b      	ldr	r3, [r7, #20]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d1e5      	bne.n	800be46 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	2220      	movs	r2, #32
 800be7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	2200      	movs	r2, #0
 800be86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800be8a:	2303      	movs	r3, #3
 800be8c:	e012      	b.n	800beb4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	2220      	movs	r2, #32
 800be92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	2220      	movs	r2, #32
 800be9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	2200      	movs	r2, #0
 800bea2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2200      	movs	r2, #0
 800bea8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	2200      	movs	r2, #0
 800beae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800beb2:	2300      	movs	r3, #0
}
 800beb4:	4618      	mov	r0, r3
 800beb6:	3758      	adds	r7, #88	@ 0x58
 800beb8:	46bd      	mov	sp, r7
 800beba:	bd80      	pop	{r7, pc}

0800bebc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b084      	sub	sp, #16
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	60f8      	str	r0, [r7, #12]
 800bec4:	60b9      	str	r1, [r7, #8]
 800bec6:	603b      	str	r3, [r7, #0]
 800bec8:	4613      	mov	r3, r2
 800beca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800becc:	e04f      	b.n	800bf6e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bece:	69bb      	ldr	r3, [r7, #24]
 800bed0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bed4:	d04b      	beq.n	800bf6e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bed6:	f7fb f907 	bl	80070e8 <HAL_GetTick>
 800beda:	4602      	mov	r2, r0
 800bedc:	683b      	ldr	r3, [r7, #0]
 800bede:	1ad3      	subs	r3, r2, r3
 800bee0:	69ba      	ldr	r2, [r7, #24]
 800bee2:	429a      	cmp	r2, r3
 800bee4:	d302      	bcc.n	800beec <UART_WaitOnFlagUntilTimeout+0x30>
 800bee6:	69bb      	ldr	r3, [r7, #24]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d101      	bne.n	800bef0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800beec:	2303      	movs	r3, #3
 800beee:	e04e      	b.n	800bf8e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	f003 0304 	and.w	r3, r3, #4
 800befa:	2b00      	cmp	r3, #0
 800befc:	d037      	beq.n	800bf6e <UART_WaitOnFlagUntilTimeout+0xb2>
 800befe:	68bb      	ldr	r3, [r7, #8]
 800bf00:	2b80      	cmp	r3, #128	@ 0x80
 800bf02:	d034      	beq.n	800bf6e <UART_WaitOnFlagUntilTimeout+0xb2>
 800bf04:	68bb      	ldr	r3, [r7, #8]
 800bf06:	2b40      	cmp	r3, #64	@ 0x40
 800bf08:	d031      	beq.n	800bf6e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	69db      	ldr	r3, [r3, #28]
 800bf10:	f003 0308 	and.w	r3, r3, #8
 800bf14:	2b08      	cmp	r3, #8
 800bf16:	d110      	bne.n	800bf3a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	2208      	movs	r2, #8
 800bf1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bf20:	68f8      	ldr	r0, [r7, #12]
 800bf22:	f000 f99c 	bl	800c25e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	2208      	movs	r2, #8
 800bf2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	2200      	movs	r2, #0
 800bf32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800bf36:	2301      	movs	r3, #1
 800bf38:	e029      	b.n	800bf8e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	69db      	ldr	r3, [r3, #28]
 800bf40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bf44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bf48:	d111      	bne.n	800bf6e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bf52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bf54:	68f8      	ldr	r0, [r7, #12]
 800bf56:	f000 f982 	bl	800c25e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	2220      	movs	r2, #32
 800bf5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	2200      	movs	r2, #0
 800bf66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800bf6a:	2303      	movs	r3, #3
 800bf6c:	e00f      	b.n	800bf8e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	69da      	ldr	r2, [r3, #28]
 800bf74:	68bb      	ldr	r3, [r7, #8]
 800bf76:	4013      	ands	r3, r2
 800bf78:	68ba      	ldr	r2, [r7, #8]
 800bf7a:	429a      	cmp	r2, r3
 800bf7c:	bf0c      	ite	eq
 800bf7e:	2301      	moveq	r3, #1
 800bf80:	2300      	movne	r3, #0
 800bf82:	b2db      	uxtb	r3, r3
 800bf84:	461a      	mov	r2, r3
 800bf86:	79fb      	ldrb	r3, [r7, #7]
 800bf88:	429a      	cmp	r2, r3
 800bf8a:	d0a0      	beq.n	800bece <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bf8c:	2300      	movs	r3, #0
}
 800bf8e:	4618      	mov	r0, r3
 800bf90:	3710      	adds	r7, #16
 800bf92:	46bd      	mov	sp, r7
 800bf94:	bd80      	pop	{r7, pc}
	...

0800bf98 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bf98:	b480      	push	{r7}
 800bf9a:	b0a3      	sub	sp, #140	@ 0x8c
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	60f8      	str	r0, [r7, #12]
 800bfa0:	60b9      	str	r1, [r7, #8]
 800bfa2:	4613      	mov	r3, r2
 800bfa4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	68ba      	ldr	r2, [r7, #8]
 800bfaa:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	88fa      	ldrh	r2, [r7, #6]
 800bfb0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	88fa      	ldrh	r2, [r7, #6]
 800bfb8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	689b      	ldr	r3, [r3, #8]
 800bfc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bfca:	d10e      	bne.n	800bfea <UART_Start_Receive_IT+0x52>
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	691b      	ldr	r3, [r3, #16]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d105      	bne.n	800bfe0 <UART_Start_Receive_IT+0x48>
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800bfda:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800bfde:	e02d      	b.n	800c03c <UART_Start_Receive_IT+0xa4>
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	22ff      	movs	r2, #255	@ 0xff
 800bfe4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800bfe8:	e028      	b.n	800c03c <UART_Start_Receive_IT+0xa4>
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	689b      	ldr	r3, [r3, #8]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d10d      	bne.n	800c00e <UART_Start_Receive_IT+0x76>
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	691b      	ldr	r3, [r3, #16]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d104      	bne.n	800c004 <UART_Start_Receive_IT+0x6c>
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	22ff      	movs	r2, #255	@ 0xff
 800bffe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c002:	e01b      	b.n	800c03c <UART_Start_Receive_IT+0xa4>
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	227f      	movs	r2, #127	@ 0x7f
 800c008:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c00c:	e016      	b.n	800c03c <UART_Start_Receive_IT+0xa4>
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	689b      	ldr	r3, [r3, #8]
 800c012:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c016:	d10d      	bne.n	800c034 <UART_Start_Receive_IT+0x9c>
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	691b      	ldr	r3, [r3, #16]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d104      	bne.n	800c02a <UART_Start_Receive_IT+0x92>
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	227f      	movs	r2, #127	@ 0x7f
 800c024:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c028:	e008      	b.n	800c03c <UART_Start_Receive_IT+0xa4>
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	223f      	movs	r2, #63	@ 0x3f
 800c02e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c032:	e003      	b.n	800c03c <UART_Start_Receive_IT+0xa4>
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	2200      	movs	r2, #0
 800c038:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	2200      	movs	r2, #0
 800c040:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	2222      	movs	r2, #34	@ 0x22
 800c048:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	3308      	adds	r3, #8
 800c052:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c054:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c056:	e853 3f00 	ldrex	r3, [r3]
 800c05a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800c05c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c05e:	f043 0301 	orr.w	r3, r3, #1
 800c062:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	3308      	adds	r3, #8
 800c06c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800c070:	673a      	str	r2, [r7, #112]	@ 0x70
 800c072:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c074:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c076:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800c078:	e841 2300 	strex	r3, r2, [r1]
 800c07c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800c07e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c080:	2b00      	cmp	r3, #0
 800c082:	d1e3      	bne.n	800c04c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c088:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c08c:	d14f      	bne.n	800c12e <UART_Start_Receive_IT+0x196>
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c094:	88fa      	ldrh	r2, [r7, #6]
 800c096:	429a      	cmp	r2, r3
 800c098:	d349      	bcc.n	800c12e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	689b      	ldr	r3, [r3, #8]
 800c09e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c0a2:	d107      	bne.n	800c0b4 <UART_Start_Receive_IT+0x11c>
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	691b      	ldr	r3, [r3, #16]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d103      	bne.n	800c0b4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	4a47      	ldr	r2, [pc, #284]	@ (800c1cc <UART_Start_Receive_IT+0x234>)
 800c0b0:	675a      	str	r2, [r3, #116]	@ 0x74
 800c0b2:	e002      	b.n	800c0ba <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	4a46      	ldr	r2, [pc, #280]	@ (800c1d0 <UART_Start_Receive_IT+0x238>)
 800c0b8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	691b      	ldr	r3, [r3, #16]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d01a      	beq.n	800c0f8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0ca:	e853 3f00 	ldrex	r3, [r3]
 800c0ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c0d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c0d6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	461a      	mov	r2, r3
 800c0e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c0e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c0e6:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0e8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c0ea:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c0ec:	e841 2300 	strex	r3, r2, [r1]
 800c0f0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800c0f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d1e4      	bne.n	800c0c2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	3308      	adds	r3, #8
 800c0fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c100:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c102:	e853 3f00 	ldrex	r3, [r3]
 800c106:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c10a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c10e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	3308      	adds	r3, #8
 800c116:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800c118:	64ba      	str	r2, [r7, #72]	@ 0x48
 800c11a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c11c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c11e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c120:	e841 2300 	strex	r3, r2, [r1]
 800c124:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800c126:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d1e5      	bne.n	800c0f8 <UART_Start_Receive_IT+0x160>
 800c12c:	e046      	b.n	800c1bc <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	689b      	ldr	r3, [r3, #8]
 800c132:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c136:	d107      	bne.n	800c148 <UART_Start_Receive_IT+0x1b0>
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	691b      	ldr	r3, [r3, #16]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d103      	bne.n	800c148 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	4a24      	ldr	r2, [pc, #144]	@ (800c1d4 <UART_Start_Receive_IT+0x23c>)
 800c144:	675a      	str	r2, [r3, #116]	@ 0x74
 800c146:	e002      	b.n	800c14e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	4a23      	ldr	r2, [pc, #140]	@ (800c1d8 <UART_Start_Receive_IT+0x240>)
 800c14c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	691b      	ldr	r3, [r3, #16]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d019      	beq.n	800c18a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c15c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c15e:	e853 3f00 	ldrex	r3, [r3]
 800c162:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c166:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800c16a:	677b      	str	r3, [r7, #116]	@ 0x74
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	461a      	mov	r2, r3
 800c172:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c174:	637b      	str	r3, [r7, #52]	@ 0x34
 800c176:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c178:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c17a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c17c:	e841 2300 	strex	r3, r2, [r1]
 800c180:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800c182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c184:	2b00      	cmp	r3, #0
 800c186:	d1e6      	bne.n	800c156 <UART_Start_Receive_IT+0x1be>
 800c188:	e018      	b.n	800c1bc <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c190:	697b      	ldr	r3, [r7, #20]
 800c192:	e853 3f00 	ldrex	r3, [r3]
 800c196:	613b      	str	r3, [r7, #16]
   return(result);
 800c198:	693b      	ldr	r3, [r7, #16]
 800c19a:	f043 0320 	orr.w	r3, r3, #32
 800c19e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	461a      	mov	r2, r3
 800c1a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c1a8:	623b      	str	r3, [r7, #32]
 800c1aa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1ac:	69f9      	ldr	r1, [r7, #28]
 800c1ae:	6a3a      	ldr	r2, [r7, #32]
 800c1b0:	e841 2300 	strex	r3, r2, [r1]
 800c1b4:	61bb      	str	r3, [r7, #24]
   return(result);
 800c1b6:	69bb      	ldr	r3, [r7, #24]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d1e6      	bne.n	800c18a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800c1bc:	2300      	movs	r3, #0
}
 800c1be:	4618      	mov	r0, r3
 800c1c0:	378c      	adds	r7, #140	@ 0x8c
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c8:	4770      	bx	lr
 800c1ca:	bf00      	nop
 800c1cc:	0800cbb1 	.word	0x0800cbb1
 800c1d0:	0800c84d 	.word	0x0800c84d
 800c1d4:	0800c695 	.word	0x0800c695
 800c1d8:	0800c4dd 	.word	0x0800c4dd

0800c1dc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c1dc:	b480      	push	{r7}
 800c1de:	b08f      	sub	sp, #60	@ 0x3c
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1ea:	6a3b      	ldr	r3, [r7, #32]
 800c1ec:	e853 3f00 	ldrex	r3, [r3]
 800c1f0:	61fb      	str	r3, [r7, #28]
   return(result);
 800c1f2:	69fb      	ldr	r3, [r7, #28]
 800c1f4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c1f8:	637b      	str	r3, [r7, #52]	@ 0x34
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	461a      	mov	r2, r3
 800c200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c202:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c204:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c206:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c208:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c20a:	e841 2300 	strex	r3, r2, [r1]
 800c20e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c212:	2b00      	cmp	r3, #0
 800c214:	d1e6      	bne.n	800c1e4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	3308      	adds	r3, #8
 800c21c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	e853 3f00 	ldrex	r3, [r3]
 800c224:	60bb      	str	r3, [r7, #8]
   return(result);
 800c226:	68bb      	ldr	r3, [r7, #8]
 800c228:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800c22c:	633b      	str	r3, [r7, #48]	@ 0x30
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	3308      	adds	r3, #8
 800c234:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c236:	61ba      	str	r2, [r7, #24]
 800c238:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c23a:	6979      	ldr	r1, [r7, #20]
 800c23c:	69ba      	ldr	r2, [r7, #24]
 800c23e:	e841 2300 	strex	r3, r2, [r1]
 800c242:	613b      	str	r3, [r7, #16]
   return(result);
 800c244:	693b      	ldr	r3, [r7, #16]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d1e5      	bne.n	800c216 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	2220      	movs	r2, #32
 800c24e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800c252:	bf00      	nop
 800c254:	373c      	adds	r7, #60	@ 0x3c
 800c256:	46bd      	mov	sp, r7
 800c258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25c:	4770      	bx	lr

0800c25e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c25e:	b480      	push	{r7}
 800c260:	b095      	sub	sp, #84	@ 0x54
 800c262:	af00      	add	r7, sp, #0
 800c264:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c26c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c26e:	e853 3f00 	ldrex	r3, [r3]
 800c272:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c276:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c27a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	461a      	mov	r2, r3
 800c282:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c284:	643b      	str	r3, [r7, #64]	@ 0x40
 800c286:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c288:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c28a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c28c:	e841 2300 	strex	r3, r2, [r1]
 800c290:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c294:	2b00      	cmp	r3, #0
 800c296:	d1e6      	bne.n	800c266 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	3308      	adds	r3, #8
 800c29e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2a0:	6a3b      	ldr	r3, [r7, #32]
 800c2a2:	e853 3f00 	ldrex	r3, [r3]
 800c2a6:	61fb      	str	r3, [r7, #28]
   return(result);
 800c2a8:	69fb      	ldr	r3, [r7, #28]
 800c2aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c2ae:	f023 0301 	bic.w	r3, r3, #1
 800c2b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	3308      	adds	r3, #8
 800c2ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c2bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c2be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c2c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c2c4:	e841 2300 	strex	r3, r2, [r1]
 800c2c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c2ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d1e3      	bne.n	800c298 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c2d4:	2b01      	cmp	r3, #1
 800c2d6:	d118      	bne.n	800c30a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	e853 3f00 	ldrex	r3, [r3]
 800c2e4:	60bb      	str	r3, [r7, #8]
   return(result);
 800c2e6:	68bb      	ldr	r3, [r7, #8]
 800c2e8:	f023 0310 	bic.w	r3, r3, #16
 800c2ec:	647b      	str	r3, [r7, #68]	@ 0x44
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	461a      	mov	r2, r3
 800c2f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c2f6:	61bb      	str	r3, [r7, #24]
 800c2f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2fa:	6979      	ldr	r1, [r7, #20]
 800c2fc:	69ba      	ldr	r2, [r7, #24]
 800c2fe:	e841 2300 	strex	r3, r2, [r1]
 800c302:	613b      	str	r3, [r7, #16]
   return(result);
 800c304:	693b      	ldr	r3, [r7, #16]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d1e6      	bne.n	800c2d8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	2220      	movs	r2, #32
 800c30e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	2200      	movs	r2, #0
 800c316:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	2200      	movs	r2, #0
 800c31c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c31e:	bf00      	nop
 800c320:	3754      	adds	r7, #84	@ 0x54
 800c322:	46bd      	mov	sp, r7
 800c324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c328:	4770      	bx	lr

0800c32a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c32a:	b580      	push	{r7, lr}
 800c32c:	b090      	sub	sp, #64	@ 0x40
 800c32e:	af00      	add	r7, sp, #0
 800c330:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c336:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	f003 0320 	and.w	r3, r3, #32
 800c342:	2b00      	cmp	r3, #0
 800c344:	d137      	bne.n	800c3b6 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800c346:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c348:	2200      	movs	r2, #0
 800c34a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c34e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	3308      	adds	r3, #8
 800c354:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c358:	e853 3f00 	ldrex	r3, [r3]
 800c35c:	623b      	str	r3, [r7, #32]
   return(result);
 800c35e:	6a3b      	ldr	r3, [r7, #32]
 800c360:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c364:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c366:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	3308      	adds	r3, #8
 800c36c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c36e:	633a      	str	r2, [r7, #48]	@ 0x30
 800c370:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c372:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c374:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c376:	e841 2300 	strex	r3, r2, [r1]
 800c37a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c37c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d1e5      	bne.n	800c34e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c382:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c388:	693b      	ldr	r3, [r7, #16]
 800c38a:	e853 3f00 	ldrex	r3, [r3]
 800c38e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c396:	637b      	str	r3, [r7, #52]	@ 0x34
 800c398:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	461a      	mov	r2, r3
 800c39e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3a0:	61fb      	str	r3, [r7, #28]
 800c3a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3a4:	69b9      	ldr	r1, [r7, #24]
 800c3a6:	69fa      	ldr	r2, [r7, #28]
 800c3a8:	e841 2300 	strex	r3, r2, [r1]
 800c3ac:	617b      	str	r3, [r7, #20]
   return(result);
 800c3ae:	697b      	ldr	r3, [r7, #20]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d1e6      	bne.n	800c382 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c3b4:	e002      	b.n	800c3bc <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800c3b6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c3b8:	f7f6 f9dc 	bl	8002774 <HAL_UART_TxCpltCallback>
}
 800c3bc:	bf00      	nop
 800c3be:	3740      	adds	r7, #64	@ 0x40
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bd80      	pop	{r7, pc}

0800c3c4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b084      	sub	sp, #16
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3d0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c3d2:	68f8      	ldr	r0, [r7, #12]
 800c3d4:	f7ff f9de 	bl	800b794 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c3d8:	bf00      	nop
 800c3da:	3710      	adds	r7, #16
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}

0800c3e0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b086      	sub	sp, #24
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3ec:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c3ee:	697b      	ldr	r3, [r7, #20]
 800c3f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c3f4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c3f6:	697b      	ldr	r3, [r7, #20]
 800c3f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c3fc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c3fe:	697b      	ldr	r3, [r7, #20]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	689b      	ldr	r3, [r3, #8]
 800c404:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c408:	2b80      	cmp	r3, #128	@ 0x80
 800c40a:	d109      	bne.n	800c420 <UART_DMAError+0x40>
 800c40c:	693b      	ldr	r3, [r7, #16]
 800c40e:	2b21      	cmp	r3, #33	@ 0x21
 800c410:	d106      	bne.n	800c420 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c412:	697b      	ldr	r3, [r7, #20]
 800c414:	2200      	movs	r2, #0
 800c416:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800c41a:	6978      	ldr	r0, [r7, #20]
 800c41c:	f7ff fede 	bl	800c1dc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c420:	697b      	ldr	r3, [r7, #20]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	689b      	ldr	r3, [r3, #8]
 800c426:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c42a:	2b40      	cmp	r3, #64	@ 0x40
 800c42c:	d109      	bne.n	800c442 <UART_DMAError+0x62>
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	2b22      	cmp	r3, #34	@ 0x22
 800c432:	d106      	bne.n	800c442 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c434:	697b      	ldr	r3, [r7, #20]
 800c436:	2200      	movs	r2, #0
 800c438:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800c43c:	6978      	ldr	r0, [r7, #20]
 800c43e:	f7ff ff0e 	bl	800c25e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c442:	697b      	ldr	r3, [r7, #20]
 800c444:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c448:	f043 0210 	orr.w	r2, r3, #16
 800c44c:	697b      	ldr	r3, [r7, #20]
 800c44e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c452:	6978      	ldr	r0, [r7, #20]
 800c454:	f7ff f9a8 	bl	800b7a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c458:	bf00      	nop
 800c45a:	3718      	adds	r7, #24
 800c45c:	46bd      	mov	sp, r7
 800c45e:	bd80      	pop	{r7, pc}

0800c460 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c460:	b580      	push	{r7, lr}
 800c462:	b084      	sub	sp, #16
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c46c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	2200      	movs	r2, #0
 800c472:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c476:	68f8      	ldr	r0, [r7, #12]
 800c478:	f7ff f996 	bl	800b7a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c47c:	bf00      	nop
 800c47e:	3710      	adds	r7, #16
 800c480:	46bd      	mov	sp, r7
 800c482:	bd80      	pop	{r7, pc}

0800c484 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b088      	sub	sp, #32
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	e853 3f00 	ldrex	r3, [r3]
 800c498:	60bb      	str	r3, [r7, #8]
   return(result);
 800c49a:	68bb      	ldr	r3, [r7, #8]
 800c49c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c4a0:	61fb      	str	r3, [r7, #28]
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	461a      	mov	r2, r3
 800c4a8:	69fb      	ldr	r3, [r7, #28]
 800c4aa:	61bb      	str	r3, [r7, #24]
 800c4ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4ae:	6979      	ldr	r1, [r7, #20]
 800c4b0:	69ba      	ldr	r2, [r7, #24]
 800c4b2:	e841 2300 	strex	r3, r2, [r1]
 800c4b6:	613b      	str	r3, [r7, #16]
   return(result);
 800c4b8:	693b      	ldr	r3, [r7, #16]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d1e6      	bne.n	800c48c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	2220      	movs	r2, #32
 800c4c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c4cc:	6878      	ldr	r0, [r7, #4]
 800c4ce:	f7f6 f951 	bl	8002774 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c4d2:	bf00      	nop
 800c4d4:	3720      	adds	r7, #32
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	bd80      	pop	{r7, pc}
	...

0800c4dc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b09c      	sub	sp, #112	@ 0x70
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c4ea:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c4f4:	2b22      	cmp	r3, #34	@ 0x22
 800c4f6:	f040 80be 	bne.w	800c676 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c500:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c504:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c508:	b2d9      	uxtb	r1, r3
 800c50a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800c50e:	b2da      	uxtb	r2, r3
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c514:	400a      	ands	r2, r1
 800c516:	b2d2      	uxtb	r2, r2
 800c518:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c51e:	1c5a      	adds	r2, r3, #1
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c52a:	b29b      	uxth	r3, r3
 800c52c:	3b01      	subs	r3, #1
 800c52e:	b29a      	uxth	r2, r3
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c53c:	b29b      	uxth	r3, r3
 800c53e:	2b00      	cmp	r3, #0
 800c540:	f040 80a1 	bne.w	800c686 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c54a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c54c:	e853 3f00 	ldrex	r3, [r3]
 800c550:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c552:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c554:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c558:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	461a      	mov	r2, r3
 800c560:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c562:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c564:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c566:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c568:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c56a:	e841 2300 	strex	r3, r2, [r1]
 800c56e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c570:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c572:	2b00      	cmp	r3, #0
 800c574:	d1e6      	bne.n	800c544 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	3308      	adds	r3, #8
 800c57c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c57e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c580:	e853 3f00 	ldrex	r3, [r3]
 800c584:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c586:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c588:	f023 0301 	bic.w	r3, r3, #1
 800c58c:	667b      	str	r3, [r7, #100]	@ 0x64
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	3308      	adds	r3, #8
 800c594:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c596:	647a      	str	r2, [r7, #68]	@ 0x44
 800c598:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c59a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c59c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c59e:	e841 2300 	strex	r3, r2, [r1]
 800c5a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c5a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d1e5      	bne.n	800c576 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	2220      	movs	r2, #32
 800c5ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	671a      	str	r2, [r3, #112]	@ 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	4a33      	ldr	r2, [pc, #204]	@ (800c690 <UART_RxISR_8BIT+0x1b4>)
 800c5c4:	4293      	cmp	r3, r2
 800c5c6:	d01f      	beq.n	800c608 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	685b      	ldr	r3, [r3, #4]
 800c5ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d018      	beq.n	800c608 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5de:	e853 3f00 	ldrex	r3, [r3]
 800c5e2:	623b      	str	r3, [r7, #32]
   return(result);
 800c5e4:	6a3b      	ldr	r3, [r7, #32]
 800c5e6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c5ea:	663b      	str	r3, [r7, #96]	@ 0x60
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	461a      	mov	r2, r3
 800c5f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c5f4:	633b      	str	r3, [r7, #48]	@ 0x30
 800c5f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c5fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c5fc:	e841 2300 	strex	r3, r2, [r1]
 800c600:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c604:	2b00      	cmp	r3, #0
 800c606:	d1e6      	bne.n	800c5d6 <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c60c:	2b01      	cmp	r3, #1
 800c60e:	d12e      	bne.n	800c66e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	2200      	movs	r2, #0
 800c614:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c61c:	693b      	ldr	r3, [r7, #16]
 800c61e:	e853 3f00 	ldrex	r3, [r3]
 800c622:	60fb      	str	r3, [r7, #12]
   return(result);
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	f023 0310 	bic.w	r3, r3, #16
 800c62a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	461a      	mov	r2, r3
 800c632:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c634:	61fb      	str	r3, [r7, #28]
 800c636:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c638:	69b9      	ldr	r1, [r7, #24]
 800c63a:	69fa      	ldr	r2, [r7, #28]
 800c63c:	e841 2300 	strex	r3, r2, [r1]
 800c640:	617b      	str	r3, [r7, #20]
   return(result);
 800c642:	697b      	ldr	r3, [r7, #20]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d1e6      	bne.n	800c616 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	69db      	ldr	r3, [r3, #28]
 800c64e:	f003 0310 	and.w	r3, r3, #16
 800c652:	2b10      	cmp	r3, #16
 800c654:	d103      	bne.n	800c65e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	2210      	movs	r2, #16
 800c65c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c664:	4619      	mov	r1, r3
 800c666:	6878      	ldr	r0, [r7, #4]
 800c668:	f7ff f8a8 	bl	800b7bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c66c:	e00b      	b.n	800c686 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800c66e:	6878      	ldr	r0, [r7, #4]
 800c670:	f7f6 f862 	bl	8002738 <HAL_UART_RxCpltCallback>
}
 800c674:	e007      	b.n	800c686 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	699a      	ldr	r2, [r3, #24]
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	f042 0208 	orr.w	r2, r2, #8
 800c684:	619a      	str	r2, [r3, #24]
}
 800c686:	bf00      	nop
 800c688:	3770      	adds	r7, #112	@ 0x70
 800c68a:	46bd      	mov	sp, r7
 800c68c:	bd80      	pop	{r7, pc}
 800c68e:	bf00      	nop
 800c690:	40008000 	.word	0x40008000

0800c694 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b09c      	sub	sp, #112	@ 0x70
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c6a2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c6ac:	2b22      	cmp	r3, #34	@ 0x22
 800c6ae:	f040 80be 	bne.w	800c82e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6b8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c6c0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800c6c2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800c6c6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800c6ca:	4013      	ands	r3, r2
 800c6cc:	b29a      	uxth	r2, r3
 800c6ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c6d0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c6d6:	1c9a      	adds	r2, r3, #2
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c6e2:	b29b      	uxth	r3, r3
 800c6e4:	3b01      	subs	r3, #1
 800c6e6:	b29a      	uxth	r2, r3
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c6f4:	b29b      	uxth	r3, r3
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	f040 80a1 	bne.w	800c83e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c702:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c704:	e853 3f00 	ldrex	r3, [r3]
 800c708:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c70a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c70c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c710:	667b      	str	r3, [r7, #100]	@ 0x64
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	461a      	mov	r2, r3
 800c718:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c71a:	657b      	str	r3, [r7, #84]	@ 0x54
 800c71c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c71e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c720:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c722:	e841 2300 	strex	r3, r2, [r1]
 800c726:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c728:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d1e6      	bne.n	800c6fc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	3308      	adds	r3, #8
 800c734:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c736:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c738:	e853 3f00 	ldrex	r3, [r3]
 800c73c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c73e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c740:	f023 0301 	bic.w	r3, r3, #1
 800c744:	663b      	str	r3, [r7, #96]	@ 0x60
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	3308      	adds	r3, #8
 800c74c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c74e:	643a      	str	r2, [r7, #64]	@ 0x40
 800c750:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c752:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c754:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c756:	e841 2300 	strex	r3, r2, [r1]
 800c75a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c75c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d1e5      	bne.n	800c72e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	2220      	movs	r2, #32
 800c766:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	2200      	movs	r2, #0
 800c76e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2200      	movs	r2, #0
 800c774:	671a      	str	r2, [r3, #112]	@ 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	4a33      	ldr	r2, [pc, #204]	@ (800c848 <UART_RxISR_16BIT+0x1b4>)
 800c77c:	4293      	cmp	r3, r2
 800c77e:	d01f      	beq.n	800c7c0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	685b      	ldr	r3, [r3, #4]
 800c786:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d018      	beq.n	800c7c0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c794:	6a3b      	ldr	r3, [r7, #32]
 800c796:	e853 3f00 	ldrex	r3, [r3]
 800c79a:	61fb      	str	r3, [r7, #28]
   return(result);
 800c79c:	69fb      	ldr	r3, [r7, #28]
 800c79e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c7a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	461a      	mov	r2, r3
 800c7aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c7ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c7ae:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c7b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c7b4:	e841 2300 	strex	r3, r2, [r1]
 800c7b8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c7ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d1e6      	bne.n	800c78e <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c7c4:	2b01      	cmp	r3, #1
 800c7c6:	d12e      	bne.n	800c826 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	e853 3f00 	ldrex	r3, [r3]
 800c7da:	60bb      	str	r3, [r7, #8]
   return(result);
 800c7dc:	68bb      	ldr	r3, [r7, #8]
 800c7de:	f023 0310 	bic.w	r3, r3, #16
 800c7e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	461a      	mov	r2, r3
 800c7ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c7ec:	61bb      	str	r3, [r7, #24]
 800c7ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7f0:	6979      	ldr	r1, [r7, #20]
 800c7f2:	69ba      	ldr	r2, [r7, #24]
 800c7f4:	e841 2300 	strex	r3, r2, [r1]
 800c7f8:	613b      	str	r3, [r7, #16]
   return(result);
 800c7fa:	693b      	ldr	r3, [r7, #16]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d1e6      	bne.n	800c7ce <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	69db      	ldr	r3, [r3, #28]
 800c806:	f003 0310 	and.w	r3, r3, #16
 800c80a:	2b10      	cmp	r3, #16
 800c80c:	d103      	bne.n	800c816 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	2210      	movs	r2, #16
 800c814:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c81c:	4619      	mov	r1, r3
 800c81e:	6878      	ldr	r0, [r7, #4]
 800c820:	f7fe ffcc 	bl	800b7bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c824:	e00b      	b.n	800c83e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800c826:	6878      	ldr	r0, [r7, #4]
 800c828:	f7f5 ff86 	bl	8002738 <HAL_UART_RxCpltCallback>
}
 800c82c:	e007      	b.n	800c83e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	699a      	ldr	r2, [r3, #24]
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	f042 0208 	orr.w	r2, r2, #8
 800c83c:	619a      	str	r2, [r3, #24]
}
 800c83e:	bf00      	nop
 800c840:	3770      	adds	r7, #112	@ 0x70
 800c842:	46bd      	mov	sp, r7
 800c844:	bd80      	pop	{r7, pc}
 800c846:	bf00      	nop
 800c848:	40008000 	.word	0x40008000

0800c84c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b0ac      	sub	sp, #176	@ 0xb0
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c85a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	69db      	ldr	r3, [r3, #28]
 800c864:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	689b      	ldr	r3, [r3, #8]
 800c878:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c882:	2b22      	cmp	r3, #34	@ 0x22
 800c884:	f040 8183 	bne.w	800cb8e <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c88e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c892:	e126      	b.n	800cae2 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c89a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c89e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800c8a2:	b2d9      	uxtb	r1, r3
 800c8a4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800c8a8:	b2da      	uxtb	r2, r3
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c8ae:	400a      	ands	r2, r1
 800c8b0:	b2d2      	uxtb	r2, r2
 800c8b2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c8b8:	1c5a      	adds	r2, r3, #1
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c8c4:	b29b      	uxth	r3, r3
 800c8c6:	3b01      	subs	r3, #1
 800c8c8:	b29a      	uxth	r2, r3
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	69db      	ldr	r3, [r3, #28]
 800c8d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c8da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c8de:	f003 0307 	and.w	r3, r3, #7
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d053      	beq.n	800c98e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c8e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c8ea:	f003 0301 	and.w	r3, r3, #1
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d011      	beq.n	800c916 <UART_RxISR_8BIT_FIFOEN+0xca>
 800c8f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c8f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d00b      	beq.n	800c916 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	2201      	movs	r2, #1
 800c904:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c90c:	f043 0201 	orr.w	r2, r3, #1
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c916:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c91a:	f003 0302 	and.w	r3, r3, #2
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d011      	beq.n	800c946 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800c922:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c926:	f003 0301 	and.w	r3, r3, #1
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d00b      	beq.n	800c946 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	2202      	movs	r2, #2
 800c934:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c93c:	f043 0204 	orr.w	r2, r3, #4
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c946:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c94a:	f003 0304 	and.w	r3, r3, #4
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d011      	beq.n	800c976 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800c952:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c956:	f003 0301 	and.w	r3, r3, #1
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d00b      	beq.n	800c976 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	2204      	movs	r2, #4
 800c964:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c96c:	f043 0202 	orr.w	r2, r3, #2
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d006      	beq.n	800c98e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c980:	6878      	ldr	r0, [r7, #4]
 800c982:	f7fe ff11 	bl	800b7a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	2200      	movs	r2, #0
 800c98a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c994:	b29b      	uxth	r3, r3
 800c996:	2b00      	cmp	r3, #0
 800c998:	f040 80a3 	bne.w	800cae2 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c9a4:	e853 3f00 	ldrex	r3, [r3]
 800c9a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800c9aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c9ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c9b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	461a      	mov	r2, r3
 800c9ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c9be:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c9c0:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9c2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800c9c4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800c9c6:	e841 2300 	strex	r3, r2, [r1]
 800c9ca:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800c9cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d1e4      	bne.n	800c99c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	3308      	adds	r3, #8
 800c9d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c9dc:	e853 3f00 	ldrex	r3, [r3]
 800c9e0:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800c9e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c9e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c9e8:	f023 0301 	bic.w	r3, r3, #1
 800c9ec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	3308      	adds	r3, #8
 800c9f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c9fa:	66ba      	str	r2, [r7, #104]	@ 0x68
 800c9fc:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9fe:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800ca00:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ca02:	e841 2300 	strex	r3, r2, [r1]
 800ca06:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800ca08:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d1e1      	bne.n	800c9d2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	2220      	movs	r2, #32
 800ca12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	2200      	movs	r2, #0
 800ca1a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2200      	movs	r2, #0
 800ca20:	671a      	str	r2, [r3, #112]	@ 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	4a60      	ldr	r2, [pc, #384]	@ (800cba8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800ca28:	4293      	cmp	r3, r2
 800ca2a:	d021      	beq.n	800ca70 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	685b      	ldr	r3, [r3, #4]
 800ca32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d01a      	beq.n	800ca70 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ca42:	e853 3f00 	ldrex	r3, [r3]
 800ca46:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ca48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ca4a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ca4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	461a      	mov	r2, r3
 800ca58:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ca5c:	657b      	str	r3, [r7, #84]	@ 0x54
 800ca5e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca60:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ca62:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ca64:	e841 2300 	strex	r3, r2, [r1]
 800ca68:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ca6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d1e4      	bne.n	800ca3a <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ca74:	2b01      	cmp	r3, #1
 800ca76:	d130      	bne.n	800cada <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca86:	e853 3f00 	ldrex	r3, [r3]
 800ca8a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ca8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca8e:	f023 0310 	bic.w	r3, r3, #16
 800ca92:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	461a      	mov	r2, r3
 800ca9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800caa0:	643b      	str	r3, [r7, #64]	@ 0x40
 800caa2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caa4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800caa6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800caa8:	e841 2300 	strex	r3, r2, [r1]
 800caac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800caae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d1e4      	bne.n	800ca7e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	69db      	ldr	r3, [r3, #28]
 800caba:	f003 0310 	and.w	r3, r3, #16
 800cabe:	2b10      	cmp	r3, #16
 800cac0:	d103      	bne.n	800caca <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	2210      	movs	r2, #16
 800cac8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cad0:	4619      	mov	r1, r3
 800cad2:	6878      	ldr	r0, [r7, #4]
 800cad4:	f7fe fe72 	bl	800b7bc <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800cad8:	e00e      	b.n	800caf8 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 800cada:	6878      	ldr	r0, [r7, #4]
 800cadc:	f7f5 fe2c 	bl	8002738 <HAL_UART_RxCpltCallback>
        break;
 800cae0:	e00a      	b.n	800caf8 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cae2:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d006      	beq.n	800caf8 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 800caea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800caee:	f003 0320 	and.w	r3, r3, #32
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	f47f aece 	bne.w	800c894 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cafe:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800cb02:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d049      	beq.n	800cb9e <UART_RxISR_8BIT_FIFOEN+0x352>
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800cb10:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800cb14:	429a      	cmp	r2, r3
 800cb16:	d242      	bcs.n	800cb9e <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	3308      	adds	r3, #8
 800cb1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb20:	6a3b      	ldr	r3, [r7, #32]
 800cb22:	e853 3f00 	ldrex	r3, [r3]
 800cb26:	61fb      	str	r3, [r7, #28]
   return(result);
 800cb28:	69fb      	ldr	r3, [r7, #28]
 800cb2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cb2e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	3308      	adds	r3, #8
 800cb38:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800cb3c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cb3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cb42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cb44:	e841 2300 	strex	r3, r2, [r1]
 800cb48:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cb4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d1e3      	bne.n	800cb18 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	4a16      	ldr	r2, [pc, #88]	@ (800cbac <UART_RxISR_8BIT_FIFOEN+0x360>)
 800cb54:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	e853 3f00 	ldrex	r3, [r3]
 800cb62:	60bb      	str	r3, [r7, #8]
   return(result);
 800cb64:	68bb      	ldr	r3, [r7, #8]
 800cb66:	f043 0320 	orr.w	r3, r3, #32
 800cb6a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	461a      	mov	r2, r3
 800cb74:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800cb78:	61bb      	str	r3, [r7, #24]
 800cb7a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb7c:	6979      	ldr	r1, [r7, #20]
 800cb7e:	69ba      	ldr	r2, [r7, #24]
 800cb80:	e841 2300 	strex	r3, r2, [r1]
 800cb84:	613b      	str	r3, [r7, #16]
   return(result);
 800cb86:	693b      	ldr	r3, [r7, #16]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d1e4      	bne.n	800cb56 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cb8c:	e007      	b.n	800cb9e <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	699a      	ldr	r2, [r3, #24]
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	f042 0208 	orr.w	r2, r2, #8
 800cb9c:	619a      	str	r2, [r3, #24]
}
 800cb9e:	bf00      	nop
 800cba0:	37b0      	adds	r7, #176	@ 0xb0
 800cba2:	46bd      	mov	sp, r7
 800cba4:	bd80      	pop	{r7, pc}
 800cba6:	bf00      	nop
 800cba8:	40008000 	.word	0x40008000
 800cbac:	0800c4dd 	.word	0x0800c4dd

0800cbb0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b0ae      	sub	sp, #184	@ 0xb8
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800cbbe:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	69db      	ldr	r3, [r3, #28]
 800cbc8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	689b      	ldr	r3, [r3, #8]
 800cbdc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cbe6:	2b22      	cmp	r3, #34	@ 0x22
 800cbe8:	f040 8187 	bne.w	800cefa <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800cbf2:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cbf6:	e12a      	b.n	800ce4e <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbfe:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cc06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800cc0a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800cc0e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800cc12:	4013      	ands	r3, r2
 800cc14:	b29a      	uxth	r2, r3
 800cc16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cc1a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cc20:	1c9a      	adds	r2, r3, #2
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cc2c:	b29b      	uxth	r3, r3
 800cc2e:	3b01      	subs	r3, #1
 800cc30:	b29a      	uxth	r2, r3
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	69db      	ldr	r3, [r3, #28]
 800cc3e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800cc42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800cc46:	f003 0307 	and.w	r3, r3, #7
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d053      	beq.n	800ccf6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cc4e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800cc52:	f003 0301 	and.w	r3, r3, #1
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d011      	beq.n	800cc7e <UART_RxISR_16BIT_FIFOEN+0xce>
 800cc5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cc5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d00b      	beq.n	800cc7e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	2201      	movs	r2, #1
 800cc6c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cc74:	f043 0201 	orr.w	r2, r3, #1
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cc7e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800cc82:	f003 0302 	and.w	r3, r3, #2
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d011      	beq.n	800ccae <UART_RxISR_16BIT_FIFOEN+0xfe>
 800cc8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800cc8e:	f003 0301 	and.w	r3, r3, #1
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d00b      	beq.n	800ccae <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	2202      	movs	r2, #2
 800cc9c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cca4:	f043 0204 	orr.w	r2, r3, #4
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ccae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ccb2:	f003 0304 	and.w	r3, r3, #4
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d011      	beq.n	800ccde <UART_RxISR_16BIT_FIFOEN+0x12e>
 800ccba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ccbe:	f003 0301 	and.w	r3, r3, #1
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d00b      	beq.n	800ccde <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	2204      	movs	r2, #4
 800cccc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ccd4:	f043 0202 	orr.w	r2, r3, #2
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d006      	beq.n	800ccf6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cce8:	6878      	ldr	r0, [r7, #4]
 800ccea:	f7fe fd5d 	bl	800b7a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ccfc:	b29b      	uxth	r3, r3
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	f040 80a5 	bne.w	800ce4e <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cd0c:	e853 3f00 	ldrex	r3, [r3]
 800cd10:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800cd12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cd14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cd18:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	461a      	mov	r2, r3
 800cd22:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cd26:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800cd2a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd2c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800cd2e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800cd32:	e841 2300 	strex	r3, r2, [r1]
 800cd36:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800cd38:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d1e2      	bne.n	800cd04 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	3308      	adds	r3, #8
 800cd44:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cd48:	e853 3f00 	ldrex	r3, [r3]
 800cd4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800cd4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cd50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cd54:	f023 0301 	bic.w	r3, r3, #1
 800cd58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	3308      	adds	r3, #8
 800cd62:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800cd66:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800cd68:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd6a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800cd6c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800cd6e:	e841 2300 	strex	r3, r2, [r1]
 800cd72:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800cd74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d1e1      	bne.n	800cd3e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	2220      	movs	r2, #32
 800cd7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	2200      	movs	r2, #0
 800cd86:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	671a      	str	r2, [r3, #112]	@ 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	4a60      	ldr	r2, [pc, #384]	@ (800cf14 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800cd94:	4293      	cmp	r3, r2
 800cd96:	d021      	beq.n	800cddc <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	685b      	ldr	r3, [r3, #4]
 800cd9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d01a      	beq.n	800cddc <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cdae:	e853 3f00 	ldrex	r3, [r3]
 800cdb2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800cdb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cdb6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800cdba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	461a      	mov	r2, r3
 800cdc4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800cdc8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cdca:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdcc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cdce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cdd0:	e841 2300 	strex	r3, r2, [r1]
 800cdd4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800cdd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d1e4      	bne.n	800cda6 <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cde0:	2b01      	cmp	r3, #1
 800cde2:	d130      	bne.n	800ce46 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2200      	movs	r2, #0
 800cde8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdf2:	e853 3f00 	ldrex	r3, [r3]
 800cdf6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cdf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdfa:	f023 0310 	bic.w	r3, r3, #16
 800cdfe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	461a      	mov	r2, r3
 800ce08:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ce0c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ce0e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce10:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ce12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ce14:	e841 2300 	strex	r3, r2, [r1]
 800ce18:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ce1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d1e4      	bne.n	800cdea <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	69db      	ldr	r3, [r3, #28]
 800ce26:	f003 0310 	and.w	r3, r3, #16
 800ce2a:	2b10      	cmp	r3, #16
 800ce2c:	d103      	bne.n	800ce36 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	2210      	movs	r2, #16
 800ce34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ce3c:	4619      	mov	r1, r3
 800ce3e:	6878      	ldr	r0, [r7, #4]
 800ce40:	f7fe fcbc 	bl	800b7bc <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800ce44:	e00e      	b.n	800ce64 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 800ce46:	6878      	ldr	r0, [r7, #4]
 800ce48:	f7f5 fc76 	bl	8002738 <HAL_UART_RxCpltCallback>
        break;
 800ce4c:	e00a      	b.n	800ce64 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ce4e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d006      	beq.n	800ce64 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 800ce56:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ce5a:	f003 0320 	and.w	r3, r3, #32
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	f47f aeca 	bne.w	800cbf8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ce6a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ce6e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d049      	beq.n	800cf0a <UART_RxISR_16BIT_FIFOEN+0x35a>
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ce7c:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800ce80:	429a      	cmp	r2, r3
 800ce82:	d242      	bcs.n	800cf0a <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	3308      	adds	r3, #8
 800ce8a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce8e:	e853 3f00 	ldrex	r3, [r3]
 800ce92:	623b      	str	r3, [r7, #32]
   return(result);
 800ce94:	6a3b      	ldr	r3, [r7, #32]
 800ce96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ce9a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	3308      	adds	r3, #8
 800cea4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800cea8:	633a      	str	r2, [r7, #48]	@ 0x30
 800ceaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ceac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ceae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ceb0:	e841 2300 	strex	r3, r2, [r1]
 800ceb4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ceb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d1e3      	bne.n	800ce84 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	4a16      	ldr	r2, [pc, #88]	@ (800cf18 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800cec0:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cec8:	693b      	ldr	r3, [r7, #16]
 800ceca:	e853 3f00 	ldrex	r3, [r3]
 800cece:	60fb      	str	r3, [r7, #12]
   return(result);
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	f043 0320 	orr.w	r3, r3, #32
 800ced6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	461a      	mov	r2, r3
 800cee0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800cee4:	61fb      	str	r3, [r7, #28]
 800cee6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cee8:	69b9      	ldr	r1, [r7, #24]
 800ceea:	69fa      	ldr	r2, [r7, #28]
 800ceec:	e841 2300 	strex	r3, r2, [r1]
 800cef0:	617b      	str	r3, [r7, #20]
   return(result);
 800cef2:	697b      	ldr	r3, [r7, #20]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d1e4      	bne.n	800cec2 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cef8:	e007      	b.n	800cf0a <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	699a      	ldr	r2, [r3, #24]
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	f042 0208 	orr.w	r2, r2, #8
 800cf08:	619a      	str	r2, [r3, #24]
}
 800cf0a:	bf00      	nop
 800cf0c:	37b8      	adds	r7, #184	@ 0xb8
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	bd80      	pop	{r7, pc}
 800cf12:	bf00      	nop
 800cf14:	40008000 	.word	0x40008000
 800cf18:	0800c695 	.word	0x0800c695

0800cf1c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800cf1c:	b480      	push	{r7}
 800cf1e:	b083      	sub	sp, #12
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800cf24:	bf00      	nop
 800cf26:	370c      	adds	r7, #12
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2e:	4770      	bx	lr

0800cf30 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800cf30:	b480      	push	{r7}
 800cf32:	b083      	sub	sp, #12
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800cf38:	bf00      	nop
 800cf3a:	370c      	adds	r7, #12
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf42:	4770      	bx	lr

0800cf44 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800cf44:	b480      	push	{r7}
 800cf46:	b083      	sub	sp, #12
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800cf4c:	bf00      	nop
 800cf4e:	370c      	adds	r7, #12
 800cf50:	46bd      	mov	sp, r7
 800cf52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf56:	4770      	bx	lr

0800cf58 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cf58:	b480      	push	{r7}
 800cf5a:	b085      	sub	sp, #20
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cf66:	2b01      	cmp	r3, #1
 800cf68:	d101      	bne.n	800cf6e <HAL_UARTEx_DisableFifoMode+0x16>
 800cf6a:	2302      	movs	r3, #2
 800cf6c:	e027      	b.n	800cfbe <HAL_UARTEx_DisableFifoMode+0x66>
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	2201      	movs	r2, #1
 800cf72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	2224      	movs	r2, #36	@ 0x24
 800cf7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	681a      	ldr	r2, [r3, #0]
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	f022 0201 	bic.w	r2, r2, #1
 800cf94:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800cf9c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	68fa      	ldr	r2, [r7, #12]
 800cfaa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	2220      	movs	r2, #32
 800cfb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cfbc:	2300      	movs	r3, #0
}
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	3714      	adds	r7, #20
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc8:	4770      	bx	lr

0800cfca <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cfca:	b580      	push	{r7, lr}
 800cfcc:	b084      	sub	sp, #16
 800cfce:	af00      	add	r7, sp, #0
 800cfd0:	6078      	str	r0, [r7, #4]
 800cfd2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cfda:	2b01      	cmp	r3, #1
 800cfdc:	d101      	bne.n	800cfe2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cfde:	2302      	movs	r3, #2
 800cfe0:	e02d      	b.n	800d03e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	2201      	movs	r2, #1
 800cfe6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	2224      	movs	r2, #36	@ 0x24
 800cfee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	681a      	ldr	r2, [r3, #0]
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	f022 0201 	bic.w	r2, r2, #1
 800d008:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	689b      	ldr	r3, [r3, #8]
 800d010:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	683a      	ldr	r2, [r7, #0]
 800d01a:	430a      	orrs	r2, r1
 800d01c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d01e:	6878      	ldr	r0, [r7, #4]
 800d020:	f000 f850 	bl	800d0c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	68fa      	ldr	r2, [r7, #12]
 800d02a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	2220      	movs	r2, #32
 800d030:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	2200      	movs	r2, #0
 800d038:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d03c:	2300      	movs	r3, #0
}
 800d03e:	4618      	mov	r0, r3
 800d040:	3710      	adds	r7, #16
 800d042:	46bd      	mov	sp, r7
 800d044:	bd80      	pop	{r7, pc}

0800d046 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d046:	b580      	push	{r7, lr}
 800d048:	b084      	sub	sp, #16
 800d04a:	af00      	add	r7, sp, #0
 800d04c:	6078      	str	r0, [r7, #4]
 800d04e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d056:	2b01      	cmp	r3, #1
 800d058:	d101      	bne.n	800d05e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d05a:	2302      	movs	r3, #2
 800d05c:	e02d      	b.n	800d0ba <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	2201      	movs	r2, #1
 800d062:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	2224      	movs	r2, #36	@ 0x24
 800d06a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	681a      	ldr	r2, [r3, #0]
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	f022 0201 	bic.w	r2, r2, #1
 800d084:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	689b      	ldr	r3, [r3, #8]
 800d08c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	683a      	ldr	r2, [r7, #0]
 800d096:	430a      	orrs	r2, r1
 800d098:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d09a:	6878      	ldr	r0, [r7, #4]
 800d09c:	f000 f812 	bl	800d0c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	68fa      	ldr	r2, [r7, #12]
 800d0a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	2220      	movs	r2, #32
 800d0ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d0b8:	2300      	movs	r3, #0
}
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	3710      	adds	r7, #16
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	bd80      	pop	{r7, pc}
	...

0800d0c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d0c4:	b480      	push	{r7}
 800d0c6:	b085      	sub	sp, #20
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d108      	bne.n	800d0e6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	2201      	movs	r2, #1
 800d0d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	2201      	movs	r2, #1
 800d0e0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d0e4:	e031      	b.n	800d14a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d0e6:	2308      	movs	r3, #8
 800d0e8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d0ea:	2308      	movs	r3, #8
 800d0ec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	689b      	ldr	r3, [r3, #8]
 800d0f4:	0e5b      	lsrs	r3, r3, #25
 800d0f6:	b2db      	uxtb	r3, r3
 800d0f8:	f003 0307 	and.w	r3, r3, #7
 800d0fc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	689b      	ldr	r3, [r3, #8]
 800d104:	0f5b      	lsrs	r3, r3, #29
 800d106:	b2db      	uxtb	r3, r3
 800d108:	f003 0307 	and.w	r3, r3, #7
 800d10c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d10e:	7bbb      	ldrb	r3, [r7, #14]
 800d110:	7b3a      	ldrb	r2, [r7, #12]
 800d112:	4911      	ldr	r1, [pc, #68]	@ (800d158 <UARTEx_SetNbDataToProcess+0x94>)
 800d114:	5c8a      	ldrb	r2, [r1, r2]
 800d116:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d11a:	7b3a      	ldrb	r2, [r7, #12]
 800d11c:	490f      	ldr	r1, [pc, #60]	@ (800d15c <UARTEx_SetNbDataToProcess+0x98>)
 800d11e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d120:	fb93 f3f2 	sdiv	r3, r3, r2
 800d124:	b29a      	uxth	r2, r3
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d12c:	7bfb      	ldrb	r3, [r7, #15]
 800d12e:	7b7a      	ldrb	r2, [r7, #13]
 800d130:	4909      	ldr	r1, [pc, #36]	@ (800d158 <UARTEx_SetNbDataToProcess+0x94>)
 800d132:	5c8a      	ldrb	r2, [r1, r2]
 800d134:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d138:	7b7a      	ldrb	r2, [r7, #13]
 800d13a:	4908      	ldr	r1, [pc, #32]	@ (800d15c <UARTEx_SetNbDataToProcess+0x98>)
 800d13c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d13e:	fb93 f3f2 	sdiv	r3, r3, r2
 800d142:	b29a      	uxth	r2, r3
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800d14a:	bf00      	nop
 800d14c:	3714      	adds	r7, #20
 800d14e:	46bd      	mov	sp, r7
 800d150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d154:	4770      	bx	lr
 800d156:	bf00      	nop
 800d158:	0801555c 	.word	0x0801555c
 800d15c:	08015564 	.word	0x08015564

0800d160 <aci_gap_set_non_discoverable>:
 */

#include "auto/ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b088      	sub	sp, #32
 800d164:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800d166:	2300      	movs	r3, #0
 800d168:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d16a:	f107 0308 	add.w	r3, r7, #8
 800d16e:	2218      	movs	r2, #24
 800d170:	2100      	movs	r1, #0
 800d172:	4618      	mov	r0, r3
 800d174:	f001 fcf0 	bl	800eb58 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d178:	233f      	movs	r3, #63	@ 0x3f
 800d17a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800d17c:	2381      	movs	r3, #129	@ 0x81
 800d17e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800d180:	1dfb      	adds	r3, r7, #7
 800d182:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800d184:	2301      	movs	r3, #1
 800d186:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d188:	f107 0308 	add.w	r3, r7, #8
 800d18c:	2100      	movs	r1, #0
 800d18e:	4618      	mov	r0, r3
 800d190:	f001 fba0 	bl	800e8d4 <hci_send_req>
 800d194:	4603      	mov	r3, r0
 800d196:	2b00      	cmp	r3, #0
 800d198:	da01      	bge.n	800d19e <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800d19a:	23ff      	movs	r3, #255	@ 0xff
 800d19c:	e000      	b.n	800d1a0 <aci_gap_set_non_discoverable+0x40>
  return status;
 800d19e:	79fb      	ldrb	r3, [r7, #7]
}
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	3720      	adds	r7, #32
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	bd80      	pop	{r7, pc}

0800d1a8 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 800d1a8:	b5b0      	push	{r4, r5, r7, lr}
 800d1aa:	b0ce      	sub	sp, #312	@ 0x138
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	4605      	mov	r5, r0
 800d1b0:	460c      	mov	r4, r1
 800d1b2:	4610      	mov	r0, r2
 800d1b4:	4619      	mov	r1, r3
 800d1b6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d1ba:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800d1be:	462a      	mov	r2, r5
 800d1c0:	701a      	strb	r2, [r3, #0]
 800d1c2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d1c6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800d1ca:	4622      	mov	r2, r4
 800d1cc:	801a      	strh	r2, [r3, #0]
 800d1ce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d1d2:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 800d1d6:	4602      	mov	r2, r0
 800d1d8:	801a      	strh	r2, [r3, #0]
 800d1da:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d1de:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800d1e2:	460a      	mov	r2, r1
 800d1e4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800d1e6:	f107 0310 	add.w	r3, r7, #16
 800d1ea:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800d1ee:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800d1f2:	3308      	adds	r3, #8
 800d1f4:	f107 0210 	add.w	r2, r7, #16
 800d1f8:	4413      	add	r3, r2
 800d1fa:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800d1fe:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800d202:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800d206:	4413      	add	r3, r2
 800d208:	3309      	adds	r3, #9
 800d20a:	f107 0210 	add.w	r2, r7, #16
 800d20e:	4413      	add	r3, r2
 800d210:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800d214:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d218:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800d21c:	2200      	movs	r2, #0
 800d21e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d220:	2300      	movs	r3, #0
 800d222:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 800d226:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d22a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800d22e:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800d232:	7812      	ldrb	r2, [r2, #0]
 800d234:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d236:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d23a:	3301      	adds	r3, #1
 800d23c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800d240:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d244:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800d248:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 800d24c:	8812      	ldrh	r2, [r2, #0]
 800d24e:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800d252:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d256:	3302      	adds	r3, #2
 800d258:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800d25c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d260:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800d264:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 800d268:	8812      	ldrh	r2, [r2, #0]
 800d26a:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800d26e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d272:	3302      	adds	r3, #2
 800d274:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800d278:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d27c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800d280:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800d284:	7812      	ldrb	r2, [r2, #0]
 800d286:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800d288:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d28c:	3301      	adds	r3, #1
 800d28e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800d292:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d296:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800d29a:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800d29c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d2a0:	3301      	adds	r3, #1
 800d2a2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800d2a6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d2aa:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800d2ae:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800d2b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d2b4:	3301      	adds	r3, #1
 800d2b6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800d2ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d2be:	3308      	adds	r3, #8
 800d2c0:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800d2c4:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	f001 fc35 	bl	800eb38 <Osal_MemCpy>
    index_input += Local_Name_Length;
 800d2ce:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800d2d2:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800d2d6:	4413      	add	r3, r2
 800d2d8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800d2dc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d2e0:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800d2e4:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800d2e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d2ea:	3301      	adds	r3, #1
 800d2ec:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800d2f0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d2f4:	3301      	adds	r3, #1
 800d2f6:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800d2fa:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 800d2fe:	4618      	mov	r0, r3
 800d300:	f001 fc1a 	bl	800eb38 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800d304:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800d308:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800d30c:	4413      	add	r3, r2
 800d30e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 800d312:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d316:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 800d31a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800d31c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d320:	3302      	adds	r3, #2
 800d322:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 800d326:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d32a:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 800d32e:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800d330:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d334:	3302      	adds	r3, #2
 800d336:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d33a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d33e:	2218      	movs	r2, #24
 800d340:	2100      	movs	r1, #0
 800d342:	4618      	mov	r0, r3
 800d344:	f001 fc08 	bl	800eb58 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d348:	233f      	movs	r3, #63	@ 0x3f
 800d34a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 800d34e:	2383      	movs	r3, #131	@ 0x83
 800d350:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d354:	f107 0310 	add.w	r3, r7, #16
 800d358:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d35c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d360:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d364:	f107 030f 	add.w	r3, r7, #15
 800d368:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d36c:	2301      	movs	r3, #1
 800d36e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d372:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d376:	2100      	movs	r1, #0
 800d378:	4618      	mov	r0, r3
 800d37a:	f001 faab 	bl	800e8d4 <hci_send_req>
 800d37e:	4603      	mov	r3, r0
 800d380:	2b00      	cmp	r3, #0
 800d382:	da01      	bge.n	800d388 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 800d384:	23ff      	movs	r3, #255	@ 0xff
 800d386:	e004      	b.n	800d392 <aci_gap_set_discoverable+0x1ea>
  return status;
 800d388:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d38c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800d390:	781b      	ldrb	r3, [r3, #0]
}
 800d392:	4618      	mov	r0, r3
 800d394:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 800d398:	46bd      	mov	sp, r7
 800d39a:	bdb0      	pop	{r4, r5, r7, pc}

0800d39c <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b0cc      	sub	sp, #304	@ 0x130
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	4602      	mov	r2, r0
 800d3a4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d3a8:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800d3ac:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800d3ae:	f107 0310 	add.w	r3, r7, #16
 800d3b2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800d3b6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d3ba:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d3be:	2200      	movs	r2, #0
 800d3c0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 800d3c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d3cc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d3d0:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800d3d4:	7812      	ldrb	r2, [r2, #0]
 800d3d6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d3d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d3dc:	3301      	adds	r3, #1
 800d3de:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d3e2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d3e6:	2218      	movs	r2, #24
 800d3e8:	2100      	movs	r1, #0
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	f001 fbb4 	bl	800eb58 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d3f0:	233f      	movs	r3, #63	@ 0x3f
 800d3f2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 800d3f6:	2385      	movs	r3, #133	@ 0x85
 800d3f8:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d3fc:	f107 0310 	add.w	r3, r7, #16
 800d400:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d404:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d408:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d40c:	f107 030f 	add.w	r3, r7, #15
 800d410:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d414:	2301      	movs	r3, #1
 800d416:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d41a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d41e:	2100      	movs	r1, #0
 800d420:	4618      	mov	r0, r3
 800d422:	f001 fa57 	bl	800e8d4 <hci_send_req>
 800d426:	4603      	mov	r3, r0
 800d428:	2b00      	cmp	r3, #0
 800d42a:	da01      	bge.n	800d430 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800d42c:	23ff      	movs	r3, #255	@ 0xff
 800d42e:	e004      	b.n	800d43a <aci_gap_set_io_capability+0x9e>
  return status;
 800d430:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d434:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d438:	781b      	ldrb	r3, [r3, #0]
}
 800d43a:	4618      	mov	r0, r3
 800d43c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800d440:	46bd      	mov	sp, r7
 800d442:	bd80      	pop	{r7, pc}

0800d444 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800d444:	b5b0      	push	{r4, r5, r7, lr}
 800d446:	b0cc      	sub	sp, #304	@ 0x130
 800d448:	af00      	add	r7, sp, #0
 800d44a:	4605      	mov	r5, r0
 800d44c:	460c      	mov	r4, r1
 800d44e:	4610      	mov	r0, r2
 800d450:	4619      	mov	r1, r3
 800d452:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d456:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800d45a:	462a      	mov	r2, r5
 800d45c:	701a      	strb	r2, [r3, #0]
 800d45e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d462:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d466:	4622      	mov	r2, r4
 800d468:	701a      	strb	r2, [r3, #0]
 800d46a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d46e:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800d472:	4602      	mov	r2, r0
 800d474:	701a      	strb	r2, [r3, #0]
 800d476:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d47a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d47e:	460a      	mov	r2, r1
 800d480:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800d482:	f107 0310 	add.w	r3, r7, #16
 800d486:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800d48a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d48e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d492:	2200      	movs	r2, #0
 800d494:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d496:	2300      	movs	r3, #0
 800d498:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800d49c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d4a0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d4a4:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800d4a8:	7812      	ldrb	r2, [r2, #0]
 800d4aa:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d4ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d4b0:	3301      	adds	r3, #1
 800d4b2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 800d4b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d4ba:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d4be:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800d4c2:	7812      	ldrb	r2, [r2, #0]
 800d4c4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800d4c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d4ca:	3301      	adds	r3, #1
 800d4cc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 800d4d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d4d4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d4d8:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800d4dc:	7812      	ldrb	r2, [r2, #0]
 800d4de:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800d4e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d4e4:	3301      	adds	r3, #1
 800d4e6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800d4ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d4ee:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d4f2:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800d4f6:	7812      	ldrb	r2, [r2, #0]
 800d4f8:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800d4fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d4fe:	3301      	adds	r3, #1
 800d500:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800d504:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d508:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 800d50c:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800d50e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d512:	3301      	adds	r3, #1
 800d514:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800d518:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d51c:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 800d520:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800d522:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d526:	3301      	adds	r3, #1
 800d528:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800d52c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d530:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800d534:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800d536:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d53a:	3301      	adds	r3, #1
 800d53c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800d540:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d544:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800d548:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800d54c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d550:	3304      	adds	r3, #4
 800d552:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800d556:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d55a:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800d55e:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800d560:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d564:	3301      	adds	r3, #1
 800d566:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d56a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d56e:	2218      	movs	r2, #24
 800d570:	2100      	movs	r1, #0
 800d572:	4618      	mov	r0, r3
 800d574:	f001 faf0 	bl	800eb58 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d578:	233f      	movs	r3, #63	@ 0x3f
 800d57a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 800d57e:	2386      	movs	r3, #134	@ 0x86
 800d580:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d584:	f107 0310 	add.w	r3, r7, #16
 800d588:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d58c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d590:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d594:	f107 030f 	add.w	r3, r7, #15
 800d598:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d59c:	2301      	movs	r3, #1
 800d59e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d5a2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d5a6:	2100      	movs	r1, #0
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	f001 f993 	bl	800e8d4 <hci_send_req>
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	da01      	bge.n	800d5b8 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800d5b4:	23ff      	movs	r3, #255	@ 0xff
 800d5b6:	e004      	b.n	800d5c2 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 800d5b8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d5bc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d5c0:	781b      	ldrb	r3, [r3, #0]
}
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	bdb0      	pop	{r4, r5, r7, pc}

0800d5cc <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b0cc      	sub	sp, #304	@ 0x130
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	4602      	mov	r2, r0
 800d5d4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d5d8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800d5dc:	6019      	str	r1, [r3, #0]
 800d5de:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d5e2:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d5e6:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 800d5e8:	f107 0310 	add.w	r3, r7, #16
 800d5ec:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800d5f0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d5f4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d5fc:	2300      	movs	r3, #0
 800d5fe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800d602:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d606:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d60a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800d60e:	8812      	ldrh	r2, [r2, #0]
 800d610:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d612:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d616:	3302      	adds	r3, #2
 800d618:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 800d61c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d620:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d624:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800d628:	6812      	ldr	r2, [r2, #0]
 800d62a:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800d62e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d632:	3304      	adds	r3, #4
 800d634:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d638:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d63c:	2218      	movs	r2, #24
 800d63e:	2100      	movs	r1, #0
 800d640:	4618      	mov	r0, r3
 800d642:	f001 fa89 	bl	800eb58 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d646:	233f      	movs	r3, #63	@ 0x3f
 800d648:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 800d64c:	2388      	movs	r3, #136	@ 0x88
 800d64e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d652:	f107 0310 	add.w	r3, r7, #16
 800d656:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d65a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d65e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d662:	f107 030f 	add.w	r3, r7, #15
 800d666:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d66a:	2301      	movs	r3, #1
 800d66c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d670:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d674:	2100      	movs	r1, #0
 800d676:	4618      	mov	r0, r3
 800d678:	f001 f92c 	bl	800e8d4 <hci_send_req>
 800d67c:	4603      	mov	r3, r0
 800d67e:	2b00      	cmp	r3, #0
 800d680:	da01      	bge.n	800d686 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800d682:	23ff      	movs	r3, #255	@ 0xff
 800d684:	e004      	b.n	800d690 <aci_gap_pass_key_resp+0xc4>
  return status;
 800d686:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d68a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d68e:	781b      	ldrb	r3, [r3, #0]
}
 800d690:	4618      	mov	r0, r3
 800d692:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800d696:	46bd      	mov	sp, r7
 800d698:	bd80      	pop	{r7, pc}

0800d69a <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800d69a:	b590      	push	{r4, r7, lr}
 800d69c:	b0cd      	sub	sp, #308	@ 0x134
 800d69e:	af00      	add	r7, sp, #0
 800d6a0:	4604      	mov	r4, r0
 800d6a2:	4608      	mov	r0, r1
 800d6a4:	4611      	mov	r1, r2
 800d6a6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d6aa:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800d6ae:	6013      	str	r3, [r2, #0]
 800d6b0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d6b4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800d6b8:	4622      	mov	r2, r4
 800d6ba:	701a      	strb	r2, [r3, #0]
 800d6bc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d6c0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d6c4:	4602      	mov	r2, r0
 800d6c6:	701a      	strb	r2, [r3, #0]
 800d6c8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d6cc:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800d6d0:	460a      	mov	r2, r1
 800d6d2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800d6d4:	f107 0310 	add.w	r3, r7, #16
 800d6d8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800d6dc:	f107 0308 	add.w	r3, r7, #8
 800d6e0:	2207      	movs	r2, #7
 800d6e2:	2100      	movs	r1, #0
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	f001 fa37 	bl	800eb58 <Osal_MemSet>
  int index_input = 0;
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 800d6f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d6f4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d6f8:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800d6fc:	7812      	ldrb	r2, [r2, #0]
 800d6fe:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d700:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d704:	3301      	adds	r3, #1
 800d706:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 800d70a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d70e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d712:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800d716:	7812      	ldrb	r2, [r2, #0]
 800d718:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800d71a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d71e:	3301      	adds	r3, #1
 800d720:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 800d724:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d728:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d72c:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800d730:	7812      	ldrb	r2, [r2, #0]
 800d732:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800d734:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d738:	3301      	adds	r3, #1
 800d73a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d73e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d742:	2218      	movs	r2, #24
 800d744:	2100      	movs	r1, #0
 800d746:	4618      	mov	r0, r3
 800d748:	f001 fa06 	bl	800eb58 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d74c:	233f      	movs	r3, #63	@ 0x3f
 800d74e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 800d752:	238a      	movs	r3, #138	@ 0x8a
 800d754:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d758:	f107 0310 	add.w	r3, r7, #16
 800d75c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d760:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d764:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 800d768:	f107 0308 	add.w	r3, r7, #8
 800d76c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800d770:	2307      	movs	r3, #7
 800d772:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d776:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d77a:	2100      	movs	r1, #0
 800d77c:	4618      	mov	r0, r3
 800d77e:	f001 f8a9 	bl	800e8d4 <hci_send_req>
 800d782:	4603      	mov	r3, r0
 800d784:	2b00      	cmp	r3, #0
 800d786:	da01      	bge.n	800d78c <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800d788:	23ff      	movs	r3, #255	@ 0xff
 800d78a:	e02e      	b.n	800d7ea <aci_gap_init+0x150>
  if ( resp.Status )
 800d78c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d790:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800d794:	781b      	ldrb	r3, [r3, #0]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d005      	beq.n	800d7a6 <aci_gap_init+0x10c>
    return resp.Status;
 800d79a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d79e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800d7a2:	781b      	ldrb	r3, [r3, #0]
 800d7a4:	e021      	b.n	800d7ea <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800d7a6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d7aa:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800d7ae:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d7b2:	b29a      	uxth	r2, r3
 800d7b4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d7b8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800d7c0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d7c4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800d7c8:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800d7cc:	b29a      	uxth	r2, r3
 800d7ce:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800d7d2:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800d7d4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d7d8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800d7dc:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800d7e0:	b29a      	uxth	r2, r3
 800d7e2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800d7e6:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800d7e8:	2300      	movs	r3, #0
}
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	bd90      	pop	{r4, r7, pc}

0800d7f4 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800d7f4:	b580      	push	{r7, lr}
 800d7f6:	b0cc      	sub	sp, #304	@ 0x130
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	4602      	mov	r2, r0
 800d7fc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d800:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800d804:	6019      	str	r1, [r3, #0]
 800d806:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d80a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800d80e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800d810:	f107 0310 	add.w	r3, r7, #16
 800d814:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800d818:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d81c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d820:	2200      	movs	r2, #0
 800d822:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d824:	2300      	movs	r3, #0
 800d826:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 800d82a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d82e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d832:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800d836:	7812      	ldrb	r2, [r2, #0]
 800d838:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d83a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d83e:	3301      	adds	r3, #1
 800d840:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800d844:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d848:	1c58      	adds	r0, r3, #1
 800d84a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d84e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800d852:	781a      	ldrb	r2, [r3, #0]
 800d854:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d858:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800d85c:	6819      	ldr	r1, [r3, #0]
 800d85e:	f001 f96b 	bl	800eb38 <Osal_MemCpy>
  index_input += AdvDataLen;
 800d862:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d866:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800d86a:	781b      	ldrb	r3, [r3, #0]
 800d86c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800d870:	4413      	add	r3, r2
 800d872:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d876:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d87a:	2218      	movs	r2, #24
 800d87c:	2100      	movs	r1, #0
 800d87e:	4618      	mov	r0, r3
 800d880:	f001 f96a 	bl	800eb58 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d884:	233f      	movs	r3, #63	@ 0x3f
 800d886:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 800d88a:	238e      	movs	r3, #142	@ 0x8e
 800d88c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d890:	f107 0310 	add.w	r3, r7, #16
 800d894:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d898:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d89c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d8a0:	f107 030f 	add.w	r3, r7, #15
 800d8a4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d8a8:	2301      	movs	r3, #1
 800d8aa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d8ae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d8b2:	2100      	movs	r1, #0
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	f001 f80d 	bl	800e8d4 <hci_send_req>
 800d8ba:	4603      	mov	r3, r0
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	da01      	bge.n	800d8c4 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800d8c0:	23ff      	movs	r3, #255	@ 0xff
 800d8c2:	e004      	b.n	800d8ce <aci_gap_update_adv_data+0xda>
  return status;
 800d8c4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d8c8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d8cc:	781b      	ldrb	r3, [r3, #0]
}
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	bd80      	pop	{r7, pc}

0800d8d8 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b088      	sub	sp, #32
 800d8dc:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800d8de:	2300      	movs	r3, #0
 800d8e0:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d8e2:	f107 0308 	add.w	r3, r7, #8
 800d8e6:	2218      	movs	r2, #24
 800d8e8:	2100      	movs	r1, #0
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	f001 f934 	bl	800eb58 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d8f0:	233f      	movs	r3, #63	@ 0x3f
 800d8f2:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800d8f4:	2392      	movs	r3, #146	@ 0x92
 800d8f6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800d8f8:	1dfb      	adds	r3, r7, #7
 800d8fa:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800d8fc:	2301      	movs	r3, #1
 800d8fe:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d900:	f107 0308 	add.w	r3, r7, #8
 800d904:	2100      	movs	r1, #0
 800d906:	4618      	mov	r0, r3
 800d908:	f000 ffe4 	bl	800e8d4 <hci_send_req>
 800d90c:	4603      	mov	r3, r0
 800d90e:	2b00      	cmp	r3, #0
 800d910:	da01      	bge.n	800d916 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 800d912:	23ff      	movs	r3, #255	@ 0xff
 800d914:	e000      	b.n	800d918 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 800d916:	79fb      	ldrb	r3, [r7, #7]
}
 800d918:	4618      	mov	r0, r3
 800d91a:	3720      	adds	r7, #32
 800d91c:	46bd      	mov	sp, r7
 800d91e:	bd80      	pop	{r7, pc}

0800d920 <aci_gap_allow_rebond>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_allow_rebond( uint16_t Connection_Handle )
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b0cc      	sub	sp, #304	@ 0x130
 800d924:	af00      	add	r7, sp, #0
 800d926:	4602      	mov	r2, r0
 800d928:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d92c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d930:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_allow_rebond_cp0 *cp0 = (aci_gap_allow_rebond_cp0*)(cmd_buffer);
 800d932:	f107 0310 	add.w	r3, r7, #16
 800d936:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800d93a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d93e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d942:	2200      	movs	r2, #0
 800d944:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d946:	2300      	movs	r3, #0
 800d948:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800d94c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d950:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d954:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800d958:	8812      	ldrh	r2, [r2, #0]
 800d95a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d95c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d960:	3302      	adds	r3, #2
 800d962:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d966:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d96a:	2218      	movs	r2, #24
 800d96c:	2100      	movs	r1, #0
 800d96e:	4618      	mov	r0, r3
 800d970:	f001 f8f2 	bl	800eb58 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d974:	233f      	movs	r3, #63	@ 0x3f
 800d976:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x095;
 800d97a:	2395      	movs	r3, #149	@ 0x95
 800d97c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d980:	f107 0310 	add.w	r3, r7, #16
 800d984:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d988:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d98c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d990:	f107 030f 	add.w	r3, r7, #15
 800d994:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d998:	2301      	movs	r3, #1
 800d99a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d99e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d9a2:	2100      	movs	r1, #0
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	f000 ff95 	bl	800e8d4 <hci_send_req>
 800d9aa:	4603      	mov	r3, r0
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	da01      	bge.n	800d9b4 <aci_gap_allow_rebond+0x94>
    return BLE_STATUS_TIMEOUT;
 800d9b0:	23ff      	movs	r3, #255	@ 0xff
 800d9b2:	e004      	b.n	800d9be <aci_gap_allow_rebond+0x9e>
  return status;
 800d9b4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d9b8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d9bc:	781b      	ldrb	r3, [r3, #0]
}
 800d9be:	4618      	mov	r0, r3
 800d9c0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	bd80      	pop	{r7, pc}

0800d9c8 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	b0cc      	sub	sp, #304	@ 0x130
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	4602      	mov	r2, r0
 800d9d0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d9d4:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d9d8:	801a      	strh	r2, [r3, #0]
 800d9da:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d9de:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800d9e2:	460a      	mov	r2, r1
 800d9e4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800d9e6:	f107 0310 	add.w	r3, r7, #16
 800d9ea:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800d9ee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d9f2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800da00:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800da04:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800da08:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800da0c:	8812      	ldrh	r2, [r2, #0]
 800da0e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800da10:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800da14:	3302      	adds	r3, #2
 800da16:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800da1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800da1e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800da22:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800da26:	7812      	ldrb	r2, [r2, #0]
 800da28:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800da2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800da2e:	3301      	adds	r3, #1
 800da30:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800da34:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800da38:	2218      	movs	r2, #24
 800da3a:	2100      	movs	r1, #0
 800da3c:	4618      	mov	r0, r3
 800da3e:	f001 f88b 	bl	800eb58 <Osal_MemSet>
  rq.ogf = 0x3f;
 800da42:	233f      	movs	r3, #63	@ 0x3f
 800da44:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 800da48:	23a5      	movs	r3, #165	@ 0xa5
 800da4a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800da4e:	f107 0310 	add.w	r3, r7, #16
 800da52:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800da56:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800da5a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800da5e:	f107 030f 	add.w	r3, r7, #15
 800da62:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800da66:	2301      	movs	r3, #1
 800da68:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800da6c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800da70:	2100      	movs	r1, #0
 800da72:	4618      	mov	r0, r3
 800da74:	f000 ff2e 	bl	800e8d4 <hci_send_req>
 800da78:	4603      	mov	r3, r0
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	da01      	bge.n	800da82 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 800da7e:	23ff      	movs	r3, #255	@ 0xff
 800da80:	e004      	b.n	800da8c <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 800da82:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800da86:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800da8a:	781b      	ldrb	r3, [r3, #0]
}
 800da8c:	4618      	mov	r0, r3
 800da8e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800da92:	46bd      	mov	sp, r7
 800da94:	bd80      	pop	{r7, pc}

0800da96 <aci_gatt_init>:
 */

#include "auto/ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800da96:	b580      	push	{r7, lr}
 800da98:	b088      	sub	sp, #32
 800da9a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800da9c:	2300      	movs	r3, #0
 800da9e:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800daa0:	f107 0308 	add.w	r3, r7, #8
 800daa4:	2218      	movs	r2, #24
 800daa6:	2100      	movs	r1, #0
 800daa8:	4618      	mov	r0, r3
 800daaa:	f001 f855 	bl	800eb58 <Osal_MemSet>
  rq.ogf = 0x3f;
 800daae:	233f      	movs	r3, #63	@ 0x3f
 800dab0:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800dab2:	f240 1301 	movw	r3, #257	@ 0x101
 800dab6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800dab8:	1dfb      	adds	r3, r7, #7
 800daba:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800dabc:	2301      	movs	r3, #1
 800dabe:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800dac0:	f107 0308 	add.w	r3, r7, #8
 800dac4:	2100      	movs	r1, #0
 800dac6:	4618      	mov	r0, r3
 800dac8:	f000 ff04 	bl	800e8d4 <hci_send_req>
 800dacc:	4603      	mov	r3, r0
 800dace:	2b00      	cmp	r3, #0
 800dad0:	da01      	bge.n	800dad6 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800dad2:	23ff      	movs	r3, #255	@ 0xff
 800dad4:	e000      	b.n	800dad8 <aci_gatt_init+0x42>
  return status;
 800dad6:	79fb      	ldrb	r3, [r7, #7]
}
 800dad8:	4618      	mov	r0, r3
 800dada:	3720      	adds	r7, #32
 800dadc:	46bd      	mov	sp, r7
 800dade:	bd80      	pop	{r7, pc}

0800dae0 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800dae0:	b590      	push	{r4, r7, lr}
 800dae2:	b0cf      	sub	sp, #316	@ 0x13c
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	4604      	mov	r4, r0
 800dae8:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 800daec:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 800daf0:	6001      	str	r1, [r0, #0]
 800daf2:	4610      	mov	r0, r2
 800daf4:	4619      	mov	r1, r3
 800daf6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800dafa:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800dafe:	4622      	mov	r2, r4
 800db00:	701a      	strb	r2, [r3, #0]
 800db02:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800db06:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800db0a:	4602      	mov	r2, r0
 800db0c:	701a      	strb	r2, [r3, #0]
 800db0e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800db12:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800db16:	460a      	mov	r2, r1
 800db18:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800db1a:	f107 0310 	add.w	r3, r7, #16
 800db1e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800db22:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800db26:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800db2a:	781b      	ldrb	r3, [r3, #0]
 800db2c:	2b01      	cmp	r3, #1
 800db2e:	d00a      	beq.n	800db46 <aci_gatt_add_service+0x66>
 800db30:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800db34:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800db38:	781b      	ldrb	r3, [r3, #0]
 800db3a:	2b02      	cmp	r3, #2
 800db3c:	d101      	bne.n	800db42 <aci_gatt_add_service+0x62>
 800db3e:	2311      	movs	r3, #17
 800db40:	e002      	b.n	800db48 <aci_gatt_add_service+0x68>
 800db42:	2301      	movs	r3, #1
 800db44:	e000      	b.n	800db48 <aci_gatt_add_service+0x68>
 800db46:	2303      	movs	r3, #3
 800db48:	f107 0210 	add.w	r2, r7, #16
 800db4c:	4413      	add	r3, r2
 800db4e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800db52:	f107 030c 	add.w	r3, r7, #12
 800db56:	2203      	movs	r2, #3
 800db58:	2100      	movs	r1, #0
 800db5a:	4618      	mov	r0, r3
 800db5c:	f000 fffc 	bl	800eb58 <Osal_MemSet>
  int index_input = 0;
 800db60:	2300      	movs	r3, #0
 800db62:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800db66:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800db6a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800db6e:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800db72:	7812      	ldrb	r2, [r2, #0]
 800db74:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800db76:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800db7a:	3301      	adds	r3, #1
 800db7c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800db80:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800db84:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800db88:	781b      	ldrb	r3, [r3, #0]
 800db8a:	2b01      	cmp	r3, #1
 800db8c:	d002      	beq.n	800db94 <aci_gatt_add_service+0xb4>
 800db8e:	2b02      	cmp	r3, #2
 800db90:	d004      	beq.n	800db9c <aci_gatt_add_service+0xbc>
 800db92:	e007      	b.n	800dba4 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 800db94:	2302      	movs	r3, #2
 800db96:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800db9a:	e005      	b.n	800dba8 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800db9c:	2310      	movs	r3, #16
 800db9e:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800dba2:	e001      	b.n	800dba8 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800dba4:	2397      	movs	r3, #151	@ 0x97
 800dba6:	e06c      	b.n	800dc82 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800dba8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800dbac:	1c58      	adds	r0, r3, #1
 800dbae:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 800dbb2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800dbb6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800dbba:	6819      	ldr	r1, [r3, #0]
 800dbbc:	f000 ffbc 	bl	800eb38 <Osal_MemCpy>
    index_input += size;
 800dbc0:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 800dbc4:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800dbc8:	4413      	add	r3, r2
 800dbca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 800dbce:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800dbd2:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800dbd6:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800dbda:	7812      	ldrb	r2, [r2, #0]
 800dbdc:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800dbde:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dbe2:	3301      	adds	r3, #1
 800dbe4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800dbe8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800dbec:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800dbf0:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800dbf4:	7812      	ldrb	r2, [r2, #0]
 800dbf6:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800dbf8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dbfc:	3301      	adds	r3, #1
 800dbfe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800dc02:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dc06:	2218      	movs	r2, #24
 800dc08:	2100      	movs	r1, #0
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	f000 ffa4 	bl	800eb58 <Osal_MemSet>
  rq.ogf = 0x3f;
 800dc10:	233f      	movs	r3, #63	@ 0x3f
 800dc12:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 800dc16:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800dc1a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800dc1e:	f107 0310 	add.w	r3, r7, #16
 800dc22:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800dc26:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dc2a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 800dc2e:	f107 030c 	add.w	r3, r7, #12
 800dc32:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800dc36:	2303      	movs	r3, #3
 800dc38:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800dc3c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dc40:	2100      	movs	r1, #0
 800dc42:	4618      	mov	r0, r3
 800dc44:	f000 fe46 	bl	800e8d4 <hci_send_req>
 800dc48:	4603      	mov	r3, r0
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	da01      	bge.n	800dc52 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800dc4e:	23ff      	movs	r3, #255	@ 0xff
 800dc50:	e017      	b.n	800dc82 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 800dc52:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800dc56:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800dc5a:	781b      	ldrb	r3, [r3, #0]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d005      	beq.n	800dc6c <aci_gatt_add_service+0x18c>
    return resp.Status;
 800dc60:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800dc64:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800dc68:	781b      	ldrb	r3, [r3, #0]
 800dc6a:	e00a      	b.n	800dc82 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 800dc6c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800dc70:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800dc74:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800dc78:	b29a      	uxth	r2, r3
 800dc7a:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800dc7e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800dc80:	2300      	movs	r3, #0
}
 800dc82:	4618      	mov	r0, r3
 800dc84:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	bd90      	pop	{r4, r7, pc}

0800dc8c <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800dc8c:	b590      	push	{r4, r7, lr}
 800dc8e:	b0d1      	sub	sp, #324	@ 0x144
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	4604      	mov	r4, r0
 800dc94:	4608      	mov	r0, r1
 800dc96:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800dc9a:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 800dc9e:	600a      	str	r2, [r1, #0]
 800dca0:	4619      	mov	r1, r3
 800dca2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800dca6:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800dcaa:	4622      	mov	r2, r4
 800dcac:	801a      	strh	r2, [r3, #0]
 800dcae:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800dcb2:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800dcb6:	4602      	mov	r2, r0
 800dcb8:	701a      	strb	r2, [r3, #0]
 800dcba:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800dcbe:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800dcc2:	460a      	mov	r2, r1
 800dcc4:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800dcc6:	f107 0318 	add.w	r3, r7, #24
 800dcca:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800dcce:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800dcd2:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800dcd6:	781b      	ldrb	r3, [r3, #0]
 800dcd8:	2b01      	cmp	r3, #1
 800dcda:	d00a      	beq.n	800dcf2 <aci_gatt_add_char+0x66>
 800dcdc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800dce0:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800dce4:	781b      	ldrb	r3, [r3, #0]
 800dce6:	2b02      	cmp	r3, #2
 800dce8:	d101      	bne.n	800dcee <aci_gatt_add_char+0x62>
 800dcea:	2313      	movs	r3, #19
 800dcec:	e002      	b.n	800dcf4 <aci_gatt_add_char+0x68>
 800dcee:	2303      	movs	r3, #3
 800dcf0:	e000      	b.n	800dcf4 <aci_gatt_add_char+0x68>
 800dcf2:	2305      	movs	r3, #5
 800dcf4:	f107 0218 	add.w	r2, r7, #24
 800dcf8:	4413      	add	r3, r2
 800dcfa:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800dcfe:	f107 0314 	add.w	r3, r7, #20
 800dd02:	2203      	movs	r2, #3
 800dd04:	2100      	movs	r1, #0
 800dd06:	4618      	mov	r0, r3
 800dd08:	f000 ff26 	bl	800eb58 <Osal_MemSet>
  int index_input = 0;
 800dd0c:	2300      	movs	r3, #0
 800dd0e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 800dd12:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800dd16:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800dd1a:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800dd1e:	8812      	ldrh	r2, [r2, #0]
 800dd20:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800dd22:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800dd26:	3302      	adds	r3, #2
 800dd28:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800dd2c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800dd30:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800dd34:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800dd38:	7812      	ldrb	r2, [r2, #0]
 800dd3a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800dd3c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800dd40:	3301      	adds	r3, #1
 800dd42:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800dd46:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800dd4a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800dd4e:	781b      	ldrb	r3, [r3, #0]
 800dd50:	2b01      	cmp	r3, #1
 800dd52:	d002      	beq.n	800dd5a <aci_gatt_add_char+0xce>
 800dd54:	2b02      	cmp	r3, #2
 800dd56:	d004      	beq.n	800dd62 <aci_gatt_add_char+0xd6>
 800dd58:	e007      	b.n	800dd6a <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800dd5a:	2302      	movs	r3, #2
 800dd5c:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800dd60:	e005      	b.n	800dd6e <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800dd62:	2310      	movs	r3, #16
 800dd64:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800dd68:	e001      	b.n	800dd6e <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800dd6a:	2397      	movs	r3, #151	@ 0x97
 800dd6c:	e091      	b.n	800de92 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800dd6e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800dd72:	1cd8      	adds	r0, r3, #3
 800dd74:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 800dd78:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800dd7c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800dd80:	6819      	ldr	r1, [r3, #0]
 800dd82:	f000 fed9 	bl	800eb38 <Osal_MemCpy>
    index_input += size;
 800dd86:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800dd8a:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800dd8e:	4413      	add	r3, r2
 800dd90:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800dd94:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800dd98:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800dd9c:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 800dda0:	8812      	ldrh	r2, [r2, #0]
 800dda2:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800dda4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800dda8:	3302      	adds	r3, #2
 800ddaa:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800ddae:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ddb2:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800ddb6:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800ddb8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800ddbc:	3301      	adds	r3, #1
 800ddbe:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800ddc2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ddc6:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800ddca:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800ddcc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800ddd0:	3301      	adds	r3, #1
 800ddd2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800ddd6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ddda:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 800ddde:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800dde0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800dde4:	3301      	adds	r3, #1
 800dde6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800ddea:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ddee:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 800ddf2:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800ddf4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800ddf8:	3301      	adds	r3, #1
 800ddfa:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800ddfe:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800de02:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 800de06:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800de08:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800de0c:	3301      	adds	r3, #1
 800de0e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800de12:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800de16:	2218      	movs	r2, #24
 800de18:	2100      	movs	r1, #0
 800de1a:	4618      	mov	r0, r3
 800de1c:	f000 fe9c 	bl	800eb58 <Osal_MemSet>
  rq.ogf = 0x3f;
 800de20:	233f      	movs	r3, #63	@ 0x3f
 800de22:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 800de26:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800de2a:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 800de2e:	f107 0318 	add.w	r3, r7, #24
 800de32:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 800de36:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800de3a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 800de3e:	f107 0314 	add.w	r3, r7, #20
 800de42:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 800de46:	2303      	movs	r3, #3
 800de48:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800de4c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800de50:	2100      	movs	r1, #0
 800de52:	4618      	mov	r0, r3
 800de54:	f000 fd3e 	bl	800e8d4 <hci_send_req>
 800de58:	4603      	mov	r3, r0
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	da01      	bge.n	800de62 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800de5e:	23ff      	movs	r3, #255	@ 0xff
 800de60:	e017      	b.n	800de92 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800de62:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800de66:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800de6a:	781b      	ldrb	r3, [r3, #0]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d005      	beq.n	800de7c <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800de70:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800de74:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800de78:	781b      	ldrb	r3, [r3, #0]
 800de7a:	e00a      	b.n	800de92 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 800de7c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800de80:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800de84:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800de88:	b29a      	uxth	r2, r3
 800de8a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800de8e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800de90:	2300      	movs	r3, #0
}
 800de92:	4618      	mov	r0, r3
 800de94:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800de98:	46bd      	mov	sp, r7
 800de9a:	bd90      	pop	{r4, r7, pc}

0800de9c <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800de9c:	b5b0      	push	{r4, r5, r7, lr}
 800de9e:	b0cc      	sub	sp, #304	@ 0x130
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	4605      	mov	r5, r0
 800dea4:	460c      	mov	r4, r1
 800dea6:	4610      	mov	r0, r2
 800dea8:	4619      	mov	r1, r3
 800deaa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800deae:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800deb2:	462a      	mov	r2, r5
 800deb4:	801a      	strh	r2, [r3, #0]
 800deb6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800deba:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800debe:	4622      	mov	r2, r4
 800dec0:	801a      	strh	r2, [r3, #0]
 800dec2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dec6:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 800deca:	4602      	mov	r2, r0
 800decc:	701a      	strb	r2, [r3, #0]
 800dece:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ded2:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800ded6:	460a      	mov	r2, r1
 800ded8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800deda:	f107 0310 	add.w	r3, r7, #16
 800dede:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800dee2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dee6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800deea:	2200      	movs	r2, #0
 800deec:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800deee:	2300      	movs	r3, #0
 800def0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 800def4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800def8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800defc:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800df00:	8812      	ldrh	r2, [r2, #0]
 800df02:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800df04:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800df08:	3302      	adds	r3, #2
 800df0a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 800df0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800df12:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800df16:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800df1a:	8812      	ldrh	r2, [r2, #0]
 800df1c:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800df1e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800df22:	3302      	adds	r3, #2
 800df24:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 800df28:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800df2c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800df30:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 800df34:	7812      	ldrb	r2, [r2, #0]
 800df36:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800df38:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800df3c:	3301      	adds	r3, #1
 800df3e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800df42:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800df46:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800df4a:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 800df4e:	7812      	ldrb	r2, [r2, #0]
 800df50:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800df52:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800df56:	3301      	adds	r3, #1
 800df58:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800df5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800df60:	1d98      	adds	r0, r3, #6
 800df62:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800df66:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800df6a:	781b      	ldrb	r3, [r3, #0]
 800df6c:	461a      	mov	r2, r3
 800df6e:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800df72:	f000 fde1 	bl	800eb38 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800df76:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800df7a:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800df7e:	781b      	ldrb	r3, [r3, #0]
 800df80:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800df84:	4413      	add	r3, r2
 800df86:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800df8a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800df8e:	2218      	movs	r2, #24
 800df90:	2100      	movs	r1, #0
 800df92:	4618      	mov	r0, r3
 800df94:	f000 fde0 	bl	800eb58 <Osal_MemSet>
  rq.ogf = 0x3f;
 800df98:	233f      	movs	r3, #63	@ 0x3f
 800df9a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 800df9e:	f44f 7383 	mov.w	r3, #262	@ 0x106
 800dfa2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800dfa6:	f107 0310 	add.w	r3, r7, #16
 800dfaa:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800dfae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dfb2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800dfb6:	f107 030f 	add.w	r3, r7, #15
 800dfba:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800dfbe:	2301      	movs	r3, #1
 800dfc0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800dfc4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dfc8:	2100      	movs	r1, #0
 800dfca:	4618      	mov	r0, r3
 800dfcc:	f000 fc82 	bl	800e8d4 <hci_send_req>
 800dfd0:	4603      	mov	r3, r0
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	da01      	bge.n	800dfda <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800dfd6:	23ff      	movs	r3, #255	@ 0xff
 800dfd8:	e004      	b.n	800dfe4 <aci_gatt_update_char_value+0x148>
  return status;
 800dfda:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dfde:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800dfe2:	781b      	ldrb	r3, [r3, #0]
}
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800dfea:	46bd      	mov	sp, r7
 800dfec:	bdb0      	pop	{r4, r5, r7, pc}

0800dfee <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 800dfee:	b580      	push	{r7, lr}
 800dff0:	b0cc      	sub	sp, #304	@ 0x130
 800dff2:	af00      	add	r7, sp, #0
 800dff4:	4602      	mov	r2, r0
 800dff6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dffa:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800dffe:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 800e000:	f107 0310 	add.w	r3, r7, #16
 800e004:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800e008:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e00c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800e010:	2200      	movs	r2, #0
 800e012:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800e014:	2300      	movs	r3, #0
 800e016:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800e01a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e01e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800e022:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800e026:	8812      	ldrh	r2, [r2, #0]
 800e028:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800e02a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e02e:	3302      	adds	r3, #2
 800e030:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e034:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e038:	2218      	movs	r2, #24
 800e03a:	2100      	movs	r1, #0
 800e03c:	4618      	mov	r0, r3
 800e03e:	f000 fd8b 	bl	800eb58 <Osal_MemSet>
  rq.ogf = 0x3f;
 800e042:	233f      	movs	r3, #63	@ 0x3f
 800e044:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 800e048:	f240 1325 	movw	r3, #293	@ 0x125
 800e04c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800e050:	f107 0310 	add.w	r3, r7, #16
 800e054:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800e058:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e05c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800e060:	f107 030f 	add.w	r3, r7, #15
 800e064:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800e068:	2301      	movs	r3, #1
 800e06a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e06e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e072:	2100      	movs	r1, #0
 800e074:	4618      	mov	r0, r3
 800e076:	f000 fc2d 	bl	800e8d4 <hci_send_req>
 800e07a:	4603      	mov	r3, r0
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	da01      	bge.n	800e084 <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 800e080:	23ff      	movs	r3, #255	@ 0xff
 800e082:	e004      	b.n	800e08e <aci_gatt_confirm_indication+0xa0>
  return status;
 800e084:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e088:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800e08c:	781b      	ldrb	r3, [r3, #0]
}
 800e08e:	4618      	mov	r0, r3
 800e090:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800e094:	46bd      	mov	sp, r7
 800e096:	bd80      	pop	{r7, pc}

0800e098 <aci_hal_write_config_data>:
#include "auto/ble_hal_aci.h"

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800e098:	b580      	push	{r7, lr}
 800e09a:	b0cc      	sub	sp, #304	@ 0x130
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e0a2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800e0a6:	601a      	str	r2, [r3, #0]
 800e0a8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e0ac:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800e0b0:	4602      	mov	r2, r0
 800e0b2:	701a      	strb	r2, [r3, #0]
 800e0b4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e0b8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800e0bc:	460a      	mov	r2, r1
 800e0be:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800e0c0:	f107 0310 	add.w	r3, r7, #16
 800e0c4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800e0c8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e0cc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 800e0da:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e0de:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800e0e2:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800e0e6:	7812      	ldrb	r2, [r2, #0]
 800e0e8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800e0ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e0ee:	3301      	adds	r3, #1
 800e0f0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 800e0f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e0f8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800e0fc:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800e100:	7812      	ldrb	r2, [r2, #0]
 800e102:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800e104:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e108:	3301      	adds	r3, #1
 800e10a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800e10e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e112:	1c98      	adds	r0, r3, #2
 800e114:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e118:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800e11c:	781a      	ldrb	r2, [r3, #0]
 800e11e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e122:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800e126:	6819      	ldr	r1, [r3, #0]
 800e128:	f000 fd06 	bl	800eb38 <Osal_MemCpy>
  index_input += Length;
 800e12c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e130:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800e134:	781b      	ldrb	r3, [r3, #0]
 800e136:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800e13a:	4413      	add	r3, r2
 800e13c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e140:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e144:	2218      	movs	r2, #24
 800e146:	2100      	movs	r1, #0
 800e148:	4618      	mov	r0, r3
 800e14a:	f000 fd05 	bl	800eb58 <Osal_MemSet>
  rq.ogf = 0x3f;
 800e14e:	233f      	movs	r3, #63	@ 0x3f
 800e150:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 800e154:	230c      	movs	r3, #12
 800e156:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800e15a:	f107 0310 	add.w	r3, r7, #16
 800e15e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800e162:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e166:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800e16a:	f107 030f 	add.w	r3, r7, #15
 800e16e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800e172:	2301      	movs	r3, #1
 800e174:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e178:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e17c:	2100      	movs	r1, #0
 800e17e:	4618      	mov	r0, r3
 800e180:	f000 fba8 	bl	800e8d4 <hci_send_req>
 800e184:	4603      	mov	r3, r0
 800e186:	2b00      	cmp	r3, #0
 800e188:	da01      	bge.n	800e18e <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800e18a:	23ff      	movs	r3, #255	@ 0xff
 800e18c:	e004      	b.n	800e198 <aci_hal_write_config_data+0x100>
  return status;
 800e18e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e192:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800e196:	781b      	ldrb	r3, [r3, #0]
}
 800e198:	4618      	mov	r0, r3
 800e19a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	bd80      	pop	{r7, pc}

0800e1a2 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800e1a2:	b580      	push	{r7, lr}
 800e1a4:	b0cc      	sub	sp, #304	@ 0x130
 800e1a6:	af00      	add	r7, sp, #0
 800e1a8:	4602      	mov	r2, r0
 800e1aa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e1ae:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800e1b2:	701a      	strb	r2, [r3, #0]
 800e1b4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e1b8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800e1bc:	460a      	mov	r2, r1
 800e1be:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800e1c0:	f107 0310 	add.w	r3, r7, #16
 800e1c4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800e1c8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e1cc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800e1d0:	2200      	movs	r2, #0
 800e1d2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800e1d4:	2300      	movs	r3, #0
 800e1d6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 800e1da:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e1de:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800e1e2:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800e1e6:	7812      	ldrb	r2, [r2, #0]
 800e1e8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800e1ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e1ee:	3301      	adds	r3, #1
 800e1f0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 800e1f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e1f8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800e1fc:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800e200:	7812      	ldrb	r2, [r2, #0]
 800e202:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800e204:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e208:	3301      	adds	r3, #1
 800e20a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e20e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e212:	2218      	movs	r2, #24
 800e214:	2100      	movs	r1, #0
 800e216:	4618      	mov	r0, r3
 800e218:	f000 fc9e 	bl	800eb58 <Osal_MemSet>
  rq.ogf = 0x3f;
 800e21c:	233f      	movs	r3, #63	@ 0x3f
 800e21e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 800e222:	230f      	movs	r3, #15
 800e224:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800e228:	f107 0310 	add.w	r3, r7, #16
 800e22c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800e230:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e234:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800e238:	f107 030f 	add.w	r3, r7, #15
 800e23c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800e240:	2301      	movs	r3, #1
 800e242:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e246:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e24a:	2100      	movs	r1, #0
 800e24c:	4618      	mov	r0, r3
 800e24e:	f000 fb41 	bl	800e8d4 <hci_send_req>
 800e252:	4603      	mov	r3, r0
 800e254:	2b00      	cmp	r3, #0
 800e256:	da01      	bge.n	800e25c <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800e258:	23ff      	movs	r3, #255	@ 0xff
 800e25a:	e004      	b.n	800e266 <aci_hal_set_tx_power_level+0xc4>
  return status;
 800e25c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e260:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800e264:	781b      	ldrb	r3, [r3, #0]
}
 800e266:	4618      	mov	r0, r3
 800e268:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800e26c:	46bd      	mov	sp, r7
 800e26e:	bd80      	pop	{r7, pc}

0800e270 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800e270:	b580      	push	{r7, lr}
 800e272:	b0cc      	sub	sp, #304	@ 0x130
 800e274:	af00      	add	r7, sp, #0
 800e276:	4602      	mov	r2, r0
 800e278:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e27c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800e280:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800e282:	f107 0310 	add.w	r3, r7, #16
 800e286:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800e28a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e28e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800e292:	2200      	movs	r2, #0
 800e294:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800e296:	2300      	movs	r3, #0
 800e298:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800e29c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e2a0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800e2a4:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800e2a8:	8812      	ldrh	r2, [r2, #0]
 800e2aa:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800e2ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e2b0:	3302      	adds	r3, #2
 800e2b2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e2b6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e2ba:	2218      	movs	r2, #24
 800e2bc:	2100      	movs	r1, #0
 800e2be:	4618      	mov	r0, r3
 800e2c0:	f000 fc4a 	bl	800eb58 <Osal_MemSet>
  rq.ogf = 0x3f;
 800e2c4:	233f      	movs	r3, #63	@ 0x3f
 800e2c6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 800e2ca:	2318      	movs	r3, #24
 800e2cc:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800e2d0:	f107 0310 	add.w	r3, r7, #16
 800e2d4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800e2d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e2dc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800e2e0:	f107 030f 	add.w	r3, r7, #15
 800e2e4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800e2e8:	2301      	movs	r3, #1
 800e2ea:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e2ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e2f2:	2100      	movs	r1, #0
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	f000 faed 	bl	800e8d4 <hci_send_req>
 800e2fa:	4603      	mov	r3, r0
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	da01      	bge.n	800e304 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800e300:	23ff      	movs	r3, #255	@ 0xff
 800e302:	e004      	b.n	800e30e <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800e304:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e308:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800e30c:	781b      	ldrb	r3, [r3, #0]
}
 800e30e:	4618      	mov	r0, r3
 800e310:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800e314:	46bd      	mov	sp, r7
 800e316:	bd80      	pop	{r7, pc}

0800e318 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800e318:	b580      	push	{r7, lr}
 800e31a:	b088      	sub	sp, #32
 800e31c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800e31e:	2300      	movs	r3, #0
 800e320:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e322:	f107 0308 	add.w	r3, r7, #8
 800e326:	2218      	movs	r2, #24
 800e328:	2100      	movs	r1, #0
 800e32a:	4618      	mov	r0, r3
 800e32c:	f000 fc14 	bl	800eb58 <Osal_MemSet>
  rq.ogf = 0x03;
 800e330:	2303      	movs	r3, #3
 800e332:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800e334:	2303      	movs	r3, #3
 800e336:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800e338:	1dfb      	adds	r3, r7, #7
 800e33a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800e33c:	2301      	movs	r3, #1
 800e33e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e340:	f107 0308 	add.w	r3, r7, #8
 800e344:	2100      	movs	r1, #0
 800e346:	4618      	mov	r0, r3
 800e348:	f000 fac4 	bl	800e8d4 <hci_send_req>
 800e34c:	4603      	mov	r3, r0
 800e34e:	2b00      	cmp	r3, #0
 800e350:	da01      	bge.n	800e356 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800e352:	23ff      	movs	r3, #255	@ 0xff
 800e354:	e000      	b.n	800e358 <hci_reset+0x40>
  return status;
 800e356:	79fb      	ldrb	r3, [r7, #7]
}
 800e358:	4618      	mov	r0, r3
 800e35a:	3720      	adds	r7, #32
 800e35c:	46bd      	mov	sp, r7
 800e35e:	bd80      	pop	{r7, pc}

0800e360 <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 800e360:	b580      	push	{r7, lr}
 800e362:	b0ce      	sub	sp, #312	@ 0x138
 800e364:	af00      	add	r7, sp, #0
 800e366:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e36a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800e36e:	6019      	str	r1, [r3, #0]
 800e370:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e374:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800e378:	601a      	str	r2, [r3, #0]
 800e37a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e37e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800e382:	4602      	mov	r2, r0
 800e384:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 800e386:	f107 0318 	add.w	r3, r7, #24
 800e38a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800e38e:	f107 0310 	add.w	r3, r7, #16
 800e392:	2205      	movs	r2, #5
 800e394:	2100      	movs	r1, #0
 800e396:	4618      	mov	r0, r3
 800e398:	f000 fbde 	bl	800eb58 <Osal_MemSet>
  int index_input = 0;
 800e39c:	2300      	movs	r3, #0
 800e39e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Connection_Handle = Connection_Handle;
 800e3a2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800e3a6:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800e3aa:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800e3ae:	8812      	ldrh	r2, [r2, #0]
 800e3b0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800e3b2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800e3b6:	3302      	adds	r3, #2
 800e3b8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e3bc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800e3c0:	2218      	movs	r2, #24
 800e3c2:	2100      	movs	r1, #0
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	f000 fbc7 	bl	800eb58 <Osal_MemSet>
  rq.ogf = 0x08;
 800e3ca:	2308      	movs	r3, #8
 800e3cc:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x030;
 800e3d0:	2330      	movs	r3, #48	@ 0x30
 800e3d2:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 800e3d6:	f107 0318 	add.w	r3, r7, #24
 800e3da:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 800e3de:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800e3e2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 800e3e6:	f107 0310 	add.w	r3, r7, #16
 800e3ea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 800e3ee:	2305      	movs	r3, #5
 800e3f0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e3f4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800e3f8:	2100      	movs	r1, #0
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	f000 fa6a 	bl	800e8d4 <hci_send_req>
 800e400:	4603      	mov	r3, r0
 800e402:	2b00      	cmp	r3, #0
 800e404:	da01      	bge.n	800e40a <hci_le_read_phy+0xaa>
    return BLE_STATUS_TIMEOUT;
 800e406:	23ff      	movs	r3, #255	@ 0xff
 800e408:	e023      	b.n	800e452 <hci_le_read_phy+0xf2>
  if ( resp.Status )
 800e40a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e40e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800e412:	781b      	ldrb	r3, [r3, #0]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d005      	beq.n	800e424 <hci_le_read_phy+0xc4>
    return resp.Status;
 800e418:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e41c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800e420:	781b      	ldrb	r3, [r3, #0]
 800e422:	e016      	b.n	800e452 <hci_le_read_phy+0xf2>
  *TX_PHY = resp.TX_PHY;
 800e424:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e428:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800e42c:	78da      	ldrb	r2, [r3, #3]
 800e42e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e432:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 800e43a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e43e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800e442:	791a      	ldrb	r2, [r3, #4]
 800e444:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e448:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800e450:	2300      	movs	r3, #0
}
 800e452:	4618      	mov	r0, r3
 800e454:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 800e458:	46bd      	mov	sp, r7
 800e45a:	bd80      	pop	{r7, pc}

0800e45c <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800e45c:	b590      	push	{r4, r7, lr}
 800e45e:	b0cd      	sub	sp, #308	@ 0x134
 800e460:	af00      	add	r7, sp, #0
 800e462:	4604      	mov	r4, r0
 800e464:	4608      	mov	r0, r1
 800e466:	4611      	mov	r1, r2
 800e468:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e46c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800e470:	4622      	mov	r2, r4
 800e472:	701a      	strb	r2, [r3, #0]
 800e474:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e478:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800e47c:	4602      	mov	r2, r0
 800e47e:	701a      	strb	r2, [r3, #0]
 800e480:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e484:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800e488:	460a      	mov	r2, r1
 800e48a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800e48c:	f107 0310 	add.w	r3, r7, #16
 800e490:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800e494:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e498:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800e49c:	2200      	movs	r2, #0
 800e49e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800e4a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e4aa:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800e4ae:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800e4b2:	7812      	ldrb	r2, [r2, #0]
 800e4b4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800e4b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e4ba:	3301      	adds	r3, #1
 800e4bc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 800e4c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e4c4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800e4c8:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800e4cc:	7812      	ldrb	r2, [r2, #0]
 800e4ce:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800e4d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e4d4:	3301      	adds	r3, #1
 800e4d6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 800e4da:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e4de:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800e4e2:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800e4e6:	7812      	ldrb	r2, [r2, #0]
 800e4e8:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800e4ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e4ee:	3301      	adds	r3, #1
 800e4f0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e4f4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e4f8:	2218      	movs	r2, #24
 800e4fa:	2100      	movs	r1, #0
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	f000 fb2b 	bl	800eb58 <Osal_MemSet>
  rq.ogf = 0x08;
 800e502:	2308      	movs	r3, #8
 800e504:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 800e508:	2331      	movs	r3, #49	@ 0x31
 800e50a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800e50e:	f107 0310 	add.w	r3, r7, #16
 800e512:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800e516:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e51a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800e51e:	f107 030f 	add.w	r3, r7, #15
 800e522:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800e526:	2301      	movs	r3, #1
 800e528:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e52c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e530:	2100      	movs	r1, #0
 800e532:	4618      	mov	r0, r3
 800e534:	f000 f9ce 	bl	800e8d4 <hci_send_req>
 800e538:	4603      	mov	r3, r0
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	da01      	bge.n	800e542 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800e53e:	23ff      	movs	r3, #255	@ 0xff
 800e540:	e004      	b.n	800e54c <hci_le_set_default_phy+0xf0>
  return status;
 800e542:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e546:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800e54a:	781b      	ldrb	r3, [r3, #0]
}
 800e54c:	4618      	mov	r0, r3
 800e54e:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800e552:	46bd      	mov	sp, r7
 800e554:	bd90      	pop	{r4, r7, pc}

0800e556 <aci_l2cap_connection_parameter_update_req>:
tBleStatus aci_l2cap_connection_parameter_update_req( uint16_t Connection_Handle,
                                                      uint16_t Conn_Interval_Min,
                                                      uint16_t Conn_Interval_Max,
                                                      uint16_t Latency,
                                                      uint16_t Timeout_Multiplier )
{
 800e556:	b5b0      	push	{r4, r5, r7, lr}
 800e558:	b0cc      	sub	sp, #304	@ 0x130
 800e55a:	af00      	add	r7, sp, #0
 800e55c:	4605      	mov	r5, r0
 800e55e:	460c      	mov	r4, r1
 800e560:	4610      	mov	r0, r2
 800e562:	4619      	mov	r1, r3
 800e564:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e568:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800e56c:	462a      	mov	r2, r5
 800e56e:	801a      	strh	r2, [r3, #0]
 800e570:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e574:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800e578:	4622      	mov	r2, r4
 800e57a:	801a      	strh	r2, [r3, #0]
 800e57c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e580:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800e584:	4602      	mov	r2, r0
 800e586:	801a      	strh	r2, [r3, #0]
 800e588:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e58c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800e590:	460a      	mov	r2, r1
 800e592:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_l2cap_connection_parameter_update_req_cp0 *cp0 = (aci_l2cap_connection_parameter_update_req_cp0*)(cmd_buffer);
 800e594:	f107 0310 	add.w	r3, r7, #16
 800e598:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800e59c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e5a0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800e5a4:	2200      	movs	r2, #0
 800e5a6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800e5ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e5b2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800e5b6:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800e5ba:	8812      	ldrh	r2, [r2, #0]
 800e5bc:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800e5be:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e5c2:	3302      	adds	r3, #2
 800e5c4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 800e5c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e5cc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800e5d0:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800e5d4:	8812      	ldrh	r2, [r2, #0]
 800e5d6:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800e5d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e5dc:	3302      	adds	r3, #2
 800e5de:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 800e5e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e5e6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800e5ea:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 800e5ee:	8812      	ldrh	r2, [r2, #0]
 800e5f0:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 800e5f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e5f6:	3302      	adds	r3, #2
 800e5f8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Latency = Latency;
 800e5fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e600:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800e604:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800e608:	8812      	ldrh	r2, [r2, #0]
 800e60a:	80da      	strh	r2, [r3, #6]
  index_input += 2;
 800e60c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e610:	3302      	adds	r3, #2
 800e612:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Timeout_Multiplier = Timeout_Multiplier;
 800e616:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e61a:	f8b7 2140 	ldrh.w	r2, [r7, #320]	@ 0x140
 800e61e:	811a      	strh	r2, [r3, #8]
  index_input += 2;
 800e620:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e624:	3302      	adds	r3, #2
 800e626:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e62a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e62e:	2218      	movs	r2, #24
 800e630:	2100      	movs	r1, #0
 800e632:	4618      	mov	r0, r3
 800e634:	f000 fa90 	bl	800eb58 <Osal_MemSet>
  rq.ogf = 0x3f;
 800e638:	233f      	movs	r3, #63	@ 0x3f
 800e63a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x181;
 800e63e:	f240 1381 	movw	r3, #385	@ 0x181
 800e642:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.event = 0x0F;
 800e646:	230f      	movs	r3, #15
 800e648:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  rq.cparam = cmd_buffer;
 800e64c:	f107 0310 	add.w	r3, r7, #16
 800e650:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800e654:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e658:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800e65c:	f107 030f 	add.w	r3, r7, #15
 800e660:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800e664:	2301      	movs	r3, #1
 800e666:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e66a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e66e:	2100      	movs	r1, #0
 800e670:	4618      	mov	r0, r3
 800e672:	f000 f92f 	bl	800e8d4 <hci_send_req>
 800e676:	4603      	mov	r3, r0
 800e678:	2b00      	cmp	r3, #0
 800e67a:	da01      	bge.n	800e680 <aci_l2cap_connection_parameter_update_req+0x12a>
    return BLE_STATUS_TIMEOUT;
 800e67c:	23ff      	movs	r3, #255	@ 0xff
 800e67e:	e004      	b.n	800e68a <aci_l2cap_connection_parameter_update_req+0x134>
  return status;
 800e680:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e684:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800e688:	781b      	ldrb	r3, [r3, #0]
}
 800e68a:	4618      	mov	r0, r3
 800e68c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800e690:	46bd      	mov	sp, r7
 800e692:	bdb0      	pop	{r4, r5, r7, pc}

0800e694 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800e694:	b580      	push	{r7, lr}
 800e696:	b086      	sub	sp, #24
 800e698:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e69a:	f3ef 8310 	mrs	r3, PRIMASK
 800e69e:	60fb      	str	r3, [r7, #12]
  return(result);
 800e6a0:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800e6a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e6a4:	b672      	cpsid	i
}
 800e6a6:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800e6a8:	1cbb      	adds	r3, r7, #2
 800e6aa:	4619      	mov	r1, r3
 800e6ac:	4812      	ldr	r0, [pc, #72]	@ (800e6f8 <DbgTrace_TxCpltCallback+0x64>)
 800e6ae:	f001 f8d5 	bl	800f85c <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800e6b2:	1cbb      	adds	r3, r7, #2
 800e6b4:	4619      	mov	r1, r3
 800e6b6:	4810      	ldr	r0, [pc, #64]	@ (800e6f8 <DbgTrace_TxCpltCallback+0x64>)
 800e6b8:	f001 f9bf 	bl	800fa3a <CircularQueue_Sense>
 800e6bc:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800e6be:	693b      	ldr	r3, [r7, #16]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d00c      	beq.n	800e6de <DbgTrace_TxCpltCallback+0x4a>
 800e6c4:	697b      	ldr	r3, [r7, #20]
 800e6c6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e6c8:	68bb      	ldr	r3, [r7, #8]
 800e6ca:	f383 8810 	msr	PRIMASK, r3
}
 800e6ce:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800e6d0:	887b      	ldrh	r3, [r7, #2]
 800e6d2:	4a0a      	ldr	r2, [pc, #40]	@ (800e6fc <DbgTrace_TxCpltCallback+0x68>)
 800e6d4:	4619      	mov	r1, r3
 800e6d6:	6938      	ldr	r0, [r7, #16]
 800e6d8:	f7f2 fd43 	bl	8001162 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 800e6dc:	e008      	b.n	800e6f0 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 800e6de:	4b08      	ldr	r3, [pc, #32]	@ (800e700 <DbgTrace_TxCpltCallback+0x6c>)
 800e6e0:	2201      	movs	r2, #1
 800e6e2:	701a      	strb	r2, [r3, #0]
 800e6e4:	697b      	ldr	r3, [r7, #20]
 800e6e6:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	f383 8810 	msr	PRIMASK, r3
}
 800e6ee:	bf00      	nop
}
 800e6f0:	bf00      	nop
 800e6f2:	3718      	adds	r7, #24
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	bd80      	pop	{r7, pc}
 800e6f8:	20000ba8 	.word	0x20000ba8
 800e6fc:	0800e695 	.word	0x0800e695
 800e700:	200000a9 	.word	0x200000a9

0800e704 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 800e704:	b580      	push	{r7, lr}
 800e706:	b082      	sub	sp, #8
 800e708:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 800e70a:	f7f2 fd24 	bl	8001156 <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 800e70e:	2302      	movs	r3, #2
 800e710:	9300      	str	r3, [sp, #0]
 800e712:	2300      	movs	r3, #0
 800e714:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800e718:	4903      	ldr	r1, [pc, #12]	@ (800e728 <DbgTraceInit+0x24>)
 800e71a:	4804      	ldr	r0, [pc, #16]	@ (800e72c <DbgTraceInit+0x28>)
 800e71c:	f000 fe46 	bl	800f3ac <CircularQueue_Init>
#endif 
#endif
  return;
 800e720:	bf00      	nop
}
 800e722:	46bd      	mov	sp, r7
 800e724:	bd80      	pop	{r7, pc}
 800e726:	bf00      	nop
 800e728:	20000bc8 	.word	0x20000bc8
 800e72c:	20000ba8 	.word	0x20000ba8

0800e730 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800e730:	b580      	push	{r7, lr}
 800e732:	b084      	sub	sp, #16
 800e734:	af00      	add	r7, sp, #0
 800e736:	60f8      	str	r0, [r7, #12]
 800e738:	60b9      	str	r1, [r7, #8]
 800e73a:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800e73c:	687a      	ldr	r2, [r7, #4]
 800e73e:	68b9      	ldr	r1, [r7, #8]
 800e740:	68f8      	ldr	r0, [r7, #12]
 800e742:	f000 f805 	bl	800e750 <DbgTraceWrite>
 800e746:	4603      	mov	r3, r0
}
 800e748:	4618      	mov	r0, r3
 800e74a:	3710      	adds	r7, #16
 800e74c:	46bd      	mov	sp, r7
 800e74e:	bd80      	pop	{r7, pc}

0800e750 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800e750:	b580      	push	{r7, lr}
 800e752:	b08a      	sub	sp, #40	@ 0x28
 800e754:	af00      	add	r7, sp, #0
 800e756:	60f8      	str	r0, [r7, #12]
 800e758:	60b9      	str	r1, [r7, #8]
 800e75a:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800e75c:	2300      	movs	r3, #0
 800e75e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e760:	f3ef 8310 	mrs	r3, PRIMASK
 800e764:	61bb      	str	r3, [r7, #24]
  return(result);
 800e766:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800e768:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e770:	d102      	bne.n	800e778 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800e772:	2300      	movs	r3, #0
 800e774:	627b      	str	r3, [r7, #36]	@ 0x24
 800e776:	e037      	b.n	800e7e8 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	2b01      	cmp	r3, #1
 800e77c:	d006      	beq.n	800e78c <DbgTraceWrite+0x3c>
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	2b02      	cmp	r3, #2
 800e782:	d003      	beq.n	800e78c <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800e784:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e788:	627b      	str	r3, [r7, #36]	@ 0x24
 800e78a:	e02d      	b.n	800e7e8 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d02a      	beq.n	800e7e8 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800e796:	b672      	cpsid	i
}
 800e798:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	b29a      	uxth	r2, r3
 800e79e:	2301      	movs	r3, #1
 800e7a0:	68b9      	ldr	r1, [r7, #8]
 800e7a2:	4814      	ldr	r0, [pc, #80]	@ (800e7f4 <DbgTraceWrite+0xa4>)
 800e7a4:	f000 fe34 	bl	800f410 <CircularQueue_Add>
 800e7a8:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800e7aa:	69fb      	ldr	r3, [r7, #28]
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d015      	beq.n	800e7dc <DbgTraceWrite+0x8c>
 800e7b0:	4b11      	ldr	r3, [pc, #68]	@ (800e7f8 <DbgTraceWrite+0xa8>)
 800e7b2:	781b      	ldrb	r3, [r3, #0]
 800e7b4:	b2db      	uxtb	r3, r3
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d010      	beq.n	800e7dc <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 800e7ba:	4b0f      	ldr	r3, [pc, #60]	@ (800e7f8 <DbgTraceWrite+0xa8>)
 800e7bc:	2200      	movs	r2, #0
 800e7be:	701a      	strb	r2, [r3, #0]
 800e7c0:	6a3b      	ldr	r3, [r7, #32]
 800e7c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e7c4:	697b      	ldr	r3, [r7, #20]
 800e7c6:	f383 8810 	msr	PRIMASK, r3
}
 800e7ca:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	b29b      	uxth	r3, r3
 800e7d0:	4a0a      	ldr	r2, [pc, #40]	@ (800e7fc <DbgTraceWrite+0xac>)
 800e7d2:	4619      	mov	r1, r3
 800e7d4:	69f8      	ldr	r0, [r7, #28]
 800e7d6:	f7f2 fcc4 	bl	8001162 <DbgOutputTraces>
 800e7da:	e005      	b.n	800e7e8 <DbgTraceWrite+0x98>
 800e7dc:	6a3b      	ldr	r3, [r7, #32]
 800e7de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e7e0:	693b      	ldr	r3, [r7, #16]
 800e7e2:	f383 8810 	msr	PRIMASK, r3
}
 800e7e6:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800e7e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	3728      	adds	r7, #40	@ 0x28
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	bd80      	pop	{r7, pc}
 800e7f2:	bf00      	nop
 800e7f4:	20000ba8 	.word	0x20000ba8
 800e7f8:	200000a9 	.word	0x200000a9
 800e7fc:	0800e695 	.word	0x0800e695

0800e800 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800e800:	b580      	push	{r7, lr}
 800e802:	b082      	sub	sp, #8
 800e804:	af00      	add	r7, sp, #0
 800e806:	6078      	str	r0, [r7, #4]
 800e808:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800e80a:	683b      	ldr	r3, [r7, #0]
 800e80c:	685b      	ldr	r3, [r3, #4]
 800e80e:	4a08      	ldr	r2, [pc, #32]	@ (800e830 <hci_init+0x30>)
 800e810:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800e812:	4a08      	ldr	r2, [pc, #32]	@ (800e834 <hci_init+0x34>)
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800e818:	4806      	ldr	r0, [pc, #24]	@ (800e834 <hci_init+0x34>)
 800e81a:	f000 f979 	bl	800eb10 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800e81e:	683b      	ldr	r3, [r7, #0]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	4618      	mov	r0, r3
 800e824:	f000 f8da 	bl	800e9dc <TlInit>

  return;
 800e828:	bf00      	nop
}
 800e82a:	3708      	adds	r7, #8
 800e82c:	46bd      	mov	sp, r7
 800e82e:	bd80      	pop	{r7, pc}
 800e830:	20001bf0 	.word	0x20001bf0
 800e834:	20001bc8 	.word	0x20001bc8

0800e838 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800e838:	b580      	push	{r7, lr}
 800e83a:	b084      	sub	sp, #16
 800e83c:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800e83e:	4822      	ldr	r0, [pc, #136]	@ (800e8c8 <hci_user_evt_proc+0x90>)
 800e840:	f000 fd06 	bl	800f250 <LST_is_empty>
 800e844:	4603      	mov	r3, r0
 800e846:	2b00      	cmp	r3, #0
 800e848:	d12b      	bne.n	800e8a2 <hci_user_evt_proc+0x6a>
 800e84a:	4b20      	ldr	r3, [pc, #128]	@ (800e8cc <hci_user_evt_proc+0x94>)
 800e84c:	781b      	ldrb	r3, [r3, #0]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d027      	beq.n	800e8a2 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800e852:	f107 030c 	add.w	r3, r7, #12
 800e856:	4619      	mov	r1, r3
 800e858:	481b      	ldr	r0, [pc, #108]	@ (800e8c8 <hci_user_evt_proc+0x90>)
 800e85a:	f000 fd88 	bl	800f36e <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800e85e:	4b1c      	ldr	r3, [pc, #112]	@ (800e8d0 <hci_user_evt_proc+0x98>)
 800e860:	69db      	ldr	r3, [r3, #28]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d00c      	beq.n	800e880 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800e86a:	2301      	movs	r3, #1
 800e86c:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800e86e:	4b18      	ldr	r3, [pc, #96]	@ (800e8d0 <hci_user_evt_proc+0x98>)
 800e870:	69db      	ldr	r3, [r3, #28]
 800e872:	1d3a      	adds	r2, r7, #4
 800e874:	4610      	mov	r0, r2
 800e876:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800e878:	793a      	ldrb	r2, [r7, #4]
 800e87a:	4b14      	ldr	r3, [pc, #80]	@ (800e8cc <hci_user_evt_proc+0x94>)
 800e87c:	701a      	strb	r2, [r3, #0]
 800e87e:	e002      	b.n	800e886 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800e880:	4b12      	ldr	r3, [pc, #72]	@ (800e8cc <hci_user_evt_proc+0x94>)
 800e882:	2201      	movs	r2, #1
 800e884:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800e886:	4b11      	ldr	r3, [pc, #68]	@ (800e8cc <hci_user_evt_proc+0x94>)
 800e888:	781b      	ldrb	r3, [r3, #0]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d004      	beq.n	800e898 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	4618      	mov	r0, r3
 800e892:	f001 fc2d 	bl	80100f0 <TL_MM_EvtDone>
 800e896:	e004      	b.n	800e8a2 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	4619      	mov	r1, r3
 800e89c:	480a      	ldr	r0, [pc, #40]	@ (800e8c8 <hci_user_evt_proc+0x90>)
 800e89e:	f000 fcf9 	bl	800f294 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800e8a2:	4809      	ldr	r0, [pc, #36]	@ (800e8c8 <hci_user_evt_proc+0x90>)
 800e8a4:	f000 fcd4 	bl	800f250 <LST_is_empty>
 800e8a8:	4603      	mov	r3, r0
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d107      	bne.n	800e8be <hci_user_evt_proc+0x86>
 800e8ae:	4b07      	ldr	r3, [pc, #28]	@ (800e8cc <hci_user_evt_proc+0x94>)
 800e8b0:	781b      	ldrb	r3, [r3, #0]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d003      	beq.n	800e8be <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800e8b6:	4804      	ldr	r0, [pc, #16]	@ (800e8c8 <hci_user_evt_proc+0x90>)
 800e8b8:	f7f5 fe2c 	bl	8004514 <hci_notify_asynch_evt>
  }


  return;
 800e8bc:	bf00      	nop
 800e8be:	bf00      	nop
}
 800e8c0:	3710      	adds	r7, #16
 800e8c2:	46bd      	mov	sp, r7
 800e8c4:	bd80      	pop	{r7, pc}
 800e8c6:	bf00      	nop
 800e8c8:	20000288 	.word	0x20000288
 800e8cc:	20000294 	.word	0x20000294
 800e8d0:	20001bc8 	.word	0x20001bc8

0800e8d4 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800e8d4:	b580      	push	{r7, lr}
 800e8d6:	b088      	sub	sp, #32
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	6078      	str	r0, [r7, #4]
 800e8dc:	460b      	mov	r3, r1
 800e8de:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800e8e0:	2000      	movs	r0, #0
 800e8e2:	f000 f8d1 	bl	800ea88 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800e8e6:	2300      	movs	r3, #0
 800e8e8:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	885b      	ldrh	r3, [r3, #2]
 800e8ee:	b21b      	sxth	r3, r3
 800e8f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e8f4:	b21a      	sxth	r2, r3
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	881b      	ldrh	r3, [r3, #0]
 800e8fa:	b21b      	sxth	r3, r3
 800e8fc:	029b      	lsls	r3, r3, #10
 800e8fe:	b21b      	sxth	r3, r3
 800e900:	4313      	orrs	r3, r2
 800e902:	b21b      	sxth	r3, r3
 800e904:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 800e906:	4b33      	ldr	r3, [pc, #204]	@ (800e9d4 <hci_send_req+0x100>)
 800e908:	2201      	movs	r2, #1
 800e90a:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	68db      	ldr	r3, [r3, #12]
 800e910:	b2d9      	uxtb	r1, r3
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	689a      	ldr	r2, [r3, #8]
 800e916:	8bbb      	ldrh	r3, [r7, #28]
 800e918:	4618      	mov	r0, r3
 800e91a:	f000 f88f 	bl	800ea3c <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800e91e:	e04e      	b.n	800e9be <hci_send_req+0xea>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800e920:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800e924:	f7f5 fe0d 	bl	8004542 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800e928:	e043      	b.n	800e9b2 <hci_send_req+0xde>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800e92a:	f107 030c 	add.w	r3, r7, #12
 800e92e:	4619      	mov	r1, r3
 800e930:	4829      	ldr	r0, [pc, #164]	@ (800e9d8 <hci_send_req+0x104>)
 800e932:	f000 fd1c 	bl	800f36e <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	7a5b      	ldrb	r3, [r3, #9]
 800e93a:	2b0f      	cmp	r3, #15
 800e93c:	d114      	bne.n	800e968 <hci_send_req+0x94>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	330b      	adds	r3, #11
 800e942:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800e944:	693b      	ldr	r3, [r7, #16]
 800e946:	885b      	ldrh	r3, [r3, #2]
 800e948:	b29b      	uxth	r3, r3
 800e94a:	8bba      	ldrh	r2, [r7, #28]
 800e94c:	429a      	cmp	r2, r3
 800e94e:	d104      	bne.n	800e95a <hci_send_req+0x86>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	691b      	ldr	r3, [r3, #16]
 800e954:	693a      	ldr	r2, [r7, #16]
 800e956:	7812      	ldrb	r2, [r2, #0]
 800e958:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800e95a:	693b      	ldr	r3, [r7, #16]
 800e95c:	785b      	ldrb	r3, [r3, #1]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d027      	beq.n	800e9b2 <hci_send_req+0xde>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800e962:	2301      	movs	r3, #1
 800e964:	77fb      	strb	r3, [r7, #31]
 800e966:	e024      	b.n	800e9b2 <hci_send_req+0xde>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	330b      	adds	r3, #11
 800e96c:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800e96e:	69bb      	ldr	r3, [r7, #24]
 800e970:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800e974:	b29b      	uxth	r3, r3
 800e976:	8bba      	ldrh	r2, [r7, #28]
 800e978:	429a      	cmp	r2, r3
 800e97a:	d114      	bne.n	800e9a6 <hci_send_req+0xd2>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	7a9b      	ldrb	r3, [r3, #10]
 800e980:	3b03      	subs	r3, #3
 800e982:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	695a      	ldr	r2, [r3, #20]
 800e988:	7dfb      	ldrb	r3, [r7, #23]
 800e98a:	429a      	cmp	r2, r3
 800e98c:	bfa8      	it	ge
 800e98e:	461a      	movge	r2, r3
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	6918      	ldr	r0, [r3, #16]
 800e998:	69bb      	ldr	r3, [r7, #24]
 800e99a:	1cd9      	adds	r1, r3, #3
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	695b      	ldr	r3, [r3, #20]
 800e9a0:	461a      	mov	r2, r3
 800e9a2:	f003 f887 	bl	8011ab4 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800e9a6:	69bb      	ldr	r3, [r7, #24]
 800e9a8:	781b      	ldrb	r3, [r3, #0]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d001      	beq.n	800e9b2 <hci_send_req+0xde>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800e9ae:	2301      	movs	r3, #1
 800e9b0:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800e9b2:	4809      	ldr	r0, [pc, #36]	@ (800e9d8 <hci_send_req+0x104>)
 800e9b4:	f000 fc4c 	bl	800f250 <LST_is_empty>
 800e9b8:	4603      	mov	r3, r0
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d0b5      	beq.n	800e92a <hci_send_req+0x56>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800e9be:	7ffb      	ldrb	r3, [r7, #31]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d0ad      	beq.n	800e920 <hci_send_req+0x4c>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800e9c4:	2001      	movs	r0, #1
 800e9c6:	f000 f85f 	bl	800ea88 <NotifyCmdStatus>

  return 0;
 800e9ca:	2300      	movs	r3, #0
}
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	3720      	adds	r7, #32
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	bd80      	pop	{r7, pc}
 800e9d4:	20001bf4 	.word	0x20001bf4
 800e9d8:	20001be8 	.word	0x20001be8

0800e9dc <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	b086      	sub	sp, #24
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800e9e4:	480f      	ldr	r0, [pc, #60]	@ (800ea24 <TlInit+0x48>)
 800e9e6:	f000 fc23 	bl	800f230 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800e9ea:	4a0f      	ldr	r2, [pc, #60]	@ (800ea28 <TlInit+0x4c>)
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800e9f0:	480e      	ldr	r0, [pc, #56]	@ (800ea2c <TlInit+0x50>)
 800e9f2:	f000 fc1d 	bl	800f230 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800e9f6:	4b0e      	ldr	r3, [pc, #56]	@ (800ea30 <TlInit+0x54>)
 800e9f8:	2201      	movs	r2, #1
 800e9fa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800e9fc:	4b0d      	ldr	r3, [pc, #52]	@ (800ea34 <TlInit+0x58>)
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d00a      	beq.n	800ea1a <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800ea08:	4b0b      	ldr	r3, [pc, #44]	@ (800ea38 <TlInit+0x5c>)
 800ea0a:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800ea0c:	4b09      	ldr	r3, [pc, #36]	@ (800ea34 <TlInit+0x58>)
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	f107 0208 	add.w	r2, r7, #8
 800ea14:	4610      	mov	r0, r2
 800ea16:	4798      	blx	r3
  }

  return;
 800ea18:	bf00      	nop
 800ea1a:	bf00      	nop
}
 800ea1c:	3718      	adds	r7, #24
 800ea1e:	46bd      	mov	sp, r7
 800ea20:	bd80      	pop	{r7, pc}
 800ea22:	bf00      	nop
 800ea24:	20001be8 	.word	0x20001be8
 800ea28:	20000290 	.word	0x20000290
 800ea2c:	20000288 	.word	0x20000288
 800ea30:	20000294 	.word	0x20000294
 800ea34:	20001bc8 	.word	0x20001bc8
 800ea38:	0800eac9 	.word	0x0800eac9

0800ea3c <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	b082      	sub	sp, #8
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	4603      	mov	r3, r0
 800ea44:	603a      	str	r2, [r7, #0]
 800ea46:	80fb      	strh	r3, [r7, #6]
 800ea48:	460b      	mov	r3, r1
 800ea4a:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800ea4c:	4b0c      	ldr	r3, [pc, #48]	@ (800ea80 <SendCmd+0x44>)
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	88fa      	ldrh	r2, [r7, #6]
 800ea52:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800ea56:	4b0a      	ldr	r3, [pc, #40]	@ (800ea80 <SendCmd+0x44>)
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	797a      	ldrb	r2, [r7, #5]
 800ea5c:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800ea5e:	4b08      	ldr	r3, [pc, #32]	@ (800ea80 <SendCmd+0x44>)
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	330c      	adds	r3, #12
 800ea64:	797a      	ldrb	r2, [r7, #5]
 800ea66:	6839      	ldr	r1, [r7, #0]
 800ea68:	4618      	mov	r0, r3
 800ea6a:	f003 f823 	bl	8011ab4 <memcpy>

  hciContext.io.Send(0,0);
 800ea6e:	4b05      	ldr	r3, [pc, #20]	@ (800ea84 <SendCmd+0x48>)
 800ea70:	691b      	ldr	r3, [r3, #16]
 800ea72:	2100      	movs	r1, #0
 800ea74:	2000      	movs	r0, #0
 800ea76:	4798      	blx	r3

  return;
 800ea78:	bf00      	nop
}
 800ea7a:	3708      	adds	r7, #8
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	bd80      	pop	{r7, pc}
 800ea80:	20000290 	.word	0x20000290
 800ea84:	20001bc8 	.word	0x20001bc8

0800ea88 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800ea88:	b580      	push	{r7, lr}
 800ea8a:	b082      	sub	sp, #8
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	4603      	mov	r3, r0
 800ea90:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800ea92:	79fb      	ldrb	r3, [r7, #7]
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d108      	bne.n	800eaaa <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800ea98:	4b0a      	ldr	r3, [pc, #40]	@ (800eac4 <NotifyCmdStatus+0x3c>)
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d00d      	beq.n	800eabc <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800eaa0:	4b08      	ldr	r3, [pc, #32]	@ (800eac4 <NotifyCmdStatus+0x3c>)
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	2000      	movs	r0, #0
 800eaa6:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800eaa8:	e008      	b.n	800eabc <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800eaaa:	4b06      	ldr	r3, [pc, #24]	@ (800eac4 <NotifyCmdStatus+0x3c>)
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d004      	beq.n	800eabc <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800eab2:	4b04      	ldr	r3, [pc, #16]	@ (800eac4 <NotifyCmdStatus+0x3c>)
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	2001      	movs	r0, #1
 800eab8:	4798      	blx	r3
  return;
 800eaba:	bf00      	nop
 800eabc:	bf00      	nop
}
 800eabe:	3708      	adds	r7, #8
 800eac0:	46bd      	mov	sp, r7
 800eac2:	bd80      	pop	{r7, pc}
 800eac4:	20001bf0 	.word	0x20001bf0

0800eac8 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800eac8:	b580      	push	{r7, lr}
 800eaca:	b082      	sub	sp, #8
 800eacc:	af00      	add	r7, sp, #0
 800eace:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	7a5b      	ldrb	r3, [r3, #9]
 800ead4:	2b0f      	cmp	r3, #15
 800ead6:	d003      	beq.n	800eae0 <TlEvtReceived+0x18>
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	7a5b      	ldrb	r3, [r3, #9]
 800eadc:	2b0e      	cmp	r3, #14
 800eade:	d107      	bne.n	800eaf0 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800eae0:	6879      	ldr	r1, [r7, #4]
 800eae2:	4809      	ldr	r0, [pc, #36]	@ (800eb08 <TlEvtReceived+0x40>)
 800eae4:	f000 fbfc 	bl	800f2e0 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800eae8:	2000      	movs	r0, #0
 800eaea:	f7f5 fd1f 	bl	800452c <hci_cmd_resp_release>
 800eaee:	e006      	b.n	800eafe <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800eaf0:	6879      	ldr	r1, [r7, #4]
 800eaf2:	4806      	ldr	r0, [pc, #24]	@ (800eb0c <TlEvtReceived+0x44>)
 800eaf4:	f000 fbf4 	bl	800f2e0 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800eaf8:	4804      	ldr	r0, [pc, #16]	@ (800eb0c <TlEvtReceived+0x44>)
 800eafa:	f7f5 fd0b 	bl	8004514 <hci_notify_asynch_evt>
  }

  return;
 800eafe:	bf00      	nop
}
 800eb00:	3708      	adds	r7, #8
 800eb02:	46bd      	mov	sp, r7
 800eb04:	bd80      	pop	{r7, pc}
 800eb06:	bf00      	nop
 800eb08:	20001be8 	.word	0x20001be8
 800eb0c:	20000288 	.word	0x20000288

0800eb10 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800eb10:	b480      	push	{r7}
 800eb12:	b083      	sub	sp, #12
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	4a05      	ldr	r2, [pc, #20]	@ (800eb30 <hci_register_io_bus+0x20>)
 800eb1c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	4a04      	ldr	r2, [pc, #16]	@ (800eb34 <hci_register_io_bus+0x24>)
 800eb22:	611a      	str	r2, [r3, #16]

  return;
 800eb24:	bf00      	nop
}
 800eb26:	370c      	adds	r7, #12
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2e:	4770      	bx	lr
 800eb30:	0800fe61 	.word	0x0800fe61
 800eb34:	0800fec9 	.word	0x0800fec9

0800eb38 <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b084      	sub	sp, #16
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	60f8      	str	r0, [r7, #12]
 800eb40:	60b9      	str	r1, [r7, #8]
 800eb42:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 800eb44:	687a      	ldr	r2, [r7, #4]
 800eb46:	68b9      	ldr	r1, [r7, #8]
 800eb48:	68f8      	ldr	r0, [r7, #12]
 800eb4a:	f002 ffb3 	bl	8011ab4 <memcpy>
 800eb4e:	4603      	mov	r3, r0
}
 800eb50:	4618      	mov	r0, r3
 800eb52:	3710      	adds	r7, #16
 800eb54:	46bd      	mov	sp, r7
 800eb56:	bd80      	pop	{r7, pc}

0800eb58 <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800eb58:	b580      	push	{r7, lr}
 800eb5a:	b084      	sub	sp, #16
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	60f8      	str	r0, [r7, #12]
 800eb60:	60b9      	str	r1, [r7, #8]
 800eb62:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800eb64:	687a      	ldr	r2, [r7, #4]
 800eb66:	68b9      	ldr	r1, [r7, #8]
 800eb68:	68f8      	ldr	r0, [r7, #12]
 800eb6a:	f002 ff69 	bl	8011a40 <memset>
 800eb6e:	4603      	mov	r3, r0
}
 800eb70:	4618      	mov	r0, r3
 800eb72:	3710      	adds	r7, #16
 800eb74:	46bd      	mov	sp, r7
 800eb76:	bd80      	pop	{r7, pc}

0800eb78 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800eb78:	b480      	push	{r7}
 800eb7a:	b085      	sub	sp, #20
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	4603      	mov	r3, r0
 800eb80:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800eb82:	4b0f      	ldr	r3, [pc, #60]	@ (800ebc0 <OTP_Read+0x48>)
 800eb84:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800eb86:	e002      	b.n	800eb8e <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	3b08      	subs	r3, #8
 800eb8c:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	3307      	adds	r3, #7
 800eb92:	781b      	ldrb	r3, [r3, #0]
 800eb94:	79fa      	ldrb	r2, [r7, #7]
 800eb96:	429a      	cmp	r2, r3
 800eb98:	d003      	beq.n	800eba2 <OTP_Read+0x2a>
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	4a09      	ldr	r2, [pc, #36]	@ (800ebc4 <OTP_Read+0x4c>)
 800eb9e:	4293      	cmp	r3, r2
 800eba0:	d1f2      	bne.n	800eb88 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	3307      	adds	r3, #7
 800eba6:	781b      	ldrb	r3, [r3, #0]
 800eba8:	79fa      	ldrb	r2, [r7, #7]
 800ebaa:	429a      	cmp	r2, r3
 800ebac:	d001      	beq.n	800ebb2 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800ebae:	2300      	movs	r3, #0
 800ebb0:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800ebb2:	68fb      	ldr	r3, [r7, #12]
}
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	3714      	adds	r7, #20
 800ebb8:	46bd      	mov	sp, r7
 800ebba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebbe:	4770      	bx	lr
 800ebc0:	1fff73f8 	.word	0x1fff73f8
 800ebc4:	1fff7000 	.word	0x1fff7000

0800ebc8 <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 800ebc8:	b580      	push	{r7, lr}
 800ebca:	b08a      	sub	sp, #40	@ 0x28
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 800ebd0:	2300      	movs	r3, #0
 800ebd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	3301      	adds	r3, #1
 800ebda:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 800ebdc:	6a3b      	ldr	r3, [r7, #32]
 800ebde:	781b      	ldrb	r3, [r3, #0]
 800ebe0:	2bff      	cmp	r3, #255	@ 0xff
 800ebe2:	d14f      	bne.n	800ec84 <PeerToPeer_Event_Handler+0xbc>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800ebe4:	6a3b      	ldr	r3, [r7, #32]
 800ebe6:	3302      	adds	r3, #2
 800ebe8:	61fb      	str	r3, [r7, #28]
      switch(blecore_evt->ecode)
 800ebea:	69fb      	ldr	r3, [r7, #28]
 800ebec:	881b      	ldrh	r3, [r3, #0]
 800ebee:	b29b      	uxth	r3, r3
 800ebf0:	461a      	mov	r2, r3
 800ebf2:	f640 4301 	movw	r3, #3073	@ 0xc01
 800ebf6:	429a      	cmp	r2, r3
 800ebf8:	d140      	bne.n	800ec7c <PeerToPeer_Event_Handler+0xb4>
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
       {
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800ebfa:	69fb      	ldr	r3, [r7, #28]
 800ebfc:	3302      	adds	r3, #2
 800ebfe:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 800ec00:	69bb      	ldr	r3, [r7, #24]
 800ec02:	885b      	ldrh	r3, [r3, #2]
 800ec04:	b29b      	uxth	r3, r3
 800ec06:	461a      	mov	r2, r3
 800ec08:	4b22      	ldr	r3, [pc, #136]	@ (800ec94 <PeerToPeer_Event_Handler+0xcc>)
 800ec0a:	889b      	ldrh	r3, [r3, #4]
 800ec0c:	3302      	adds	r3, #2
 800ec0e:	429a      	cmp	r2, r3
 800ec10:	d118      	bne.n	800ec44 <PeerToPeer_Event_Handler+0x7c>
            {
              /**
               * Descriptor handle
               */
              return_value = SVCCTL_EvtAckFlowEnable;
 800ec12:	2301      	movs	r3, #1
 800ec14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
              /**
               * Notify to application
               */
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800ec18:	69bb      	ldr	r3, [r7, #24]
 800ec1a:	7a1b      	ldrb	r3, [r3, #8]
 800ec1c:	f003 0301 	and.w	r3, r3, #1
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d007      	beq.n	800ec34 <PeerToPeer_Event_Handler+0x6c>
              {
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 800ec24:	2300      	movs	r3, #0
 800ec26:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800ec28:	f107 0308 	add.w	r3, r7, #8
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	f7f5 fccb 	bl	80045c8 <P2PS_STM_App_Notification>
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
              P2PS_STM_App_Notification(&Notification);
            }
#endif
        }
        break;
 800ec32:	e025      	b.n	800ec80 <PeerToPeer_Event_Handler+0xb8>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 800ec34:	2301      	movs	r3, #1
 800ec36:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800ec38:	f107 0308 	add.w	r3, r7, #8
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	f7f5 fcc3 	bl	80045c8 <P2PS_STM_App_Notification>
        break;
 800ec42:	e01d      	b.n	800ec80 <PeerToPeer_Event_Handler+0xb8>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 800ec44:	69bb      	ldr	r3, [r7, #24]
 800ec46:	885b      	ldrh	r3, [r3, #2]
 800ec48:	b29b      	uxth	r3, r3
 800ec4a:	461a      	mov	r2, r3
 800ec4c:	4b11      	ldr	r3, [pc, #68]	@ (800ec94 <PeerToPeer_Event_Handler+0xcc>)
 800ec4e:	885b      	ldrh	r3, [r3, #2]
 800ec50:	3301      	adds	r3, #1
 800ec52:	429a      	cmp	r2, r3
 800ec54:	d114      	bne.n	800ec80 <PeerToPeer_Event_Handler+0xb8>
              BLE_DBG_P2P_STM_MSG("-- GATT : LED CONFIGURATION RECEIVED\n");
 800ec56:	4810      	ldr	r0, [pc, #64]	@ (800ec98 <PeerToPeer_Event_Handler+0xd0>)
 800ec58:	f002 feea 	bl	8011a30 <puts>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 800ec5c:	2303      	movs	r3, #3
 800ec5e:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800ec60:	69bb      	ldr	r3, [r7, #24]
 800ec62:	88db      	ldrh	r3, [r3, #6]
 800ec64:	b29b      	uxth	r3, r3
 800ec66:	b2db      	uxtb	r3, r3
 800ec68:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800ec6a:	69bb      	ldr	r3, [r7, #24]
 800ec6c:	3308      	adds	r3, #8
 800ec6e:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 800ec70:	f107 0308 	add.w	r3, r7, #8
 800ec74:	4618      	mov	r0, r3
 800ec76:	f7f5 fca7 	bl	80045c8 <P2PS_STM_App_Notification>
        break;
 800ec7a:	e001      	b.n	800ec80 <PeerToPeer_Event_Handler+0xb8>

        default:
          break;
 800ec7c:	bf00      	nop
 800ec7e:	e002      	b.n	800ec86 <PeerToPeer_Event_Handler+0xbe>
        break;
 800ec80:	bf00      	nop
      }
    }
    break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800ec82:	e000      	b.n	800ec86 <PeerToPeer_Event_Handler+0xbe>

    default:
      break;
 800ec84:	bf00      	nop
  }

  return(return_value);
 800ec86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}/* end SVCCTL_EvtAckStatus_t */
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	3728      	adds	r7, #40	@ 0x28
 800ec8e:	46bd      	mov	sp, r7
 800ec90:	bd80      	pop	{r7, pc}
 800ec92:	bf00      	nop
 800ec94:	20000298 	.word	0x20000298
 800ec98:	080152c0 	.word	0x080152c0

0800ec9c <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 800ec9c:	b580      	push	{r7, lr}
 800ec9e:	b08a      	sub	sp, #40	@ 0x28
 800eca0:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 800eca2:	484a      	ldr	r0, [pc, #296]	@ (800edcc <P2PS_STM_Init+0x130>)
 800eca4:	f001 f82e 	bl	800fd04 <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 800eca8:	238f      	movs	r3, #143	@ 0x8f
 800ecaa:	703b      	strb	r3, [r7, #0]
 800ecac:	23e5      	movs	r3, #229	@ 0xe5
 800ecae:	707b      	strb	r3, [r7, #1]
 800ecb0:	23b3      	movs	r3, #179	@ 0xb3
 800ecb2:	70bb      	strb	r3, [r7, #2]
 800ecb4:	23d5      	movs	r3, #213	@ 0xd5
 800ecb6:	70fb      	strb	r3, [r7, #3]
 800ecb8:	232e      	movs	r3, #46	@ 0x2e
 800ecba:	713b      	strb	r3, [r7, #4]
 800ecbc:	237f      	movs	r3, #127	@ 0x7f
 800ecbe:	717b      	strb	r3, [r7, #5]
 800ecc0:	234a      	movs	r3, #74	@ 0x4a
 800ecc2:	71bb      	strb	r3, [r7, #6]
 800ecc4:	2398      	movs	r3, #152	@ 0x98
 800ecc6:	71fb      	strb	r3, [r7, #7]
 800ecc8:	232a      	movs	r3, #42	@ 0x2a
 800ecca:	723b      	strb	r3, [r7, #8]
 800eccc:	2348      	movs	r3, #72	@ 0x48
 800ecce:	727b      	strb	r3, [r7, #9]
 800ecd0:	237a      	movs	r3, #122	@ 0x7a
 800ecd2:	72bb      	strb	r3, [r7, #10]
 800ecd4:	23cc      	movs	r3, #204	@ 0xcc
 800ecd6:	72fb      	strb	r3, [r7, #11]
 800ecd8:	2340      	movs	r3, #64	@ 0x40
 800ecda:	733b      	strb	r3, [r7, #12]
 800ecdc:	23fe      	movs	r3, #254	@ 0xfe
 800ecde:	737b      	strb	r3, [r7, #13]
 800ece0:	2300      	movs	r3, #0
 800ece2:	73bb      	strb	r3, [r7, #14]
 800ece4:	2300      	movs	r3, #0
 800ece6:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 800ece8:	4639      	mov	r1, r7
 800ecea:	4b39      	ldr	r3, [pc, #228]	@ (800edd0 <P2PS_STM_Init+0x134>)
 800ecec:	9300      	str	r3, [sp, #0]
 800ecee:	2306      	movs	r3, #6
 800ecf0:	2201      	movs	r2, #1
 800ecf2:	2002      	movs	r0, #2
 800ecf4:	f7fe fef4 	bl	800dae0 <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 800ecf8:	2319      	movs	r3, #25
 800ecfa:	703b      	strb	r3, [r7, #0]
 800ecfc:	23ed      	movs	r3, #237	@ 0xed
 800ecfe:	707b      	strb	r3, [r7, #1]
 800ed00:	2382      	movs	r3, #130	@ 0x82
 800ed02:	70bb      	strb	r3, [r7, #2]
 800ed04:	23ae      	movs	r3, #174	@ 0xae
 800ed06:	70fb      	strb	r3, [r7, #3]
 800ed08:	23ed      	movs	r3, #237	@ 0xed
 800ed0a:	713b      	strb	r3, [r7, #4]
 800ed0c:	2321      	movs	r3, #33	@ 0x21
 800ed0e:	717b      	strb	r3, [r7, #5]
 800ed10:	234c      	movs	r3, #76	@ 0x4c
 800ed12:	71bb      	strb	r3, [r7, #6]
 800ed14:	239d      	movs	r3, #157	@ 0x9d
 800ed16:	71fb      	strb	r3, [r7, #7]
 800ed18:	2341      	movs	r3, #65	@ 0x41
 800ed1a:	723b      	strb	r3, [r7, #8]
 800ed1c:	2345      	movs	r3, #69	@ 0x45
 800ed1e:	727b      	strb	r3, [r7, #9]
 800ed20:	2322      	movs	r3, #34	@ 0x22
 800ed22:	72bb      	strb	r3, [r7, #10]
 800ed24:	238e      	movs	r3, #142	@ 0x8e
 800ed26:	72fb      	strb	r3, [r7, #11]
 800ed28:	2341      	movs	r3, #65	@ 0x41
 800ed2a:	733b      	strb	r3, [r7, #12]
 800ed2c:	23fe      	movs	r3, #254	@ 0xfe
 800ed2e:	737b      	strb	r3, [r7, #13]
 800ed30:	2300      	movs	r3, #0
 800ed32:	73bb      	strb	r3, [r7, #14]
 800ed34:	2300      	movs	r3, #0
 800ed36:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800ed38:	4b25      	ldr	r3, [pc, #148]	@ (800edd0 <P2PS_STM_Init+0x134>)
 800ed3a:	8818      	ldrh	r0, [r3, #0]
 800ed3c:	463a      	mov	r2, r7
 800ed3e:	4b25      	ldr	r3, [pc, #148]	@ (800edd4 <P2PS_STM_Init+0x138>)
 800ed40:	9305      	str	r3, [sp, #20]
 800ed42:	2301      	movs	r3, #1
 800ed44:	9304      	str	r3, [sp, #16]
 800ed46:	230a      	movs	r3, #10
 800ed48:	9303      	str	r3, [sp, #12]
 800ed4a:	2301      	movs	r3, #1
 800ed4c:	9302      	str	r3, [sp, #8]
 800ed4e:	2300      	movs	r3, #0
 800ed50:	9301      	str	r3, [sp, #4]
 800ed52:	2306      	movs	r3, #6
 800ed54:	9300      	str	r3, [sp, #0]
 800ed56:	2302      	movs	r3, #2
 800ed58:	2102      	movs	r1, #2
 800ed5a:	f7fe ff97 	bl	800dc8c <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 800ed5e:	2319      	movs	r3, #25
 800ed60:	703b      	strb	r3, [r7, #0]
 800ed62:	23ed      	movs	r3, #237	@ 0xed
 800ed64:	707b      	strb	r3, [r7, #1]
 800ed66:	2382      	movs	r3, #130	@ 0x82
 800ed68:	70bb      	strb	r3, [r7, #2]
 800ed6a:	23ae      	movs	r3, #174	@ 0xae
 800ed6c:	70fb      	strb	r3, [r7, #3]
 800ed6e:	23ed      	movs	r3, #237	@ 0xed
 800ed70:	713b      	strb	r3, [r7, #4]
 800ed72:	2321      	movs	r3, #33	@ 0x21
 800ed74:	717b      	strb	r3, [r7, #5]
 800ed76:	234c      	movs	r3, #76	@ 0x4c
 800ed78:	71bb      	strb	r3, [r7, #6]
 800ed7a:	239d      	movs	r3, #157	@ 0x9d
 800ed7c:	71fb      	strb	r3, [r7, #7]
 800ed7e:	2341      	movs	r3, #65	@ 0x41
 800ed80:	723b      	strb	r3, [r7, #8]
 800ed82:	2345      	movs	r3, #69	@ 0x45
 800ed84:	727b      	strb	r3, [r7, #9]
 800ed86:	2322      	movs	r3, #34	@ 0x22
 800ed88:	72bb      	strb	r3, [r7, #10]
 800ed8a:	238e      	movs	r3, #142	@ 0x8e
 800ed8c:	72fb      	strb	r3, [r7, #11]
 800ed8e:	2342      	movs	r3, #66	@ 0x42
 800ed90:	733b      	strb	r3, [r7, #12]
 800ed92:	23fe      	movs	r3, #254	@ 0xfe
 800ed94:	737b      	strb	r3, [r7, #13]
 800ed96:	2300      	movs	r3, #0
 800ed98:	73bb      	strb	r3, [r7, #14]
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800ed9e:	4b0c      	ldr	r3, [pc, #48]	@ (800edd0 <P2PS_STM_Init+0x134>)
 800eda0:	8818      	ldrh	r0, [r3, #0]
 800eda2:	463a      	mov	r2, r7
 800eda4:	4b0c      	ldr	r3, [pc, #48]	@ (800edd8 <P2PS_STM_Init+0x13c>)
 800eda6:	9305      	str	r3, [sp, #20]
 800eda8:	2301      	movs	r3, #1
 800edaa:	9304      	str	r3, [sp, #16]
 800edac:	230a      	movs	r3, #10
 800edae:	9303      	str	r3, [sp, #12]
 800edb0:	2301      	movs	r3, #1
 800edb2:	9302      	str	r3, [sp, #8]
 800edb4:	2300      	movs	r3, #0
 800edb6:	9301      	str	r3, [sp, #4]
 800edb8:	2310      	movs	r3, #16
 800edba:	9300      	str	r3, [sp, #0]
 800edbc:	2302      	movs	r3, #2
 800edbe:	2102      	movs	r1, #2
 800edc0:	f7fe ff64 	bl	800dc8c <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 800edc4:	bf00      	nop
}
 800edc6:	3710      	adds	r7, #16
 800edc8:	46bd      	mov	sp, r7
 800edca:	bd80      	pop	{r7, pc}
 800edcc:	0800ebc9 	.word	0x0800ebc9
 800edd0:	20000298 	.word	0x20000298
 800edd4:	2000029a 	.word	0x2000029a
 800edd8:	2000029c 	.word	0x2000029c

0800eddc <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800eddc:	b580      	push	{r7, lr}
 800edde:	b088      	sub	sp, #32
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800ede4:	f107 030c 	add.w	r3, r7, #12
 800ede8:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800edf0:	69fb      	ldr	r3, [r7, #28]
 800edf2:	212f      	movs	r1, #47	@ 0x2f
 800edf4:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 800edf8:	f000 f94c 	bl	800f094 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800edfc:	69fb      	ldr	r3, [r7, #28]
 800edfe:	330b      	adds	r3, #11
 800ee00:	78db      	ldrb	r3, [r3, #3]
}
 800ee02:	4618      	mov	r0, r3
 800ee04:	3720      	adds	r7, #32
 800ee06:	46bd      	mov	sp, r7
 800ee08:	bd80      	pop	{r7, pc}

0800ee0a <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800ee0a:	b580      	push	{r7, lr}
 800ee0c:	b088      	sub	sp, #32
 800ee0e:	af00      	add	r7, sp, #0
 800ee10:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800ee12:	f107 030c 	add.w	r3, r7, #12
 800ee16:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800ee1e:	69fb      	ldr	r3, [r7, #28]
 800ee20:	210f      	movs	r1, #15
 800ee22:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 800ee26:	f000 f935 	bl	800f094 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800ee2a:	69fb      	ldr	r3, [r7, #28]
 800ee2c:	330b      	adds	r3, #11
 800ee2e:	78db      	ldrb	r3, [r3, #3]
}
 800ee30:	4618      	mov	r0, r3
 800ee32:	3720      	adds	r7, #32
 800ee34:	46bd      	mov	sp, r7
 800ee36:	bd80      	pop	{r7, pc}

0800ee38 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800ee38:	b580      	push	{r7, lr}
 800ee3a:	b088      	sub	sp, #32
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800ee40:	f107 030c 	add.w	r3, r7, #12
 800ee44:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800ee46:	69fb      	ldr	r3, [r7, #28]
 800ee48:	687a      	ldr	r2, [r7, #4]
 800ee4a:	2110      	movs	r1, #16
 800ee4c:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 800ee50:	f000 f920 	bl	800f094 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800ee54:	69fb      	ldr	r3, [r7, #28]
 800ee56:	330b      	adds	r3, #11
 800ee58:	78db      	ldrb	r3, [r3, #3]
}
 800ee5a:	4618      	mov	r0, r3
 800ee5c:	3720      	adds	r7, #32
 800ee5e:	46bd      	mov	sp, r7
 800ee60:	bd80      	pop	{r7, pc}
	...

0800ee64 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800ee64:	b480      	push	{r7}
 800ee66:	b08b      	sub	sp, #44	@ 0x2c
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800ee70:	2300      	movs	r3, #0
 800ee72:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800ee74:	2300      	movs	r3, #0
 800ee76:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800ee78:	2300      	movs	r3, #0
 800ee7a:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800ee7c:	2300      	movs	r3, #0
 800ee7e:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800ee80:	2300      	movs	r3, #0
 800ee82:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800ee84:	2300      	movs	r3, #0
 800ee86:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800ee88:	2300      	movs	r3, #0
 800ee8a:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800ee8c:	4b4a      	ldr	r3, [pc, #296]	@ (800efb8 <SHCI_GetWirelessFwInfo+0x154>)
 800ee8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ee90:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ee94:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800ee96:	693b      	ldr	r3, [r7, #16]
 800ee98:	009b      	lsls	r3, r3, #2
 800ee9a:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800ee9e:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800eea6:	68bb      	ldr	r3, [r7, #8]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	4a44      	ldr	r2, [pc, #272]	@ (800efbc <SHCI_GetWirelessFwInfo+0x158>)
 800eeac:	4293      	cmp	r3, r2
 800eeae:	d10f      	bne.n	800eed0 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800eeb0:	68bb      	ldr	r3, [r7, #8]
 800eeb2:	695b      	ldr	r3, [r3, #20]
 800eeb4:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800eeb6:	68bb      	ldr	r3, [r7, #8]
 800eeb8:	699b      	ldr	r3, [r3, #24]
 800eeba:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800eebc:	68bb      	ldr	r3, [r7, #8]
 800eebe:	69db      	ldr	r3, [r3, #28]
 800eec0:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800eec2:	68bb      	ldr	r3, [r7, #8]
 800eec4:	68db      	ldr	r3, [r3, #12]
 800eec6:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800eec8:	68bb      	ldr	r3, [r7, #8]
 800eeca:	691b      	ldr	r3, [r3, #16]
 800eecc:	617b      	str	r3, [r7, #20]
 800eece:	e01a      	b.n	800ef06 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800eed0:	693b      	ldr	r3, [r7, #16]
 800eed2:	009b      	lsls	r3, r3, #2
 800eed4:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800eed8:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800eedc:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	691b      	ldr	r3, [r3, #16]
 800eee4:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	695b      	ldr	r3, [r3, #20]
 800eeec:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	699b      	ldr	r3, [r3, #24]
 800eef4:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	685b      	ldr	r3, [r3, #4]
 800eefc:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	689b      	ldr	r3, [r3, #8]
 800ef04:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800ef06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef08:	0e1b      	lsrs	r3, r3, #24
 800ef0a:	b2da      	uxtb	r2, r3
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800ef10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef12:	0c1b      	lsrs	r3, r3, #16
 800ef14:	b2da      	uxtb	r2, r3
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800ef1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef1c:	0a1b      	lsrs	r3, r3, #8
 800ef1e:	b2da      	uxtb	r2, r3
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800ef24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef26:	091b      	lsrs	r3, r3, #4
 800ef28:	b2db      	uxtb	r3, r3
 800ef2a:	f003 030f 	and.w	r3, r3, #15
 800ef2e:	b2da      	uxtb	r2, r3
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800ef34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef36:	b2db      	uxtb	r3, r3
 800ef38:	f003 030f 	and.w	r3, r3, #15
 800ef3c:	b2da      	uxtb	r2, r3
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800ef42:	6a3b      	ldr	r3, [r7, #32]
 800ef44:	0e1b      	lsrs	r3, r3, #24
 800ef46:	b2da      	uxtb	r2, r3
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800ef4c:	6a3b      	ldr	r3, [r7, #32]
 800ef4e:	0c1b      	lsrs	r3, r3, #16
 800ef50:	b2da      	uxtb	r2, r3
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800ef56:	6a3b      	ldr	r3, [r7, #32]
 800ef58:	0a1b      	lsrs	r3, r3, #8
 800ef5a:	b2da      	uxtb	r2, r3
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800ef60:	6a3b      	ldr	r3, [r7, #32]
 800ef62:	b2da      	uxtb	r2, r3
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800ef68:	69fb      	ldr	r3, [r7, #28]
 800ef6a:	b2da      	uxtb	r2, r3
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800ef70:	69bb      	ldr	r3, [r7, #24]
 800ef72:	0e1b      	lsrs	r3, r3, #24
 800ef74:	b2da      	uxtb	r2, r3
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800ef7a:	69bb      	ldr	r3, [r7, #24]
 800ef7c:	0c1b      	lsrs	r3, r3, #16
 800ef7e:	b2da      	uxtb	r2, r3
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800ef84:	69bb      	ldr	r3, [r7, #24]
 800ef86:	0a1b      	lsrs	r3, r3, #8
 800ef88:	b2da      	uxtb	r2, r3
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800ef8e:	697b      	ldr	r3, [r7, #20]
 800ef90:	0e1b      	lsrs	r3, r3, #24
 800ef92:	b2da      	uxtb	r2, r3
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800ef98:	697b      	ldr	r3, [r7, #20]
 800ef9a:	0c1b      	lsrs	r3, r3, #16
 800ef9c:	b2da      	uxtb	r2, r3
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800efa2:	697b      	ldr	r3, [r7, #20]
 800efa4:	b2da      	uxtb	r2, r3
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800efaa:	2300      	movs	r3, #0
}
 800efac:	4618      	mov	r0, r3
 800efae:	372c      	adds	r7, #44	@ 0x2c
 800efb0:	46bd      	mov	sp, r7
 800efb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb6:	4770      	bx	lr
 800efb8:	58004000 	.word	0x58004000
 800efbc:	a94656b9 	.word	0xa94656b9

0800efc0 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800efc0:	b580      	push	{r7, lr}
 800efc2:	b082      	sub	sp, #8
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	6078      	str	r0, [r7, #4]
 800efc8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800efca:	683b      	ldr	r3, [r7, #0]
 800efcc:	685b      	ldr	r3, [r3, #4]
 800efce:	4a08      	ldr	r2, [pc, #32]	@ (800eff0 <shci_init+0x30>)
 800efd0:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800efd2:	4a08      	ldr	r2, [pc, #32]	@ (800eff4 <shci_init+0x34>)
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800efd8:	4806      	ldr	r0, [pc, #24]	@ (800eff4 <shci_init+0x34>)
 800efda:	f000 f915 	bl	800f208 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800efde:	683b      	ldr	r3, [r7, #0]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	4618      	mov	r0, r3
 800efe4:	f000 f898 	bl	800f118 <TlInit>

  return;
 800efe8:	bf00      	nop
}
 800efea:	3708      	adds	r7, #8
 800efec:	46bd      	mov	sp, r7
 800efee:	bd80      	pop	{r7, pc}
 800eff0:	20001c18 	.word	0x20001c18
 800eff4:	20001bf8 	.word	0x20001bf8

0800eff8 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800eff8:	b580      	push	{r7, lr}
 800effa:	b084      	sub	sp, #16
 800effc:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800effe:	4822      	ldr	r0, [pc, #136]	@ (800f088 <shci_user_evt_proc+0x90>)
 800f000:	f000 f926 	bl	800f250 <LST_is_empty>
 800f004:	4603      	mov	r3, r0
 800f006:	2b00      	cmp	r3, #0
 800f008:	d12b      	bne.n	800f062 <shci_user_evt_proc+0x6a>
 800f00a:	4b20      	ldr	r3, [pc, #128]	@ (800f08c <shci_user_evt_proc+0x94>)
 800f00c:	781b      	ldrb	r3, [r3, #0]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d027      	beq.n	800f062 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800f012:	f107 030c 	add.w	r3, r7, #12
 800f016:	4619      	mov	r1, r3
 800f018:	481b      	ldr	r0, [pc, #108]	@ (800f088 <shci_user_evt_proc+0x90>)
 800f01a:	f000 f9a8 	bl	800f36e <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800f01e:	4b1c      	ldr	r3, [pc, #112]	@ (800f090 <shci_user_evt_proc+0x98>)
 800f020:	69db      	ldr	r3, [r3, #28]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d00c      	beq.n	800f040 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800f02a:	2301      	movs	r3, #1
 800f02c:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800f02e:	4b18      	ldr	r3, [pc, #96]	@ (800f090 <shci_user_evt_proc+0x98>)
 800f030:	69db      	ldr	r3, [r3, #28]
 800f032:	1d3a      	adds	r2, r7, #4
 800f034:	4610      	mov	r0, r2
 800f036:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800f038:	793a      	ldrb	r2, [r7, #4]
 800f03a:	4b14      	ldr	r3, [pc, #80]	@ (800f08c <shci_user_evt_proc+0x94>)
 800f03c:	701a      	strb	r2, [r3, #0]
 800f03e:	e002      	b.n	800f046 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800f040:	4b12      	ldr	r3, [pc, #72]	@ (800f08c <shci_user_evt_proc+0x94>)
 800f042:	2201      	movs	r2, #1
 800f044:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800f046:	4b11      	ldr	r3, [pc, #68]	@ (800f08c <shci_user_evt_proc+0x94>)
 800f048:	781b      	ldrb	r3, [r3, #0]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d004      	beq.n	800f058 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	4618      	mov	r0, r3
 800f052:	f001 f84d 	bl	80100f0 <TL_MM_EvtDone>
 800f056:	e004      	b.n	800f062 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	4619      	mov	r1, r3
 800f05c:	480a      	ldr	r0, [pc, #40]	@ (800f088 <shci_user_evt_proc+0x90>)
 800f05e:	f000 f919 	bl	800f294 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800f062:	4809      	ldr	r0, [pc, #36]	@ (800f088 <shci_user_evt_proc+0x90>)
 800f064:	f000 f8f4 	bl	800f250 <LST_is_empty>
 800f068:	4603      	mov	r3, r0
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d107      	bne.n	800f07e <shci_user_evt_proc+0x86>
 800f06e:	4b07      	ldr	r3, [pc, #28]	@ (800f08c <shci_user_evt_proc+0x94>)
 800f070:	781b      	ldrb	r3, [r3, #0]
 800f072:	2b00      	cmp	r3, #0
 800f074:	d003      	beq.n	800f07e <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800f076:	4804      	ldr	r0, [pc, #16]	@ (800f088 <shci_user_evt_proc+0x90>)
 800f078:	f7f2 fbb8 	bl	80017ec <shci_notify_asynch_evt>
  }


  return;
 800f07c:	bf00      	nop
 800f07e:	bf00      	nop
}
 800f080:	3710      	adds	r7, #16
 800f082:	46bd      	mov	sp, r7
 800f084:	bd80      	pop	{r7, pc}
 800f086:	bf00      	nop
 800f088:	200002ac 	.word	0x200002ac
 800f08c:	200002bc 	.word	0x200002bc
 800f090:	20001bf8 	.word	0x20001bf8

0800f094 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800f094:	b580      	push	{r7, lr}
 800f096:	b084      	sub	sp, #16
 800f098:	af00      	add	r7, sp, #0
 800f09a:	60ba      	str	r2, [r7, #8]
 800f09c:	607b      	str	r3, [r7, #4]
 800f09e:	4603      	mov	r3, r0
 800f0a0:	81fb      	strh	r3, [r7, #14]
 800f0a2:	460b      	mov	r3, r1
 800f0a4:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800f0a6:	2000      	movs	r0, #0
 800f0a8:	f000 f868 	bl	800f17c <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800f0ac:	4b17      	ldr	r3, [pc, #92]	@ (800f10c <shci_send+0x78>)
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	89fa      	ldrh	r2, [r7, #14]
 800f0b2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800f0b6:	4b15      	ldr	r3, [pc, #84]	@ (800f10c <shci_send+0x78>)
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	7b7a      	ldrb	r2, [r7, #13]
 800f0bc:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800f0be:	4b13      	ldr	r3, [pc, #76]	@ (800f10c <shci_send+0x78>)
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	330c      	adds	r3, #12
 800f0c4:	7b7a      	ldrb	r2, [r7, #13]
 800f0c6:	68b9      	ldr	r1, [r7, #8]
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	f002 fcf3 	bl	8011ab4 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800f0ce:	4b10      	ldr	r3, [pc, #64]	@ (800f110 <shci_send+0x7c>)
 800f0d0:	2201      	movs	r2, #1
 800f0d2:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 800f0d4:	4b0f      	ldr	r3, [pc, #60]	@ (800f114 <shci_send+0x80>)
 800f0d6:	691b      	ldr	r3, [r3, #16]
 800f0d8:	2100      	movs	r1, #0
 800f0da:	2000      	movs	r0, #0
 800f0dc:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800f0de:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800f0e2:	f7f2 fb9a 	bl	800181a <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	f103 0008 	add.w	r0, r3, #8
 800f0ec:	4b07      	ldr	r3, [pc, #28]	@ (800f10c <shci_send+0x78>)
 800f0ee:	6819      	ldr	r1, [r3, #0]
 800f0f0:	4b06      	ldr	r3, [pc, #24]	@ (800f10c <shci_send+0x78>)
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	789b      	ldrb	r3, [r3, #2]
 800f0f6:	3303      	adds	r3, #3
 800f0f8:	461a      	mov	r2, r3
 800f0fa:	f002 fcdb 	bl	8011ab4 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800f0fe:	2001      	movs	r0, #1
 800f100:	f000 f83c 	bl	800f17c <Cmd_SetStatus>

  return;
 800f104:	bf00      	nop
}
 800f106:	3710      	adds	r7, #16
 800f108:	46bd      	mov	sp, r7
 800f10a:	bd80      	pop	{r7, pc}
 800f10c:	200002b8 	.word	0x200002b8
 800f110:	20001c1c 	.word	0x20001c1c
 800f114:	20001bf8 	.word	0x20001bf8

0800f118 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800f118:	b580      	push	{r7, lr}
 800f11a:	b086      	sub	sp, #24
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800f120:	4a10      	ldr	r2, [pc, #64]	@ (800f164 <TlInit+0x4c>)
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800f126:	4810      	ldr	r0, [pc, #64]	@ (800f168 <TlInit+0x50>)
 800f128:	f000 f882 	bl	800f230 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800f12c:	2001      	movs	r0, #1
 800f12e:	f000 f825 	bl	800f17c <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800f132:	4b0e      	ldr	r3, [pc, #56]	@ (800f16c <TlInit+0x54>)
 800f134:	2201      	movs	r2, #1
 800f136:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800f138:	4b0d      	ldr	r3, [pc, #52]	@ (800f170 <TlInit+0x58>)
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d00c      	beq.n	800f15a <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800f144:	4b0b      	ldr	r3, [pc, #44]	@ (800f174 <TlInit+0x5c>)
 800f146:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800f148:	4b0b      	ldr	r3, [pc, #44]	@ (800f178 <TlInit+0x60>)
 800f14a:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800f14c:	4b08      	ldr	r3, [pc, #32]	@ (800f170 <TlInit+0x58>)
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	f107 020c 	add.w	r2, r7, #12
 800f154:	4610      	mov	r0, r2
 800f156:	4798      	blx	r3
  }

  return;
 800f158:	bf00      	nop
 800f15a:	bf00      	nop
}
 800f15c:	3718      	adds	r7, #24
 800f15e:	46bd      	mov	sp, r7
 800f160:	bd80      	pop	{r7, pc}
 800f162:	bf00      	nop
 800f164:	200002b8 	.word	0x200002b8
 800f168:	200002ac 	.word	0x200002ac
 800f16c:	200002bc 	.word	0x200002bc
 800f170:	20001bf8 	.word	0x20001bf8
 800f174:	0800f1cd 	.word	0x0800f1cd
 800f178:	0800f1e5 	.word	0x0800f1e5

0800f17c <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800f17c:	b580      	push	{r7, lr}
 800f17e:	b082      	sub	sp, #8
 800f180:	af00      	add	r7, sp, #0
 800f182:	4603      	mov	r3, r0
 800f184:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800f186:	79fb      	ldrb	r3, [r7, #7]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d10b      	bne.n	800f1a4 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800f18c:	4b0d      	ldr	r3, [pc, #52]	@ (800f1c4 <Cmd_SetStatus+0x48>)
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d003      	beq.n	800f19c <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800f194:	4b0b      	ldr	r3, [pc, #44]	@ (800f1c4 <Cmd_SetStatus+0x48>)
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	2000      	movs	r0, #0
 800f19a:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800f19c:	4b0a      	ldr	r3, [pc, #40]	@ (800f1c8 <Cmd_SetStatus+0x4c>)
 800f19e:	2200      	movs	r2, #0
 800f1a0:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800f1a2:	e00b      	b.n	800f1bc <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800f1a4:	4b08      	ldr	r3, [pc, #32]	@ (800f1c8 <Cmd_SetStatus+0x4c>)
 800f1a6:	2201      	movs	r2, #1
 800f1a8:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800f1aa:	4b06      	ldr	r3, [pc, #24]	@ (800f1c4 <Cmd_SetStatus+0x48>)
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d004      	beq.n	800f1bc <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800f1b2:	4b04      	ldr	r3, [pc, #16]	@ (800f1c4 <Cmd_SetStatus+0x48>)
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	2001      	movs	r0, #1
 800f1b8:	4798      	blx	r3
  return;
 800f1ba:	bf00      	nop
 800f1bc:	bf00      	nop
}
 800f1be:	3708      	adds	r7, #8
 800f1c0:	46bd      	mov	sp, r7
 800f1c2:	bd80      	pop	{r7, pc}
 800f1c4:	20001c18 	.word	0x20001c18
 800f1c8:	200002b4 	.word	0x200002b4

0800f1cc <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800f1cc:	b580      	push	{r7, lr}
 800f1ce:	b082      	sub	sp, #8
 800f1d0:	af00      	add	r7, sp, #0
 800f1d2:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800f1d4:	2000      	movs	r0, #0
 800f1d6:	f7f2 fb15 	bl	8001804 <shci_cmd_resp_release>

  return;
 800f1da:	bf00      	nop
}
 800f1dc:	3708      	adds	r7, #8
 800f1de:	46bd      	mov	sp, r7
 800f1e0:	bd80      	pop	{r7, pc}
	...

0800f1e4 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800f1e4:	b580      	push	{r7, lr}
 800f1e6:	b082      	sub	sp, #8
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800f1ec:	6879      	ldr	r1, [r7, #4]
 800f1ee:	4805      	ldr	r0, [pc, #20]	@ (800f204 <TlUserEvtReceived+0x20>)
 800f1f0:	f000 f876 	bl	800f2e0 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800f1f4:	4803      	ldr	r0, [pc, #12]	@ (800f204 <TlUserEvtReceived+0x20>)
 800f1f6:	f7f2 faf9 	bl	80017ec <shci_notify_asynch_evt>

  return;
 800f1fa:	bf00      	nop
}
 800f1fc:	3708      	adds	r7, #8
 800f1fe:	46bd      	mov	sp, r7
 800f200:	bd80      	pop	{r7, pc}
 800f202:	bf00      	nop
 800f204:	200002ac 	.word	0x200002ac

0800f208 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800f208:	b480      	push	{r7}
 800f20a:	b083      	sub	sp, #12
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	4a05      	ldr	r2, [pc, #20]	@ (800f228 <shci_register_io_bus+0x20>)
 800f214:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	4a04      	ldr	r2, [pc, #16]	@ (800f22c <shci_register_io_bus+0x24>)
 800f21a:	611a      	str	r2, [r3, #16]

  return;
 800f21c:	bf00      	nop
}
 800f21e:	370c      	adds	r7, #12
 800f220:	46bd      	mov	sp, r7
 800f222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f226:	4770      	bx	lr
 800f228:	0800ff7d 	.word	0x0800ff7d
 800f22c:	0800ffd1 	.word	0x0800ffd1

0800f230 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800f230:	b480      	push	{r7}
 800f232:	b083      	sub	sp, #12
 800f234:	af00      	add	r7, sp, #0
 800f236:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	687a      	ldr	r2, [r7, #4]
 800f23c:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	687a      	ldr	r2, [r7, #4]
 800f242:	605a      	str	r2, [r3, #4]
}
 800f244:	bf00      	nop
 800f246:	370c      	adds	r7, #12
 800f248:	46bd      	mov	sp, r7
 800f24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f24e:	4770      	bx	lr

0800f250 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800f250:	b480      	push	{r7}
 800f252:	b087      	sub	sp, #28
 800f254:	af00      	add	r7, sp, #0
 800f256:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f258:	f3ef 8310 	mrs	r3, PRIMASK
 800f25c:	60fb      	str	r3, [r7, #12]
  return(result);
 800f25e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800f260:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800f262:	b672      	cpsid	i
}
 800f264:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	687a      	ldr	r2, [r7, #4]
 800f26c:	429a      	cmp	r2, r3
 800f26e:	d102      	bne.n	800f276 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800f270:	2301      	movs	r3, #1
 800f272:	75fb      	strb	r3, [r7, #23]
 800f274:	e001      	b.n	800f27a <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800f276:	2300      	movs	r3, #0
 800f278:	75fb      	strb	r3, [r7, #23]
 800f27a:	693b      	ldr	r3, [r7, #16]
 800f27c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f27e:	68bb      	ldr	r3, [r7, #8]
 800f280:	f383 8810 	msr	PRIMASK, r3
}
 800f284:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800f286:	7dfb      	ldrb	r3, [r7, #23]
}
 800f288:	4618      	mov	r0, r3
 800f28a:	371c      	adds	r7, #28
 800f28c:	46bd      	mov	sp, r7
 800f28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f292:	4770      	bx	lr

0800f294 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800f294:	b480      	push	{r7}
 800f296:	b087      	sub	sp, #28
 800f298:	af00      	add	r7, sp, #0
 800f29a:	6078      	str	r0, [r7, #4]
 800f29c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f29e:	f3ef 8310 	mrs	r3, PRIMASK
 800f2a2:	60fb      	str	r3, [r7, #12]
  return(result);
 800f2a4:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800f2a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f2a8:	b672      	cpsid	i
}
 800f2aa:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	681a      	ldr	r2, [r3, #0]
 800f2b0:	683b      	ldr	r3, [r7, #0]
 800f2b2:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800f2b4:	683b      	ldr	r3, [r7, #0]
 800f2b6:	687a      	ldr	r2, [r7, #4]
 800f2b8:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	683a      	ldr	r2, [r7, #0]
 800f2be:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800f2c0:	683b      	ldr	r3, [r7, #0]
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	683a      	ldr	r2, [r7, #0]
 800f2c6:	605a      	str	r2, [r3, #4]
 800f2c8:	697b      	ldr	r3, [r7, #20]
 800f2ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f2cc:	693b      	ldr	r3, [r7, #16]
 800f2ce:	f383 8810 	msr	PRIMASK, r3
}
 800f2d2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800f2d4:	bf00      	nop
 800f2d6:	371c      	adds	r7, #28
 800f2d8:	46bd      	mov	sp, r7
 800f2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2de:	4770      	bx	lr

0800f2e0 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800f2e0:	b480      	push	{r7}
 800f2e2:	b087      	sub	sp, #28
 800f2e4:	af00      	add	r7, sp, #0
 800f2e6:	6078      	str	r0, [r7, #4]
 800f2e8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f2ea:	f3ef 8310 	mrs	r3, PRIMASK
 800f2ee:	60fb      	str	r3, [r7, #12]
  return(result);
 800f2f0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800f2f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f2f4:	b672      	cpsid	i
}
 800f2f6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800f2f8:	683b      	ldr	r3, [r7, #0]
 800f2fa:	687a      	ldr	r2, [r7, #4]
 800f2fc:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	685a      	ldr	r2, [r3, #4]
 800f302:	683b      	ldr	r3, [r7, #0]
 800f304:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	683a      	ldr	r2, [r7, #0]
 800f30a:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800f30c:	683b      	ldr	r3, [r7, #0]
 800f30e:	685b      	ldr	r3, [r3, #4]
 800f310:	683a      	ldr	r2, [r7, #0]
 800f312:	601a      	str	r2, [r3, #0]
 800f314:	697b      	ldr	r3, [r7, #20]
 800f316:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f318:	693b      	ldr	r3, [r7, #16]
 800f31a:	f383 8810 	msr	PRIMASK, r3
}
 800f31e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800f320:	bf00      	nop
 800f322:	371c      	adds	r7, #28
 800f324:	46bd      	mov	sp, r7
 800f326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f32a:	4770      	bx	lr

0800f32c <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800f32c:	b480      	push	{r7}
 800f32e:	b087      	sub	sp, #28
 800f330:	af00      	add	r7, sp, #0
 800f332:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f334:	f3ef 8310 	mrs	r3, PRIMASK
 800f338:	60fb      	str	r3, [r7, #12]
  return(result);
 800f33a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800f33c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f33e:	b672      	cpsid	i
}
 800f340:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	685b      	ldr	r3, [r3, #4]
 800f346:	687a      	ldr	r2, [r7, #4]
 800f348:	6812      	ldr	r2, [r2, #0]
 800f34a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	687a      	ldr	r2, [r7, #4]
 800f352:	6852      	ldr	r2, [r2, #4]
 800f354:	605a      	str	r2, [r3, #4]
 800f356:	697b      	ldr	r3, [r7, #20]
 800f358:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f35a:	693b      	ldr	r3, [r7, #16]
 800f35c:	f383 8810 	msr	PRIMASK, r3
}
 800f360:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800f362:	bf00      	nop
 800f364:	371c      	adds	r7, #28
 800f366:	46bd      	mov	sp, r7
 800f368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f36c:	4770      	bx	lr

0800f36e <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800f36e:	b580      	push	{r7, lr}
 800f370:	b086      	sub	sp, #24
 800f372:	af00      	add	r7, sp, #0
 800f374:	6078      	str	r0, [r7, #4]
 800f376:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f378:	f3ef 8310 	mrs	r3, PRIMASK
 800f37c:	60fb      	str	r3, [r7, #12]
  return(result);
 800f37e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800f380:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f382:	b672      	cpsid	i
}
 800f384:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	681a      	ldr	r2, [r3, #0]
 800f38a:	683b      	ldr	r3, [r7, #0]
 800f38c:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	4618      	mov	r0, r3
 800f394:	f7ff ffca 	bl	800f32c <LST_remove_node>
 800f398:	697b      	ldr	r3, [r7, #20]
 800f39a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f39c:	693b      	ldr	r3, [r7, #16]
 800f39e:	f383 8810 	msr	PRIMASK, r3
}
 800f3a2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800f3a4:	bf00      	nop
 800f3a6:	3718      	adds	r7, #24
 800f3a8:	46bd      	mov	sp, r7
 800f3aa:	bd80      	pop	{r7, pc}

0800f3ac <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 800f3ac:	b480      	push	{r7}
 800f3ae:	b085      	sub	sp, #20
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	60f8      	str	r0, [r7, #12]
 800f3b4:	60b9      	str	r1, [r7, #8]
 800f3b6:	607a      	str	r2, [r7, #4]
 800f3b8:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	68ba      	ldr	r2, [r7, #8]
 800f3be:	601a      	str	r2, [r3, #0]
  q->first = 0;
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	2200      	movs	r2, #0
 800f3c4:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	2200      	movs	r2, #0
 800f3ca:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	2200      	movs	r2, #0
 800f3d0:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	2200      	movs	r2, #0
 800f3d6:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	687a      	ldr	r2, [r7, #4]
 800f3dc:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	887a      	ldrh	r2, [r7, #2]
 800f3e2:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	7e3a      	ldrb	r2, [r7, #24]
 800f3e8:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 800f3ea:	7e3b      	ldrb	r3, [r7, #24]
 800f3ec:	f003 0302 	and.w	r3, r3, #2
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d006      	beq.n	800f402 <CircularQueue_Init+0x56>
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	891b      	ldrh	r3, [r3, #8]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d002      	beq.n	800f402 <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 800f3fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f400:	e000      	b.n	800f404 <CircularQueue_Init+0x58>
  }
  return 0;
 800f402:	2300      	movs	r3, #0
}
 800f404:	4618      	mov	r0, r3
 800f406:	3714      	adds	r7, #20
 800f408:	46bd      	mov	sp, r7
 800f40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f40e:	4770      	bx	lr

0800f410 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800f410:	b580      	push	{r7, lr}
 800f412:	b08e      	sub	sp, #56	@ 0x38
 800f414:	af00      	add	r7, sp, #0
 800f416:	60f8      	str	r0, [r7, #12]
 800f418:	60b9      	str	r1, [r7, #8]
 800f41a:	603b      	str	r3, [r7, #0]
 800f41c:	4613      	mov	r3, r2
 800f41e:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800f420:	2300      	movs	r3, #0
 800f422:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800f424:	2300      	movs	r3, #0
 800f426:	86fb      	strh	r3, [r7, #54]	@ 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 800f428:	2300      	movs	r3, #0
 800f42a:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800f42c:	2300      	movs	r3, #0
 800f42e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f430:	2300      	movs	r3, #0
 800f432:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800f434:	2300      	movs	r3, #0
 800f436:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800f438:	2300      	movs	r3, #0
 800f43a:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	891b      	ldrh	r3, [r3, #8]
 800f440:	2b00      	cmp	r3, #0
 800f442:	d101      	bne.n	800f448 <CircularQueue_Add+0x38>
 800f444:	2302      	movs	r3, #2
 800f446:	e000      	b.n	800f44a <CircularQueue_Add+0x3a>
 800f448:	2300      	movs	r3, #0
 800f44a:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	695b      	ldr	r3, [r3, #20]
 800f450:	2b00      	cmp	r3, #0
 800f452:	d029      	beq.n	800f4a8 <CircularQueue_Add+0x98>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	891b      	ldrh	r3, [r3, #8]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d122      	bne.n	800f4a2 <CircularQueue_Add+0x92>
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	681a      	ldr	r2, [r3, #0]
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	691b      	ldr	r3, [r3, #16]
 800f464:	4413      	add	r3, r2
 800f466:	781b      	ldrb	r3, [r3, #0]
 800f468:	4618      	mov	r0, r3
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	681a      	ldr	r2, [r3, #0]
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	691b      	ldr	r3, [r3, #16]
 800f472:	1c59      	adds	r1, r3, #1
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	685b      	ldr	r3, [r3, #4]
 800f478:	4299      	cmp	r1, r3
 800f47a:	d306      	bcc.n	800f48a <CircularQueue_Add+0x7a>
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	6919      	ldr	r1, [r3, #16]
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	685b      	ldr	r3, [r3, #4]
 800f484:	1acb      	subs	r3, r1, r3
 800f486:	3301      	adds	r3, #1
 800f488:	e002      	b.n	800f490 <CircularQueue_Add+0x80>
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	691b      	ldr	r3, [r3, #16]
 800f48e:	3301      	adds	r3, #1
 800f490:	4413      	add	r3, r2
 800f492:	781b      	ldrb	r3, [r3, #0]
 800f494:	021b      	lsls	r3, r3, #8
 800f496:	b29b      	uxth	r3, r3
 800f498:	4403      	add	r3, r0
 800f49a:	b29b      	uxth	r3, r3
 800f49c:	3302      	adds	r3, #2
 800f49e:	b29b      	uxth	r3, r3
 800f4a0:	e001      	b.n	800f4a6 <CircularQueue_Add+0x96>
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	891b      	ldrh	r3, [r3, #8]
 800f4a6:	86fb      	strh	r3, [r7, #54]	@ 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	891b      	ldrh	r3, [r3, #8]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d002      	beq.n	800f4b6 <CircularQueue_Add+0xa6>
  {
    elementSize = q->elementSize;
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	891b      	ldrh	r3, [r3, #8]
 800f4b4:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	691a      	ldr	r2, [r3, #16]
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	68db      	ldr	r3, [r3, #12]
 800f4be:	429a      	cmp	r2, r3
 800f4c0:	d307      	bcc.n	800f4d2 <CircularQueue_Add+0xc2>
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	685a      	ldr	r2, [r3, #4]
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	6919      	ldr	r1, [r3, #16]
 800f4ca:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f4cc:	440b      	add	r3, r1
 800f4ce:	1ad3      	subs	r3, r2, r3
 800f4d0:	e000      	b.n	800f4d4 <CircularQueue_Add+0xc4>
 800f4d2:	2300      	movs	r3, #0
 800f4d4:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800f4d6:	88fa      	ldrh	r2, [r7, #6]
 800f4d8:	7ffb      	ldrb	r3, [r7, #31]
 800f4da:	4413      	add	r3, r2
 800f4dc:	461a      	mov	r2, r3
 800f4de:	683b      	ldr	r3, [r7, #0]
 800f4e0:	fb02 f303 	mul.w	r3, r2, r3
 800f4e4:	69ba      	ldr	r2, [r7, #24]
 800f4e6:	429a      	cmp	r2, r3
 800f4e8:	d80b      	bhi.n	800f502 <CircularQueue_Add+0xf2>
 800f4ea:	88fa      	ldrh	r2, [r7, #6]
 800f4ec:	7ffb      	ldrb	r3, [r7, #31]
 800f4ee:	4413      	add	r3, r2
 800f4f0:	461a      	mov	r2, r3
 800f4f2:	69bb      	ldr	r3, [r7, #24]
 800f4f4:	fbb3 f1f2 	udiv	r1, r3, r2
 800f4f8:	fb01 f202 	mul.w	r2, r1, r2
 800f4fc:	1a9b      	subs	r3, r3, r2
 800f4fe:	b2db      	uxtb	r3, r3
 800f500:	e000      	b.n	800f504 <CircularQueue_Add+0xf4>
 800f502:	2300      	movs	r3, #0
 800f504:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800f506:	7dfa      	ldrb	r2, [r7, #23]
 800f508:	7ffb      	ldrb	r3, [r7, #31]
 800f50a:	429a      	cmp	r2, r3
 800f50c:	bf8c      	ite	hi
 800f50e:	2301      	movhi	r3, #1
 800f510:	2300      	movls	r3, #0
 800f512:	b2db      	uxtb	r3, r3
 800f514:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800f516:	7fbb      	ldrb	r3, [r7, #30]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d008      	beq.n	800f52e <CircularQueue_Add+0x11e>
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	7f1b      	ldrb	r3, [r3, #28]
 800f520:	f003 0301 	and.w	r3, r3, #1
 800f524:	2b00      	cmp	r3, #0
 800f526:	d002      	beq.n	800f52e <CircularQueue_Add+0x11e>
 800f528:	7dfb      	ldrb	r3, [r7, #23]
 800f52a:	b29b      	uxth	r3, r3
 800f52c:	e000      	b.n	800f530 <CircularQueue_Add+0x120>
 800f52e:	8bbb      	ldrh	r3, [r7, #28]
 800f530:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800f532:	7fbb      	ldrb	r3, [r7, #30]
 800f534:	2b00      	cmp	r3, #0
 800f536:	d008      	beq.n	800f54a <CircularQueue_Add+0x13a>
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	7f1b      	ldrb	r3, [r3, #28]
 800f53c:	f003 0302 	and.w	r3, r3, #2
 800f540:	2b00      	cmp	r3, #0
 800f542:	d002      	beq.n	800f54a <CircularQueue_Add+0x13a>
 800f544:	7ffb      	ldrb	r3, [r7, #31]
 800f546:	b29b      	uxth	r3, r3
 800f548:	e000      	b.n	800f54c <CircularQueue_Add+0x13c>
 800f54a:	8bbb      	ldrh	r3, [r7, #28]
 800f54c:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800f54e:	88fb      	ldrh	r3, [r7, #6]
 800f550:	2b00      	cmp	r3, #0
 800f552:	f000 817e 	beq.w	800f852 <CircularQueue_Add+0x442>
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	695a      	ldr	r2, [r3, #20]
 800f55a:	88f9      	ldrh	r1, [r7, #6]
 800f55c:	7ffb      	ldrb	r3, [r7, #31]
 800f55e:	440b      	add	r3, r1
 800f560:	4619      	mov	r1, r3
 800f562:	683b      	ldr	r3, [r7, #0]
 800f564:	fb01 f303 	mul.w	r3, r1, r3
 800f568:	441a      	add	r2, r3
 800f56a:	8bbb      	ldrh	r3, [r7, #28]
 800f56c:	441a      	add	r2, r3
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	685b      	ldr	r3, [r3, #4]
 800f572:	429a      	cmp	r2, r3
 800f574:	f200 816d 	bhi.w	800f852 <CircularQueue_Add+0x442>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800f578:	2300      	movs	r3, #0
 800f57a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f57c:	e14a      	b.n	800f814 <CircularQueue_Add+0x404>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	691a      	ldr	r2, [r3, #16]
 800f582:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f584:	441a      	add	r2, r3
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	685b      	ldr	r3, [r3, #4]
 800f58a:	429a      	cmp	r2, r3
 800f58c:	d307      	bcc.n	800f59e <CircularQueue_Add+0x18e>
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	691a      	ldr	r2, [r3, #16]
 800f592:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f594:	441a      	add	r2, r3
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	685b      	ldr	r3, [r3, #4]
 800f59a:	1ad3      	subs	r3, r2, r3
 800f59c:	e003      	b.n	800f5a6 <CircularQueue_Add+0x196>
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	691a      	ldr	r2, [r3, #16]
 800f5a2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800f5a4:	4413      	add	r3, r2
 800f5a6:	68fa      	ldr	r2, [r7, #12]
 800f5a8:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	691b      	ldr	r3, [r3, #16]
 800f5ae:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	891b      	ldrh	r3, [r3, #8]
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d130      	bne.n	800f61a <CircularQueue_Add+0x20a>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	681a      	ldr	r2, [r3, #0]
 800f5bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5be:	1c59      	adds	r1, r3, #1
 800f5c0:	6339      	str	r1, [r7, #48]	@ 0x30
 800f5c2:	4413      	add	r3, r2
 800f5c4:	88fa      	ldrh	r2, [r7, #6]
 800f5c6:	b2d2      	uxtb	r2, r2
 800f5c8:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	685b      	ldr	r3, [r3, #4]
 800f5ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f5d0:	429a      	cmp	r2, r3
 800f5d2:	d304      	bcc.n	800f5de <CircularQueue_Add+0x1ce>
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	685b      	ldr	r3, [r3, #4]
 800f5d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f5da:	1ad3      	subs	r3, r2, r3
 800f5dc:	e000      	b.n	800f5e0 <CircularQueue_Add+0x1d0>
 800f5de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5e0:	633b      	str	r3, [r7, #48]	@ 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800f5e2:	88fb      	ldrh	r3, [r7, #6]
 800f5e4:	0a1b      	lsrs	r3, r3, #8
 800f5e6:	b298      	uxth	r0, r3
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	681a      	ldr	r2, [r3, #0]
 800f5ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5ee:	1c59      	adds	r1, r3, #1
 800f5f0:	6339      	str	r1, [r7, #48]	@ 0x30
 800f5f2:	4413      	add	r3, r2
 800f5f4:	b2c2      	uxtb	r2, r0
 800f5f6:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	685b      	ldr	r3, [r3, #4]
 800f5fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f5fe:	429a      	cmp	r2, r3
 800f600:	d304      	bcc.n	800f60c <CircularQueue_Add+0x1fc>
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	685b      	ldr	r3, [r3, #4]
 800f606:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f608:	1ad3      	subs	r3, r2, r3
 800f60a:	e000      	b.n	800f60e <CircularQueue_Add+0x1fe>
 800f60c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f60e:	633b      	str	r3, [r7, #48]	@ 0x30
        q->byteCount += 2;
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	695b      	ldr	r3, [r3, #20]
 800f614:	1c9a      	adds	r2, r3, #2
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800f61a:	88fa      	ldrh	r2, [r7, #6]
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	6859      	ldr	r1, [r3, #4]
 800f620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f622:	1acb      	subs	r3, r1, r3
 800f624:	4293      	cmp	r3, r2
 800f626:	bf28      	it	cs
 800f628:	4613      	movcs	r3, r2
 800f62a:	62bb      	str	r3, [r7, #40]	@ 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800f62c:	88fb      	ldrh	r3, [r7, #6]
 800f62e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f630:	429a      	cmp	r2, r3
 800f632:	d007      	beq.n	800f644 <CircularQueue_Add+0x234>
 800f634:	88fb      	ldrh	r3, [r7, #6]
 800f636:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f638:	429a      	cmp	r2, r3
 800f63a:	d225      	bcs.n	800f688 <CircularQueue_Add+0x278>
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	7f1b      	ldrb	r3, [r3, #28]
 800f640:	2b00      	cmp	r3, #0
 800f642:	d121      	bne.n	800f688 <CircularQueue_Add+0x278>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	681a      	ldr	r2, [r3, #0]
 800f648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f64a:	18d0      	adds	r0, r2, r3
 800f64c:	88fb      	ldrh	r3, [r7, #6]
 800f64e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f650:	fb02 f303 	mul.w	r3, r2, r3
 800f654:	68ba      	ldr	r2, [r7, #8]
 800f656:	4413      	add	r3, r2
 800f658:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f65a:	4619      	mov	r1, r3
 800f65c:	f002 fa2a 	bl	8011ab4 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	695a      	ldr	r2, [r3, #20]
 800f664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f666:	441a      	add	r2, r3
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800f66c:	2300      	movs	r3, #0
 800f66e:	633b      	str	r3, [r7, #48]	@ 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800f670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f672:	627b      	str	r3, [r7, #36]	@ 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800f674:	88fa      	ldrh	r2, [r7, #6]
 800f676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f678:	1ad3      	subs	r3, r2, r3
 800f67a:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800f67c:	7ffb      	ldrb	r3, [r7, #31]
 800f67e:	b29a      	uxth	r2, r3
 800f680:	88fb      	ldrh	r3, [r7, #6]
 800f682:	4413      	add	r3, r2
 800f684:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800f686:	e0a4      	b.n	800f7d2 <CircularQueue_Add+0x3c2>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800f688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	f000 80a1 	beq.w	800f7d2 <CircularQueue_Add+0x3c2>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	7f1b      	ldrb	r3, [r3, #28]
 800f694:	f003 0301 	and.w	r3, r3, #1
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d03a      	beq.n	800f712 <CircularQueue_Add+0x302>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	891b      	ldrh	r3, [r3, #8]
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d10d      	bne.n	800f6c0 <CircularQueue_Add+0x2b0>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	681a      	ldr	r2, [r3, #0]
 800f6a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6aa:	3b02      	subs	r3, #2
 800f6ac:	4413      	add	r3, r2
 800f6ae:	22ff      	movs	r2, #255	@ 0xff
 800f6b0:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	681a      	ldr	r2, [r3, #0]
 800f6b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6b8:	3b01      	subs	r3, #1
 800f6ba:	4413      	add	r3, r2
 800f6bc:	22ff      	movs	r2, #255	@ 0xff
 800f6be:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	695a      	ldr	r2, [r3, #20]
 800f6c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6c6:	441a      	add	r2, r3
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800f6cc:	2300      	movs	r3, #0
 800f6ce:	627b      	str	r3, [r7, #36]	@ 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800f6d0:	88fb      	ldrh	r3, [r7, #6]
 800f6d2:	62bb      	str	r3, [r7, #40]	@ 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800f6d4:	2300      	movs	r3, #0
 800f6d6:	633b      	str	r3, [r7, #48]	@ 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	891b      	ldrh	r3, [r3, #8]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d16f      	bne.n	800f7c0 <CircularQueue_Add+0x3b0>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	681a      	ldr	r2, [r3, #0]
 800f6e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6e6:	1c59      	adds	r1, r3, #1
 800f6e8:	6339      	str	r1, [r7, #48]	@ 0x30
 800f6ea:	4413      	add	r3, r2
 800f6ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f6ee:	b2d2      	uxtb	r2, r2
 800f6f0:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800f6f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6f4:	0a18      	lsrs	r0, r3, #8
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	681a      	ldr	r2, [r3, #0]
 800f6fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6fc:	1c59      	adds	r1, r3, #1
 800f6fe:	6339      	str	r1, [r7, #48]	@ 0x30
 800f700:	4413      	add	r3, r2
 800f702:	b2c2      	uxtb	r2, r0
 800f704:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	695b      	ldr	r3, [r3, #20]
 800f70a:	1c9a      	adds	r2, r3, #2
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	615a      	str	r2, [r3, #20]
 800f710:	e056      	b.n	800f7c0 <CircularQueue_Add+0x3b0>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	7f1b      	ldrb	r3, [r3, #28]
 800f716:	f003 0302 	and.w	r3, r3, #2
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d050      	beq.n	800f7c0 <CircularQueue_Add+0x3b0>
        {
          if (q->elementSize == 0)
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	891b      	ldrh	r3, [r3, #8]
 800f722:	2b00      	cmp	r3, #0
 800f724:	d14a      	bne.n	800f7bc <CircularQueue_Add+0x3ac>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	681a      	ldr	r2, [r3, #0]
 800f72a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f72c:	3b02      	subs	r3, #2
 800f72e:	4413      	add	r3, r2
 800f730:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f732:	b2d2      	uxtb	r2, r2
 800f734:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800f736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f738:	0a19      	lsrs	r1, r3, #8
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	681a      	ldr	r2, [r3, #0]
 800f73e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f740:	3b01      	subs	r3, #1
 800f742:	4413      	add	r3, r2
 800f744:	b2ca      	uxtb	r2, r1
 800f746:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	681a      	ldr	r2, [r3, #0]
 800f74c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f74e:	18d0      	adds	r0, r2, r3
 800f750:	88fb      	ldrh	r3, [r7, #6]
 800f752:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f754:	fb02 f303 	mul.w	r3, r2, r3
 800f758:	68ba      	ldr	r2, [r7, #8]
 800f75a:	4413      	add	r3, r2
 800f75c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f75e:	4619      	mov	r1, r3
 800f760:	f002 f9a8 	bl	8011ab4 <memcpy>
             q->byteCount += NbBytesToCopy; 
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	695a      	ldr	r2, [r3, #20]
 800f768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f76a:	441a      	add	r2, r3
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800f770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f772:	627b      	str	r3, [r7, #36]	@ 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800f774:	88fa      	ldrh	r2, [r7, #6]
 800f776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f778:	1ad3      	subs	r3, r2, r3
 800f77a:	62bb      	str	r3, [r7, #40]	@ 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	699b      	ldr	r3, [r3, #24]
 800f780:	1c5a      	adds	r2, r3, #1
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800f786:	2300      	movs	r3, #0
 800f788:	633b      	str	r3, [r7, #48]	@ 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	681a      	ldr	r2, [r3, #0]
 800f78e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f790:	1c59      	adds	r1, r3, #1
 800f792:	6339      	str	r1, [r7, #48]	@ 0x30
 800f794:	4413      	add	r3, r2
 800f796:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f798:	b2d2      	uxtb	r2, r2
 800f79a:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800f79c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f79e:	0a18      	lsrs	r0, r3, #8
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	681a      	ldr	r2, [r3, #0]
 800f7a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7a6:	1c59      	adds	r1, r3, #1
 800f7a8:	6339      	str	r1, [r7, #48]	@ 0x30
 800f7aa:	4413      	add	r3, r2
 800f7ac:	b2c2      	uxtb	r2, r0
 800f7ae:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	695b      	ldr	r3, [r3, #20]
 800f7b4:	1c9a      	adds	r2, r3, #2
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	615a      	str	r2, [r3, #20]
 800f7ba:	e001      	b.n	800f7c0 <CircularQueue_Add+0x3b0>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800f7bc:	2300      	movs	r3, #0
 800f7be:	e049      	b.n	800f854 <CircularQueue_Add+0x444>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800f7c0:	7ffb      	ldrb	r3, [r7, #31]
 800f7c2:	b29a      	uxth	r2, r3
 800f7c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7c6:	b29b      	uxth	r3, r3
 800f7c8:	4413      	add	r3, r2
 800f7ca:	86fb      	strh	r3, [r7, #54]	@ 0x36
        q->last = 0;        
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	2200      	movs	r2, #0
 800f7d0:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 800f7d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d015      	beq.n	800f804 <CircularQueue_Add+0x3f4>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	681a      	ldr	r2, [r3, #0]
 800f7dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7de:	18d0      	adds	r0, r2, r3
 800f7e0:	88fb      	ldrh	r3, [r7, #6]
 800f7e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f7e4:	fb03 f202 	mul.w	r2, r3, r2
 800f7e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7ea:	4413      	add	r3, r2
 800f7ec:	68ba      	ldr	r2, [r7, #8]
 800f7ee:	4413      	add	r3, r2
 800f7f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f7f2:	4619      	mov	r1, r3
 800f7f4:	f002 f95e 	bl	8011ab4 <memcpy>
        q->byteCount += NbBytesToCopy;
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	695a      	ldr	r2, [r3, #20]
 800f7fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7fe:	441a      	add	r2, r3
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	699b      	ldr	r3, [r3, #24]
 800f808:	1c5a      	adds	r2, r3, #1
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800f80e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f810:	3301      	adds	r3, #1
 800f812:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f814:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f816:	683b      	ldr	r3, [r7, #0]
 800f818:	429a      	cmp	r2, r3
 800f81a:	f4ff aeb0 	bcc.w	800f57e <CircularQueue_Add+0x16e>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	681a      	ldr	r2, [r3, #0]
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	6919      	ldr	r1, [r3, #16]
 800f826:	7ffb      	ldrb	r3, [r7, #31]
 800f828:	4419      	add	r1, r3
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	685b      	ldr	r3, [r3, #4]
 800f82e:	4299      	cmp	r1, r3
 800f830:	d307      	bcc.n	800f842 <CircularQueue_Add+0x432>
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	6919      	ldr	r1, [r3, #16]
 800f836:	7ffb      	ldrb	r3, [r7, #31]
 800f838:	4419      	add	r1, r3
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	685b      	ldr	r3, [r3, #4]
 800f83e:	1acb      	subs	r3, r1, r3
 800f840:	e003      	b.n	800f84a <CircularQueue_Add+0x43a>
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	6919      	ldr	r1, [r3, #16]
 800f846:	7ffb      	ldrb	r3, [r7, #31]
 800f848:	440b      	add	r3, r1
 800f84a:	4413      	add	r3, r2
 800f84c:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800f84e:	6a3b      	ldr	r3, [r7, #32]
 800f850:	e000      	b.n	800f854 <CircularQueue_Add+0x444>
    return NULL;
 800f852:	2300      	movs	r3, #0
}
 800f854:	4618      	mov	r0, r3
 800f856:	3738      	adds	r7, #56	@ 0x38
 800f858:	46bd      	mov	sp, r7
 800f85a:	bd80      	pop	{r7, pc}

0800f85c <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800f85c:	b480      	push	{r7}
 800f85e:	b085      	sub	sp, #20
 800f860:	af00      	add	r7, sp, #0
 800f862:	6078      	str	r0, [r7, #4]
 800f864:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800f866:	2300      	movs	r3, #0
 800f868:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 800f86a:	2300      	movs	r3, #0
 800f86c:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	891b      	ldrh	r3, [r3, #8]
 800f872:	2b00      	cmp	r3, #0
 800f874:	d101      	bne.n	800f87a <CircularQueue_Remove+0x1e>
 800f876:	2302      	movs	r3, #2
 800f878:	e000      	b.n	800f87c <CircularQueue_Remove+0x20>
 800f87a:	2300      	movs	r3, #0
 800f87c:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 800f87e:	2300      	movs	r3, #0
 800f880:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	695b      	ldr	r3, [r3, #20]
 800f886:	2b00      	cmp	r3, #0
 800f888:	f000 80ca 	beq.w	800fa20 <CircularQueue_Remove+0x1c4>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	891b      	ldrh	r3, [r3, #8]
 800f890:	2b00      	cmp	r3, #0
 800f892:	d120      	bne.n	800f8d6 <CircularQueue_Remove+0x7a>
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	681a      	ldr	r2, [r3, #0]
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	68db      	ldr	r3, [r3, #12]
 800f89c:	4413      	add	r3, r2
 800f89e:	781b      	ldrb	r3, [r3, #0]
 800f8a0:	4618      	mov	r0, r3
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	681a      	ldr	r2, [r3, #0]
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	68db      	ldr	r3, [r3, #12]
 800f8aa:	1c59      	adds	r1, r3, #1
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	685b      	ldr	r3, [r3, #4]
 800f8b0:	4299      	cmp	r1, r3
 800f8b2:	d306      	bcc.n	800f8c2 <CircularQueue_Remove+0x66>
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	68d9      	ldr	r1, [r3, #12]
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	685b      	ldr	r3, [r3, #4]
 800f8bc:	1acb      	subs	r3, r1, r3
 800f8be:	3301      	adds	r3, #1
 800f8c0:	e002      	b.n	800f8c8 <CircularQueue_Remove+0x6c>
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	68db      	ldr	r3, [r3, #12]
 800f8c6:	3301      	adds	r3, #1
 800f8c8:	4413      	add	r3, r2
 800f8ca:	781b      	ldrb	r3, [r3, #0]
 800f8cc:	021b      	lsls	r3, r3, #8
 800f8ce:	b29b      	uxth	r3, r3
 800f8d0:	4403      	add	r3, r0
 800f8d2:	b29b      	uxth	r3, r3
 800f8d4:	e001      	b.n	800f8da <CircularQueue_Remove+0x7e>
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	891b      	ldrh	r3, [r3, #8]
 800f8da:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	7f1b      	ldrb	r3, [r3, #28]
 800f8e0:	f003 0301 	and.w	r3, r3, #1
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d056      	beq.n	800f996 <CircularQueue_Remove+0x13a>
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	7f1b      	ldrb	r3, [r3, #28]
 800f8ec:	f003 0302 	and.w	r3, r3, #2
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d150      	bne.n	800f996 <CircularQueue_Remove+0x13a>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800f8f4:	897b      	ldrh	r3, [r7, #10]
 800f8f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f8fa:	4293      	cmp	r3, r2
 800f8fc:	d103      	bne.n	800f906 <CircularQueue_Remove+0xaa>
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	891b      	ldrh	r3, [r3, #8]
 800f902:	2b00      	cmp	r3, #0
 800f904:	d012      	beq.n	800f92c <CircularQueue_Remove+0xd0>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	68da      	ldr	r2, [r3, #12]
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800f90e:	429a      	cmp	r2, r3
 800f910:	d941      	bls.n	800f996 <CircularQueue_Remove+0x13a>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	891b      	ldrh	r3, [r3, #8]
 800f916:	2b00      	cmp	r3, #0
 800f918:	d03d      	beq.n	800f996 <CircularQueue_Remove+0x13a>
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	685a      	ldr	r2, [r3, #4]
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	68db      	ldr	r3, [r3, #12]
 800f922:	1ad3      	subs	r3, r2, r3
 800f924:	687a      	ldr	r2, [r7, #4]
 800f926:	8912      	ldrh	r2, [r2, #8]
 800f928:	4293      	cmp	r3, r2
 800f92a:	d234      	bcs.n	800f996 <CircularQueue_Remove+0x13a>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	695a      	ldr	r2, [r3, #20]
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	68d9      	ldr	r1, [r3, #12]
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	685b      	ldr	r3, [r3, #4]
 800f938:	1acb      	subs	r3, r1, r3
 800f93a:	441a      	add	r2, r3
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	2200      	movs	r2, #0
 800f944:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	891b      	ldrh	r3, [r3, #8]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d120      	bne.n	800f990 <CircularQueue_Remove+0x134>
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	681a      	ldr	r2, [r3, #0]
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	68db      	ldr	r3, [r3, #12]
 800f956:	4413      	add	r3, r2
 800f958:	781b      	ldrb	r3, [r3, #0]
 800f95a:	4618      	mov	r0, r3
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	681a      	ldr	r2, [r3, #0]
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	68db      	ldr	r3, [r3, #12]
 800f964:	1c59      	adds	r1, r3, #1
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	685b      	ldr	r3, [r3, #4]
 800f96a:	4299      	cmp	r1, r3
 800f96c:	d306      	bcc.n	800f97c <CircularQueue_Remove+0x120>
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	68d9      	ldr	r1, [r3, #12]
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	685b      	ldr	r3, [r3, #4]
 800f976:	1acb      	subs	r3, r1, r3
 800f978:	3301      	adds	r3, #1
 800f97a:	e002      	b.n	800f982 <CircularQueue_Remove+0x126>
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	68db      	ldr	r3, [r3, #12]
 800f980:	3301      	adds	r3, #1
 800f982:	4413      	add	r3, r2
 800f984:	781b      	ldrb	r3, [r3, #0]
 800f986:	021b      	lsls	r3, r3, #8
 800f988:	b29b      	uxth	r3, r3
 800f98a:	4403      	add	r3, r0
 800f98c:	b29b      	uxth	r3, r3
 800f98e:	e001      	b.n	800f994 <CircularQueue_Remove+0x138>
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	891b      	ldrh	r3, [r3, #8]
 800f994:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	681a      	ldr	r2, [r3, #0]
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	68d9      	ldr	r1, [r3, #12]
 800f99e:	7a7b      	ldrb	r3, [r7, #9]
 800f9a0:	4419      	add	r1, r3
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	685b      	ldr	r3, [r3, #4]
 800f9a6:	4299      	cmp	r1, r3
 800f9a8:	d307      	bcc.n	800f9ba <CircularQueue_Remove+0x15e>
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	68d9      	ldr	r1, [r3, #12]
 800f9ae:	7a7b      	ldrb	r3, [r7, #9]
 800f9b0:	4419      	add	r1, r3
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	685b      	ldr	r3, [r3, #4]
 800f9b6:	1acb      	subs	r3, r1, r3
 800f9b8:	e003      	b.n	800f9c2 <CircularQueue_Remove+0x166>
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	68d9      	ldr	r1, [r3, #12]
 800f9be:	7a7b      	ldrb	r3, [r7, #9]
 800f9c0:	440b      	add	r3, r1
 800f9c2:	4413      	add	r3, r2
 800f9c4:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	695b      	ldr	r3, [r3, #20]
 800f9ca:	8979      	ldrh	r1, [r7, #10]
 800f9cc:	7a7a      	ldrb	r2, [r7, #9]
 800f9ce:	440a      	add	r2, r1
 800f9d0:	1a9a      	subs	r2, r3, r2
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	695b      	ldr	r3, [r3, #20]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d01b      	beq.n	800fa16 <CircularQueue_Remove+0x1ba>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	68da      	ldr	r2, [r3, #12]
 800f9e2:	897b      	ldrh	r3, [r7, #10]
 800f9e4:	441a      	add	r2, r3
 800f9e6:	7a7b      	ldrb	r3, [r7, #9]
 800f9e8:	441a      	add	r2, r3
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	685b      	ldr	r3, [r3, #4]
 800f9ee:	429a      	cmp	r2, r3
 800f9f0:	d309      	bcc.n	800fa06 <CircularQueue_Remove+0x1aa>
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	68da      	ldr	r2, [r3, #12]
 800f9f6:	897b      	ldrh	r3, [r7, #10]
 800f9f8:	441a      	add	r2, r3
 800f9fa:	7a7b      	ldrb	r3, [r7, #9]
 800f9fc:	441a      	add	r2, r3
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	685b      	ldr	r3, [r3, #4]
 800fa02:	1ad3      	subs	r3, r2, r3
 800fa04:	e005      	b.n	800fa12 <CircularQueue_Remove+0x1b6>
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	68da      	ldr	r2, [r3, #12]
 800fa0a:	897b      	ldrh	r3, [r7, #10]
 800fa0c:	441a      	add	r2, r3
 800fa0e:	7a7b      	ldrb	r3, [r7, #9]
 800fa10:	4413      	add	r3, r2
 800fa12:	687a      	ldr	r2, [r7, #4]
 800fa14:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	699b      	ldr	r3, [r3, #24]
 800fa1a:	1e5a      	subs	r2, r3, #1
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 800fa20:	683b      	ldr	r3, [r7, #0]
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d002      	beq.n	800fa2c <CircularQueue_Remove+0x1d0>
  {
    *elementSize = eltSize;
 800fa26:	683b      	ldr	r3, [r7, #0]
 800fa28:	897a      	ldrh	r2, [r7, #10]
 800fa2a:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 800fa2c:	68fb      	ldr	r3, [r7, #12]
}
 800fa2e:	4618      	mov	r0, r3
 800fa30:	3714      	adds	r7, #20
 800fa32:	46bd      	mov	sp, r7
 800fa34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa38:	4770      	bx	lr

0800fa3a <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800fa3a:	b480      	push	{r7}
 800fa3c:	b087      	sub	sp, #28
 800fa3e:	af00      	add	r7, sp, #0
 800fa40:	6078      	str	r0, [r7, #4]
 800fa42:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800fa44:	2300      	movs	r3, #0
 800fa46:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 800fa48:	2300      	movs	r3, #0
 800fa4a:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	891b      	ldrh	r3, [r3, #8]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d101      	bne.n	800fa58 <CircularQueue_Sense+0x1e>
 800fa54:	2302      	movs	r3, #2
 800fa56:	e000      	b.n	800fa5a <CircularQueue_Sense+0x20>
 800fa58:	2300      	movs	r3, #0
 800fa5a:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 800fa5c:	2300      	movs	r3, #0
 800fa5e:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 800fa60:	2300      	movs	r3, #0
 800fa62:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	695b      	ldr	r3, [r3, #20]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	f000 808e 	beq.w	800fb8a <CircularQueue_Sense+0x150>
  {
    FirstElemetPos = q->first;
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	68db      	ldr	r3, [r3, #12]
 800fa72:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	891b      	ldrh	r3, [r3, #8]
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d120      	bne.n	800fabe <CircularQueue_Sense+0x84>
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	681a      	ldr	r2, [r3, #0]
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	68db      	ldr	r3, [r3, #12]
 800fa84:	4413      	add	r3, r2
 800fa86:	781b      	ldrb	r3, [r3, #0]
 800fa88:	4618      	mov	r0, r3
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	681a      	ldr	r2, [r3, #0]
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	68db      	ldr	r3, [r3, #12]
 800fa92:	1c59      	adds	r1, r3, #1
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	685b      	ldr	r3, [r3, #4]
 800fa98:	4299      	cmp	r1, r3
 800fa9a:	d306      	bcc.n	800faaa <CircularQueue_Sense+0x70>
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	68d9      	ldr	r1, [r3, #12]
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	685b      	ldr	r3, [r3, #4]
 800faa4:	1acb      	subs	r3, r1, r3
 800faa6:	3301      	adds	r3, #1
 800faa8:	e002      	b.n	800fab0 <CircularQueue_Sense+0x76>
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	68db      	ldr	r3, [r3, #12]
 800faae:	3301      	adds	r3, #1
 800fab0:	4413      	add	r3, r2
 800fab2:	781b      	ldrb	r3, [r3, #0]
 800fab4:	021b      	lsls	r3, r3, #8
 800fab6:	b29b      	uxth	r3, r3
 800fab8:	4403      	add	r3, r0
 800faba:	b29b      	uxth	r3, r3
 800fabc:	e001      	b.n	800fac2 <CircularQueue_Sense+0x88>
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	891b      	ldrh	r3, [r3, #8]
 800fac2:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	7f1b      	ldrb	r3, [r3, #28]
 800fac8:	f003 0301 	and.w	r3, r3, #1
 800facc:	2b00      	cmp	r3, #0
 800face:	d047      	beq.n	800fb60 <CircularQueue_Sense+0x126>
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	7f1b      	ldrb	r3, [r3, #28]
 800fad4:	f003 0302 	and.w	r3, r3, #2
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d141      	bne.n	800fb60 <CircularQueue_Sense+0x126>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800fadc:	8a7b      	ldrh	r3, [r7, #18]
 800fade:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fae2:	4293      	cmp	r3, r2
 800fae4:	d103      	bne.n	800faee <CircularQueue_Sense+0xb4>
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	891b      	ldrh	r3, [r3, #8]
 800faea:	2b00      	cmp	r3, #0
 800faec:	d012      	beq.n	800fb14 <CircularQueue_Sense+0xda>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	68da      	ldr	r2, [r3, #12]
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800faf6:	429a      	cmp	r2, r3
 800faf8:	d932      	bls.n	800fb60 <CircularQueue_Sense+0x126>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	891b      	ldrh	r3, [r3, #8]
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d02e      	beq.n	800fb60 <CircularQueue_Sense+0x126>
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	685a      	ldr	r2, [r3, #4]
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	68db      	ldr	r3, [r3, #12]
 800fb0a:	1ad3      	subs	r3, r2, r3
 800fb0c:	687a      	ldr	r2, [r7, #4]
 800fb0e:	8912      	ldrh	r2, [r2, #8]
 800fb10:	4293      	cmp	r3, r2
 800fb12:	d225      	bcs.n	800fb60 <CircularQueue_Sense+0x126>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800fb14:	2300      	movs	r3, #0
 800fb16:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	891b      	ldrh	r3, [r3, #8]
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d11c      	bne.n	800fb5a <CircularQueue_Sense+0x120>
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	681a      	ldr	r2, [r3, #0]
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	4413      	add	r3, r2
 800fb28:	781b      	ldrb	r3, [r3, #0]
 800fb2a:	4618      	mov	r0, r3
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	681a      	ldr	r2, [r3, #0]
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	1c59      	adds	r1, r3, #1
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	685b      	ldr	r3, [r3, #4]
 800fb38:	4299      	cmp	r1, r3
 800fb3a:	d305      	bcc.n	800fb48 <CircularQueue_Sense+0x10e>
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	685b      	ldr	r3, [r3, #4]
 800fb40:	68f9      	ldr	r1, [r7, #12]
 800fb42:	1acb      	subs	r3, r1, r3
 800fb44:	3301      	adds	r3, #1
 800fb46:	e001      	b.n	800fb4c <CircularQueue_Sense+0x112>
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	3301      	adds	r3, #1
 800fb4c:	4413      	add	r3, r2
 800fb4e:	781b      	ldrb	r3, [r3, #0]
 800fb50:	021b      	lsls	r3, r3, #8
 800fb52:	b29b      	uxth	r3, r3
 800fb54:	4403      	add	r3, r0
 800fb56:	b29b      	uxth	r3, r3
 800fb58:	e001      	b.n	800fb5e <CircularQueue_Sense+0x124>
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	891b      	ldrh	r3, [r3, #8]
 800fb5e:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	681a      	ldr	r2, [r3, #0]
 800fb64:	7af9      	ldrb	r1, [r7, #11]
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	4419      	add	r1, r3
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	685b      	ldr	r3, [r3, #4]
 800fb6e:	4299      	cmp	r1, r3
 800fb70:	d306      	bcc.n	800fb80 <CircularQueue_Sense+0x146>
 800fb72:	7af9      	ldrb	r1, [r7, #11]
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	4419      	add	r1, r3
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	685b      	ldr	r3, [r3, #4]
 800fb7c:	1acb      	subs	r3, r1, r3
 800fb7e:	e002      	b.n	800fb86 <CircularQueue_Sense+0x14c>
 800fb80:	7af9      	ldrb	r1, [r7, #11]
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	440b      	add	r3, r1
 800fb86:	4413      	add	r3, r2
 800fb88:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 800fb8a:	683b      	ldr	r3, [r7, #0]
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d002      	beq.n	800fb96 <CircularQueue_Sense+0x15c>
  {
    *elementSize = eltSize;
 800fb90:	683b      	ldr	r3, [r7, #0]
 800fb92:	8a7a      	ldrh	r2, [r7, #18]
 800fb94:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800fb96:	697b      	ldr	r3, [r7, #20]
}
 800fb98:	4618      	mov	r0, r3
 800fb9a:	371c      	adds	r7, #28
 800fb9c:	46bd      	mov	sp, r7
 800fb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fba2:	4770      	bx	lr

0800fba4 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800fba4:	b480      	push	{r7}
 800fba6:	af00      	add	r7, sp, #0
  return;
 800fba8:	bf00      	nop
}
 800fbaa:	46bd      	mov	sp, r7
 800fbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb0:	4770      	bx	lr

0800fbb2 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800fbb2:	b480      	push	{r7}
 800fbb4:	af00      	add	r7, sp, #0
  return;
 800fbb6:	bf00      	nop
}
 800fbb8:	46bd      	mov	sp, r7
 800fbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbbe:	4770      	bx	lr

0800fbc0 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800fbc0:	b480      	push	{r7}
 800fbc2:	af00      	add	r7, sp, #0
  return;
 800fbc4:	bf00      	nop
}
 800fbc6:	46bd      	mov	sp, r7
 800fbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbcc:	4770      	bx	lr

0800fbce <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800fbce:	b480      	push	{r7}
 800fbd0:	af00      	add	r7, sp, #0
  return;
 800fbd2:	bf00      	nop
}
 800fbd4:	46bd      	mov	sp, r7
 800fbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbda:	4770      	bx	lr

0800fbdc <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800fbdc:	b480      	push	{r7}
 800fbde:	af00      	add	r7, sp, #0
  return;
 800fbe0:	bf00      	nop
}
 800fbe2:	46bd      	mov	sp, r7
 800fbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe8:	4770      	bx	lr

0800fbea <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800fbea:	b480      	push	{r7}
 800fbec:	af00      	add	r7, sp, #0
  return;
 800fbee:	bf00      	nop
}
 800fbf0:	46bd      	mov	sp, r7
 800fbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf6:	4770      	bx	lr

0800fbf8 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800fbf8:	b480      	push	{r7}
 800fbfa:	af00      	add	r7, sp, #0
  return;
 800fbfc:	bf00      	nop
}
 800fbfe:	46bd      	mov	sp, r7
 800fc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc04:	4770      	bx	lr

0800fc06 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800fc06:	b480      	push	{r7}
 800fc08:	af00      	add	r7, sp, #0
  return;
 800fc0a:	bf00      	nop
}
 800fc0c:	46bd      	mov	sp, r7
 800fc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc12:	4770      	bx	lr

0800fc14 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800fc14:	b480      	push	{r7}
 800fc16:	af00      	add	r7, sp, #0
  return;
 800fc18:	bf00      	nop
}
 800fc1a:	46bd      	mov	sp, r7
 800fc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc20:	4770      	bx	lr

0800fc22 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800fc22:	b480      	push	{r7}
 800fc24:	af00      	add	r7, sp, #0
  return;
 800fc26:	bf00      	nop
}
 800fc28:	46bd      	mov	sp, r7
 800fc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc2e:	4770      	bx	lr

0800fc30 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800fc30:	b480      	push	{r7}
 800fc32:	af00      	add	r7, sp, #0
  return;
 800fc34:	bf00      	nop
}
 800fc36:	46bd      	mov	sp, r7
 800fc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc3c:	4770      	bx	lr

0800fc3e <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800fc3e:	b480      	push	{r7}
 800fc40:	af00      	add	r7, sp, #0
  return;
 800fc42:	bf00      	nop
}
 800fc44:	46bd      	mov	sp, r7
 800fc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc4a:	4770      	bx	lr

0800fc4c <ZDD_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
  return;
}
__WEAK void ZDD_STM_Init( void )
{
 800fc4c:	b480      	push	{r7}
 800fc4e:	af00      	add	r7, sp, #0
  return;
 800fc50:	bf00      	nop
}
 800fc52:	46bd      	mov	sp, r7
 800fc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc58:	4770      	bx	lr

0800fc5a <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800fc5a:	b480      	push	{r7}
 800fc5c:	af00      	add	r7, sp, #0
  return;
 800fc5e:	bf00      	nop
}
 800fc60:	46bd      	mov	sp, r7
 800fc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc66:	4770      	bx	lr

0800fc68 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800fc68:	b480      	push	{r7}
 800fc6a:	af00      	add	r7, sp, #0
  return;
 800fc6c:	bf00      	nop
}
 800fc6e:	46bd      	mov	sp, r7
 800fc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc74:	4770      	bx	lr

0800fc76 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800fc76:	b480      	push	{r7}
 800fc78:	af00      	add	r7, sp, #0
  return;
 800fc7a:	bf00      	nop
}
 800fc7c:	46bd      	mov	sp, r7
 800fc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc82:	4770      	bx	lr

0800fc84 <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 800fc84:	b480      	push	{r7}
 800fc86:	af00      	add	r7, sp, #0
  return;
 800fc88:	bf00      	nop
}
 800fc8a:	46bd      	mov	sp, r7
 800fc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc90:	4770      	bx	lr
	...

0800fc94 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800fc94:	b580      	push	{r7, lr}
 800fc96:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800fc98:	4b04      	ldr	r3, [pc, #16]	@ (800fcac <SVCCTL_Init+0x18>)
 800fc9a:	2200      	movs	r2, #0
 800fc9c:	711a      	strb	r2, [r3, #4]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800fc9e:	4b04      	ldr	r3, [pc, #16]	@ (800fcb0 <SVCCTL_Init+0x1c>)
 800fca0:	2200      	movs	r2, #0
 800fca2:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800fca4:	f000 f806 	bl	800fcb4 <SVCCTL_SvcInit>

  return;
 800fca8:	bf00      	nop
}
 800fcaa:	bd80      	pop	{r7, pc}
 800fcac:	200002a0 	.word	0x200002a0
 800fcb0:	200002a8 	.word	0x200002a8

0800fcb4 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800fcb4:	b580      	push	{r7, lr}
 800fcb6:	af00      	add	r7, sp, #0
  BAS_Init();
 800fcb8:	f7ff ff74 	bl	800fba4 <BAS_Init>

  BLS_Init();
 800fcbc:	f7ff ff79 	bl	800fbb2 <BLS_Init>

  CRS_STM_Init();
 800fcc0:	f7ff ff7e 	bl	800fbc0 <CRS_STM_Init>

  DIS_Init();
 800fcc4:	f7ff ff83 	bl	800fbce <DIS_Init>

  EDS_STM_Init();
 800fcc8:	f7ff ff88 	bl	800fbdc <EDS_STM_Init>

  HIDS_Init();
 800fccc:	f7ff ff8d 	bl	800fbea <HIDS_Init>

  HRS_Init();
 800fcd0:	f7ff ff92 	bl	800fbf8 <HRS_Init>

  HTS_Init();
 800fcd4:	f7ff ff97 	bl	800fc06 <HTS_Init>

  IAS_Init();
 800fcd8:	f7ff ff9c 	bl	800fc14 <IAS_Init>

  LLS_Init();
 800fcdc:	f7ff ffa1 	bl	800fc22 <LLS_Init>

  TPS_Init();
 800fce0:	f7ff ffa6 	bl	800fc30 <TPS_Init>

  MOTENV_STM_Init();
 800fce4:	f7ff ffab 	bl	800fc3e <MOTENV_STM_Init>

  P2PS_STM_Init();
 800fce8:	f7fe ffd8 	bl	800ec9c <P2PS_STM_Init>

  ZDD_STM_Init();
 800fcec:	f7ff ffae 	bl	800fc4c <ZDD_STM_Init>

  OTAS_STM_Init();
 800fcf0:	f7ff ffb3 	bl	800fc5a <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800fcf4:	f7ff ffbf 	bl	800fc76 <BVOPUS_STM_Init>

  MESH_Init();
 800fcf8:	f7ff ffb6 	bl	800fc68 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800fcfc:	f7ff ffc2 	bl	800fc84 <SVCCTL_InitCustomSvc>
  
  return;
 800fd00:	bf00      	nop
}
 800fd02:	bd80      	pop	{r7, pc}

0800fd04 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800fd04:	b480      	push	{r7}
 800fd06:	b083      	sub	sp, #12
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800fd0c:	4b09      	ldr	r3, [pc, #36]	@ (800fd34 <SVCCTL_RegisterSvcHandler+0x30>)
 800fd0e:	791b      	ldrb	r3, [r3, #4]
 800fd10:	4619      	mov	r1, r3
 800fd12:	4a08      	ldr	r2, [pc, #32]	@ (800fd34 <SVCCTL_RegisterSvcHandler+0x30>)
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800fd1a:	4b06      	ldr	r3, [pc, #24]	@ (800fd34 <SVCCTL_RegisterSvcHandler+0x30>)
 800fd1c:	791b      	ldrb	r3, [r3, #4]
 800fd1e:	3301      	adds	r3, #1
 800fd20:	b2da      	uxtb	r2, r3
 800fd22:	4b04      	ldr	r3, [pc, #16]	@ (800fd34 <SVCCTL_RegisterSvcHandler+0x30>)
 800fd24:	711a      	strb	r2, [r3, #4]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800fd26:	bf00      	nop
}
 800fd28:	370c      	adds	r7, #12
 800fd2a:	46bd      	mov	sp, r7
 800fd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd30:	4770      	bx	lr
 800fd32:	bf00      	nop
 800fd34:	200002a0 	.word	0x200002a0

0800fd38 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800fd38:	b580      	push	{r7, lr}
 800fd3a:	b086      	sub	sp, #24
 800fd3c:	af00      	add	r7, sp, #0
 800fd3e:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	3301      	adds	r3, #1
 800fd44:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800fd46:	2300      	movs	r3, #0
 800fd48:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800fd4a:	693b      	ldr	r3, [r7, #16]
 800fd4c:	781b      	ldrb	r3, [r3, #0]
 800fd4e:	2bff      	cmp	r3, #255	@ 0xff
 800fd50:	d125      	bne.n	800fd9e <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800fd52:	693b      	ldr	r3, [r7, #16]
 800fd54:	3302      	adds	r3, #2
 800fd56:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	881b      	ldrh	r3, [r3, #0]
 800fd5c:	b29b      	uxth	r3, r3
 800fd5e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800fd62:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800fd66:	d118      	bne.n	800fd9a <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800fd68:	2300      	movs	r3, #0
 800fd6a:	757b      	strb	r3, [r7, #21]
 800fd6c:	e00d      	b.n	800fd8a <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800fd6e:	7d7b      	ldrb	r3, [r7, #21]
 800fd70:	4a1a      	ldr	r2, [pc, #104]	@ (800fddc <SVCCTL_UserEvtRx+0xa4>)
 800fd72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd76:	6878      	ldr	r0, [r7, #4]
 800fd78:	4798      	blx	r3
 800fd7a:	4603      	mov	r3, r0
 800fd7c:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800fd7e:	7dfb      	ldrb	r3, [r7, #23]
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d108      	bne.n	800fd96 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800fd84:	7d7b      	ldrb	r3, [r7, #21]
 800fd86:	3301      	adds	r3, #1
 800fd88:	757b      	strb	r3, [r7, #21]
 800fd8a:	4b14      	ldr	r3, [pc, #80]	@ (800fddc <SVCCTL_UserEvtRx+0xa4>)
 800fd8c:	791b      	ldrb	r3, [r3, #4]
 800fd8e:	7d7a      	ldrb	r2, [r7, #21]
 800fd90:	429a      	cmp	r2, r3
 800fd92:	d3ec      	bcc.n	800fd6e <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800fd94:	e002      	b.n	800fd9c <SVCCTL_UserEvtRx+0x64>
              break;
 800fd96:	bf00      	nop
          break;
 800fd98:	e000      	b.n	800fd9c <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800fd9a:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800fd9c:	e000      	b.n	800fda0 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800fd9e:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 800fda0:	7dfb      	ldrb	r3, [r7, #23]
 800fda2:	2b02      	cmp	r3, #2
 800fda4:	d00f      	beq.n	800fdc6 <SVCCTL_UserEvtRx+0x8e>
 800fda6:	2b02      	cmp	r3, #2
 800fda8:	dc10      	bgt.n	800fdcc <SVCCTL_UserEvtRx+0x94>
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d002      	beq.n	800fdb4 <SVCCTL_UserEvtRx+0x7c>
 800fdae:	2b01      	cmp	r3, #1
 800fdb0:	d006      	beq.n	800fdc0 <SVCCTL_UserEvtRx+0x88>
 800fdb2:	e00b      	b.n	800fdcc <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800fdb4:	6878      	ldr	r0, [r7, #4]
 800fdb6:	f7f3 fd05 	bl	80037c4 <SVCCTL_App_Notification>
 800fdba:	4603      	mov	r3, r0
 800fdbc:	75bb      	strb	r3, [r7, #22]
      break;
 800fdbe:	e008      	b.n	800fdd2 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800fdc0:	2301      	movs	r3, #1
 800fdc2:	75bb      	strb	r3, [r7, #22]
      break;
 800fdc4:	e005      	b.n	800fdd2 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800fdc6:	2300      	movs	r3, #0
 800fdc8:	75bb      	strb	r3, [r7, #22]
      break;
 800fdca:	e002      	b.n	800fdd2 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800fdcc:	2301      	movs	r3, #1
 800fdce:	75bb      	strb	r3, [r7, #22]
      break;
 800fdd0:	bf00      	nop
  }

  return (return_status);
 800fdd2:	7dbb      	ldrb	r3, [r7, #22]
}
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	3718      	adds	r7, #24
 800fdd8:	46bd      	mov	sp, r7
 800fdda:	bd80      	pop	{r7, pc}
 800fddc:	200002a0 	.word	0x200002a0

0800fde0 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800fde0:	b580      	push	{r7, lr}
 800fde2:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800fde4:	f7f4 ff40 	bl	8004c68 <HW_IPCC_Enable>

  return;
 800fde8:	bf00      	nop
}
 800fdea:	bd80      	pop	{r7, pc}

0800fdec <TL_Init>:


void TL_Init( void )
{
 800fdec:	b580      	push	{r7, lr}
 800fdee:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800fdf0:	4b10      	ldr	r3, [pc, #64]	@ (800fe34 <TL_Init+0x48>)
 800fdf2:	4a11      	ldr	r2, [pc, #68]	@ (800fe38 <TL_Init+0x4c>)
 800fdf4:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800fdf6:	4b0f      	ldr	r3, [pc, #60]	@ (800fe34 <TL_Init+0x48>)
 800fdf8:	4a10      	ldr	r2, [pc, #64]	@ (800fe3c <TL_Init+0x50>)
 800fdfa:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800fdfc:	4b0d      	ldr	r3, [pc, #52]	@ (800fe34 <TL_Init+0x48>)
 800fdfe:	4a10      	ldr	r2, [pc, #64]	@ (800fe40 <TL_Init+0x54>)
 800fe00:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800fe02:	4b0c      	ldr	r3, [pc, #48]	@ (800fe34 <TL_Init+0x48>)
 800fe04:	4a0f      	ldr	r2, [pc, #60]	@ (800fe44 <TL_Init+0x58>)
 800fe06:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800fe08:	4b0a      	ldr	r3, [pc, #40]	@ (800fe34 <TL_Init+0x48>)
 800fe0a:	4a0f      	ldr	r2, [pc, #60]	@ (800fe48 <TL_Init+0x5c>)
 800fe0c:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800fe0e:	4b09      	ldr	r3, [pc, #36]	@ (800fe34 <TL_Init+0x48>)
 800fe10:	4a0e      	ldr	r2, [pc, #56]	@ (800fe4c <TL_Init+0x60>)
 800fe12:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800fe14:	4b07      	ldr	r3, [pc, #28]	@ (800fe34 <TL_Init+0x48>)
 800fe16:	4a0e      	ldr	r2, [pc, #56]	@ (800fe50 <TL_Init+0x64>)
 800fe18:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800fe1a:	4b06      	ldr	r3, [pc, #24]	@ (800fe34 <TL_Init+0x48>)
 800fe1c:	4a0d      	ldr	r2, [pc, #52]	@ (800fe54 <TL_Init+0x68>)
 800fe1e:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800fe20:	4b04      	ldr	r3, [pc, #16]	@ (800fe34 <TL_Init+0x48>)
 800fe22:	4a0d      	ldr	r2, [pc, #52]	@ (800fe58 <TL_Init+0x6c>)
 800fe24:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800fe26:	4b03      	ldr	r3, [pc, #12]	@ (800fe34 <TL_Init+0x48>)
 800fe28:	4a0c      	ldr	r2, [pc, #48]	@ (800fe5c <TL_Init+0x70>)
 800fe2a:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800fe2c:	f7f4 ff30 	bl	8004c90 <HW_IPCC_Init>

  return;
 800fe30:	bf00      	nop
}
 800fe32:	bd80      	pop	{r7, pc}
 800fe34:	20030000 	.word	0x20030000
 800fe38:	20030134 	.word	0x20030134
 800fe3c:	20030154 	.word	0x20030154
 800fe40:	20030164 	.word	0x20030164
 800fe44:	20030174 	.word	0x20030174
 800fe48:	2003017c 	.word	0x2003017c
 800fe4c:	20030184 	.word	0x20030184
 800fe50:	2003018c 	.word	0x2003018c
 800fe54:	200301a8 	.word	0x200301a8
 800fe58:	200301ac 	.word	0x200301ac
 800fe5c:	200301b8 	.word	0x200301b8

0800fe60 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800fe60:	b580      	push	{r7, lr}
 800fe62:	b084      	sub	sp, #16
 800fe64:	af00      	add	r7, sp, #0
 800fe66:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800fe6c:	4811      	ldr	r0, [pc, #68]	@ (800feb4 <TL_BLE_Init+0x54>)
 800fe6e:	f7ff f9df 	bl	800f230 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800fe72:	4b11      	ldr	r3, [pc, #68]	@ (800feb8 <TL_BLE_Init+0x58>)
 800fe74:	685b      	ldr	r3, [r3, #4]
 800fe76:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	689a      	ldr	r2, [r3, #8]
 800fe7c:	68bb      	ldr	r3, [r7, #8]
 800fe7e:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	68da      	ldr	r2, [r3, #12]
 800fe84:	68bb      	ldr	r3, [r7, #8]
 800fe86:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800fe88:	68bb      	ldr	r3, [r7, #8]
 800fe8a:	4a0c      	ldr	r2, [pc, #48]	@ (800febc <TL_BLE_Init+0x5c>)
 800fe8c:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800fe8e:	68bb      	ldr	r3, [r7, #8]
 800fe90:	4a08      	ldr	r2, [pc, #32]	@ (800feb4 <TL_BLE_Init+0x54>)
 800fe92:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800fe94:	f7f4 ff12 	bl	8004cbc <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	4a08      	ldr	r2, [pc, #32]	@ (800fec0 <TL_BLE_Init+0x60>)
 800fe9e:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	685b      	ldr	r3, [r3, #4]
 800fea4:	4a07      	ldr	r2, [pc, #28]	@ (800fec4 <TL_BLE_Init+0x64>)
 800fea6:	6013      	str	r3, [r2, #0]

  return 0;
 800fea8:	2300      	movs	r3, #0
}
 800feaa:	4618      	mov	r0, r3
 800feac:	3710      	adds	r7, #16
 800feae:	46bd      	mov	sp, r7
 800feb0:	bd80      	pop	{r7, pc}
 800feb2:	bf00      	nop
 800feb4:	200301d4 	.word	0x200301d4
 800feb8:	20030000 	.word	0x20030000
 800febc:	20030a58 	.word	0x20030a58
 800fec0:	20001c28 	.word	0x20001c28
 800fec4:	20001c2c 	.word	0x20001c2c

0800fec8 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800fec8:	b580      	push	{r7, lr}
 800feca:	b082      	sub	sp, #8
 800fecc:	af00      	add	r7, sp, #0
 800fece:	6078      	str	r0, [r7, #4]
 800fed0:	460b      	mov	r3, r1
 800fed2:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800fed4:	4b09      	ldr	r3, [pc, #36]	@ (800fefc <TL_BLE_SendCmd+0x34>)
 800fed6:	685b      	ldr	r3, [r3, #4]
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	2201      	movs	r2, #1
 800fedc:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800fede:	4b07      	ldr	r3, [pc, #28]	@ (800fefc <TL_BLE_SendCmd+0x34>)
 800fee0:	685b      	ldr	r3, [r3, #4]
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	4619      	mov	r1, r3
 800fee6:	2001      	movs	r0, #1
 800fee8:	f000 f970 	bl	80101cc <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800feec:	f7f4 ff00 	bl	8004cf0 <HW_IPCC_BLE_SendCmd>

  return 0;
 800fef0:	2300      	movs	r3, #0
}
 800fef2:	4618      	mov	r0, r3
 800fef4:	3708      	adds	r7, #8
 800fef6:	46bd      	mov	sp, r7
 800fef8:	bd80      	pop	{r7, pc}
 800fefa:	bf00      	nop
 800fefc:	20030000 	.word	0x20030000

0800ff00 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800ff00:	b580      	push	{r7, lr}
 800ff02:	b082      	sub	sp, #8
 800ff04:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800ff06:	e01c      	b.n	800ff42 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800ff08:	1d3b      	adds	r3, r7, #4
 800ff0a:	4619      	mov	r1, r3
 800ff0c:	4812      	ldr	r0, [pc, #72]	@ (800ff58 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800ff0e:	f7ff fa2e 	bl	800f36e <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	7a5b      	ldrb	r3, [r3, #9]
 800ff16:	2b0f      	cmp	r3, #15
 800ff18:	d003      	beq.n	800ff22 <HW_IPCC_BLE_RxEvtNot+0x22>
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	7a5b      	ldrb	r3, [r3, #9]
 800ff1e:	2b0e      	cmp	r3, #14
 800ff20:	d105      	bne.n	800ff2e <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	4619      	mov	r1, r3
 800ff26:	2002      	movs	r0, #2
 800ff28:	f000 f950 	bl	80101cc <OutputDbgTrace>
 800ff2c:	e004      	b.n	800ff38 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	4619      	mov	r1, r3
 800ff32:	2005      	movs	r0, #5
 800ff34:	f000 f94a 	bl	80101cc <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800ff38:	4b08      	ldr	r3, [pc, #32]	@ (800ff5c <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	687a      	ldr	r2, [r7, #4]
 800ff3e:	4610      	mov	r0, r2
 800ff40:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800ff42:	4805      	ldr	r0, [pc, #20]	@ (800ff58 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800ff44:	f7ff f984 	bl	800f250 <LST_is_empty>
 800ff48:	4603      	mov	r3, r0
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d0dc      	beq.n	800ff08 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800ff4e:	bf00      	nop
}
 800ff50:	3708      	adds	r7, #8
 800ff52:	46bd      	mov	sp, r7
 800ff54:	bd80      	pop	{r7, pc}
 800ff56:	bf00      	nop
 800ff58:	200301d4 	.word	0x200301d4
 800ff5c:	20001c28 	.word	0x20001c28

0800ff60 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800ff60:	b580      	push	{r7, lr}
 800ff62:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_ACL_DATA_RSP, (uint8_t*)NULL);
 800ff64:	2100      	movs	r1, #0
 800ff66:	2004      	movs	r0, #4
 800ff68:	f000 f930 	bl	80101cc <OutputDbgTrace>
  
  BLE_IoBusAclDataTxAck( );
 800ff6c:	4b02      	ldr	r3, [pc, #8]	@ (800ff78 <HW_IPCC_BLE_AclDataAckNot+0x18>)
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	4798      	blx	r3
       
  return;
 800ff72:	bf00      	nop
}
 800ff74:	bd80      	pop	{r7, pc}
 800ff76:	bf00      	nop
 800ff78:	20001c2c 	.word	0x20001c2c

0800ff7c <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800ff7c:	b580      	push	{r7, lr}
 800ff7e:	b084      	sub	sp, #16
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800ff88:	480d      	ldr	r0, [pc, #52]	@ (800ffc0 <TL_SYS_Init+0x44>)
 800ff8a:	f7ff f951 	bl	800f230 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800ff8e:	4b0d      	ldr	r3, [pc, #52]	@ (800ffc4 <TL_SYS_Init+0x48>)
 800ff90:	68db      	ldr	r3, [r3, #12]
 800ff92:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	689a      	ldr	r2, [r3, #8]
 800ff98:	68bb      	ldr	r3, [r7, #8]
 800ff9a:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800ff9c:	68bb      	ldr	r3, [r7, #8]
 800ff9e:	4a08      	ldr	r2, [pc, #32]	@ (800ffc0 <TL_SYS_Init+0x44>)
 800ffa0:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800ffa2:	f7f4 fed7 	bl	8004d54 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	4a07      	ldr	r2, [pc, #28]	@ (800ffc8 <TL_SYS_Init+0x4c>)
 800ffac:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	685b      	ldr	r3, [r3, #4]
 800ffb2:	4a06      	ldr	r2, [pc, #24]	@ (800ffcc <TL_SYS_Init+0x50>)
 800ffb4:	6013      	str	r3, [r2, #0]

  return 0;
 800ffb6:	2300      	movs	r3, #0
}
 800ffb8:	4618      	mov	r0, r3
 800ffba:	3710      	adds	r7, #16
 800ffbc:	46bd      	mov	sp, r7
 800ffbe:	bd80      	pop	{r7, pc}
 800ffc0:	200301dc 	.word	0x200301dc
 800ffc4:	20030000 	.word	0x20030000
 800ffc8:	20001c30 	.word	0x20001c30
 800ffcc:	20001c34 	.word	0x20001c34

0800ffd0 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800ffd0:	b580      	push	{r7, lr}
 800ffd2:	b082      	sub	sp, #8
 800ffd4:	af00      	add	r7, sp, #0
 800ffd6:	6078      	str	r0, [r7, #4]
 800ffd8:	460b      	mov	r3, r1
 800ffda:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800ffdc:	4b09      	ldr	r3, [pc, #36]	@ (8010004 <TL_SYS_SendCmd+0x34>)
 800ffde:	68db      	ldr	r3, [r3, #12]
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	2210      	movs	r2, #16
 800ffe4:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800ffe6:	4b07      	ldr	r3, [pc, #28]	@ (8010004 <TL_SYS_SendCmd+0x34>)
 800ffe8:	68db      	ldr	r3, [r3, #12]
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	4619      	mov	r1, r3
 800ffee:	2006      	movs	r0, #6
 800fff0:	f000 f8ec 	bl	80101cc <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800fff4:	f7f4 fec8 	bl	8004d88 <HW_IPCC_SYS_SendCmd>

  return 0;
 800fff8:	2300      	movs	r3, #0
}
 800fffa:	4618      	mov	r0, r3
 800fffc:	3708      	adds	r7, #8
 800fffe:	46bd      	mov	sp, r7
 8010000:	bd80      	pop	{r7, pc}
 8010002:	bf00      	nop
 8010004:	20030000 	.word	0x20030000

08010008 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8010008:	b580      	push	{r7, lr}
 801000a:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 801000c:	4b07      	ldr	r3, [pc, #28]	@ (801002c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 801000e:	68db      	ldr	r3, [r3, #12]
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	4619      	mov	r1, r3
 8010014:	2007      	movs	r0, #7
 8010016:	f000 f8d9 	bl	80101cc <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 801001a:	4b05      	ldr	r3, [pc, #20]	@ (8010030 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	4a03      	ldr	r2, [pc, #12]	@ (801002c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8010020:	68d2      	ldr	r2, [r2, #12]
 8010022:	6812      	ldr	r2, [r2, #0]
 8010024:	4610      	mov	r0, r2
 8010026:	4798      	blx	r3

  return;
 8010028:	bf00      	nop
}
 801002a:	bd80      	pop	{r7, pc}
 801002c:	20030000 	.word	0x20030000
 8010030:	20001c30 	.word	0x20001c30

08010034 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8010034:	b580      	push	{r7, lr}
 8010036:	b082      	sub	sp, #8
 8010038:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 801003a:	e00e      	b.n	801005a <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 801003c:	1d3b      	adds	r3, r7, #4
 801003e:	4619      	mov	r1, r3
 8010040:	480b      	ldr	r0, [pc, #44]	@ (8010070 <HW_IPCC_SYS_EvtNot+0x3c>)
 8010042:	f7ff f994 	bl	800f36e <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	4619      	mov	r1, r3
 801004a:	2008      	movs	r0, #8
 801004c:	f000 f8be 	bl	80101cc <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8010050:	4b08      	ldr	r3, [pc, #32]	@ (8010074 <HW_IPCC_SYS_EvtNot+0x40>)
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	687a      	ldr	r2, [r7, #4]
 8010056:	4610      	mov	r0, r2
 8010058:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 801005a:	4805      	ldr	r0, [pc, #20]	@ (8010070 <HW_IPCC_SYS_EvtNot+0x3c>)
 801005c:	f7ff f8f8 	bl	800f250 <LST_is_empty>
 8010060:	4603      	mov	r3, r0
 8010062:	2b00      	cmp	r3, #0
 8010064:	d0ea      	beq.n	801003c <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8010066:	bf00      	nop
}
 8010068:	3708      	adds	r7, #8
 801006a:	46bd      	mov	sp, r7
 801006c:	bd80      	pop	{r7, pc}
 801006e:	bf00      	nop
 8010070:	200301dc 	.word	0x200301dc
 8010074:	20001c34 	.word	0x20001c34

08010078 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8010078:	b580      	push	{r7, lr}
 801007a:	b082      	sub	sp, #8
 801007c:	af00      	add	r7, sp, #0
 801007e:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8010080:	4817      	ldr	r0, [pc, #92]	@ (80100e0 <TL_MM_Init+0x68>)
 8010082:	f7ff f8d5 	bl	800f230 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8010086:	4817      	ldr	r0, [pc, #92]	@ (80100e4 <TL_MM_Init+0x6c>)
 8010088:	f7ff f8d2 	bl	800f230 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 801008c:	4b16      	ldr	r3, [pc, #88]	@ (80100e8 <TL_MM_Init+0x70>)
 801008e:	691b      	ldr	r3, [r3, #16]
 8010090:	4a16      	ldr	r2, [pc, #88]	@ (80100ec <TL_MM_Init+0x74>)
 8010092:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8010094:	4b15      	ldr	r3, [pc, #84]	@ (80100ec <TL_MM_Init+0x74>)
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	687a      	ldr	r2, [r7, #4]
 801009a:	6892      	ldr	r2, [r2, #8]
 801009c:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 801009e:	4b13      	ldr	r3, [pc, #76]	@ (80100ec <TL_MM_Init+0x74>)
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	687a      	ldr	r2, [r7, #4]
 80100a4:	68d2      	ldr	r2, [r2, #12]
 80100a6:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 80100a8:	4b10      	ldr	r3, [pc, #64]	@ (80100ec <TL_MM_Init+0x74>)
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	4a0c      	ldr	r2, [pc, #48]	@ (80100e0 <TL_MM_Init+0x68>)
 80100ae:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 80100b0:	4b0e      	ldr	r3, [pc, #56]	@ (80100ec <TL_MM_Init+0x74>)
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	687a      	ldr	r2, [r7, #4]
 80100b6:	6812      	ldr	r2, [r2, #0]
 80100b8:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 80100ba:	4b0c      	ldr	r3, [pc, #48]	@ (80100ec <TL_MM_Init+0x74>)
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	687a      	ldr	r2, [r7, #4]
 80100c0:	6852      	ldr	r2, [r2, #4]
 80100c2:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 80100c4:	4b09      	ldr	r3, [pc, #36]	@ (80100ec <TL_MM_Init+0x74>)
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	687a      	ldr	r2, [r7, #4]
 80100ca:	6912      	ldr	r2, [r2, #16]
 80100cc:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 80100ce:	4b07      	ldr	r3, [pc, #28]	@ (80100ec <TL_MM_Init+0x74>)
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	687a      	ldr	r2, [r7, #4]
 80100d4:	6952      	ldr	r2, [r2, #20]
 80100d6:	619a      	str	r2, [r3, #24]

  return;
 80100d8:	bf00      	nop
}
 80100da:	3708      	adds	r7, #8
 80100dc:	46bd      	mov	sp, r7
 80100de:	bd80      	pop	{r7, pc}
 80100e0:	200301c4 	.word	0x200301c4
 80100e4:	20001c20 	.word	0x20001c20
 80100e8:	20030000 	.word	0x20030000
 80100ec:	20001c38 	.word	0x20001c38

080100f0 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 80100f0:	b580      	push	{r7, lr}
 80100f2:	b082      	sub	sp, #8
 80100f4:	af00      	add	r7, sp, #0
 80100f6:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 80100f8:	6879      	ldr	r1, [r7, #4]
 80100fa:	4807      	ldr	r0, [pc, #28]	@ (8010118 <TL_MM_EvtDone+0x28>)
 80100fc:	f7ff f8f0 	bl	800f2e0 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8010100:	6879      	ldr	r1, [r7, #4]
 8010102:	2000      	movs	r0, #0
 8010104:	f000 f862 	bl	80101cc <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8010108:	4804      	ldr	r0, [pc, #16]	@ (801011c <TL_MM_EvtDone+0x2c>)
 801010a:	f7f4 fe83 	bl	8004e14 <HW_IPCC_MM_SendFreeBuf>

  return;
 801010e:	bf00      	nop
}
 8010110:	3708      	adds	r7, #8
 8010112:	46bd      	mov	sp, r7
 8010114:	bd80      	pop	{r7, pc}
 8010116:	bf00      	nop
 8010118:	20001c20 	.word	0x20001c20
 801011c:	08010121 	.word	0x08010121

08010120 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8010120:	b580      	push	{r7, lr}
 8010122:	b082      	sub	sp, #8
 8010124:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8010126:	e00c      	b.n	8010142 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8010128:	1d3b      	adds	r3, r7, #4
 801012a:	4619      	mov	r1, r3
 801012c:	480a      	ldr	r0, [pc, #40]	@ (8010158 <SendFreeBuf+0x38>)
 801012e:	f7ff f91e 	bl	800f36e <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8010132:	4b0a      	ldr	r3, [pc, #40]	@ (801015c <SendFreeBuf+0x3c>)
 8010134:	691b      	ldr	r3, [r3, #16]
 8010136:	691b      	ldr	r3, [r3, #16]
 8010138:	687a      	ldr	r2, [r7, #4]
 801013a:	4611      	mov	r1, r2
 801013c:	4618      	mov	r0, r3
 801013e:	f7ff f8cf 	bl	800f2e0 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8010142:	4805      	ldr	r0, [pc, #20]	@ (8010158 <SendFreeBuf+0x38>)
 8010144:	f7ff f884 	bl	800f250 <LST_is_empty>
 8010148:	4603      	mov	r3, r0
 801014a:	2b00      	cmp	r3, #0
 801014c:	d0ec      	beq.n	8010128 <SendFreeBuf+0x8>
  }

  return;
 801014e:	bf00      	nop
}
 8010150:	3708      	adds	r7, #8
 8010152:	46bd      	mov	sp, r7
 8010154:	bd80      	pop	{r7, pc}
 8010156:	bf00      	nop
 8010158:	20001c20 	.word	0x20001c20
 801015c:	20030000 	.word	0x20030000

08010160 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8010160:	b580      	push	{r7, lr}
 8010162:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8010164:	4805      	ldr	r0, [pc, #20]	@ (801017c <TL_TRACES_Init+0x1c>)
 8010166:	f7ff f863 	bl	800f230 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 801016a:	4b05      	ldr	r3, [pc, #20]	@ (8010180 <TL_TRACES_Init+0x20>)
 801016c:	695b      	ldr	r3, [r3, #20]
 801016e:	4a03      	ldr	r2, [pc, #12]	@ (801017c <TL_TRACES_Init+0x1c>)
 8010170:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8010172:	f7f4 fea1 	bl	8004eb8 <HW_IPCC_TRACES_Init>

  return;
 8010176:	bf00      	nop
}
 8010178:	bd80      	pop	{r7, pc}
 801017a:	bf00      	nop
 801017c:	200301cc 	.word	0x200301cc
 8010180:	20030000 	.word	0x20030000

08010184 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8010184:	b580      	push	{r7, lr}
 8010186:	b082      	sub	sp, #8
 8010188:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 801018a:	e008      	b.n	801019e <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 801018c:	1d3b      	adds	r3, r7, #4
 801018e:	4619      	mov	r1, r3
 8010190:	4808      	ldr	r0, [pc, #32]	@ (80101b4 <HW_IPCC_TRACES_EvtNot+0x30>)
 8010192:	f7ff f8ec 	bl	800f36e <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	4618      	mov	r0, r3
 801019a:	f000 f80d 	bl	80101b8 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 801019e:	4805      	ldr	r0, [pc, #20]	@ (80101b4 <HW_IPCC_TRACES_EvtNot+0x30>)
 80101a0:	f7ff f856 	bl	800f250 <LST_is_empty>
 80101a4:	4603      	mov	r3, r0
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d0f0      	beq.n	801018c <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 80101aa:	bf00      	nop
}
 80101ac:	3708      	adds	r7, #8
 80101ae:	46bd      	mov	sp, r7
 80101b0:	bd80      	pop	{r7, pc}
 80101b2:	bf00      	nop
 80101b4:	200301cc 	.word	0x200301cc

080101b8 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 80101b8:	b480      	push	{r7}
 80101ba:	b083      	sub	sp, #12
 80101bc:	af00      	add	r7, sp, #0
 80101be:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 80101c0:	bf00      	nop
 80101c2:	370c      	adds	r7, #12
 80101c4:	46bd      	mov	sp, r7
 80101c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ca:	4770      	bx	lr

080101cc <OutputDbgTrace>:

/******************************************************************************
* DEBUG INFORMATION
******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 80101cc:	b480      	push	{r7}
 80101ce:	b087      	sub	sp, #28
 80101d0:	af00      	add	r7, sp, #0
 80101d2:	4603      	mov	r3, r0
 80101d4:	6039      	str	r1, [r7, #0]
 80101d6:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;
  TL_AclDataPacket_t *p_acldata_packet; 
  TL_EvtSerial_t *p_cmd_rsp_packet;
  
  switch(packet_type)
 80101d8:	79fb      	ldrb	r3, [r7, #7]
 80101da:	2b08      	cmp	r3, #8
 80101dc:	d84c      	bhi.n	8010278 <OutputDbgTrace+0xac>
 80101de:	a201      	add	r2, pc, #4	@ (adr r2, 80101e4 <OutputDbgTrace+0x18>)
 80101e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101e4:	08010209 	.word	0x08010209
 80101e8:	0801022d 	.word	0x0801022d
 80101ec:	08010239 	.word	0x08010239
 80101f0:	08010233 	.word	0x08010233
 80101f4:	08010279 	.word	0x08010279
 80101f8:	0801024d 	.word	0x0801024d
 80101fc:	08010259 	.word	0x08010259
 8010200:	0801025f 	.word	0x0801025f
 8010204:	0801026d 	.word	0x0801026d
  {
  case TL_MB_MM_RELEASE_BUFFER:
    p_evt_packet = (TL_EvtPacket_t*)buffer;
 8010208:	683b      	ldr	r3, [r7, #0]
 801020a:	617b      	str	r3, [r7, #20]
    switch(p_evt_packet->evtserial.evt.evtcode)
 801020c:	697b      	ldr	r3, [r7, #20]
 801020e:	7a5b      	ldrb	r3, [r3, #9]
 8010210:	2bff      	cmp	r3, #255	@ 0xff
 8010212:	d005      	beq.n	8010220 <OutputDbgTrace+0x54>
 8010214:	2bff      	cmp	r3, #255	@ 0xff
 8010216:	dc05      	bgt.n	8010224 <OutputDbgTrace+0x58>
 8010218:	2b0e      	cmp	r3, #14
 801021a:	d005      	beq.n	8010228 <OutputDbgTrace+0x5c>
 801021c:	2b0f      	cmp	r3, #15
      break;
      
    default:
      TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
      TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
      break;
 801021e:	e001      	b.n	8010224 <OutputDbgTrace+0x58>
      break;
 8010220:	bf00      	nop
 8010222:	e02a      	b.n	801027a <OutputDbgTrace+0xae>
      break;
 8010224:	bf00      	nop
 8010226:	e028      	b.n	801027a <OutputDbgTrace+0xae>
      break;
 8010228:	bf00      	nop
    }
    
    TL_MM_DBG_MSG("\r\n");
    break;
 801022a:	e026      	b.n	801027a <OutputDbgTrace+0xae>
    
  case TL_MB_BLE_CMD:
    p_cmd_packet = (TL_CmdPacket_t*)buffer;
 801022c:	683b      	ldr	r3, [r7, #0]
 801022e:	60fb      	str	r3, [r7, #12]
      TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
    }
    TL_HCI_CMD_DBG_MSG("\r\n");
    
    TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
    break;
 8010230:	e023      	b.n	801027a <OutputDbgTrace+0xae>
    
  case TL_MB_ACL_DATA:
    (void)p_acldata_packet;
    p_acldata_packet = (TL_AclDataPacket_t*)buffer;
 8010232:	683b      	ldr	r3, [r7, #0]
 8010234:	60bb      	str	r3, [r7, #8]
    TL_HCI_CMD_DBG_MSG(" payload:");
    TL_HCI_CMD_DBG_BUF(p_acldata_packet->AclDataSerial.acl_data, p_acldata_packet->AclDataSerial.length, "");
  }*/
    TL_HCI_CMD_DBG_MSG("\r\n");
    /*TL_HCI_CMD_DBG_RAW(&p_acldata_packet->AclDataSerial, p_acldata_packet->AclDataSerial.length+TL_CMD_HDR_SIZE);*/
    break;
 8010236:	e020      	b.n	801027a <OutputDbgTrace+0xae>
    TL_HCI_CMD_DBG_MSG(" ACL Data Tx Ack received")
      TL_HCI_CMD_DBG_MSG("\r\n");
    break;
    
  case TL_MB_BLE_CMD_RSP:
    p_evt_packet = (TL_EvtPacket_t*)buffer;
 8010238:	683b      	ldr	r3, [r7, #0]
 801023a:	617b      	str	r3, [r7, #20]
    switch(p_evt_packet->evtserial.evt.evtcode)
 801023c:	697b      	ldr	r3, [r7, #20]
 801023e:	7a5b      	ldrb	r3, [r3, #9]
 8010240:	2b0e      	cmp	r3, #14
 8010242:	d001      	beq.n	8010248 <OutputDbgTrace+0x7c>
 8010244:	2b0f      	cmp	r3, #15
      }
      break;
      
    default:
      TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
      break;
 8010246:	e000      	b.n	801024a <OutputDbgTrace+0x7e>
      break;
 8010248:	bf00      	nop
    }
    
    TL_HCI_CMD_DBG_MSG("\r\n");
    
    TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
    break;
 801024a:	e016      	b.n	801027a <OutputDbgTrace+0xae>
    
  case TL_MB_BLE_ASYNCH_EVT:
    p_evt_packet = (TL_EvtPacket_t*)buffer;
 801024c:	683b      	ldr	r3, [r7, #0]
 801024e:	617b      	str	r3, [r7, #20]
    if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8010250:	697b      	ldr	r3, [r7, #20]
 8010252:	7a5b      	ldrb	r3, [r3, #9]
 8010254:	2bff      	cmp	r3, #255	@ 0xff
    }
    
    TL_HCI_EVT_DBG_MSG("\r\n");
    
    TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
    break;
 8010256:	e010      	b.n	801027a <OutputDbgTrace+0xae>
    
  case TL_MB_SYS_CMD:
    p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8010258:	683b      	ldr	r3, [r7, #0]
 801025a:	60fb      	str	r3, [r7, #12]
      TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
    }
    TL_SHCI_CMD_DBG_MSG("\r\n");
    
    TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
    break;
 801025c:	e00d      	b.n	801027a <OutputDbgTrace+0xae>
    
  case TL_MB_SYS_CMD_RSP:
    p_cmd_rsp_packet = (TL_EvtSerial_t*)buffer;
 801025e:	683b      	ldr	r3, [r7, #0]
 8010260:	613b      	str	r3, [r7, #16]
    switch(p_cmd_rsp_packet->evt.evtcode)
 8010262:	693b      	ldr	r3, [r7, #16]
 8010264:	785b      	ldrb	r3, [r3, #1]
 8010266:	2b0e      	cmp	r3, #14
      }
      break;
      
    default:
      TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_cmd_rsp_packet->evt.evtcode);
      break;
 8010268:	bf00      	nop
    }
    
    TL_SHCI_CMD_DBG_MSG("\r\n");
    
    TL_SHCI_CMD_DBG_RAW(&p_cmd_rsp_packet->evt, p_cmd_rsp_packet->evt.plen+TL_EVT_HDR_SIZE);
    break;
 801026a:	e006      	b.n	801027a <OutputDbgTrace+0xae>
    
  case  TL_MB_SYS_ASYNCH_EVT:
    p_evt_packet = (TL_EvtPacket_t*)buffer;
 801026c:	683b      	ldr	r3, [r7, #0]
 801026e:	617b      	str	r3, [r7, #20]
    if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8010270:	697b      	ldr	r3, [r7, #20]
 8010272:	7a5b      	ldrb	r3, [r3, #9]
 8010274:	2bff      	cmp	r3, #255	@ 0xff
    }
    
    TL_SHCI_EVT_DBG_MSG("\r\n");
    
    TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
    break;
 8010276:	e000      	b.n	801027a <OutputDbgTrace+0xae>
    
  default:
    break;
 8010278:	bf00      	nop
  }
  
  return;
 801027a:	bf00      	nop
}
 801027c:	371c      	adds	r7, #28
 801027e:	46bd      	mov	sp, r7
 8010280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010284:	4770      	bx	lr
 8010286:	bf00      	nop

08010288 <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
 8010288:	b580      	push	{r7, lr}
 801028a:	b082      	sub	sp, #8
 801028c:	af00      	add	r7, sp, #0
 801028e:	6078      	str	r0, [r7, #4]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	4a22      	ldr	r2, [pc, #136]	@ (8010320 <UTIL_LCD_SetFuncDriver+0x98>)
 8010296:	6013      	str	r3, [r2, #0]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	685b      	ldr	r3, [r3, #4]
 801029c:	4a20      	ldr	r2, [pc, #128]	@ (8010320 <UTIL_LCD_SetFuncDriver+0x98>)
 801029e:	6053      	str	r3, [r2, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	689b      	ldr	r3, [r3, #8]
 80102a4:	4a1e      	ldr	r2, [pc, #120]	@ (8010320 <UTIL_LCD_SetFuncDriver+0x98>)
 80102a6:	6093      	str	r3, [r2, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	68db      	ldr	r3, [r3, #12]
 80102ac:	4a1c      	ldr	r2, [pc, #112]	@ (8010320 <UTIL_LCD_SetFuncDriver+0x98>)
 80102ae:	60d3      	str	r3, [r2, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	691b      	ldr	r3, [r3, #16]
 80102b4:	4a1a      	ldr	r2, [pc, #104]	@ (8010320 <UTIL_LCD_SetFuncDriver+0x98>)
 80102b6:	6113      	str	r3, [r2, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	695b      	ldr	r3, [r3, #20]
 80102bc:	4a18      	ldr	r2, [pc, #96]	@ (8010320 <UTIL_LCD_SetFuncDriver+0x98>)
 80102be:	6153      	str	r3, [r2, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	699b      	ldr	r3, [r3, #24]
 80102c4:	4a16      	ldr	r2, [pc, #88]	@ (8010320 <UTIL_LCD_SetFuncDriver+0x98>)
 80102c6:	6193      	str	r3, [r2, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	69db      	ldr	r3, [r3, #28]
 80102cc:	4a14      	ldr	r2, [pc, #80]	@ (8010320 <UTIL_LCD_SetFuncDriver+0x98>)
 80102ce:	61d3      	str	r3, [r2, #28]
  FuncDriver.GetYSize       = pDrv->GetYSize;
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	6a1b      	ldr	r3, [r3, #32]
 80102d4:	4a12      	ldr	r2, [pc, #72]	@ (8010320 <UTIL_LCD_SetFuncDriver+0x98>)
 80102d6:	6213      	str	r3, [r2, #32]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80102dc:	4a10      	ldr	r2, [pc, #64]	@ (8010320 <UTIL_LCD_SetFuncDriver+0x98>)
 80102de:	6253      	str	r3, [r2, #36]	@ 0x24
  FuncDriver.GetFormat      = pDrv->GetFormat;
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80102e4:	4a0e      	ldr	r2, [pc, #56]	@ (8010320 <UTIL_LCD_SetFuncDriver+0x98>)
 80102e6:	6293      	str	r3, [r2, #40]	@ 0x28

  DrawProp->LcdLayer = 0;
 80102e8:	4b0e      	ldr	r3, [pc, #56]	@ (8010324 <UTIL_LCD_SetFuncDriver+0x9c>)
 80102ea:	2200      	movs	r2, #0
 80102ec:	60da      	str	r2, [r3, #12]
  DrawProp->LcdDevice = 0;
 80102ee:	4b0d      	ldr	r3, [pc, #52]	@ (8010324 <UTIL_LCD_SetFuncDriver+0x9c>)
 80102f0:	2200      	movs	r2, #0
 80102f2:	611a      	str	r2, [r3, #16]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 80102f4:	4b0a      	ldr	r3, [pc, #40]	@ (8010320 <UTIL_LCD_SetFuncDriver+0x98>)
 80102f6:	69db      	ldr	r3, [r3, #28]
 80102f8:	4a0b      	ldr	r2, [pc, #44]	@ (8010328 <UTIL_LCD_SetFuncDriver+0xa0>)
 80102fa:	4611      	mov	r1, r2
 80102fc:	2000      	movs	r0, #0
 80102fe:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 8010300:	4b07      	ldr	r3, [pc, #28]	@ (8010320 <UTIL_LCD_SetFuncDriver+0x98>)
 8010302:	6a1b      	ldr	r3, [r3, #32]
 8010304:	4a09      	ldr	r2, [pc, #36]	@ (801032c <UTIL_LCD_SetFuncDriver+0xa4>)
 8010306:	4611      	mov	r1, r2
 8010308:	2000      	movs	r0, #0
 801030a:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 801030c:	4b04      	ldr	r3, [pc, #16]	@ (8010320 <UTIL_LCD_SetFuncDriver+0x98>)
 801030e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010310:	4a07      	ldr	r2, [pc, #28]	@ (8010330 <UTIL_LCD_SetFuncDriver+0xa8>)
 8010312:	4611      	mov	r1, r2
 8010314:	2000      	movs	r0, #0
 8010316:	4798      	blx	r3
}
 8010318:	bf00      	nop
 801031a:	3708      	adds	r7, #8
 801031c:	46bd      	mov	sp, r7
 801031e:	bd80      	pop	{r7, pc}
 8010320:	20001c7c 	.word	0x20001c7c
 8010324:	20001c3c 	.word	0x20001c3c
 8010328:	20001c50 	.word	0x20001c50
 801032c:	20001c54 	.word	0x20001c54
 8010330:	20001c58 	.word	0x20001c58

08010334 <UTIL_LCD_SetDevice>:
/**
  * @brief  Set the LCD instance to be used.
  * @param  Device  LCD instance
  */
void UTIL_LCD_SetDevice(uint32_t Device)
{
 8010334:	b580      	push	{r7, lr}
 8010336:	b082      	sub	sp, #8
 8010338:	af00      	add	r7, sp, #0
 801033a:	6078      	str	r0, [r7, #4]
  DrawProp->LcdDevice = Device;
 801033c:	4a09      	ldr	r2, [pc, #36]	@ (8010364 <UTIL_LCD_SetDevice+0x30>)
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	6113      	str	r3, [r2, #16]
  FuncDriver.GetXSize(Device, &DrawProp->LcdXsize);
 8010342:	4b09      	ldr	r3, [pc, #36]	@ (8010368 <UTIL_LCD_SetDevice+0x34>)
 8010344:	69db      	ldr	r3, [r3, #28]
 8010346:	4a09      	ldr	r2, [pc, #36]	@ (801036c <UTIL_LCD_SetDevice+0x38>)
 8010348:	4611      	mov	r1, r2
 801034a:	6878      	ldr	r0, [r7, #4]
 801034c:	4798      	blx	r3
  FuncDriver.GetYSize(Device, &DrawProp->LcdYsize);
 801034e:	4b06      	ldr	r3, [pc, #24]	@ (8010368 <UTIL_LCD_SetDevice+0x34>)
 8010350:	6a1b      	ldr	r3, [r3, #32]
 8010352:	4a07      	ldr	r2, [pc, #28]	@ (8010370 <UTIL_LCD_SetDevice+0x3c>)
 8010354:	4611      	mov	r1, r2
 8010356:	6878      	ldr	r0, [r7, #4]
 8010358:	4798      	blx	r3
}
 801035a:	bf00      	nop
 801035c:	3708      	adds	r7, #8
 801035e:	46bd      	mov	sp, r7
 8010360:	bd80      	pop	{r7, pc}
 8010362:	bf00      	nop
 8010364:	20001c3c 	.word	0x20001c3c
 8010368:	20001c7c 	.word	0x20001c7c
 801036c:	20001c50 	.word	0x20001c50
 8010370:	20001c54 	.word	0x20001c54

08010374 <UTIL_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
 8010374:	b480      	push	{r7}
 8010376:	b083      	sub	sp, #12
 8010378:	af00      	add	r7, sp, #0
 801037a:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
 801037c:	4b06      	ldr	r3, [pc, #24]	@ (8010398 <UTIL_LCD_SetTextColor+0x24>)
 801037e:	68db      	ldr	r3, [r3, #12]
 8010380:	4a05      	ldr	r2, [pc, #20]	@ (8010398 <UTIL_LCD_SetTextColor+0x24>)
 8010382:	015b      	lsls	r3, r3, #5
 8010384:	4413      	add	r3, r2
 8010386:	687a      	ldr	r2, [r7, #4]
 8010388:	601a      	str	r2, [r3, #0]
}
 801038a:	bf00      	nop
 801038c:	370c      	adds	r7, #12
 801038e:	46bd      	mov	sp, r7
 8010390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010394:	4770      	bx	lr
 8010396:	bf00      	nop
 8010398:	20001c3c 	.word	0x20001c3c

0801039c <UTIL_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
 801039c:	b480      	push	{r7}
 801039e:	b083      	sub	sp, #12
 80103a0:	af00      	add	r7, sp, #0
 80103a2:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
 80103a4:	4b06      	ldr	r3, [pc, #24]	@ (80103c0 <UTIL_LCD_SetBackColor+0x24>)
 80103a6:	68db      	ldr	r3, [r3, #12]
 80103a8:	4a05      	ldr	r2, [pc, #20]	@ (80103c0 <UTIL_LCD_SetBackColor+0x24>)
 80103aa:	015b      	lsls	r3, r3, #5
 80103ac:	4413      	add	r3, r2
 80103ae:	3304      	adds	r3, #4
 80103b0:	687a      	ldr	r2, [r7, #4]
 80103b2:	601a      	str	r2, [r3, #0]
}
 80103b4:	bf00      	nop
 80103b6:	370c      	adds	r7, #12
 80103b8:	46bd      	mov	sp, r7
 80103ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103be:	4770      	bx	lr
 80103c0:	20001c3c 	.word	0x20001c3c

080103c4 <UTIL_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
 80103c4:	b480      	push	{r7}
 80103c6:	b083      	sub	sp, #12
 80103c8:	af00      	add	r7, sp, #0
 80103ca:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
 80103cc:	4b06      	ldr	r3, [pc, #24]	@ (80103e8 <UTIL_LCD_SetFont+0x24>)
 80103ce:	68db      	ldr	r3, [r3, #12]
 80103d0:	4a05      	ldr	r2, [pc, #20]	@ (80103e8 <UTIL_LCD_SetFont+0x24>)
 80103d2:	015b      	lsls	r3, r3, #5
 80103d4:	4413      	add	r3, r2
 80103d6:	3308      	adds	r3, #8
 80103d8:	687a      	ldr	r2, [r7, #4]
 80103da:	601a      	str	r2, [r3, #0]
}
 80103dc:	bf00      	nop
 80103de:	370c      	adds	r7, #12
 80103e0:	46bd      	mov	sp, r7
 80103e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e6:	4770      	bx	lr
 80103e8:	20001c3c 	.word	0x20001c3c

080103ec <UTIL_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *UTIL_LCD_GetFont(void)
{
 80103ec:	b480      	push	{r7}
 80103ee:	af00      	add	r7, sp, #0
  return DrawProp[DrawProp->LcdLayer].pFont;
 80103f0:	4b05      	ldr	r3, [pc, #20]	@ (8010408 <UTIL_LCD_GetFont+0x1c>)
 80103f2:	68db      	ldr	r3, [r3, #12]
 80103f4:	4a04      	ldr	r2, [pc, #16]	@ (8010408 <UTIL_LCD_GetFont+0x1c>)
 80103f6:	015b      	lsls	r3, r3, #5
 80103f8:	4413      	add	r3, r2
 80103fa:	3308      	adds	r3, #8
 80103fc:	681b      	ldr	r3, [r3, #0]
}
 80103fe:	4618      	mov	r0, r3
 8010400:	46bd      	mov	sp, r7
 8010402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010406:	4770      	bx	lr
 8010408:	20001c3c 	.word	0x20001c3c

0801040c <UTIL_LCD_FillRGBRect>:
  * @param  Xpos    X position
  * @param  Ypos    Y position
  * @param  Length  Line length
  */
void UTIL_LCD_FillRGBRect(uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 801040c:	b590      	push	{r4, r7, lr}
 801040e:	b087      	sub	sp, #28
 8010410:	af02      	add	r7, sp, #8
 8010412:	60f8      	str	r0, [r7, #12]
 8010414:	60b9      	str	r1, [r7, #8]
 8010416:	607a      	str	r2, [r7, #4]
 8010418:	603b      	str	r3, [r7, #0]
  /* Write RGB rectangle data */
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 801041a:	4b08      	ldr	r3, [pc, #32]	@ (801043c <UTIL_LCD_FillRGBRect+0x30>)
 801041c:	685c      	ldr	r4, [r3, #4]
 801041e:	4b08      	ldr	r3, [pc, #32]	@ (8010440 <UTIL_LCD_FillRGBRect+0x34>)
 8010420:	6918      	ldr	r0, [r3, #16]
 8010422:	6a3b      	ldr	r3, [r7, #32]
 8010424:	9301      	str	r3, [sp, #4]
 8010426:	683b      	ldr	r3, [r7, #0]
 8010428:	9300      	str	r3, [sp, #0]
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	68ba      	ldr	r2, [r7, #8]
 801042e:	68f9      	ldr	r1, [r7, #12]
 8010430:	47a0      	blx	r4
}
 8010432:	bf00      	nop
 8010434:	3714      	adds	r7, #20
 8010436:	46bd      	mov	sp, r7
 8010438:	bd90      	pop	{r4, r7, pc}
 801043a:	bf00      	nop
 801043c:	20001c7c 	.word	0x20001c7c
 8010440:	20001c3c 	.word	0x20001c3c

08010444 <UTIL_LCD_DisplayChar>:
  * @param  Ypos Line where to display the character shape.
  * @param  Ascii Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void UTIL_LCD_DisplayChar(uint32_t Xpos, uint32_t Ypos, uint8_t Ascii)
{
 8010444:	b580      	push	{r7, lr}
 8010446:	b084      	sub	sp, #16
 8010448:	af00      	add	r7, sp, #0
 801044a:	60f8      	str	r0, [r7, #12]
 801044c:	60b9      	str	r1, [r7, #8]
 801044e:	4613      	mov	r3, r2
 8010450:	71fb      	strb	r3, [r7, #7]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 8010452:	4b16      	ldr	r3, [pc, #88]	@ (80104ac <UTIL_LCD_DisplayChar+0x68>)
 8010454:	68db      	ldr	r3, [r3, #12]
 8010456:	4a15      	ldr	r2, [pc, #84]	@ (80104ac <UTIL_LCD_DisplayChar+0x68>)
 8010458:	015b      	lsls	r3, r3, #5
 801045a:	4413      	add	r3, r2
 801045c:	3308      	adds	r3, #8
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	681a      	ldr	r2, [r3, #0]
 8010462:	79fb      	ldrb	r3, [r7, #7]
 8010464:	3b20      	subs	r3, #32
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 8010466:	4911      	ldr	r1, [pc, #68]	@ (80104ac <UTIL_LCD_DisplayChar+0x68>)
 8010468:	68c9      	ldr	r1, [r1, #12]
 801046a:	4810      	ldr	r0, [pc, #64]	@ (80104ac <UTIL_LCD_DisplayChar+0x68>)
 801046c:	0149      	lsls	r1, r1, #5
 801046e:	4401      	add	r1, r0
 8010470:	3108      	adds	r1, #8
 8010472:	6809      	ldr	r1, [r1, #0]
 8010474:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 8010476:	fb03 f101 	mul.w	r1, r3, r1
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 801047a:	4b0c      	ldr	r3, [pc, #48]	@ (80104ac <UTIL_LCD_DisplayChar+0x68>)
 801047c:	68db      	ldr	r3, [r3, #12]
 801047e:	480b      	ldr	r0, [pc, #44]	@ (80104ac <UTIL_LCD_DisplayChar+0x68>)
 8010480:	015b      	lsls	r3, r3, #5
 8010482:	4403      	add	r3, r0
 8010484:	3308      	adds	r3, #8
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	889b      	ldrh	r3, [r3, #4]
 801048a:	3307      	adds	r3, #7
 801048c:	2b00      	cmp	r3, #0
 801048e:	da00      	bge.n	8010492 <UTIL_LCD_DisplayChar+0x4e>
 8010490:	3307      	adds	r3, #7
 8010492:	10db      	asrs	r3, r3, #3
 8010494:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 8010498:	4413      	add	r3, r2
 801049a:	461a      	mov	r2, r3
 801049c:	68b9      	ldr	r1, [r7, #8]
 801049e:	68f8      	ldr	r0, [r7, #12]
 80104a0:	f000 f8b4 	bl	801060c <DrawChar>
}
 80104a4:	bf00      	nop
 80104a6:	3710      	adds	r7, #16
 80104a8:	46bd      	mov	sp, r7
 80104aa:	bd80      	pop	{r7, pc}
 80104ac:	20001c3c 	.word	0x20001c3c

080104b0 <UTIL_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void UTIL_LCD_DisplayStringAt(uint32_t Xpos, uint32_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 80104b0:	b580      	push	{r7, lr}
 80104b2:	b08a      	sub	sp, #40	@ 0x28
 80104b4:	af00      	add	r7, sp, #0
 80104b6:	60f8      	str	r0, [r7, #12]
 80104b8:	60b9      	str	r1, [r7, #8]
 80104ba:	607a      	str	r2, [r7, #4]
 80104bc:	70fb      	strb	r3, [r7, #3]
  uint32_t refcolumn = 1, i = 0;
 80104be:	2301      	movs	r3, #1
 80104c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80104c2:	2300      	movs	r3, #0
 80104c4:	623b      	str	r3, [r7, #32]
  uint32_t size = 0, xsize = 0;
 80104c6:	2300      	movs	r3, #0
 80104c8:	61fb      	str	r3, [r7, #28]
 80104ca:	2300      	movs	r3, #0
 80104cc:	617b      	str	r3, [r7, #20]
  uint8_t  *ptr = Text;
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	61bb      	str	r3, [r7, #24]

  /* Get the text size */
  while (*ptr++) size ++ ;
 80104d2:	e002      	b.n	80104da <UTIL_LCD_DisplayStringAt+0x2a>
 80104d4:	69fb      	ldr	r3, [r7, #28]
 80104d6:	3301      	adds	r3, #1
 80104d8:	61fb      	str	r3, [r7, #28]
 80104da:	69bb      	ldr	r3, [r7, #24]
 80104dc:	1c5a      	adds	r2, r3, #1
 80104de:	61ba      	str	r2, [r7, #24]
 80104e0:	781b      	ldrb	r3, [r3, #0]
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d1f6      	bne.n	80104d4 <UTIL_LCD_DisplayStringAt+0x24>

  /* Characters number per line */
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
 80104e6:	4b48      	ldr	r3, [pc, #288]	@ (8010608 <UTIL_LCD_DisplayStringAt+0x158>)
 80104e8:	695b      	ldr	r3, [r3, #20]
 80104ea:	4a47      	ldr	r2, [pc, #284]	@ (8010608 <UTIL_LCD_DisplayStringAt+0x158>)
 80104ec:	68d2      	ldr	r2, [r2, #12]
 80104ee:	4946      	ldr	r1, [pc, #280]	@ (8010608 <UTIL_LCD_DisplayStringAt+0x158>)
 80104f0:	0152      	lsls	r2, r2, #5
 80104f2:	440a      	add	r2, r1
 80104f4:	3208      	adds	r2, #8
 80104f6:	6812      	ldr	r2, [r2, #0]
 80104f8:	8892      	ldrh	r2, [r2, #4]
 80104fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80104fe:	617b      	str	r3, [r7, #20]

  switch (Mode)
 8010500:	78fb      	ldrb	r3, [r7, #3]
 8010502:	2b03      	cmp	r3, #3
 8010504:	d018      	beq.n	8010538 <UTIL_LCD_DisplayStringAt+0x88>
 8010506:	2b03      	cmp	r3, #3
 8010508:	dc2a      	bgt.n	8010560 <UTIL_LCD_DisplayStringAt+0xb0>
 801050a:	2b01      	cmp	r3, #1
 801050c:	d002      	beq.n	8010514 <UTIL_LCD_DisplayStringAt+0x64>
 801050e:	2b02      	cmp	r3, #2
 8010510:	d015      	beq.n	801053e <UTIL_LCD_DisplayStringAt+0x8e>
 8010512:	e025      	b.n	8010560 <UTIL_LCD_DisplayStringAt+0xb0>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
 8010514:	697a      	ldr	r2, [r7, #20]
 8010516:	69fb      	ldr	r3, [r7, #28]
 8010518:	1ad3      	subs	r3, r2, r3
 801051a:	4a3b      	ldr	r2, [pc, #236]	@ (8010608 <UTIL_LCD_DisplayStringAt+0x158>)
 801051c:	68d2      	ldr	r2, [r2, #12]
 801051e:	493a      	ldr	r1, [pc, #232]	@ (8010608 <UTIL_LCD_DisplayStringAt+0x158>)
 8010520:	0152      	lsls	r2, r2, #5
 8010522:	440a      	add	r2, r1
 8010524:	3208      	adds	r2, #8
 8010526:	6812      	ldr	r2, [r2, #0]
 8010528:	8892      	ldrh	r2, [r2, #4]
 801052a:	fb02 f303 	mul.w	r3, r2, r3
 801052e:	085b      	lsrs	r3, r3, #1
 8010530:	68fa      	ldr	r2, [r7, #12]
 8010532:	4413      	add	r3, r2
 8010534:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8010536:	e016      	b.n	8010566 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 801053c:	e013      	b.n	8010566 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
 801053e:	697a      	ldr	r2, [r7, #20]
 8010540:	69fb      	ldr	r3, [r7, #28]
 8010542:	1ad3      	subs	r3, r2, r3
 8010544:	4a30      	ldr	r2, [pc, #192]	@ (8010608 <UTIL_LCD_DisplayStringAt+0x158>)
 8010546:	68d2      	ldr	r2, [r2, #12]
 8010548:	492f      	ldr	r1, [pc, #188]	@ (8010608 <UTIL_LCD_DisplayStringAt+0x158>)
 801054a:	0152      	lsls	r2, r2, #5
 801054c:	440a      	add	r2, r1
 801054e:	3208      	adds	r2, #8
 8010550:	6812      	ldr	r2, [r2, #0]
 8010552:	8892      	ldrh	r2, [r2, #4]
 8010554:	fb03 f202 	mul.w	r2, r3, r2
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	1ad3      	subs	r3, r2, r3
 801055c:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 801055e:	e002      	b.n	8010566 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  default:
    {
      refcolumn = Xpos;
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8010564:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8010566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010568:	2b00      	cmp	r3, #0
 801056a:	d003      	beq.n	8010574 <UTIL_LCD_DisplayStringAt+0xc4>
 801056c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801056e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010572:	d31b      	bcc.n	80105ac <UTIL_LCD_DisplayStringAt+0xfc>
  {
    refcolumn = 1;
 8010574:	2301      	movs	r3, #1
 8010576:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 8010578:	e018      	b.n	80105ac <UTIL_LCD_DisplayStringAt+0xfc>
  {
    /* Display one character on LCD */
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	781b      	ldrb	r3, [r3, #0]
 801057e:	461a      	mov	r2, r3
 8010580:	68b9      	ldr	r1, [r7, #8]
 8010582:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010584:	f7ff ff5e 	bl	8010444 <UTIL_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 8010588:	4b1f      	ldr	r3, [pc, #124]	@ (8010608 <UTIL_LCD_DisplayStringAt+0x158>)
 801058a:	68db      	ldr	r3, [r3, #12]
 801058c:	4a1e      	ldr	r2, [pc, #120]	@ (8010608 <UTIL_LCD_DisplayStringAt+0x158>)
 801058e:	015b      	lsls	r3, r3, #5
 8010590:	4413      	add	r3, r2
 8010592:	3308      	adds	r3, #8
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	889b      	ldrh	r3, [r3, #4]
 8010598:	461a      	mov	r2, r3
 801059a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801059c:	4413      	add	r3, r2
 801059e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Point on the next character */
    Text++;
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	3301      	adds	r3, #1
 80105a4:	607b      	str	r3, [r7, #4]
    i++;
 80105a6:	6a3b      	ldr	r3, [r7, #32]
 80105a8:	3301      	adds	r3, #1
 80105aa:	623b      	str	r3, [r7, #32]
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	781b      	ldrb	r3, [r3, #0]
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	bf14      	ite	ne
 80105b4:	2301      	movne	r3, #1
 80105b6:	2300      	moveq	r3, #0
 80105b8:	b2da      	uxtb	r2, r3
 80105ba:	4b13      	ldr	r3, [pc, #76]	@ (8010608 <UTIL_LCD_DisplayStringAt+0x158>)
 80105bc:	6959      	ldr	r1, [r3, #20]
 80105be:	4b12      	ldr	r3, [pc, #72]	@ (8010608 <UTIL_LCD_DisplayStringAt+0x158>)
 80105c0:	68db      	ldr	r3, [r3, #12]
 80105c2:	4811      	ldr	r0, [pc, #68]	@ (8010608 <UTIL_LCD_DisplayStringAt+0x158>)
 80105c4:	015b      	lsls	r3, r3, #5
 80105c6:	4403      	add	r3, r0
 80105c8:	3308      	adds	r3, #8
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	889b      	ldrh	r3, [r3, #4]
 80105ce:	4618      	mov	r0, r3
 80105d0:	6a3b      	ldr	r3, [r7, #32]
 80105d2:	fb00 f303 	mul.w	r3, r0, r3
 80105d6:	1acb      	subs	r3, r1, r3
 80105d8:	b29b      	uxth	r3, r3
 80105da:	490b      	ldr	r1, [pc, #44]	@ (8010608 <UTIL_LCD_DisplayStringAt+0x158>)
 80105dc:	68c9      	ldr	r1, [r1, #12]
 80105de:	480a      	ldr	r0, [pc, #40]	@ (8010608 <UTIL_LCD_DisplayStringAt+0x158>)
 80105e0:	0149      	lsls	r1, r1, #5
 80105e2:	4401      	add	r1, r0
 80105e4:	3108      	adds	r1, #8
 80105e6:	6809      	ldr	r1, [r1, #0]
 80105e8:	8889      	ldrh	r1, [r1, #4]
 80105ea:	428b      	cmp	r3, r1
 80105ec:	bf2c      	ite	cs
 80105ee:	2301      	movcs	r3, #1
 80105f0:	2300      	movcc	r3, #0
 80105f2:	b2db      	uxtb	r3, r3
 80105f4:	4013      	ands	r3, r2
 80105f6:	b2db      	uxtb	r3, r3
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d1be      	bne.n	801057a <UTIL_LCD_DisplayStringAt+0xca>
  }
}
 80105fc:	bf00      	nop
 80105fe:	bf00      	nop
 8010600:	3728      	adds	r7, #40	@ 0x28
 8010602:	46bd      	mov	sp, r7
 8010604:	bd80      	pop	{r7, pc}
 8010606:	bf00      	nop
 8010608:	20001c3c 	.word	0x20001c3c

0801060c <DrawChar>:
  * @param  Xpos  Line where to display the character shape
  * @param  Ypos  Start column address
  * @param  pData Pointer to the character data
  */
static void DrawChar(uint32_t Xpos, uint32_t Ypos, const uint8_t *pData)
{
 801060c:	b580      	push	{r7, lr}
 801060e:	b0b2      	sub	sp, #200	@ 0xc8
 8010610:	af02      	add	r7, sp, #8
 8010612:	60f8      	str	r0, [r7, #12]
 8010614:	60b9      	str	r1, [r7, #8]
 8010616:	607a      	str	r2, [r7, #4]
  uint32_t i = 0, j = 0, offset;
 8010618:	2300      	movs	r3, #0
 801061a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 801061e:	2300      	movs	r3, #0
 8010620:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t height, width;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[DrawProp->LcdLayer].pFont->Height;
 8010624:	4ba5      	ldr	r3, [pc, #660]	@ (80108bc <DrawChar+0x2b0>)
 8010626:	68db      	ldr	r3, [r3, #12]
 8010628:	4aa4      	ldr	r2, [pc, #656]	@ (80108bc <DrawChar+0x2b0>)
 801062a:	015b      	lsls	r3, r3, #5
 801062c:	4413      	add	r3, r2
 801062e:	3308      	adds	r3, #8
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	88db      	ldrh	r3, [r3, #6]
 8010634:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
 8010638:	4ba0      	ldr	r3, [pc, #640]	@ (80108bc <DrawChar+0x2b0>)
 801063a:	68db      	ldr	r3, [r3, #12]
 801063c:	4a9f      	ldr	r2, [pc, #636]	@ (80108bc <DrawChar+0x2b0>)
 801063e:	015b      	lsls	r3, r3, #5
 8010640:	4413      	add	r3, r2
 8010642:	3308      	adds	r3, #8
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	889b      	ldrh	r3, [r3, #4]
 8010648:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint16_t rgb565[24];
  uint32_t argb8888[24];

  offset =  8 *((width + 7)/8) -  width ;
 801064c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010650:	3307      	adds	r3, #7
 8010652:	f023 0207 	bic.w	r2, r3, #7
 8010656:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801065a:	1ad3      	subs	r3, r2, r3
 801065c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  for(i = 0; i < height; i++)
 8010660:	2300      	movs	r3, #0
 8010662:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8010666:	e11c      	b.n	80108a2 <DrawChar+0x296>
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
 8010668:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801066c:	3307      	adds	r3, #7
 801066e:	08db      	lsrs	r3, r3, #3
 8010670:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8010674:	fb02 f303 	mul.w	r3, r2, r3
 8010678:	687a      	ldr	r2, [r7, #4]
 801067a:	4413      	add	r3, r2
 801067c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

    switch(((width + 7)/8))
 8010680:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010684:	3307      	adds	r3, #7
 8010686:	08db      	lsrs	r3, r3, #3
 8010688:	2b01      	cmp	r3, #1
 801068a:	d002      	beq.n	8010692 <DrawChar+0x86>
 801068c:	2b02      	cmp	r3, #2
 801068e:	d006      	beq.n	801069e <DrawChar+0x92>
 8010690:	e011      	b.n	80106b6 <DrawChar+0xaa>
    {

    case 1:
      line =  pchar[0];
 8010692:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8010696:	781b      	ldrb	r3, [r3, #0]
 8010698:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
 801069c:	e01d      	b.n	80106da <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 801069e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80106a2:	781b      	ldrb	r3, [r3, #0]
 80106a4:	021b      	lsls	r3, r3, #8
 80106a6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80106aa:	3201      	adds	r2, #1
 80106ac:	7812      	ldrb	r2, [r2, #0]
 80106ae:	4313      	orrs	r3, r2
 80106b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
 80106b4:	e011      	b.n	80106da <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 80106b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80106ba:	781b      	ldrb	r3, [r3, #0]
 80106bc:	041a      	lsls	r2, r3, #16
 80106be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80106c2:	3301      	adds	r3, #1
 80106c4:	781b      	ldrb	r3, [r3, #0]
 80106c6:	021b      	lsls	r3, r3, #8
 80106c8:	4313      	orrs	r3, r2
 80106ca:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80106ce:	3202      	adds	r2, #2
 80106d0:	7812      	ldrb	r2, [r2, #0]
 80106d2:	4313      	orrs	r3, r2
 80106d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
 80106d8:	bf00      	nop
    }

    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 80106da:	4b78      	ldr	r3, [pc, #480]	@ (80108bc <DrawChar+0x2b0>)
 80106dc:	68db      	ldr	r3, [r3, #12]
 80106de:	4a77      	ldr	r2, [pc, #476]	@ (80108bc <DrawChar+0x2b0>)
 80106e0:	015b      	lsls	r3, r3, #5
 80106e2:	4413      	add	r3, r2
 80106e4:	331c      	adds	r3, #28
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	2b02      	cmp	r3, #2
 80106ea:	f040 808c 	bne.w	8010806 <DrawChar+0x1fa>
    {
      for (j = 0; j < width; j++)
 80106ee:	2300      	movs	r3, #0
 80106f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80106f4:	e074      	b.n	80107e0 <DrawChar+0x1d4>
      {
        if(line & (1 << (width- j + offset- 1)))
 80106f6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80106fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80106fe:	1ad2      	subs	r2, r2, r3
 8010700:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8010704:	4413      	add	r3, r2
 8010706:	3b01      	subs	r3, #1
 8010708:	2201      	movs	r2, #1
 801070a:	fa02 f303 	lsl.w	r3, r2, r3
 801070e:	461a      	mov	r2, r3
 8010710:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8010714:	4013      	ands	r3, r2
 8010716:	2b00      	cmp	r3, #0
 8010718:	d02d      	beq.n	8010776 <DrawChar+0x16a>
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
 801071a:	4b68      	ldr	r3, [pc, #416]	@ (80108bc <DrawChar+0x2b0>)
 801071c:	68db      	ldr	r3, [r3, #12]
 801071e:	4a67      	ldr	r2, [pc, #412]	@ (80108bc <DrawChar+0x2b0>)
 8010720:	015b      	lsls	r3, r3, #5
 8010722:	4413      	add	r3, r2
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	08db      	lsrs	r3, r3, #3
 8010728:	b29b      	uxth	r3, r3
 801072a:	f003 031f 	and.w	r3, r3, #31
 801072e:	b29a      	uxth	r2, r3
 8010730:	4b62      	ldr	r3, [pc, #392]	@ (80108bc <DrawChar+0x2b0>)
 8010732:	68db      	ldr	r3, [r3, #12]
 8010734:	4961      	ldr	r1, [pc, #388]	@ (80108bc <DrawChar+0x2b0>)
 8010736:	015b      	lsls	r3, r3, #5
 8010738:	440b      	add	r3, r1
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	0a9b      	lsrs	r3, r3, #10
 801073e:	b29b      	uxth	r3, r3
 8010740:	015b      	lsls	r3, r3, #5
 8010742:	b29b      	uxth	r3, r3
 8010744:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8010748:	b29b      	uxth	r3, r3
 801074a:	4313      	orrs	r3, r2
 801074c:	b29a      	uxth	r2, r3
 801074e:	4b5b      	ldr	r3, [pc, #364]	@ (80108bc <DrawChar+0x2b0>)
 8010750:	68db      	ldr	r3, [r3, #12]
 8010752:	495a      	ldr	r1, [pc, #360]	@ (80108bc <DrawChar+0x2b0>)
 8010754:	015b      	lsls	r3, r3, #5
 8010756:	440b      	add	r3, r1
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	0cdb      	lsrs	r3, r3, #19
 801075c:	b29b      	uxth	r3, r3
 801075e:	02db      	lsls	r3, r3, #11
 8010760:	b29b      	uxth	r3, r3
 8010762:	4313      	orrs	r3, r2
 8010764:	b29a      	uxth	r2, r3
 8010766:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801076a:	005b      	lsls	r3, r3, #1
 801076c:	33c0      	adds	r3, #192	@ 0xc0
 801076e:	443b      	add	r3, r7
 8010770:	f823 2c4c 	strh.w	r2, [r3, #-76]
 8010774:	e02f      	b.n	80107d6 <DrawChar+0x1ca>
        }
        else
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
 8010776:	4b51      	ldr	r3, [pc, #324]	@ (80108bc <DrawChar+0x2b0>)
 8010778:	68db      	ldr	r3, [r3, #12]
 801077a:	4a50      	ldr	r2, [pc, #320]	@ (80108bc <DrawChar+0x2b0>)
 801077c:	015b      	lsls	r3, r3, #5
 801077e:	4413      	add	r3, r2
 8010780:	3304      	adds	r3, #4
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	08db      	lsrs	r3, r3, #3
 8010786:	b29b      	uxth	r3, r3
 8010788:	f003 031f 	and.w	r3, r3, #31
 801078c:	b29a      	uxth	r2, r3
 801078e:	4b4b      	ldr	r3, [pc, #300]	@ (80108bc <DrawChar+0x2b0>)
 8010790:	68db      	ldr	r3, [r3, #12]
 8010792:	494a      	ldr	r1, [pc, #296]	@ (80108bc <DrawChar+0x2b0>)
 8010794:	015b      	lsls	r3, r3, #5
 8010796:	440b      	add	r3, r1
 8010798:	3304      	adds	r3, #4
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	0a9b      	lsrs	r3, r3, #10
 801079e:	b29b      	uxth	r3, r3
 80107a0:	015b      	lsls	r3, r3, #5
 80107a2:	b29b      	uxth	r3, r3
 80107a4:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80107a8:	b29b      	uxth	r3, r3
 80107aa:	4313      	orrs	r3, r2
 80107ac:	b29a      	uxth	r2, r3
 80107ae:	4b43      	ldr	r3, [pc, #268]	@ (80108bc <DrawChar+0x2b0>)
 80107b0:	68db      	ldr	r3, [r3, #12]
 80107b2:	4942      	ldr	r1, [pc, #264]	@ (80108bc <DrawChar+0x2b0>)
 80107b4:	015b      	lsls	r3, r3, #5
 80107b6:	440b      	add	r3, r1
 80107b8:	3304      	adds	r3, #4
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	0cdb      	lsrs	r3, r3, #19
 80107be:	b29b      	uxth	r3, r3
 80107c0:	02db      	lsls	r3, r3, #11
 80107c2:	b29b      	uxth	r3, r3
 80107c4:	4313      	orrs	r3, r2
 80107c6:	b29a      	uxth	r2, r3
 80107c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80107cc:	005b      	lsls	r3, r3, #1
 80107ce:	33c0      	adds	r3, #192	@ 0xc0
 80107d0:	443b      	add	r3, r7
 80107d2:	f823 2c4c 	strh.w	r2, [r3, #-76]
      for (j = 0; j < width; j++)
 80107d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80107da:	3301      	adds	r3, #1
 80107dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80107e0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80107e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80107e8:	429a      	cmp	r2, r3
 80107ea:	d384      	bcc.n	80106f6 <DrawChar+0xea>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&rgb565[0], width, 1);
 80107ec:	68b9      	ldr	r1, [r7, #8]
 80107ee:	1c4b      	adds	r3, r1, #1
 80107f0:	60bb      	str	r3, [r7, #8]
 80107f2:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 80107f6:	2301      	movs	r3, #1
 80107f8:	9300      	str	r3, [sp, #0]
 80107fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80107fe:	68f8      	ldr	r0, [r7, #12]
 8010800:	f7ff fe04 	bl	801040c <UTIL_LCD_FillRGBRect>
 8010804:	e048      	b.n	8010898 <DrawChar+0x28c>
    }
    else
    {
      for (j = 0; j < width; j++)
 8010806:	2300      	movs	r3, #0
 8010808:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801080c:	e032      	b.n	8010874 <DrawChar+0x268>
      {
        if(line & (1 << (width- j + offset- 1)))
 801080e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8010812:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8010816:	1ad2      	subs	r2, r2, r3
 8010818:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801081c:	4413      	add	r3, r2
 801081e:	3b01      	subs	r3, #1
 8010820:	2201      	movs	r2, #1
 8010822:	fa02 f303 	lsl.w	r3, r2, r3
 8010826:	461a      	mov	r2, r3
 8010828:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801082c:	4013      	ands	r3, r2
 801082e:	2b00      	cmp	r3, #0
 8010830:	d00d      	beq.n	801084e <DrawChar+0x242>
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
 8010832:	4b22      	ldr	r3, [pc, #136]	@ (80108bc <DrawChar+0x2b0>)
 8010834:	68db      	ldr	r3, [r3, #12]
 8010836:	4a21      	ldr	r2, [pc, #132]	@ (80108bc <DrawChar+0x2b0>)
 8010838:	015b      	lsls	r3, r3, #5
 801083a:	4413      	add	r3, r2
 801083c:	681a      	ldr	r2, [r3, #0]
 801083e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8010842:	009b      	lsls	r3, r3, #2
 8010844:	33c0      	adds	r3, #192	@ 0xc0
 8010846:	443b      	add	r3, r7
 8010848:	f843 2cac 	str.w	r2, [r3, #-172]
 801084c:	e00d      	b.n	801086a <DrawChar+0x25e>
        }
        else
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
 801084e:	4b1b      	ldr	r3, [pc, #108]	@ (80108bc <DrawChar+0x2b0>)
 8010850:	68db      	ldr	r3, [r3, #12]
 8010852:	4a1a      	ldr	r2, [pc, #104]	@ (80108bc <DrawChar+0x2b0>)
 8010854:	015b      	lsls	r3, r3, #5
 8010856:	4413      	add	r3, r2
 8010858:	3304      	adds	r3, #4
 801085a:	681a      	ldr	r2, [r3, #0]
 801085c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8010860:	009b      	lsls	r3, r3, #2
 8010862:	33c0      	adds	r3, #192	@ 0xc0
 8010864:	443b      	add	r3, r7
 8010866:	f843 2cac 	str.w	r2, [r3, #-172]
      for (j = 0; j < width; j++)
 801086a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801086e:	3301      	adds	r3, #1
 8010870:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8010874:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8010878:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801087c:	429a      	cmp	r2, r3
 801087e:	d3c6      	bcc.n	801080e <DrawChar+0x202>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&argb8888[0], width, 1);
 8010880:	68b9      	ldr	r1, [r7, #8]
 8010882:	1c4b      	adds	r3, r1, #1
 8010884:	60bb      	str	r3, [r7, #8]
 8010886:	f107 0214 	add.w	r2, r7, #20
 801088a:	2301      	movs	r3, #1
 801088c:	9300      	str	r3, [sp, #0]
 801088e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010892:	68f8      	ldr	r0, [r7, #12]
 8010894:	f7ff fdba 	bl	801040c <UTIL_LCD_FillRGBRect>
  for(i = 0; i < height; i++)
 8010898:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801089c:	3301      	adds	r3, #1
 801089e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80108a2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80108a6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80108aa:	429a      	cmp	r2, r3
 80108ac:	f4ff aedc 	bcc.w	8010668 <DrawChar+0x5c>
    }
  }
}
 80108b0:	bf00      	nop
 80108b2:	bf00      	nop
 80108b4:	37c0      	adds	r7, #192	@ 0xc0
 80108b6:	46bd      	mov	sp, r7
 80108b8:	bd80      	pop	{r7, pc}
 80108ba:	bf00      	nop
 80108bc:	20001c3c 	.word	0x20001c3c

080108c0 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 80108c0:	b480      	push	{r7}
 80108c2:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 80108c4:	4b05      	ldr	r3, [pc, #20]	@ (80108dc <UTIL_LPM_Init+0x1c>)
 80108c6:	2200      	movs	r2, #0
 80108c8:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 80108ca:	4b05      	ldr	r3, [pc, #20]	@ (80108e0 <UTIL_LPM_Init+0x20>)
 80108cc:	2200      	movs	r2, #0
 80108ce:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 80108d0:	bf00      	nop
 80108d2:	46bd      	mov	sp, r7
 80108d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d8:	4770      	bx	lr
 80108da:	bf00      	nop
 80108dc:	20001ca8 	.word	0x20001ca8
 80108e0:	20001cac 	.word	0x20001cac

080108e4 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 80108e4:	b480      	push	{r7}
 80108e6:	b087      	sub	sp, #28
 80108e8:	af00      	add	r7, sp, #0
 80108ea:	6078      	str	r0, [r7, #4]
 80108ec:	460b      	mov	r3, r1
 80108ee:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80108f0:	f3ef 8310 	mrs	r3, PRIMASK
 80108f4:	613b      	str	r3, [r7, #16]
  return(result);
 80108f6:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 80108f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80108fa:	b672      	cpsid	i
}
 80108fc:	bf00      	nop
  
  switch(state)
 80108fe:	78fb      	ldrb	r3, [r7, #3]
 8010900:	2b00      	cmp	r3, #0
 8010902:	d008      	beq.n	8010916 <UTIL_LPM_SetOffMode+0x32>
 8010904:	2b01      	cmp	r3, #1
 8010906:	d10e      	bne.n	8010926 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8010908:	4b0d      	ldr	r3, [pc, #52]	@ (8010940 <UTIL_LPM_SetOffMode+0x5c>)
 801090a:	681a      	ldr	r2, [r3, #0]
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	4313      	orrs	r3, r2
 8010910:	4a0b      	ldr	r2, [pc, #44]	@ (8010940 <UTIL_LPM_SetOffMode+0x5c>)
 8010912:	6013      	str	r3, [r2, #0]
      break;
 8010914:	e008      	b.n	8010928 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	43da      	mvns	r2, r3
 801091a:	4b09      	ldr	r3, [pc, #36]	@ (8010940 <UTIL_LPM_SetOffMode+0x5c>)
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	4013      	ands	r3, r2
 8010920:	4a07      	ldr	r2, [pc, #28]	@ (8010940 <UTIL_LPM_SetOffMode+0x5c>)
 8010922:	6013      	str	r3, [r2, #0]
      break;
 8010924:	e000      	b.n	8010928 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8010926:	bf00      	nop
 8010928:	697b      	ldr	r3, [r7, #20]
 801092a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	f383 8810 	msr	PRIMASK, r3
}
 8010932:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8010934:	bf00      	nop
 8010936:	371c      	adds	r7, #28
 8010938:	46bd      	mov	sp, r7
 801093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801093e:	4770      	bx	lr
 8010940:	20001cac 	.word	0x20001cac

08010944 <UTIL_SEQ_Run>:
  * That is the reason why many variables that are used only in that function are declared static.
  * Note: These variables could have been declared static in the function.
  *
  */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8010944:	b580      	push	{r7, lr}
 8010946:	b094      	sub	sp, #80	@ 0x50
 8010948:	af00      	add	r7, sp, #0
 801094a:	6078      	str	r0, [r7, #4]
    /*
     * When this function is nested, the mask to be applied cannot be larger than the first call
     * The mask is always getting smaller and smaller
     * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
     */
    super_mask_backup = SuperMask;
 801094c:	4b89      	ldr	r3, [pc, #548]	@ (8010b74 <UTIL_SEQ_Run+0x230>)
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	62fb      	str	r3, [r7, #44]	@ 0x2c
    SuperMask &= Mask_bm;
 8010952:	4b88      	ldr	r3, [pc, #544]	@ (8010b74 <UTIL_SEQ_Run+0x230>)
 8010954:	681a      	ldr	r2, [r3, #0]
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	4013      	ands	r3, r2
 801095a:	4a86      	ldr	r2, [pc, #536]	@ (8010b74 <UTIL_SEQ_Run+0x230>)
 801095c:	6013      	str	r3, [r2, #0]
     * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
     * SuperMask that comes from UTIL_SEQ_Run
     * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
     * waiting task
     */
    local_taskset = TaskSet;
 801095e:	4b86      	ldr	r3, [pc, #536]	@ (8010b78 <UTIL_SEQ_Run+0x234>)
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	647b      	str	r3, [r7, #68]	@ 0x44
    local_evtset = EvtSet;
 8010964:	4b85      	ldr	r3, [pc, #532]	@ (8010b7c <UTIL_SEQ_Run+0x238>)
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	643b      	str	r3, [r7, #64]	@ 0x40
    local_taskmask = TaskMask;
 801096a:	4b85      	ldr	r3, [pc, #532]	@ (8010b80 <UTIL_SEQ_Run+0x23c>)
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    local_evtwaited =  EvtWaited;
 8010970:	4b84      	ldr	r3, [pc, #528]	@ (8010b84 <UTIL_SEQ_Run+0x240>)
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	63bb      	str	r3, [r7, #56]	@ 0x38
    while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8010976:	e112      	b.n	8010b9e <UTIL_SEQ_Run+0x25a>
    {
        counter = 0U;
 8010978:	2300      	movs	r3, #0
 801097a:	64fb      	str	r3, [r7, #76]	@ 0x4c
        /*
         * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
         * on the priority parameter given from UTIL_SEQ_SetTask()
         * The while loop is looking for a flag set from the highest priority maskr to the lower
         */
        while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801097c:	e002      	b.n	8010984 <UTIL_SEQ_Run+0x40>
        {
            counter++;
 801097e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010980:	3301      	adds	r3, #1
 8010982:	64fb      	str	r3, [r7, #76]	@ 0x4c
        while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8010984:	4a80      	ldr	r2, [pc, #512]	@ (8010b88 <UTIL_SEQ_Run+0x244>)
 8010986:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010988:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801098c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801098e:	401a      	ands	r2, r3
 8010990:	4b78      	ldr	r3, [pc, #480]	@ (8010b74 <UTIL_SEQ_Run+0x230>)
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	4013      	ands	r3, r2
 8010996:	2b00      	cmp	r3, #0
 8010998:	d0f1      	beq.n	801097e <UTIL_SEQ_Run+0x3a>
        }

        current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801099a:	4a7b      	ldr	r2, [pc, #492]	@ (8010b88 <UTIL_SEQ_Run+0x244>)
 801099c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801099e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80109a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80109a4:	401a      	ands	r2, r3
 80109a6:	4b73      	ldr	r3, [pc, #460]	@ (8010b74 <UTIL_SEQ_Run+0x230>)
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	4013      	ands	r3, r2
 80109ac:	64bb      	str	r3, [r7, #72]	@ 0x48
         * the round_robin mask
         *
         * In the check below, the round_robin mask is reinitialize in case all pending
         * tasks haven been executed at least once
         */
        if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 80109ae:	4a76      	ldr	r2, [pc, #472]	@ (8010b88 <UTIL_SEQ_Run+0x244>)
 80109b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80109b2:	00db      	lsls	r3, r3, #3
 80109b4:	4413      	add	r3, r2
 80109b6:	685a      	ldr	r2, [r3, #4]
 80109b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80109ba:	4013      	ands	r3, r2
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d106      	bne.n	80109ce <UTIL_SEQ_Run+0x8a>
        {
            TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 80109c0:	4a71      	ldr	r2, [pc, #452]	@ (8010b88 <UTIL_SEQ_Run+0x244>)
 80109c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80109c4:	00db      	lsls	r3, r3, #3
 80109c6:	4413      	add	r3, r2
 80109c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80109cc:	605a      	str	r2, [r3, #4]

        /*
         * Compute the Stack Startving List
         * This is the list of the task that have been set at least once minus the one that have been cleared ar least once
         */
        task_starving_list = TaskSet;
 80109ce:	4b6a      	ldr	r3, [pc, #424]	@ (8010b78 <UTIL_SEQ_Run+0x234>)
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	62bb      	str	r3, [r7, #40]	@ 0x28
         * Such situation shall not happen when evaluating task_starving_list
         * At any time, there should not be any bit reset in TaskPrio[counter].round_robin and reset in TaskClearList
         * It is correct with regard to the Sequencer Architecture to set in TaskClearList all tasks that are said to be executed from TaskPrio[counter].round_robin
         * This synchronizes both information before calculating the CurrentTaskIdx
         */
        TaskClearList |= (~TaskPrio[counter].round_robin);
 80109d4:	4a6c      	ldr	r2, [pc, #432]	@ (8010b88 <UTIL_SEQ_Run+0x244>)
 80109d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80109d8:	00db      	lsls	r3, r3, #3
 80109da:	4413      	add	r3, r2
 80109dc:	685b      	ldr	r3, [r3, #4]
 80109de:	43da      	mvns	r2, r3
 80109e0:	4b6a      	ldr	r3, [pc, #424]	@ (8010b8c <UTIL_SEQ_Run+0x248>)
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	4313      	orrs	r3, r2
 80109e6:	4a69      	ldr	r2, [pc, #420]	@ (8010b8c <UTIL_SEQ_Run+0x248>)
 80109e8:	6013      	str	r3, [r2, #0]

        task_starving_list &= (~TaskClearList);
 80109ea:	4b68      	ldr	r3, [pc, #416]	@ (8010b8c <UTIL_SEQ_Run+0x248>)
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	43db      	mvns	r3, r3
 80109f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80109f2:	4013      	ands	r3, r2
 80109f4:	62bb      	str	r3, [r7, #40]	@ 0x28

        /*
         * Consider first the starving list and update current_task_set accordingly
         */
        if ((task_starving_list & current_task_set) != 0U)
 80109f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80109f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80109fa:	4013      	ands	r3, r2
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d003      	beq.n	8010a08 <UTIL_SEQ_Run+0xc4>
        {
          current_task_set = (task_starving_list & current_task_set);
 8010a00:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a04:	4013      	ands	r3, r2
 8010a06:	64bb      	str	r3, [r7, #72]	@ 0x48
        }

        /*
         * Reinitialize the Starving List if required
         */
        if(task_starving_list == 0)
 8010a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d102      	bne.n	8010a14 <UTIL_SEQ_Run+0xd0>
        {
          TaskClearList = 0;
 8010a0e:	4b5f      	ldr	r3, [pc, #380]	@ (8010b8c <UTIL_SEQ_Run+0x248>)
 8010a10:	2200      	movs	r2, #0
 8010a12:	601a      	str	r2, [r3, #0]
        /*
         * Read the flag index of the task to be executed
         * Once the index is read, the associated task will be executed even though a higher priority stack is requested
         * before task execution.
         */
        CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8010a14:	4a5c      	ldr	r2, [pc, #368]	@ (8010b88 <UTIL_SEQ_Run+0x244>)
 8010a16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010a18:	00db      	lsls	r3, r3, #3
 8010a1a:	4413      	add	r3, r2
 8010a1c:	685a      	ldr	r2, [r3, #4]
 8010a1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010a20:	4013      	ands	r3, r2
 8010a22:	4618      	mov	r0, r3
 8010a24:	f000 fa43 	bl	8010eae <SEQ_BitPosition>
 8010a28:	4603      	mov	r3, r0
 8010a2a:	461a      	mov	r2, r3
 8010a2c:	4b58      	ldr	r3, [pc, #352]	@ (8010b90 <UTIL_SEQ_Run+0x24c>)
 8010a2e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010a30:	f3ef 8310 	mrs	r3, PRIMASK
 8010a34:	61fb      	str	r3, [r7, #28]
  return(result);
 8010a36:	69fb      	ldr	r3, [r7, #28]

        UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8010a38:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8010a3a:	b672      	cpsid	i
}
 8010a3c:	bf00      	nop
        /* remove from the list or pending task the one that has been selected to be executed */
        TaskSet &= ~(1U << CurrentTaskIdx);
 8010a3e:	4b54      	ldr	r3, [pc, #336]	@ (8010b90 <UTIL_SEQ_Run+0x24c>)
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	2201      	movs	r2, #1
 8010a44:	fa02 f303 	lsl.w	r3, r2, r3
 8010a48:	43da      	mvns	r2, r3
 8010a4a:	4b4b      	ldr	r3, [pc, #300]	@ (8010b78 <UTIL_SEQ_Run+0x234>)
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	4013      	ands	r3, r2
 8010a50:	4a49      	ldr	r2, [pc, #292]	@ (8010b78 <UTIL_SEQ_Run+0x234>)
 8010a52:	6013      	str	r3, [r2, #0]

        /*
         * remove from all priority mask the task that has been selected to be executed
         */
        for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8010a54:	2301      	movs	r3, #1
 8010a56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010a58:	e013      	b.n	8010a82 <UTIL_SEQ_Run+0x13e>
        {
          TaskPrio[counter - 1u].priority    &= ~(1U << CurrentTaskIdx);
 8010a5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010a5c:	3b01      	subs	r3, #1
 8010a5e:	4a4a      	ldr	r2, [pc, #296]	@ (8010b88 <UTIL_SEQ_Run+0x244>)
 8010a60:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8010a64:	4b4a      	ldr	r3, [pc, #296]	@ (8010b90 <UTIL_SEQ_Run+0x24c>)
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	2201      	movs	r2, #1
 8010a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8010a6e:	43da      	mvns	r2, r3
 8010a70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010a72:	3b01      	subs	r3, #1
 8010a74:	400a      	ands	r2, r1
 8010a76:	4944      	ldr	r1, [pc, #272]	@ (8010b88 <UTIL_SEQ_Run+0x244>)
 8010a78:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8010a7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010a7e:	3b01      	subs	r3, #1
 8010a80:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010a82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d1e8      	bne.n	8010a5a <UTIL_SEQ_Run+0x116>
 8010a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a8a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010a8c:	69bb      	ldr	r3, [r7, #24]
 8010a8e:	f383 8810 	msr	PRIMASK, r3
}
 8010a92:	bf00      	nop
        }
        UTIL_SEQ_EXIT_CRITICAL_SECTION( );

        UTIL_SEQ_PreTask(CurrentTaskIdx);
 8010a94:	4b3e      	ldr	r3, [pc, #248]	@ (8010b90 <UTIL_SEQ_Run+0x24c>)
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	4618      	mov	r0, r3
 8010a9a:	f000 f9e9 	bl	8010e70 <UTIL_SEQ_PreTask>

        /*
         * Check that function exists before calling it
         */
        if ((CurrentTaskIdx < UTIL_SEQ_CONF_TASK_NBR) && (TaskCb[CurrentTaskIdx] != NULL))
 8010a9e:	4b3c      	ldr	r3, [pc, #240]	@ (8010b90 <UTIL_SEQ_Run+0x24c>)
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	2b1f      	cmp	r3, #31
 8010aa4:	d878      	bhi.n	8010b98 <UTIL_SEQ_Run+0x254>
 8010aa6:	4b3a      	ldr	r3, [pc, #232]	@ (8010b90 <UTIL_SEQ_Run+0x24c>)
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	4a3a      	ldr	r2, [pc, #232]	@ (8010b94 <UTIL_SEQ_Run+0x250>)
 8010aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d071      	beq.n	8010b98 <UTIL_SEQ_Run+0x254>
        {
          /*
           * save the round-robin value to take into account the operation done in UTIL_SEQ_WaitEvt
           */
          for (uint32_t index = 0; index < UTIL_SEQ_CONF_PRIO_NBR; index++)
 8010ab4:	2300      	movs	r3, #0
 8010ab6:	637b      	str	r3, [r7, #52]	@ 0x34
 8010ab8:	e01e      	b.n	8010af8 <UTIL_SEQ_Run+0x1b4>
          {
            TaskPrio[index].round_robin &= ~(1U << CurrentTaskIdx);
 8010aba:	4a33      	ldr	r2, [pc, #204]	@ (8010b88 <UTIL_SEQ_Run+0x244>)
 8010abc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010abe:	00db      	lsls	r3, r3, #3
 8010ac0:	4413      	add	r3, r2
 8010ac2:	685a      	ldr	r2, [r3, #4]
 8010ac4:	4b32      	ldr	r3, [pc, #200]	@ (8010b90 <UTIL_SEQ_Run+0x24c>)
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	2101      	movs	r1, #1
 8010aca:	fa01 f303 	lsl.w	r3, r1, r3
 8010ace:	43db      	mvns	r3, r3
 8010ad0:	401a      	ands	r2, r3
 8010ad2:	492d      	ldr	r1, [pc, #180]	@ (8010b88 <UTIL_SEQ_Run+0x244>)
 8010ad4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010ad6:	00db      	lsls	r3, r3, #3
 8010ad8:	440b      	add	r3, r1
 8010ada:	605a      	str	r2, [r3, #4]
            round_robin[index] = TaskPrio[index].round_robin;
 8010adc:	4a2a      	ldr	r2, [pc, #168]	@ (8010b88 <UTIL_SEQ_Run+0x244>)
 8010ade:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010ae0:	00db      	lsls	r3, r3, #3
 8010ae2:	4413      	add	r3, r2
 8010ae4:	685a      	ldr	r2, [r3, #4]
 8010ae6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010ae8:	009b      	lsls	r3, r3, #2
 8010aea:	3350      	adds	r3, #80	@ 0x50
 8010aec:	443b      	add	r3, r7
 8010aee:	f843 2c44 	str.w	r2, [r3, #-68]
          for (uint32_t index = 0; index < UTIL_SEQ_CONF_PRIO_NBR; index++)
 8010af2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010af4:	3301      	adds	r3, #1
 8010af6:	637b      	str	r3, [r7, #52]	@ 0x34
 8010af8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d0dd      	beq.n	8010aba <UTIL_SEQ_Run+0x176>
          }

          /* Execute the task */
          TaskCb[CurrentTaskIdx]( );
 8010afe:	4b24      	ldr	r3, [pc, #144]	@ (8010b90 <UTIL_SEQ_Run+0x24c>)
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	4a24      	ldr	r2, [pc, #144]	@ (8010b94 <UTIL_SEQ_Run+0x250>)
 8010b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010b08:	4798      	blx	r3

          /*
           * restore the round-robin context
           */
          for (uint32_t index = 0; index < UTIL_SEQ_CONF_PRIO_NBR; index++)
 8010b0a:	2300      	movs	r3, #0
 8010b0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8010b0e:	e013      	b.n	8010b38 <UTIL_SEQ_Run+0x1f4>
          {
            TaskPrio[index].round_robin &= round_robin[index];
 8010b10:	4a1d      	ldr	r2, [pc, #116]	@ (8010b88 <UTIL_SEQ_Run+0x244>)
 8010b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b14:	00db      	lsls	r3, r3, #3
 8010b16:	4413      	add	r3, r2
 8010b18:	685a      	ldr	r2, [r3, #4]
 8010b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b1c:	009b      	lsls	r3, r3, #2
 8010b1e:	3350      	adds	r3, #80	@ 0x50
 8010b20:	443b      	add	r3, r7
 8010b22:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8010b26:	401a      	ands	r2, r3
 8010b28:	4917      	ldr	r1, [pc, #92]	@ (8010b88 <UTIL_SEQ_Run+0x244>)
 8010b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b2c:	00db      	lsls	r3, r3, #3
 8010b2e:	440b      	add	r3, r1
 8010b30:	605a      	str	r2, [r3, #4]
          for (uint32_t index = 0; index < UTIL_SEQ_CONF_PRIO_NBR; index++)
 8010b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b34:	3301      	adds	r3, #1
 8010b36:	633b      	str	r3, [r7, #48]	@ 0x30
 8010b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d0e8      	beq.n	8010b10 <UTIL_SEQ_Run+0x1cc>
          }

          UTIL_SEQ_PostTask(CurrentTaskIdx);
 8010b3e:	4b14      	ldr	r3, [pc, #80]	@ (8010b90 <UTIL_SEQ_Run+0x24c>)
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	4618      	mov	r0, r3
 8010b44:	f000 f99e 	bl	8010e84 <UTIL_SEQ_PostTask>

          local_taskset = TaskSet;
 8010b48:	4b0b      	ldr	r3, [pc, #44]	@ (8010b78 <UTIL_SEQ_Run+0x234>)
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	647b      	str	r3, [r7, #68]	@ 0x44
          local_evtset = EvtSet;
 8010b4e:	4b0b      	ldr	r3, [pc, #44]	@ (8010b7c <UTIL_SEQ_Run+0x238>)
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	643b      	str	r3, [r7, #64]	@ 0x40
          local_taskmask = TaskMask;
 8010b54:	4b0a      	ldr	r3, [pc, #40]	@ (8010b80 <UTIL_SEQ_Run+0x23c>)
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	63fb      	str	r3, [r7, #60]	@ 0x3c
          local_evtwaited = EvtWaited;
 8010b5a:	4b0a      	ldr	r3, [pc, #40]	@ (8010b84 <UTIL_SEQ_Run+0x240>)
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	63bb      	str	r3, [r7, #56]	@ 0x38

          /*
           * Update the two list for next round
           */
          TaskClearList |= (1U << CurrentTaskIdx);
 8010b60:	4b0b      	ldr	r3, [pc, #44]	@ (8010b90 <UTIL_SEQ_Run+0x24c>)
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	2201      	movs	r2, #1
 8010b66:	409a      	lsls	r2, r3
 8010b68:	4b08      	ldr	r3, [pc, #32]	@ (8010b8c <UTIL_SEQ_Run+0x248>)
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	4313      	orrs	r3, r2
 8010b6e:	4a07      	ldr	r2, [pc, #28]	@ (8010b8c <UTIL_SEQ_Run+0x248>)
 8010b70:	6013      	str	r3, [r2, #0]
 8010b72:	e014      	b.n	8010b9e <UTIL_SEQ_Run+0x25a>
 8010b74:	200000b8 	.word	0x200000b8
 8010b78:	20001cb0 	.word	0x20001cb0
 8010b7c:	20001cb4 	.word	0x20001cb4
 8010b80:	200000b4 	.word	0x200000b4
 8010b84:	20001cb8 	.word	0x20001cb8
 8010b88:	20001d40 	.word	0x20001d40
 8010b8c:	20001d48 	.word	0x20001d48
 8010b90:	20001cbc 	.word	0x20001cbc
 8010b94:	20001cc0 	.word	0x20001cc0
        else
        {
          /*
           * must never occurs, it means there is a warning in the system
           */
          UTIL_SEQ_CatchWarning(UTIL_SEQ_WARNING_INVALIDTASKID);
 8010b98:	2000      	movs	r0, #0
 8010b9a:	f000 f97d 	bl	8010e98 <UTIL_SEQ_CatchWarning>
    while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8010b9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010ba0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010ba2:	401a      	ands	r2, r3
 8010ba4:	4b22      	ldr	r3, [pc, #136]	@ (8010c30 <UTIL_SEQ_Run+0x2ec>)
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	4013      	ands	r3, r2
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d005      	beq.n	8010bba <UTIL_SEQ_Run+0x276>
 8010bae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010bb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bb2:	4013      	ands	r3, r2
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	f43f aedf 	beq.w	8010978 <UTIL_SEQ_Run+0x34>
        }
    }

    /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
    CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8010bba:	4b1e      	ldr	r3, [pc, #120]	@ (8010c34 <UTIL_SEQ_Run+0x2f0>)
 8010bbc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010bc0:	601a      	str	r2, [r3, #0]
    /* if a waited event is present, ignore the IDLE sequence */
    if ((local_evtset & EvtWaited)== 0U)
 8010bc2:	4b1d      	ldr	r3, [pc, #116]	@ (8010c38 <UTIL_SEQ_Run+0x2f4>)
 8010bc4:	681a      	ldr	r2, [r3, #0]
 8010bc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010bc8:	4013      	ands	r3, r2
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d129      	bne.n	8010c22 <UTIL_SEQ_Run+0x2de>
    {
        UTIL_SEQ_PreIdle( );
 8010bce:	f000 f941 	bl	8010e54 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010bd2:	f3ef 8310 	mrs	r3, PRIMASK
 8010bd6:	617b      	str	r3, [r7, #20]
  return(result);
 8010bd8:	697b      	ldr	r3, [r7, #20]

        UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8010bda:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8010bdc:	b672      	cpsid	i
}
 8010bde:	bf00      	nop
        local_taskset = TaskSet;
 8010be0:	4b16      	ldr	r3, [pc, #88]	@ (8010c3c <UTIL_SEQ_Run+0x2f8>)
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	647b      	str	r3, [r7, #68]	@ 0x44
        local_evtset = EvtSet;
 8010be6:	4b16      	ldr	r3, [pc, #88]	@ (8010c40 <UTIL_SEQ_Run+0x2fc>)
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	643b      	str	r3, [r7, #64]	@ 0x40
        local_taskmask = TaskMask;
 8010bec:	4b15      	ldr	r3, [pc, #84]	@ (8010c44 <UTIL_SEQ_Run+0x300>)
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8010bf2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010bf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010bf6:	401a      	ands	r2, r3
 8010bf8:	4b0d      	ldr	r3, [pc, #52]	@ (8010c30 <UTIL_SEQ_Run+0x2ec>)
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	4013      	ands	r3, r2
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d107      	bne.n	8010c12 <UTIL_SEQ_Run+0x2ce>
        {
            if ((local_evtset & EvtWaited)== 0U)
 8010c02:	4b0d      	ldr	r3, [pc, #52]	@ (8010c38 <UTIL_SEQ_Run+0x2f4>)
 8010c04:	681a      	ldr	r2, [r3, #0]
 8010c06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010c08:	4013      	ands	r3, r2
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d101      	bne.n	8010c12 <UTIL_SEQ_Run+0x2ce>
            {
                UTIL_SEQ_Idle( );
 8010c0e:	f7f0 fde6 	bl	80017de <UTIL_SEQ_Idle>
 8010c12:	6a3b      	ldr	r3, [r7, #32]
 8010c14:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010c16:	693b      	ldr	r3, [r7, #16]
 8010c18:	f383 8810 	msr	PRIMASK, r3
}
 8010c1c:	bf00      	nop
            }
        }
        UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

        UTIL_SEQ_PostIdle( );
 8010c1e:	f000 f920 	bl	8010e62 <UTIL_SEQ_PostIdle>
    }

    /* restore the mask from UTIL_SEQ_Run() */
    SuperMask = super_mask_backup;
 8010c22:	4a03      	ldr	r2, [pc, #12]	@ (8010c30 <UTIL_SEQ_Run+0x2ec>)
 8010c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c26:	6013      	str	r3, [r2, #0]

    return;
 8010c28:	bf00      	nop
}
 8010c2a:	3750      	adds	r7, #80	@ 0x50
 8010c2c:	46bd      	mov	sp, r7
 8010c2e:	bd80      	pop	{r7, pc}
 8010c30:	200000b8 	.word	0x200000b8
 8010c34:	20001cbc 	.word	0x20001cbc
 8010c38:	20001cb8 	.word	0x20001cb8
 8010c3c:	20001cb0 	.word	0x20001cb0
 8010c40:	20001cb4 	.word	0x20001cb4
 8010c44:	200000b4 	.word	0x200000b4

08010c48 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8010c48:	b580      	push	{r7, lr}
 8010c4a:	b088      	sub	sp, #32
 8010c4c:	af00      	add	r7, sp, #0
 8010c4e:	60f8      	str	r0, [r7, #12]
 8010c50:	60b9      	str	r1, [r7, #8]
 8010c52:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010c54:	f3ef 8310 	mrs	r3, PRIMASK
 8010c58:	617b      	str	r3, [r7, #20]
  return(result);
 8010c5a:	697b      	ldr	r3, [r7, #20]
    (void)Flags;
    UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8010c5c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8010c5e:	b672      	cpsid	i
}
 8010c60:	bf00      	nop

    TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8010c62:	68f8      	ldr	r0, [r7, #12]
 8010c64:	f000 f923 	bl	8010eae <SEQ_BitPosition>
 8010c68:	4603      	mov	r3, r0
 8010c6a:	4619      	mov	r1, r3
 8010c6c:	4a06      	ldr	r2, [pc, #24]	@ (8010c88 <UTIL_SEQ_RegTask+0x40>)
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8010c74:	69fb      	ldr	r3, [r7, #28]
 8010c76:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010c78:	69bb      	ldr	r3, [r7, #24]
 8010c7a:	f383 8810 	msr	PRIMASK, r3
}
 8010c7e:	bf00      	nop

    UTIL_SEQ_EXIT_CRITICAL_SECTION();

    return;
 8010c80:	bf00      	nop
}
 8010c82:	3720      	adds	r7, #32
 8010c84:	46bd      	mov	sp, r7
 8010c86:	bd80      	pop	{r7, pc}
 8010c88:	20001cc0 	.word	0x20001cc0

08010c8c <UTIL_SEQ_SetTask>:
    UTIL_SEQ_EXIT_CRITICAL_SECTION();
    return _status;
}

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm, uint32_t Task_Prio )
{
 8010c8c:	b480      	push	{r7}
 8010c8e:	b087      	sub	sp, #28
 8010c90:	af00      	add	r7, sp, #0
 8010c92:	6078      	str	r0, [r7, #4]
 8010c94:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010c96:	f3ef 8310 	mrs	r3, PRIMASK
 8010c9a:	60fb      	str	r3, [r7, #12]
  return(result);
 8010c9c:	68fb      	ldr	r3, [r7, #12]
    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8010c9e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010ca0:	b672      	cpsid	i
}
 8010ca2:	bf00      	nop

    TaskSet |= TaskId_bm;
 8010ca4:	4b0d      	ldr	r3, [pc, #52]	@ (8010cdc <UTIL_SEQ_SetTask+0x50>)
 8010ca6:	681a      	ldr	r2, [r3, #0]
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	4313      	orrs	r3, r2
 8010cac:	4a0b      	ldr	r2, [pc, #44]	@ (8010cdc <UTIL_SEQ_SetTask+0x50>)
 8010cae:	6013      	str	r3, [r2, #0]
    TaskPrio[Task_Prio].priority |= TaskId_bm;
 8010cb0:	4a0b      	ldr	r2, [pc, #44]	@ (8010ce0 <UTIL_SEQ_SetTask+0x54>)
 8010cb2:	683b      	ldr	r3, [r7, #0]
 8010cb4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	431a      	orrs	r2, r3
 8010cbc:	4908      	ldr	r1, [pc, #32]	@ (8010ce0 <UTIL_SEQ_SetTask+0x54>)
 8010cbe:	683b      	ldr	r3, [r7, #0]
 8010cc0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8010cc4:	697b      	ldr	r3, [r7, #20]
 8010cc6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010cc8:	693b      	ldr	r3, [r7, #16]
 8010cca:	f383 8810 	msr	PRIMASK, r3
}
 8010cce:	bf00      	nop

    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    return;
 8010cd0:	bf00      	nop
}
 8010cd2:	371c      	adds	r7, #28
 8010cd4:	46bd      	mov	sp, r7
 8010cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cda:	4770      	bx	lr
 8010cdc:	20001cb0 	.word	0x20001cb0
 8010ce0:	20001d40 	.word	0x20001d40

08010ce4 <UTIL_SEQ_PauseTask>:
    UTIL_SEQ_EXIT_CRITICAL_SECTION();
    return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8010ce4:	b480      	push	{r7}
 8010ce6:	b087      	sub	sp, #28
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010cec:	f3ef 8310 	mrs	r3, PRIMASK
 8010cf0:	60fb      	str	r3, [r7, #12]
  return(result);
 8010cf2:	68fb      	ldr	r3, [r7, #12]
    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8010cf4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010cf6:	b672      	cpsid	i
}
 8010cf8:	bf00      	nop

    TaskMask &= (~TaskId_bm);
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	43da      	mvns	r2, r3
 8010cfe:	4b08      	ldr	r3, [pc, #32]	@ (8010d20 <UTIL_SEQ_PauseTask+0x3c>)
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	4013      	ands	r3, r2
 8010d04:	4a06      	ldr	r2, [pc, #24]	@ (8010d20 <UTIL_SEQ_PauseTask+0x3c>)
 8010d06:	6013      	str	r3, [r2, #0]
 8010d08:	697b      	ldr	r3, [r7, #20]
 8010d0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010d0c:	693b      	ldr	r3, [r7, #16]
 8010d0e:	f383 8810 	msr	PRIMASK, r3
}
 8010d12:	bf00      	nop

    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    return;
 8010d14:	bf00      	nop
}
 8010d16:	371c      	adds	r7, #28
 8010d18:	46bd      	mov	sp, r7
 8010d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d1e:	4770      	bx	lr
 8010d20:	200000b4 	.word	0x200000b4

08010d24 <UTIL_SEQ_ResumeTask>:
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8010d24:	b480      	push	{r7}
 8010d26:	b087      	sub	sp, #28
 8010d28:	af00      	add	r7, sp, #0
 8010d2a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010d2c:	f3ef 8310 	mrs	r3, PRIMASK
 8010d30:	60fb      	str	r3, [r7, #12]
  return(result);
 8010d32:	68fb      	ldr	r3, [r7, #12]
    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8010d34:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010d36:	b672      	cpsid	i
}
 8010d38:	bf00      	nop

    TaskMask |= TaskId_bm;
 8010d3a:	4b09      	ldr	r3, [pc, #36]	@ (8010d60 <UTIL_SEQ_ResumeTask+0x3c>)
 8010d3c:	681a      	ldr	r2, [r3, #0]
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	4313      	orrs	r3, r2
 8010d42:	4a07      	ldr	r2, [pc, #28]	@ (8010d60 <UTIL_SEQ_ResumeTask+0x3c>)
 8010d44:	6013      	str	r3, [r2, #0]
 8010d46:	697b      	ldr	r3, [r7, #20]
 8010d48:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010d4a:	693b      	ldr	r3, [r7, #16]
 8010d4c:	f383 8810 	msr	PRIMASK, r3
}
 8010d50:	bf00      	nop

    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    return;
 8010d52:	bf00      	nop
}
 8010d54:	371c      	adds	r7, #28
 8010d56:	46bd      	mov	sp, r7
 8010d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d5c:	4770      	bx	lr
 8010d5e:	bf00      	nop
 8010d60:	200000b4 	.word	0x200000b4

08010d64 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8010d64:	b480      	push	{r7}
 8010d66:	b087      	sub	sp, #28
 8010d68:	af00      	add	r7, sp, #0
 8010d6a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010d6c:	f3ef 8310 	mrs	r3, PRIMASK
 8010d70:	60fb      	str	r3, [r7, #12]
  return(result);
 8010d72:	68fb      	ldr	r3, [r7, #12]
    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8010d74:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010d76:	b672      	cpsid	i
}
 8010d78:	bf00      	nop

    EvtSet |= EvtId_bm;
 8010d7a:	4b09      	ldr	r3, [pc, #36]	@ (8010da0 <UTIL_SEQ_SetEvt+0x3c>)
 8010d7c:	681a      	ldr	r2, [r3, #0]
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	4313      	orrs	r3, r2
 8010d82:	4a07      	ldr	r2, [pc, #28]	@ (8010da0 <UTIL_SEQ_SetEvt+0x3c>)
 8010d84:	6013      	str	r3, [r2, #0]
 8010d86:	697b      	ldr	r3, [r7, #20]
 8010d88:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010d8a:	693b      	ldr	r3, [r7, #16]
 8010d8c:	f383 8810 	msr	PRIMASK, r3
}
 8010d90:	bf00      	nop

    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    return;
 8010d92:	bf00      	nop
}
 8010d94:	371c      	adds	r7, #28
 8010d96:	46bd      	mov	sp, r7
 8010d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d9c:	4770      	bx	lr
 8010d9e:	bf00      	nop
 8010da0:	20001cb4 	.word	0x20001cb4

08010da4 <UTIL_SEQ_WaitEvt>:

    return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8010da4:	b580      	push	{r7, lr}
 8010da6:	b088      	sub	sp, #32
 8010da8:	af00      	add	r7, sp, #0
 8010daa:	6078      	str	r0, [r7, #4]
    UTIL_SEQ_bm_t wait_task_idx;
    /*
     * store in local the current_task_id_bm as the global variable CurrentTaskIdx
     * may be overwritten in case there are nested call of UTIL_SEQ_Run()
     */
    current_task_idx = CurrentTaskIdx;
 8010dac:	4b1f      	ldr	r3, [pc, #124]	@ (8010e2c <UTIL_SEQ_WaitEvt+0x88>)
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	61bb      	str	r3, [r7, #24]
    if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8010db2:	4b1e      	ldr	r3, [pc, #120]	@ (8010e2c <UTIL_SEQ_WaitEvt+0x88>)
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010dba:	d102      	bne.n	8010dc2 <UTIL_SEQ_WaitEvt+0x1e>
    {
        wait_task_idx = 0u;
 8010dbc:	2300      	movs	r3, #0
 8010dbe:	61fb      	str	r3, [r7, #28]
 8010dc0:	e005      	b.n	8010dce <UTIL_SEQ_WaitEvt+0x2a>
    }
    else
    {
        wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 8010dc2:	4b1a      	ldr	r3, [pc, #104]	@ (8010e2c <UTIL_SEQ_WaitEvt+0x88>)
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	2201      	movs	r2, #1
 8010dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8010dcc:	61fb      	str	r3, [r7, #28]
    }

    /* backup the event id that was currently waited */
    event_waited_id_backup = EvtWaited;
 8010dce:	4b18      	ldr	r3, [pc, #96]	@ (8010e30 <UTIL_SEQ_WaitEvt+0x8c>)
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	617b      	str	r3, [r7, #20]
    EvtWaited = EvtId_bm;
 8010dd4:	4a16      	ldr	r2, [pc, #88]	@ (8010e30 <UTIL_SEQ_WaitEvt+0x8c>)
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	6013      	str	r3, [r2, #0]
     * The system is waiting only for the last waited event.
     * When it will go out, it will wait again from the previous one.
     * It case it occurs while waiting for the second one, the while loop will exit immediately
     */

    while ((EvtSet & EvtId_bm) == 0U)
 8010dda:	e003      	b.n	8010de4 <UTIL_SEQ_WaitEvt+0x40>
    {
        UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8010ddc:	6879      	ldr	r1, [r7, #4]
 8010dde:	69f8      	ldr	r0, [r7, #28]
 8010de0:	f000 f82a 	bl	8010e38 <UTIL_SEQ_EvtIdle>
    while ((EvtSet & EvtId_bm) == 0U)
 8010de4:	4b13      	ldr	r3, [pc, #76]	@ (8010e34 <UTIL_SEQ_WaitEvt+0x90>)
 8010de6:	681a      	ldr	r2, [r3, #0]
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	4013      	ands	r3, r2
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d0f5      	beq.n	8010ddc <UTIL_SEQ_WaitEvt+0x38>
    /*
     * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run()
     * from UTIL_SEQ_EvtIdle(). This is required so that a second call of UTIL_SEQ_WaitEvt()
     * in the same process pass the correct current_task_id_bm in the call of UTIL_SEQ_EvtIdle()
     */
    CurrentTaskIdx = current_task_idx;
 8010df0:	4a0e      	ldr	r2, [pc, #56]	@ (8010e2c <UTIL_SEQ_WaitEvt+0x88>)
 8010df2:	69bb      	ldr	r3, [r7, #24]
 8010df4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010df6:	f3ef 8310 	mrs	r3, PRIMASK
 8010dfa:	60bb      	str	r3, [r7, #8]
  return(result);
 8010dfc:	68bb      	ldr	r3, [r7, #8]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8010dfe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8010e00:	b672      	cpsid	i
}
 8010e02:	bf00      	nop

    EvtSet &= (~EvtId_bm);
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	43da      	mvns	r2, r3
 8010e08:	4b0a      	ldr	r3, [pc, #40]	@ (8010e34 <UTIL_SEQ_WaitEvt+0x90>)
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	4013      	ands	r3, r2
 8010e0e:	4a09      	ldr	r2, [pc, #36]	@ (8010e34 <UTIL_SEQ_WaitEvt+0x90>)
 8010e10:	6013      	str	r3, [r2, #0]
 8010e12:	693b      	ldr	r3, [r7, #16]
 8010e14:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010e16:	68fb      	ldr	r3, [r7, #12]
 8010e18:	f383 8810 	msr	PRIMASK, r3
}
 8010e1c:	bf00      	nop

    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    EvtWaited = event_waited_id_backup;
 8010e1e:	4a04      	ldr	r2, [pc, #16]	@ (8010e30 <UTIL_SEQ_WaitEvt+0x8c>)
 8010e20:	697b      	ldr	r3, [r7, #20]
 8010e22:	6013      	str	r3, [r2, #0]
    return;
 8010e24:	bf00      	nop
}
 8010e26:	3720      	adds	r7, #32
 8010e28:	46bd      	mov	sp, r7
 8010e2a:	bd80      	pop	{r7, pc}
 8010e2c:	20001cbc 	.word	0x20001cbc
 8010e30:	20001cb8 	.word	0x20001cb8
 8010e34:	20001cb4 	.word	0x20001cb4

08010e38 <UTIL_SEQ_EvtIdle>:
    UTIL_SEQ_bm_t local_evtwaited = EvtWaited;
    return (EvtSet & local_evtwaited);
}

__WEAK void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t TaskId_bm, UTIL_SEQ_bm_t EvtWaited_bm )
{
 8010e38:	b580      	push	{r7, lr}
 8010e3a:	b082      	sub	sp, #8
 8010e3c:	af00      	add	r7, sp, #0
 8010e3e:	6078      	str	r0, [r7, #4]
 8010e40:	6039      	str	r1, [r7, #0]
    (void)EvtWaited_bm;
    UTIL_SEQ_Run(~TaskId_bm);
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	43db      	mvns	r3, r3
 8010e46:	4618      	mov	r0, r3
 8010e48:	f7ff fd7c 	bl	8010944 <UTIL_SEQ_Run>
    return;
 8010e4c:	bf00      	nop
}
 8010e4e:	3708      	adds	r7, #8
 8010e50:	46bd      	mov	sp, r7
 8010e52:	bd80      	pop	{r7, pc}

08010e54 <UTIL_SEQ_PreIdle>:
{
    return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8010e54:	b480      	push	{r7}
 8010e56:	af00      	add	r7, sp, #0
    /*
     * Unless specified by the application, there is nothing to be done
     */
    return;
 8010e58:	bf00      	nop
}
 8010e5a:	46bd      	mov	sp, r7
 8010e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e60:	4770      	bx	lr

08010e62 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8010e62:	b480      	push	{r7}
 8010e64:	af00      	add	r7, sp, #0
    /*
     * Unless specified by the application, there is nothing to be done
     */
    return;
 8010e66:	bf00      	nop
}
 8010e68:	46bd      	mov	sp, r7
 8010e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e6e:	4770      	bx	lr

08010e70 <UTIL_SEQ_PreTask>:

__WEAK void UTIL_SEQ_PreTask( uint32_t TaskId )
{
 8010e70:	b480      	push	{r7}
 8010e72:	b083      	sub	sp, #12
 8010e74:	af00      	add	r7, sp, #0
 8010e76:	6078      	str	r0, [r7, #4]
    (void)TaskId;
    return;
 8010e78:	bf00      	nop
}
 8010e7a:	370c      	adds	r7, #12
 8010e7c:	46bd      	mov	sp, r7
 8010e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e82:	4770      	bx	lr

08010e84 <UTIL_SEQ_PostTask>:

__WEAK void UTIL_SEQ_PostTask( uint32_t TaskId )
{
 8010e84:	b480      	push	{r7}
 8010e86:	b083      	sub	sp, #12
 8010e88:	af00      	add	r7, sp, #0
 8010e8a:	6078      	str	r0, [r7, #4]
    (void)TaskId;
    return;
 8010e8c:	bf00      	nop
}
 8010e8e:	370c      	adds	r7, #12
 8010e90:	46bd      	mov	sp, r7
 8010e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e96:	4770      	bx	lr

08010e98 <UTIL_SEQ_CatchWarning>:

__WEAK void UTIL_SEQ_CatchWarning(UTIL_SEQ_WARNING WarningId)
{
 8010e98:	b480      	push	{r7}
 8010e9a:	b083      	sub	sp, #12
 8010e9c:	af00      	add	r7, sp, #0
 8010e9e:	4603      	mov	r3, r0
 8010ea0:	71fb      	strb	r3, [r7, #7]
    (void)WarningId;
    return;
 8010ea2:	bf00      	nop
}
 8010ea4:	370c      	adds	r7, #12
 8010ea6:	46bd      	mov	sp, r7
 8010ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eac:	4770      	bx	lr

08010eae <SEQ_BitPosition>:
  * @brief return the position of the first bit set to 1
  * @param Value 32 bit value
  * @retval bit position
  */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8010eae:	b480      	push	{r7}
 8010eb0:	b085      	sub	sp, #20
 8010eb2:	af00      	add	r7, sp, #0
 8010eb4:	6078      	str	r0, [r7, #4]
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 8010eba:	68fb      	ldr	r3, [r7, #12]
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d101      	bne.n	8010ec4 <SEQ_BitPosition+0x16>
    return 32U;
 8010ec0:	2320      	movs	r3, #32
 8010ec2:	e003      	b.n	8010ecc <SEQ_BitPosition+0x1e>
  return __builtin_clz(value);
 8010ec4:	68fb      	ldr	r3, [r7, #12]
 8010ec6:	fab3 f383 	clz	r3, r3
 8010eca:	b2db      	uxtb	r3, r3
    return (uint8_t)(31 -__CLZ( Value ));
 8010ecc:	f1c3 031f 	rsb	r3, r3, #31
 8010ed0:	b2db      	uxtb	r3, r3
}
 8010ed2:	4618      	mov	r0, r3
 8010ed4:	3714      	adds	r7, #20
 8010ed6:	46bd      	mov	sp, r7
 8010ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010edc:	4770      	bx	lr

08010ede <__cvt>:
 8010ede:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010ee2:	ec57 6b10 	vmov	r6, r7, d0
 8010ee6:	2f00      	cmp	r7, #0
 8010ee8:	460c      	mov	r4, r1
 8010eea:	4619      	mov	r1, r3
 8010eec:	463b      	mov	r3, r7
 8010eee:	bfbb      	ittet	lt
 8010ef0:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8010ef4:	461f      	movlt	r7, r3
 8010ef6:	2300      	movge	r3, #0
 8010ef8:	232d      	movlt	r3, #45	@ 0x2d
 8010efa:	700b      	strb	r3, [r1, #0]
 8010efc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010efe:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8010f02:	4691      	mov	r9, r2
 8010f04:	f023 0820 	bic.w	r8, r3, #32
 8010f08:	bfbc      	itt	lt
 8010f0a:	4632      	movlt	r2, r6
 8010f0c:	4616      	movlt	r6, r2
 8010f0e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010f12:	d005      	beq.n	8010f20 <__cvt+0x42>
 8010f14:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8010f18:	d100      	bne.n	8010f1c <__cvt+0x3e>
 8010f1a:	3401      	adds	r4, #1
 8010f1c:	2102      	movs	r1, #2
 8010f1e:	e000      	b.n	8010f22 <__cvt+0x44>
 8010f20:	2103      	movs	r1, #3
 8010f22:	ab03      	add	r3, sp, #12
 8010f24:	9301      	str	r3, [sp, #4]
 8010f26:	ab02      	add	r3, sp, #8
 8010f28:	9300      	str	r3, [sp, #0]
 8010f2a:	ec47 6b10 	vmov	d0, r6, r7
 8010f2e:	4653      	mov	r3, sl
 8010f30:	4622      	mov	r2, r4
 8010f32:	f000 fe55 	bl	8011be0 <_dtoa_r>
 8010f36:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8010f3a:	4605      	mov	r5, r0
 8010f3c:	d119      	bne.n	8010f72 <__cvt+0x94>
 8010f3e:	f019 0f01 	tst.w	r9, #1
 8010f42:	d00e      	beq.n	8010f62 <__cvt+0x84>
 8010f44:	eb00 0904 	add.w	r9, r0, r4
 8010f48:	2200      	movs	r2, #0
 8010f4a:	2300      	movs	r3, #0
 8010f4c:	4630      	mov	r0, r6
 8010f4e:	4639      	mov	r1, r7
 8010f50:	f7ef fda2 	bl	8000a98 <__aeabi_dcmpeq>
 8010f54:	b108      	cbz	r0, 8010f5a <__cvt+0x7c>
 8010f56:	f8cd 900c 	str.w	r9, [sp, #12]
 8010f5a:	2230      	movs	r2, #48	@ 0x30
 8010f5c:	9b03      	ldr	r3, [sp, #12]
 8010f5e:	454b      	cmp	r3, r9
 8010f60:	d31e      	bcc.n	8010fa0 <__cvt+0xc2>
 8010f62:	9b03      	ldr	r3, [sp, #12]
 8010f64:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010f66:	1b5b      	subs	r3, r3, r5
 8010f68:	4628      	mov	r0, r5
 8010f6a:	6013      	str	r3, [r2, #0]
 8010f6c:	b004      	add	sp, #16
 8010f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f72:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010f76:	eb00 0904 	add.w	r9, r0, r4
 8010f7a:	d1e5      	bne.n	8010f48 <__cvt+0x6a>
 8010f7c:	7803      	ldrb	r3, [r0, #0]
 8010f7e:	2b30      	cmp	r3, #48	@ 0x30
 8010f80:	d10a      	bne.n	8010f98 <__cvt+0xba>
 8010f82:	2200      	movs	r2, #0
 8010f84:	2300      	movs	r3, #0
 8010f86:	4630      	mov	r0, r6
 8010f88:	4639      	mov	r1, r7
 8010f8a:	f7ef fd85 	bl	8000a98 <__aeabi_dcmpeq>
 8010f8e:	b918      	cbnz	r0, 8010f98 <__cvt+0xba>
 8010f90:	f1c4 0401 	rsb	r4, r4, #1
 8010f94:	f8ca 4000 	str.w	r4, [sl]
 8010f98:	f8da 3000 	ldr.w	r3, [sl]
 8010f9c:	4499      	add	r9, r3
 8010f9e:	e7d3      	b.n	8010f48 <__cvt+0x6a>
 8010fa0:	1c59      	adds	r1, r3, #1
 8010fa2:	9103      	str	r1, [sp, #12]
 8010fa4:	701a      	strb	r2, [r3, #0]
 8010fa6:	e7d9      	b.n	8010f5c <__cvt+0x7e>

08010fa8 <__exponent>:
 8010fa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010faa:	2900      	cmp	r1, #0
 8010fac:	bfba      	itte	lt
 8010fae:	4249      	neglt	r1, r1
 8010fb0:	232d      	movlt	r3, #45	@ 0x2d
 8010fb2:	232b      	movge	r3, #43	@ 0x2b
 8010fb4:	2909      	cmp	r1, #9
 8010fb6:	7002      	strb	r2, [r0, #0]
 8010fb8:	7043      	strb	r3, [r0, #1]
 8010fba:	dd29      	ble.n	8011010 <__exponent+0x68>
 8010fbc:	f10d 0307 	add.w	r3, sp, #7
 8010fc0:	461d      	mov	r5, r3
 8010fc2:	270a      	movs	r7, #10
 8010fc4:	461a      	mov	r2, r3
 8010fc6:	fbb1 f6f7 	udiv	r6, r1, r7
 8010fca:	fb07 1416 	mls	r4, r7, r6, r1
 8010fce:	3430      	adds	r4, #48	@ 0x30
 8010fd0:	f802 4c01 	strb.w	r4, [r2, #-1]
 8010fd4:	460c      	mov	r4, r1
 8010fd6:	2c63      	cmp	r4, #99	@ 0x63
 8010fd8:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8010fdc:	4631      	mov	r1, r6
 8010fde:	dcf1      	bgt.n	8010fc4 <__exponent+0x1c>
 8010fe0:	3130      	adds	r1, #48	@ 0x30
 8010fe2:	1e94      	subs	r4, r2, #2
 8010fe4:	f803 1c01 	strb.w	r1, [r3, #-1]
 8010fe8:	1c41      	adds	r1, r0, #1
 8010fea:	4623      	mov	r3, r4
 8010fec:	42ab      	cmp	r3, r5
 8010fee:	d30a      	bcc.n	8011006 <__exponent+0x5e>
 8010ff0:	f10d 0309 	add.w	r3, sp, #9
 8010ff4:	1a9b      	subs	r3, r3, r2
 8010ff6:	42ac      	cmp	r4, r5
 8010ff8:	bf88      	it	hi
 8010ffa:	2300      	movhi	r3, #0
 8010ffc:	3302      	adds	r3, #2
 8010ffe:	4403      	add	r3, r0
 8011000:	1a18      	subs	r0, r3, r0
 8011002:	b003      	add	sp, #12
 8011004:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011006:	f813 6b01 	ldrb.w	r6, [r3], #1
 801100a:	f801 6f01 	strb.w	r6, [r1, #1]!
 801100e:	e7ed      	b.n	8010fec <__exponent+0x44>
 8011010:	2330      	movs	r3, #48	@ 0x30
 8011012:	3130      	adds	r1, #48	@ 0x30
 8011014:	7083      	strb	r3, [r0, #2]
 8011016:	70c1      	strb	r1, [r0, #3]
 8011018:	1d03      	adds	r3, r0, #4
 801101a:	e7f1      	b.n	8011000 <__exponent+0x58>

0801101c <_printf_float>:
 801101c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011020:	b08d      	sub	sp, #52	@ 0x34
 8011022:	460c      	mov	r4, r1
 8011024:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8011028:	4616      	mov	r6, r2
 801102a:	461f      	mov	r7, r3
 801102c:	4605      	mov	r5, r0
 801102e:	f000 fd3d 	bl	8011aac <_localeconv_r>
 8011032:	6803      	ldr	r3, [r0, #0]
 8011034:	9304      	str	r3, [sp, #16]
 8011036:	4618      	mov	r0, r3
 8011038:	f7ef f902 	bl	8000240 <strlen>
 801103c:	2300      	movs	r3, #0
 801103e:	930a      	str	r3, [sp, #40]	@ 0x28
 8011040:	f8d8 3000 	ldr.w	r3, [r8]
 8011044:	9005      	str	r0, [sp, #20]
 8011046:	3307      	adds	r3, #7
 8011048:	f023 0307 	bic.w	r3, r3, #7
 801104c:	f103 0208 	add.w	r2, r3, #8
 8011050:	f894 a018 	ldrb.w	sl, [r4, #24]
 8011054:	f8d4 b000 	ldr.w	fp, [r4]
 8011058:	f8c8 2000 	str.w	r2, [r8]
 801105c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011060:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8011064:	9307      	str	r3, [sp, #28]
 8011066:	f8cd 8018 	str.w	r8, [sp, #24]
 801106a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801106e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011072:	4b9c      	ldr	r3, [pc, #624]	@ (80112e4 <_printf_float+0x2c8>)
 8011074:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011078:	f7ef fd40 	bl	8000afc <__aeabi_dcmpun>
 801107c:	bb70      	cbnz	r0, 80110dc <_printf_float+0xc0>
 801107e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011082:	4b98      	ldr	r3, [pc, #608]	@ (80112e4 <_printf_float+0x2c8>)
 8011084:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011088:	f7ef fd1a 	bl	8000ac0 <__aeabi_dcmple>
 801108c:	bb30      	cbnz	r0, 80110dc <_printf_float+0xc0>
 801108e:	2200      	movs	r2, #0
 8011090:	2300      	movs	r3, #0
 8011092:	4640      	mov	r0, r8
 8011094:	4649      	mov	r1, r9
 8011096:	f7ef fd09 	bl	8000aac <__aeabi_dcmplt>
 801109a:	b110      	cbz	r0, 80110a2 <_printf_float+0x86>
 801109c:	232d      	movs	r3, #45	@ 0x2d
 801109e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80110a2:	4a91      	ldr	r2, [pc, #580]	@ (80112e8 <_printf_float+0x2cc>)
 80110a4:	4b91      	ldr	r3, [pc, #580]	@ (80112ec <_printf_float+0x2d0>)
 80110a6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80110aa:	bf8c      	ite	hi
 80110ac:	4690      	movhi	r8, r2
 80110ae:	4698      	movls	r8, r3
 80110b0:	2303      	movs	r3, #3
 80110b2:	6123      	str	r3, [r4, #16]
 80110b4:	f02b 0304 	bic.w	r3, fp, #4
 80110b8:	6023      	str	r3, [r4, #0]
 80110ba:	f04f 0900 	mov.w	r9, #0
 80110be:	9700      	str	r7, [sp, #0]
 80110c0:	4633      	mov	r3, r6
 80110c2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80110c4:	4621      	mov	r1, r4
 80110c6:	4628      	mov	r0, r5
 80110c8:	f000 f9d2 	bl	8011470 <_printf_common>
 80110cc:	3001      	adds	r0, #1
 80110ce:	f040 808d 	bne.w	80111ec <_printf_float+0x1d0>
 80110d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80110d6:	b00d      	add	sp, #52	@ 0x34
 80110d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110dc:	4642      	mov	r2, r8
 80110de:	464b      	mov	r3, r9
 80110e0:	4640      	mov	r0, r8
 80110e2:	4649      	mov	r1, r9
 80110e4:	f7ef fd0a 	bl	8000afc <__aeabi_dcmpun>
 80110e8:	b140      	cbz	r0, 80110fc <_printf_float+0xe0>
 80110ea:	464b      	mov	r3, r9
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	bfbc      	itt	lt
 80110f0:	232d      	movlt	r3, #45	@ 0x2d
 80110f2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80110f6:	4a7e      	ldr	r2, [pc, #504]	@ (80112f0 <_printf_float+0x2d4>)
 80110f8:	4b7e      	ldr	r3, [pc, #504]	@ (80112f4 <_printf_float+0x2d8>)
 80110fa:	e7d4      	b.n	80110a6 <_printf_float+0x8a>
 80110fc:	6863      	ldr	r3, [r4, #4]
 80110fe:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8011102:	9206      	str	r2, [sp, #24]
 8011104:	1c5a      	adds	r2, r3, #1
 8011106:	d13b      	bne.n	8011180 <_printf_float+0x164>
 8011108:	2306      	movs	r3, #6
 801110a:	6063      	str	r3, [r4, #4]
 801110c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8011110:	2300      	movs	r3, #0
 8011112:	6022      	str	r2, [r4, #0]
 8011114:	9303      	str	r3, [sp, #12]
 8011116:	ab0a      	add	r3, sp, #40	@ 0x28
 8011118:	e9cd a301 	strd	sl, r3, [sp, #4]
 801111c:	ab09      	add	r3, sp, #36	@ 0x24
 801111e:	9300      	str	r3, [sp, #0]
 8011120:	6861      	ldr	r1, [r4, #4]
 8011122:	ec49 8b10 	vmov	d0, r8, r9
 8011126:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801112a:	4628      	mov	r0, r5
 801112c:	f7ff fed7 	bl	8010ede <__cvt>
 8011130:	9b06      	ldr	r3, [sp, #24]
 8011132:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011134:	2b47      	cmp	r3, #71	@ 0x47
 8011136:	4680      	mov	r8, r0
 8011138:	d129      	bne.n	801118e <_printf_float+0x172>
 801113a:	1cc8      	adds	r0, r1, #3
 801113c:	db02      	blt.n	8011144 <_printf_float+0x128>
 801113e:	6863      	ldr	r3, [r4, #4]
 8011140:	4299      	cmp	r1, r3
 8011142:	dd41      	ble.n	80111c8 <_printf_float+0x1ac>
 8011144:	f1aa 0a02 	sub.w	sl, sl, #2
 8011148:	fa5f fa8a 	uxtb.w	sl, sl
 801114c:	3901      	subs	r1, #1
 801114e:	4652      	mov	r2, sl
 8011150:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8011154:	9109      	str	r1, [sp, #36]	@ 0x24
 8011156:	f7ff ff27 	bl	8010fa8 <__exponent>
 801115a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801115c:	1813      	adds	r3, r2, r0
 801115e:	2a01      	cmp	r2, #1
 8011160:	4681      	mov	r9, r0
 8011162:	6123      	str	r3, [r4, #16]
 8011164:	dc02      	bgt.n	801116c <_printf_float+0x150>
 8011166:	6822      	ldr	r2, [r4, #0]
 8011168:	07d2      	lsls	r2, r2, #31
 801116a:	d501      	bpl.n	8011170 <_printf_float+0x154>
 801116c:	3301      	adds	r3, #1
 801116e:	6123      	str	r3, [r4, #16]
 8011170:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8011174:	2b00      	cmp	r3, #0
 8011176:	d0a2      	beq.n	80110be <_printf_float+0xa2>
 8011178:	232d      	movs	r3, #45	@ 0x2d
 801117a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801117e:	e79e      	b.n	80110be <_printf_float+0xa2>
 8011180:	9a06      	ldr	r2, [sp, #24]
 8011182:	2a47      	cmp	r2, #71	@ 0x47
 8011184:	d1c2      	bne.n	801110c <_printf_float+0xf0>
 8011186:	2b00      	cmp	r3, #0
 8011188:	d1c0      	bne.n	801110c <_printf_float+0xf0>
 801118a:	2301      	movs	r3, #1
 801118c:	e7bd      	b.n	801110a <_printf_float+0xee>
 801118e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8011192:	d9db      	bls.n	801114c <_printf_float+0x130>
 8011194:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8011198:	d118      	bne.n	80111cc <_printf_float+0x1b0>
 801119a:	2900      	cmp	r1, #0
 801119c:	6863      	ldr	r3, [r4, #4]
 801119e:	dd0b      	ble.n	80111b8 <_printf_float+0x19c>
 80111a0:	6121      	str	r1, [r4, #16]
 80111a2:	b913      	cbnz	r3, 80111aa <_printf_float+0x18e>
 80111a4:	6822      	ldr	r2, [r4, #0]
 80111a6:	07d0      	lsls	r0, r2, #31
 80111a8:	d502      	bpl.n	80111b0 <_printf_float+0x194>
 80111aa:	3301      	adds	r3, #1
 80111ac:	440b      	add	r3, r1
 80111ae:	6123      	str	r3, [r4, #16]
 80111b0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80111b2:	f04f 0900 	mov.w	r9, #0
 80111b6:	e7db      	b.n	8011170 <_printf_float+0x154>
 80111b8:	b913      	cbnz	r3, 80111c0 <_printf_float+0x1a4>
 80111ba:	6822      	ldr	r2, [r4, #0]
 80111bc:	07d2      	lsls	r2, r2, #31
 80111be:	d501      	bpl.n	80111c4 <_printf_float+0x1a8>
 80111c0:	3302      	adds	r3, #2
 80111c2:	e7f4      	b.n	80111ae <_printf_float+0x192>
 80111c4:	2301      	movs	r3, #1
 80111c6:	e7f2      	b.n	80111ae <_printf_float+0x192>
 80111c8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80111cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80111ce:	4299      	cmp	r1, r3
 80111d0:	db05      	blt.n	80111de <_printf_float+0x1c2>
 80111d2:	6823      	ldr	r3, [r4, #0]
 80111d4:	6121      	str	r1, [r4, #16]
 80111d6:	07d8      	lsls	r0, r3, #31
 80111d8:	d5ea      	bpl.n	80111b0 <_printf_float+0x194>
 80111da:	1c4b      	adds	r3, r1, #1
 80111dc:	e7e7      	b.n	80111ae <_printf_float+0x192>
 80111de:	2900      	cmp	r1, #0
 80111e0:	bfd4      	ite	le
 80111e2:	f1c1 0202 	rsble	r2, r1, #2
 80111e6:	2201      	movgt	r2, #1
 80111e8:	4413      	add	r3, r2
 80111ea:	e7e0      	b.n	80111ae <_printf_float+0x192>
 80111ec:	6823      	ldr	r3, [r4, #0]
 80111ee:	055a      	lsls	r2, r3, #21
 80111f0:	d407      	bmi.n	8011202 <_printf_float+0x1e6>
 80111f2:	6923      	ldr	r3, [r4, #16]
 80111f4:	4642      	mov	r2, r8
 80111f6:	4631      	mov	r1, r6
 80111f8:	4628      	mov	r0, r5
 80111fa:	47b8      	blx	r7
 80111fc:	3001      	adds	r0, #1
 80111fe:	d12b      	bne.n	8011258 <_printf_float+0x23c>
 8011200:	e767      	b.n	80110d2 <_printf_float+0xb6>
 8011202:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8011206:	f240 80dd 	bls.w	80113c4 <_printf_float+0x3a8>
 801120a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801120e:	2200      	movs	r2, #0
 8011210:	2300      	movs	r3, #0
 8011212:	f7ef fc41 	bl	8000a98 <__aeabi_dcmpeq>
 8011216:	2800      	cmp	r0, #0
 8011218:	d033      	beq.n	8011282 <_printf_float+0x266>
 801121a:	4a37      	ldr	r2, [pc, #220]	@ (80112f8 <_printf_float+0x2dc>)
 801121c:	2301      	movs	r3, #1
 801121e:	4631      	mov	r1, r6
 8011220:	4628      	mov	r0, r5
 8011222:	47b8      	blx	r7
 8011224:	3001      	adds	r0, #1
 8011226:	f43f af54 	beq.w	80110d2 <_printf_float+0xb6>
 801122a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801122e:	4543      	cmp	r3, r8
 8011230:	db02      	blt.n	8011238 <_printf_float+0x21c>
 8011232:	6823      	ldr	r3, [r4, #0]
 8011234:	07d8      	lsls	r0, r3, #31
 8011236:	d50f      	bpl.n	8011258 <_printf_float+0x23c>
 8011238:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801123c:	4631      	mov	r1, r6
 801123e:	4628      	mov	r0, r5
 8011240:	47b8      	blx	r7
 8011242:	3001      	adds	r0, #1
 8011244:	f43f af45 	beq.w	80110d2 <_printf_float+0xb6>
 8011248:	f04f 0900 	mov.w	r9, #0
 801124c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8011250:	f104 0a1a 	add.w	sl, r4, #26
 8011254:	45c8      	cmp	r8, r9
 8011256:	dc09      	bgt.n	801126c <_printf_float+0x250>
 8011258:	6823      	ldr	r3, [r4, #0]
 801125a:	079b      	lsls	r3, r3, #30
 801125c:	f100 8103 	bmi.w	8011466 <_printf_float+0x44a>
 8011260:	68e0      	ldr	r0, [r4, #12]
 8011262:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011264:	4298      	cmp	r0, r3
 8011266:	bfb8      	it	lt
 8011268:	4618      	movlt	r0, r3
 801126a:	e734      	b.n	80110d6 <_printf_float+0xba>
 801126c:	2301      	movs	r3, #1
 801126e:	4652      	mov	r2, sl
 8011270:	4631      	mov	r1, r6
 8011272:	4628      	mov	r0, r5
 8011274:	47b8      	blx	r7
 8011276:	3001      	adds	r0, #1
 8011278:	f43f af2b 	beq.w	80110d2 <_printf_float+0xb6>
 801127c:	f109 0901 	add.w	r9, r9, #1
 8011280:	e7e8      	b.n	8011254 <_printf_float+0x238>
 8011282:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011284:	2b00      	cmp	r3, #0
 8011286:	dc39      	bgt.n	80112fc <_printf_float+0x2e0>
 8011288:	4a1b      	ldr	r2, [pc, #108]	@ (80112f8 <_printf_float+0x2dc>)
 801128a:	2301      	movs	r3, #1
 801128c:	4631      	mov	r1, r6
 801128e:	4628      	mov	r0, r5
 8011290:	47b8      	blx	r7
 8011292:	3001      	adds	r0, #1
 8011294:	f43f af1d 	beq.w	80110d2 <_printf_float+0xb6>
 8011298:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801129c:	ea59 0303 	orrs.w	r3, r9, r3
 80112a0:	d102      	bne.n	80112a8 <_printf_float+0x28c>
 80112a2:	6823      	ldr	r3, [r4, #0]
 80112a4:	07d9      	lsls	r1, r3, #31
 80112a6:	d5d7      	bpl.n	8011258 <_printf_float+0x23c>
 80112a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80112ac:	4631      	mov	r1, r6
 80112ae:	4628      	mov	r0, r5
 80112b0:	47b8      	blx	r7
 80112b2:	3001      	adds	r0, #1
 80112b4:	f43f af0d 	beq.w	80110d2 <_printf_float+0xb6>
 80112b8:	f04f 0a00 	mov.w	sl, #0
 80112bc:	f104 0b1a 	add.w	fp, r4, #26
 80112c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80112c2:	425b      	negs	r3, r3
 80112c4:	4553      	cmp	r3, sl
 80112c6:	dc01      	bgt.n	80112cc <_printf_float+0x2b0>
 80112c8:	464b      	mov	r3, r9
 80112ca:	e793      	b.n	80111f4 <_printf_float+0x1d8>
 80112cc:	2301      	movs	r3, #1
 80112ce:	465a      	mov	r2, fp
 80112d0:	4631      	mov	r1, r6
 80112d2:	4628      	mov	r0, r5
 80112d4:	47b8      	blx	r7
 80112d6:	3001      	adds	r0, #1
 80112d8:	f43f aefb 	beq.w	80110d2 <_printf_float+0xb6>
 80112dc:	f10a 0a01 	add.w	sl, sl, #1
 80112e0:	e7ee      	b.n	80112c0 <_printf_float+0x2a4>
 80112e2:	bf00      	nop
 80112e4:	7fefffff 	.word	0x7fefffff
 80112e8:	080159e4 	.word	0x080159e4
 80112ec:	080159e0 	.word	0x080159e0
 80112f0:	080159ec 	.word	0x080159ec
 80112f4:	080159e8 	.word	0x080159e8
 80112f8:	080159f0 	.word	0x080159f0
 80112fc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80112fe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8011302:	4553      	cmp	r3, sl
 8011304:	bfa8      	it	ge
 8011306:	4653      	movge	r3, sl
 8011308:	2b00      	cmp	r3, #0
 801130a:	4699      	mov	r9, r3
 801130c:	dc36      	bgt.n	801137c <_printf_float+0x360>
 801130e:	f04f 0b00 	mov.w	fp, #0
 8011312:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011316:	f104 021a 	add.w	r2, r4, #26
 801131a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801131c:	9306      	str	r3, [sp, #24]
 801131e:	eba3 0309 	sub.w	r3, r3, r9
 8011322:	455b      	cmp	r3, fp
 8011324:	dc31      	bgt.n	801138a <_printf_float+0x36e>
 8011326:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011328:	459a      	cmp	sl, r3
 801132a:	dc3a      	bgt.n	80113a2 <_printf_float+0x386>
 801132c:	6823      	ldr	r3, [r4, #0]
 801132e:	07da      	lsls	r2, r3, #31
 8011330:	d437      	bmi.n	80113a2 <_printf_float+0x386>
 8011332:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011334:	ebaa 0903 	sub.w	r9, sl, r3
 8011338:	9b06      	ldr	r3, [sp, #24]
 801133a:	ebaa 0303 	sub.w	r3, sl, r3
 801133e:	4599      	cmp	r9, r3
 8011340:	bfa8      	it	ge
 8011342:	4699      	movge	r9, r3
 8011344:	f1b9 0f00 	cmp.w	r9, #0
 8011348:	dc33      	bgt.n	80113b2 <_printf_float+0x396>
 801134a:	f04f 0800 	mov.w	r8, #0
 801134e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011352:	f104 0b1a 	add.w	fp, r4, #26
 8011356:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011358:	ebaa 0303 	sub.w	r3, sl, r3
 801135c:	eba3 0309 	sub.w	r3, r3, r9
 8011360:	4543      	cmp	r3, r8
 8011362:	f77f af79 	ble.w	8011258 <_printf_float+0x23c>
 8011366:	2301      	movs	r3, #1
 8011368:	465a      	mov	r2, fp
 801136a:	4631      	mov	r1, r6
 801136c:	4628      	mov	r0, r5
 801136e:	47b8      	blx	r7
 8011370:	3001      	adds	r0, #1
 8011372:	f43f aeae 	beq.w	80110d2 <_printf_float+0xb6>
 8011376:	f108 0801 	add.w	r8, r8, #1
 801137a:	e7ec      	b.n	8011356 <_printf_float+0x33a>
 801137c:	4642      	mov	r2, r8
 801137e:	4631      	mov	r1, r6
 8011380:	4628      	mov	r0, r5
 8011382:	47b8      	blx	r7
 8011384:	3001      	adds	r0, #1
 8011386:	d1c2      	bne.n	801130e <_printf_float+0x2f2>
 8011388:	e6a3      	b.n	80110d2 <_printf_float+0xb6>
 801138a:	2301      	movs	r3, #1
 801138c:	4631      	mov	r1, r6
 801138e:	4628      	mov	r0, r5
 8011390:	9206      	str	r2, [sp, #24]
 8011392:	47b8      	blx	r7
 8011394:	3001      	adds	r0, #1
 8011396:	f43f ae9c 	beq.w	80110d2 <_printf_float+0xb6>
 801139a:	9a06      	ldr	r2, [sp, #24]
 801139c:	f10b 0b01 	add.w	fp, fp, #1
 80113a0:	e7bb      	b.n	801131a <_printf_float+0x2fe>
 80113a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80113a6:	4631      	mov	r1, r6
 80113a8:	4628      	mov	r0, r5
 80113aa:	47b8      	blx	r7
 80113ac:	3001      	adds	r0, #1
 80113ae:	d1c0      	bne.n	8011332 <_printf_float+0x316>
 80113b0:	e68f      	b.n	80110d2 <_printf_float+0xb6>
 80113b2:	9a06      	ldr	r2, [sp, #24]
 80113b4:	464b      	mov	r3, r9
 80113b6:	4442      	add	r2, r8
 80113b8:	4631      	mov	r1, r6
 80113ba:	4628      	mov	r0, r5
 80113bc:	47b8      	blx	r7
 80113be:	3001      	adds	r0, #1
 80113c0:	d1c3      	bne.n	801134a <_printf_float+0x32e>
 80113c2:	e686      	b.n	80110d2 <_printf_float+0xb6>
 80113c4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80113c8:	f1ba 0f01 	cmp.w	sl, #1
 80113cc:	dc01      	bgt.n	80113d2 <_printf_float+0x3b6>
 80113ce:	07db      	lsls	r3, r3, #31
 80113d0:	d536      	bpl.n	8011440 <_printf_float+0x424>
 80113d2:	2301      	movs	r3, #1
 80113d4:	4642      	mov	r2, r8
 80113d6:	4631      	mov	r1, r6
 80113d8:	4628      	mov	r0, r5
 80113da:	47b8      	blx	r7
 80113dc:	3001      	adds	r0, #1
 80113de:	f43f ae78 	beq.w	80110d2 <_printf_float+0xb6>
 80113e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80113e6:	4631      	mov	r1, r6
 80113e8:	4628      	mov	r0, r5
 80113ea:	47b8      	blx	r7
 80113ec:	3001      	adds	r0, #1
 80113ee:	f43f ae70 	beq.w	80110d2 <_printf_float+0xb6>
 80113f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80113f6:	2200      	movs	r2, #0
 80113f8:	2300      	movs	r3, #0
 80113fa:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80113fe:	f7ef fb4b 	bl	8000a98 <__aeabi_dcmpeq>
 8011402:	b9c0      	cbnz	r0, 8011436 <_printf_float+0x41a>
 8011404:	4653      	mov	r3, sl
 8011406:	f108 0201 	add.w	r2, r8, #1
 801140a:	4631      	mov	r1, r6
 801140c:	4628      	mov	r0, r5
 801140e:	47b8      	blx	r7
 8011410:	3001      	adds	r0, #1
 8011412:	d10c      	bne.n	801142e <_printf_float+0x412>
 8011414:	e65d      	b.n	80110d2 <_printf_float+0xb6>
 8011416:	2301      	movs	r3, #1
 8011418:	465a      	mov	r2, fp
 801141a:	4631      	mov	r1, r6
 801141c:	4628      	mov	r0, r5
 801141e:	47b8      	blx	r7
 8011420:	3001      	adds	r0, #1
 8011422:	f43f ae56 	beq.w	80110d2 <_printf_float+0xb6>
 8011426:	f108 0801 	add.w	r8, r8, #1
 801142a:	45d0      	cmp	r8, sl
 801142c:	dbf3      	blt.n	8011416 <_printf_float+0x3fa>
 801142e:	464b      	mov	r3, r9
 8011430:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8011434:	e6df      	b.n	80111f6 <_printf_float+0x1da>
 8011436:	f04f 0800 	mov.w	r8, #0
 801143a:	f104 0b1a 	add.w	fp, r4, #26
 801143e:	e7f4      	b.n	801142a <_printf_float+0x40e>
 8011440:	2301      	movs	r3, #1
 8011442:	4642      	mov	r2, r8
 8011444:	e7e1      	b.n	801140a <_printf_float+0x3ee>
 8011446:	2301      	movs	r3, #1
 8011448:	464a      	mov	r2, r9
 801144a:	4631      	mov	r1, r6
 801144c:	4628      	mov	r0, r5
 801144e:	47b8      	blx	r7
 8011450:	3001      	adds	r0, #1
 8011452:	f43f ae3e 	beq.w	80110d2 <_printf_float+0xb6>
 8011456:	f108 0801 	add.w	r8, r8, #1
 801145a:	68e3      	ldr	r3, [r4, #12]
 801145c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801145e:	1a5b      	subs	r3, r3, r1
 8011460:	4543      	cmp	r3, r8
 8011462:	dcf0      	bgt.n	8011446 <_printf_float+0x42a>
 8011464:	e6fc      	b.n	8011260 <_printf_float+0x244>
 8011466:	f04f 0800 	mov.w	r8, #0
 801146a:	f104 0919 	add.w	r9, r4, #25
 801146e:	e7f4      	b.n	801145a <_printf_float+0x43e>

08011470 <_printf_common>:
 8011470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011474:	4616      	mov	r6, r2
 8011476:	4698      	mov	r8, r3
 8011478:	688a      	ldr	r2, [r1, #8]
 801147a:	690b      	ldr	r3, [r1, #16]
 801147c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011480:	4293      	cmp	r3, r2
 8011482:	bfb8      	it	lt
 8011484:	4613      	movlt	r3, r2
 8011486:	6033      	str	r3, [r6, #0]
 8011488:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801148c:	4607      	mov	r7, r0
 801148e:	460c      	mov	r4, r1
 8011490:	b10a      	cbz	r2, 8011496 <_printf_common+0x26>
 8011492:	3301      	adds	r3, #1
 8011494:	6033      	str	r3, [r6, #0]
 8011496:	6823      	ldr	r3, [r4, #0]
 8011498:	0699      	lsls	r1, r3, #26
 801149a:	bf42      	ittt	mi
 801149c:	6833      	ldrmi	r3, [r6, #0]
 801149e:	3302      	addmi	r3, #2
 80114a0:	6033      	strmi	r3, [r6, #0]
 80114a2:	6825      	ldr	r5, [r4, #0]
 80114a4:	f015 0506 	ands.w	r5, r5, #6
 80114a8:	d106      	bne.n	80114b8 <_printf_common+0x48>
 80114aa:	f104 0a19 	add.w	sl, r4, #25
 80114ae:	68e3      	ldr	r3, [r4, #12]
 80114b0:	6832      	ldr	r2, [r6, #0]
 80114b2:	1a9b      	subs	r3, r3, r2
 80114b4:	42ab      	cmp	r3, r5
 80114b6:	dc26      	bgt.n	8011506 <_printf_common+0x96>
 80114b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80114bc:	6822      	ldr	r2, [r4, #0]
 80114be:	3b00      	subs	r3, #0
 80114c0:	bf18      	it	ne
 80114c2:	2301      	movne	r3, #1
 80114c4:	0692      	lsls	r2, r2, #26
 80114c6:	d42b      	bmi.n	8011520 <_printf_common+0xb0>
 80114c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80114cc:	4641      	mov	r1, r8
 80114ce:	4638      	mov	r0, r7
 80114d0:	47c8      	blx	r9
 80114d2:	3001      	adds	r0, #1
 80114d4:	d01e      	beq.n	8011514 <_printf_common+0xa4>
 80114d6:	6823      	ldr	r3, [r4, #0]
 80114d8:	6922      	ldr	r2, [r4, #16]
 80114da:	f003 0306 	and.w	r3, r3, #6
 80114de:	2b04      	cmp	r3, #4
 80114e0:	bf02      	ittt	eq
 80114e2:	68e5      	ldreq	r5, [r4, #12]
 80114e4:	6833      	ldreq	r3, [r6, #0]
 80114e6:	1aed      	subeq	r5, r5, r3
 80114e8:	68a3      	ldr	r3, [r4, #8]
 80114ea:	bf0c      	ite	eq
 80114ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80114f0:	2500      	movne	r5, #0
 80114f2:	4293      	cmp	r3, r2
 80114f4:	bfc4      	itt	gt
 80114f6:	1a9b      	subgt	r3, r3, r2
 80114f8:	18ed      	addgt	r5, r5, r3
 80114fa:	2600      	movs	r6, #0
 80114fc:	341a      	adds	r4, #26
 80114fe:	42b5      	cmp	r5, r6
 8011500:	d11a      	bne.n	8011538 <_printf_common+0xc8>
 8011502:	2000      	movs	r0, #0
 8011504:	e008      	b.n	8011518 <_printf_common+0xa8>
 8011506:	2301      	movs	r3, #1
 8011508:	4652      	mov	r2, sl
 801150a:	4641      	mov	r1, r8
 801150c:	4638      	mov	r0, r7
 801150e:	47c8      	blx	r9
 8011510:	3001      	adds	r0, #1
 8011512:	d103      	bne.n	801151c <_printf_common+0xac>
 8011514:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801151c:	3501      	adds	r5, #1
 801151e:	e7c6      	b.n	80114ae <_printf_common+0x3e>
 8011520:	18e1      	adds	r1, r4, r3
 8011522:	1c5a      	adds	r2, r3, #1
 8011524:	2030      	movs	r0, #48	@ 0x30
 8011526:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801152a:	4422      	add	r2, r4
 801152c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011530:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011534:	3302      	adds	r3, #2
 8011536:	e7c7      	b.n	80114c8 <_printf_common+0x58>
 8011538:	2301      	movs	r3, #1
 801153a:	4622      	mov	r2, r4
 801153c:	4641      	mov	r1, r8
 801153e:	4638      	mov	r0, r7
 8011540:	47c8      	blx	r9
 8011542:	3001      	adds	r0, #1
 8011544:	d0e6      	beq.n	8011514 <_printf_common+0xa4>
 8011546:	3601      	adds	r6, #1
 8011548:	e7d9      	b.n	80114fe <_printf_common+0x8e>
	...

0801154c <_printf_i>:
 801154c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011550:	7e0f      	ldrb	r7, [r1, #24]
 8011552:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011554:	2f78      	cmp	r7, #120	@ 0x78
 8011556:	4691      	mov	r9, r2
 8011558:	4680      	mov	r8, r0
 801155a:	460c      	mov	r4, r1
 801155c:	469a      	mov	sl, r3
 801155e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011562:	d807      	bhi.n	8011574 <_printf_i+0x28>
 8011564:	2f62      	cmp	r7, #98	@ 0x62
 8011566:	d80a      	bhi.n	801157e <_printf_i+0x32>
 8011568:	2f00      	cmp	r7, #0
 801156a:	f000 80d1 	beq.w	8011710 <_printf_i+0x1c4>
 801156e:	2f58      	cmp	r7, #88	@ 0x58
 8011570:	f000 80b8 	beq.w	80116e4 <_printf_i+0x198>
 8011574:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011578:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801157c:	e03a      	b.n	80115f4 <_printf_i+0xa8>
 801157e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011582:	2b15      	cmp	r3, #21
 8011584:	d8f6      	bhi.n	8011574 <_printf_i+0x28>
 8011586:	a101      	add	r1, pc, #4	@ (adr r1, 801158c <_printf_i+0x40>)
 8011588:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801158c:	080115e5 	.word	0x080115e5
 8011590:	080115f9 	.word	0x080115f9
 8011594:	08011575 	.word	0x08011575
 8011598:	08011575 	.word	0x08011575
 801159c:	08011575 	.word	0x08011575
 80115a0:	08011575 	.word	0x08011575
 80115a4:	080115f9 	.word	0x080115f9
 80115a8:	08011575 	.word	0x08011575
 80115ac:	08011575 	.word	0x08011575
 80115b0:	08011575 	.word	0x08011575
 80115b4:	08011575 	.word	0x08011575
 80115b8:	080116f7 	.word	0x080116f7
 80115bc:	08011623 	.word	0x08011623
 80115c0:	080116b1 	.word	0x080116b1
 80115c4:	08011575 	.word	0x08011575
 80115c8:	08011575 	.word	0x08011575
 80115cc:	08011719 	.word	0x08011719
 80115d0:	08011575 	.word	0x08011575
 80115d4:	08011623 	.word	0x08011623
 80115d8:	08011575 	.word	0x08011575
 80115dc:	08011575 	.word	0x08011575
 80115e0:	080116b9 	.word	0x080116b9
 80115e4:	6833      	ldr	r3, [r6, #0]
 80115e6:	1d1a      	adds	r2, r3, #4
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	6032      	str	r2, [r6, #0]
 80115ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80115f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80115f4:	2301      	movs	r3, #1
 80115f6:	e09c      	b.n	8011732 <_printf_i+0x1e6>
 80115f8:	6833      	ldr	r3, [r6, #0]
 80115fa:	6820      	ldr	r0, [r4, #0]
 80115fc:	1d19      	adds	r1, r3, #4
 80115fe:	6031      	str	r1, [r6, #0]
 8011600:	0606      	lsls	r6, r0, #24
 8011602:	d501      	bpl.n	8011608 <_printf_i+0xbc>
 8011604:	681d      	ldr	r5, [r3, #0]
 8011606:	e003      	b.n	8011610 <_printf_i+0xc4>
 8011608:	0645      	lsls	r5, r0, #25
 801160a:	d5fb      	bpl.n	8011604 <_printf_i+0xb8>
 801160c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011610:	2d00      	cmp	r5, #0
 8011612:	da03      	bge.n	801161c <_printf_i+0xd0>
 8011614:	232d      	movs	r3, #45	@ 0x2d
 8011616:	426d      	negs	r5, r5
 8011618:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801161c:	4858      	ldr	r0, [pc, #352]	@ (8011780 <_printf_i+0x234>)
 801161e:	230a      	movs	r3, #10
 8011620:	e011      	b.n	8011646 <_printf_i+0xfa>
 8011622:	6821      	ldr	r1, [r4, #0]
 8011624:	6833      	ldr	r3, [r6, #0]
 8011626:	0608      	lsls	r0, r1, #24
 8011628:	f853 5b04 	ldr.w	r5, [r3], #4
 801162c:	d402      	bmi.n	8011634 <_printf_i+0xe8>
 801162e:	0649      	lsls	r1, r1, #25
 8011630:	bf48      	it	mi
 8011632:	b2ad      	uxthmi	r5, r5
 8011634:	2f6f      	cmp	r7, #111	@ 0x6f
 8011636:	4852      	ldr	r0, [pc, #328]	@ (8011780 <_printf_i+0x234>)
 8011638:	6033      	str	r3, [r6, #0]
 801163a:	bf14      	ite	ne
 801163c:	230a      	movne	r3, #10
 801163e:	2308      	moveq	r3, #8
 8011640:	2100      	movs	r1, #0
 8011642:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011646:	6866      	ldr	r6, [r4, #4]
 8011648:	60a6      	str	r6, [r4, #8]
 801164a:	2e00      	cmp	r6, #0
 801164c:	db05      	blt.n	801165a <_printf_i+0x10e>
 801164e:	6821      	ldr	r1, [r4, #0]
 8011650:	432e      	orrs	r6, r5
 8011652:	f021 0104 	bic.w	r1, r1, #4
 8011656:	6021      	str	r1, [r4, #0]
 8011658:	d04b      	beq.n	80116f2 <_printf_i+0x1a6>
 801165a:	4616      	mov	r6, r2
 801165c:	fbb5 f1f3 	udiv	r1, r5, r3
 8011660:	fb03 5711 	mls	r7, r3, r1, r5
 8011664:	5dc7      	ldrb	r7, [r0, r7]
 8011666:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801166a:	462f      	mov	r7, r5
 801166c:	42bb      	cmp	r3, r7
 801166e:	460d      	mov	r5, r1
 8011670:	d9f4      	bls.n	801165c <_printf_i+0x110>
 8011672:	2b08      	cmp	r3, #8
 8011674:	d10b      	bne.n	801168e <_printf_i+0x142>
 8011676:	6823      	ldr	r3, [r4, #0]
 8011678:	07df      	lsls	r7, r3, #31
 801167a:	d508      	bpl.n	801168e <_printf_i+0x142>
 801167c:	6923      	ldr	r3, [r4, #16]
 801167e:	6861      	ldr	r1, [r4, #4]
 8011680:	4299      	cmp	r1, r3
 8011682:	bfde      	ittt	le
 8011684:	2330      	movle	r3, #48	@ 0x30
 8011686:	f806 3c01 	strble.w	r3, [r6, #-1]
 801168a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801168e:	1b92      	subs	r2, r2, r6
 8011690:	6122      	str	r2, [r4, #16]
 8011692:	f8cd a000 	str.w	sl, [sp]
 8011696:	464b      	mov	r3, r9
 8011698:	aa03      	add	r2, sp, #12
 801169a:	4621      	mov	r1, r4
 801169c:	4640      	mov	r0, r8
 801169e:	f7ff fee7 	bl	8011470 <_printf_common>
 80116a2:	3001      	adds	r0, #1
 80116a4:	d14a      	bne.n	801173c <_printf_i+0x1f0>
 80116a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80116aa:	b004      	add	sp, #16
 80116ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116b0:	6823      	ldr	r3, [r4, #0]
 80116b2:	f043 0320 	orr.w	r3, r3, #32
 80116b6:	6023      	str	r3, [r4, #0]
 80116b8:	4832      	ldr	r0, [pc, #200]	@ (8011784 <_printf_i+0x238>)
 80116ba:	2778      	movs	r7, #120	@ 0x78
 80116bc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80116c0:	6823      	ldr	r3, [r4, #0]
 80116c2:	6831      	ldr	r1, [r6, #0]
 80116c4:	061f      	lsls	r7, r3, #24
 80116c6:	f851 5b04 	ldr.w	r5, [r1], #4
 80116ca:	d402      	bmi.n	80116d2 <_printf_i+0x186>
 80116cc:	065f      	lsls	r7, r3, #25
 80116ce:	bf48      	it	mi
 80116d0:	b2ad      	uxthmi	r5, r5
 80116d2:	6031      	str	r1, [r6, #0]
 80116d4:	07d9      	lsls	r1, r3, #31
 80116d6:	bf44      	itt	mi
 80116d8:	f043 0320 	orrmi.w	r3, r3, #32
 80116dc:	6023      	strmi	r3, [r4, #0]
 80116de:	b11d      	cbz	r5, 80116e8 <_printf_i+0x19c>
 80116e0:	2310      	movs	r3, #16
 80116e2:	e7ad      	b.n	8011640 <_printf_i+0xf4>
 80116e4:	4826      	ldr	r0, [pc, #152]	@ (8011780 <_printf_i+0x234>)
 80116e6:	e7e9      	b.n	80116bc <_printf_i+0x170>
 80116e8:	6823      	ldr	r3, [r4, #0]
 80116ea:	f023 0320 	bic.w	r3, r3, #32
 80116ee:	6023      	str	r3, [r4, #0]
 80116f0:	e7f6      	b.n	80116e0 <_printf_i+0x194>
 80116f2:	4616      	mov	r6, r2
 80116f4:	e7bd      	b.n	8011672 <_printf_i+0x126>
 80116f6:	6833      	ldr	r3, [r6, #0]
 80116f8:	6825      	ldr	r5, [r4, #0]
 80116fa:	6961      	ldr	r1, [r4, #20]
 80116fc:	1d18      	adds	r0, r3, #4
 80116fe:	6030      	str	r0, [r6, #0]
 8011700:	062e      	lsls	r6, r5, #24
 8011702:	681b      	ldr	r3, [r3, #0]
 8011704:	d501      	bpl.n	801170a <_printf_i+0x1be>
 8011706:	6019      	str	r1, [r3, #0]
 8011708:	e002      	b.n	8011710 <_printf_i+0x1c4>
 801170a:	0668      	lsls	r0, r5, #25
 801170c:	d5fb      	bpl.n	8011706 <_printf_i+0x1ba>
 801170e:	8019      	strh	r1, [r3, #0]
 8011710:	2300      	movs	r3, #0
 8011712:	6123      	str	r3, [r4, #16]
 8011714:	4616      	mov	r6, r2
 8011716:	e7bc      	b.n	8011692 <_printf_i+0x146>
 8011718:	6833      	ldr	r3, [r6, #0]
 801171a:	1d1a      	adds	r2, r3, #4
 801171c:	6032      	str	r2, [r6, #0]
 801171e:	681e      	ldr	r6, [r3, #0]
 8011720:	6862      	ldr	r2, [r4, #4]
 8011722:	2100      	movs	r1, #0
 8011724:	4630      	mov	r0, r6
 8011726:	f7ee fd3b 	bl	80001a0 <memchr>
 801172a:	b108      	cbz	r0, 8011730 <_printf_i+0x1e4>
 801172c:	1b80      	subs	r0, r0, r6
 801172e:	6060      	str	r0, [r4, #4]
 8011730:	6863      	ldr	r3, [r4, #4]
 8011732:	6123      	str	r3, [r4, #16]
 8011734:	2300      	movs	r3, #0
 8011736:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801173a:	e7aa      	b.n	8011692 <_printf_i+0x146>
 801173c:	6923      	ldr	r3, [r4, #16]
 801173e:	4632      	mov	r2, r6
 8011740:	4649      	mov	r1, r9
 8011742:	4640      	mov	r0, r8
 8011744:	47d0      	blx	sl
 8011746:	3001      	adds	r0, #1
 8011748:	d0ad      	beq.n	80116a6 <_printf_i+0x15a>
 801174a:	6823      	ldr	r3, [r4, #0]
 801174c:	079b      	lsls	r3, r3, #30
 801174e:	d413      	bmi.n	8011778 <_printf_i+0x22c>
 8011750:	68e0      	ldr	r0, [r4, #12]
 8011752:	9b03      	ldr	r3, [sp, #12]
 8011754:	4298      	cmp	r0, r3
 8011756:	bfb8      	it	lt
 8011758:	4618      	movlt	r0, r3
 801175a:	e7a6      	b.n	80116aa <_printf_i+0x15e>
 801175c:	2301      	movs	r3, #1
 801175e:	4632      	mov	r2, r6
 8011760:	4649      	mov	r1, r9
 8011762:	4640      	mov	r0, r8
 8011764:	47d0      	blx	sl
 8011766:	3001      	adds	r0, #1
 8011768:	d09d      	beq.n	80116a6 <_printf_i+0x15a>
 801176a:	3501      	adds	r5, #1
 801176c:	68e3      	ldr	r3, [r4, #12]
 801176e:	9903      	ldr	r1, [sp, #12]
 8011770:	1a5b      	subs	r3, r3, r1
 8011772:	42ab      	cmp	r3, r5
 8011774:	dcf2      	bgt.n	801175c <_printf_i+0x210>
 8011776:	e7eb      	b.n	8011750 <_printf_i+0x204>
 8011778:	2500      	movs	r5, #0
 801177a:	f104 0619 	add.w	r6, r4, #25
 801177e:	e7f5      	b.n	801176c <_printf_i+0x220>
 8011780:	080159f2 	.word	0x080159f2
 8011784:	08015a03 	.word	0x08015a03

08011788 <siprintf>:
 8011788:	b40e      	push	{r1, r2, r3}
 801178a:	b510      	push	{r4, lr}
 801178c:	b09d      	sub	sp, #116	@ 0x74
 801178e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8011790:	9002      	str	r0, [sp, #8]
 8011792:	9006      	str	r0, [sp, #24]
 8011794:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011798:	480a      	ldr	r0, [pc, #40]	@ (80117c4 <siprintf+0x3c>)
 801179a:	9107      	str	r1, [sp, #28]
 801179c:	9104      	str	r1, [sp, #16]
 801179e:	490a      	ldr	r1, [pc, #40]	@ (80117c8 <siprintf+0x40>)
 80117a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80117a4:	9105      	str	r1, [sp, #20]
 80117a6:	2400      	movs	r4, #0
 80117a8:	a902      	add	r1, sp, #8
 80117aa:	6800      	ldr	r0, [r0, #0]
 80117ac:	9301      	str	r3, [sp, #4]
 80117ae:	941b      	str	r4, [sp, #108]	@ 0x6c
 80117b0:	f001 f842 	bl	8012838 <_svfiprintf_r>
 80117b4:	9b02      	ldr	r3, [sp, #8]
 80117b6:	701c      	strb	r4, [r3, #0]
 80117b8:	b01d      	add	sp, #116	@ 0x74
 80117ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80117be:	b003      	add	sp, #12
 80117c0:	4770      	bx	lr
 80117c2:	bf00      	nop
 80117c4:	200000c8 	.word	0x200000c8
 80117c8:	ffff0208 	.word	0xffff0208

080117cc <std>:
 80117cc:	2300      	movs	r3, #0
 80117ce:	b510      	push	{r4, lr}
 80117d0:	4604      	mov	r4, r0
 80117d2:	e9c0 3300 	strd	r3, r3, [r0]
 80117d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80117da:	6083      	str	r3, [r0, #8]
 80117dc:	8181      	strh	r1, [r0, #12]
 80117de:	6643      	str	r3, [r0, #100]	@ 0x64
 80117e0:	81c2      	strh	r2, [r0, #14]
 80117e2:	6183      	str	r3, [r0, #24]
 80117e4:	4619      	mov	r1, r3
 80117e6:	2208      	movs	r2, #8
 80117e8:	305c      	adds	r0, #92	@ 0x5c
 80117ea:	f000 f929 	bl	8011a40 <memset>
 80117ee:	4b0d      	ldr	r3, [pc, #52]	@ (8011824 <std+0x58>)
 80117f0:	6263      	str	r3, [r4, #36]	@ 0x24
 80117f2:	4b0d      	ldr	r3, [pc, #52]	@ (8011828 <std+0x5c>)
 80117f4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80117f6:	4b0d      	ldr	r3, [pc, #52]	@ (801182c <std+0x60>)
 80117f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80117fa:	4b0d      	ldr	r3, [pc, #52]	@ (8011830 <std+0x64>)
 80117fc:	6323      	str	r3, [r4, #48]	@ 0x30
 80117fe:	4b0d      	ldr	r3, [pc, #52]	@ (8011834 <std+0x68>)
 8011800:	6224      	str	r4, [r4, #32]
 8011802:	429c      	cmp	r4, r3
 8011804:	d006      	beq.n	8011814 <std+0x48>
 8011806:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801180a:	4294      	cmp	r4, r2
 801180c:	d002      	beq.n	8011814 <std+0x48>
 801180e:	33d0      	adds	r3, #208	@ 0xd0
 8011810:	429c      	cmp	r4, r3
 8011812:	d105      	bne.n	8011820 <std+0x54>
 8011814:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801181c:	f000 b942 	b.w	8011aa4 <__retarget_lock_init_recursive>
 8011820:	bd10      	pop	{r4, pc}
 8011822:	bf00      	nop
 8011824:	0801366d 	.word	0x0801366d
 8011828:	0801368f 	.word	0x0801368f
 801182c:	080136c7 	.word	0x080136c7
 8011830:	080136eb 	.word	0x080136eb
 8011834:	20001d4c 	.word	0x20001d4c

08011838 <stdio_exit_handler>:
 8011838:	4a02      	ldr	r2, [pc, #8]	@ (8011844 <stdio_exit_handler+0xc>)
 801183a:	4903      	ldr	r1, [pc, #12]	@ (8011848 <stdio_exit_handler+0x10>)
 801183c:	4803      	ldr	r0, [pc, #12]	@ (801184c <stdio_exit_handler+0x14>)
 801183e:	f000 b869 	b.w	8011914 <_fwalk_sglue>
 8011842:	bf00      	nop
 8011844:	200000bc 	.word	0x200000bc
 8011848:	08012f11 	.word	0x08012f11
 801184c:	200000cc 	.word	0x200000cc

08011850 <cleanup_stdio>:
 8011850:	6841      	ldr	r1, [r0, #4]
 8011852:	4b0c      	ldr	r3, [pc, #48]	@ (8011884 <cleanup_stdio+0x34>)
 8011854:	4299      	cmp	r1, r3
 8011856:	b510      	push	{r4, lr}
 8011858:	4604      	mov	r4, r0
 801185a:	d001      	beq.n	8011860 <cleanup_stdio+0x10>
 801185c:	f001 fb58 	bl	8012f10 <_fflush_r>
 8011860:	68a1      	ldr	r1, [r4, #8]
 8011862:	4b09      	ldr	r3, [pc, #36]	@ (8011888 <cleanup_stdio+0x38>)
 8011864:	4299      	cmp	r1, r3
 8011866:	d002      	beq.n	801186e <cleanup_stdio+0x1e>
 8011868:	4620      	mov	r0, r4
 801186a:	f001 fb51 	bl	8012f10 <_fflush_r>
 801186e:	68e1      	ldr	r1, [r4, #12]
 8011870:	4b06      	ldr	r3, [pc, #24]	@ (801188c <cleanup_stdio+0x3c>)
 8011872:	4299      	cmp	r1, r3
 8011874:	d004      	beq.n	8011880 <cleanup_stdio+0x30>
 8011876:	4620      	mov	r0, r4
 8011878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801187c:	f001 bb48 	b.w	8012f10 <_fflush_r>
 8011880:	bd10      	pop	{r4, pc}
 8011882:	bf00      	nop
 8011884:	20001d4c 	.word	0x20001d4c
 8011888:	20001db4 	.word	0x20001db4
 801188c:	20001e1c 	.word	0x20001e1c

08011890 <global_stdio_init.part.0>:
 8011890:	b510      	push	{r4, lr}
 8011892:	4b0b      	ldr	r3, [pc, #44]	@ (80118c0 <global_stdio_init.part.0+0x30>)
 8011894:	4c0b      	ldr	r4, [pc, #44]	@ (80118c4 <global_stdio_init.part.0+0x34>)
 8011896:	4a0c      	ldr	r2, [pc, #48]	@ (80118c8 <global_stdio_init.part.0+0x38>)
 8011898:	601a      	str	r2, [r3, #0]
 801189a:	4620      	mov	r0, r4
 801189c:	2200      	movs	r2, #0
 801189e:	2104      	movs	r1, #4
 80118a0:	f7ff ff94 	bl	80117cc <std>
 80118a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80118a8:	2201      	movs	r2, #1
 80118aa:	2109      	movs	r1, #9
 80118ac:	f7ff ff8e 	bl	80117cc <std>
 80118b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80118b4:	2202      	movs	r2, #2
 80118b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80118ba:	2112      	movs	r1, #18
 80118bc:	f7ff bf86 	b.w	80117cc <std>
 80118c0:	20001e84 	.word	0x20001e84
 80118c4:	20001d4c 	.word	0x20001d4c
 80118c8:	08011839 	.word	0x08011839

080118cc <__sfp_lock_acquire>:
 80118cc:	4801      	ldr	r0, [pc, #4]	@ (80118d4 <__sfp_lock_acquire+0x8>)
 80118ce:	f000 b8ea 	b.w	8011aa6 <__retarget_lock_acquire_recursive>
 80118d2:	bf00      	nop
 80118d4:	20001e89 	.word	0x20001e89

080118d8 <__sfp_lock_release>:
 80118d8:	4801      	ldr	r0, [pc, #4]	@ (80118e0 <__sfp_lock_release+0x8>)
 80118da:	f000 b8e5 	b.w	8011aa8 <__retarget_lock_release_recursive>
 80118de:	bf00      	nop
 80118e0:	20001e89 	.word	0x20001e89

080118e4 <__sinit>:
 80118e4:	b510      	push	{r4, lr}
 80118e6:	4604      	mov	r4, r0
 80118e8:	f7ff fff0 	bl	80118cc <__sfp_lock_acquire>
 80118ec:	6a23      	ldr	r3, [r4, #32]
 80118ee:	b11b      	cbz	r3, 80118f8 <__sinit+0x14>
 80118f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80118f4:	f7ff bff0 	b.w	80118d8 <__sfp_lock_release>
 80118f8:	4b04      	ldr	r3, [pc, #16]	@ (801190c <__sinit+0x28>)
 80118fa:	6223      	str	r3, [r4, #32]
 80118fc:	4b04      	ldr	r3, [pc, #16]	@ (8011910 <__sinit+0x2c>)
 80118fe:	681b      	ldr	r3, [r3, #0]
 8011900:	2b00      	cmp	r3, #0
 8011902:	d1f5      	bne.n	80118f0 <__sinit+0xc>
 8011904:	f7ff ffc4 	bl	8011890 <global_stdio_init.part.0>
 8011908:	e7f2      	b.n	80118f0 <__sinit+0xc>
 801190a:	bf00      	nop
 801190c:	08011851 	.word	0x08011851
 8011910:	20001e84 	.word	0x20001e84

08011914 <_fwalk_sglue>:
 8011914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011918:	4607      	mov	r7, r0
 801191a:	4688      	mov	r8, r1
 801191c:	4614      	mov	r4, r2
 801191e:	2600      	movs	r6, #0
 8011920:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011924:	f1b9 0901 	subs.w	r9, r9, #1
 8011928:	d505      	bpl.n	8011936 <_fwalk_sglue+0x22>
 801192a:	6824      	ldr	r4, [r4, #0]
 801192c:	2c00      	cmp	r4, #0
 801192e:	d1f7      	bne.n	8011920 <_fwalk_sglue+0xc>
 8011930:	4630      	mov	r0, r6
 8011932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011936:	89ab      	ldrh	r3, [r5, #12]
 8011938:	2b01      	cmp	r3, #1
 801193a:	d907      	bls.n	801194c <_fwalk_sglue+0x38>
 801193c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011940:	3301      	adds	r3, #1
 8011942:	d003      	beq.n	801194c <_fwalk_sglue+0x38>
 8011944:	4629      	mov	r1, r5
 8011946:	4638      	mov	r0, r7
 8011948:	47c0      	blx	r8
 801194a:	4306      	orrs	r6, r0
 801194c:	3568      	adds	r5, #104	@ 0x68
 801194e:	e7e9      	b.n	8011924 <_fwalk_sglue+0x10>

08011950 <iprintf>:
 8011950:	b40f      	push	{r0, r1, r2, r3}
 8011952:	b507      	push	{r0, r1, r2, lr}
 8011954:	4906      	ldr	r1, [pc, #24]	@ (8011970 <iprintf+0x20>)
 8011956:	ab04      	add	r3, sp, #16
 8011958:	6808      	ldr	r0, [r1, #0]
 801195a:	f853 2b04 	ldr.w	r2, [r3], #4
 801195e:	6881      	ldr	r1, [r0, #8]
 8011960:	9301      	str	r3, [sp, #4]
 8011962:	f001 f88f 	bl	8012a84 <_vfiprintf_r>
 8011966:	b003      	add	sp, #12
 8011968:	f85d eb04 	ldr.w	lr, [sp], #4
 801196c:	b004      	add	sp, #16
 801196e:	4770      	bx	lr
 8011970:	200000c8 	.word	0x200000c8

08011974 <putchar>:
 8011974:	4b02      	ldr	r3, [pc, #8]	@ (8011980 <putchar+0xc>)
 8011976:	4601      	mov	r1, r0
 8011978:	6818      	ldr	r0, [r3, #0]
 801197a:	6882      	ldr	r2, [r0, #8]
 801197c:	f001 bfde 	b.w	801393c <_putc_r>
 8011980:	200000c8 	.word	0x200000c8

08011984 <_puts_r>:
 8011984:	6a03      	ldr	r3, [r0, #32]
 8011986:	b570      	push	{r4, r5, r6, lr}
 8011988:	6884      	ldr	r4, [r0, #8]
 801198a:	4605      	mov	r5, r0
 801198c:	460e      	mov	r6, r1
 801198e:	b90b      	cbnz	r3, 8011994 <_puts_r+0x10>
 8011990:	f7ff ffa8 	bl	80118e4 <__sinit>
 8011994:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011996:	07db      	lsls	r3, r3, #31
 8011998:	d405      	bmi.n	80119a6 <_puts_r+0x22>
 801199a:	89a3      	ldrh	r3, [r4, #12]
 801199c:	0598      	lsls	r0, r3, #22
 801199e:	d402      	bmi.n	80119a6 <_puts_r+0x22>
 80119a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80119a2:	f000 f880 	bl	8011aa6 <__retarget_lock_acquire_recursive>
 80119a6:	89a3      	ldrh	r3, [r4, #12]
 80119a8:	0719      	lsls	r1, r3, #28
 80119aa:	d502      	bpl.n	80119b2 <_puts_r+0x2e>
 80119ac:	6923      	ldr	r3, [r4, #16]
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d135      	bne.n	8011a1e <_puts_r+0x9a>
 80119b2:	4621      	mov	r1, r4
 80119b4:	4628      	mov	r0, r5
 80119b6:	f001 ff09 	bl	80137cc <__swsetup_r>
 80119ba:	b380      	cbz	r0, 8011a1e <_puts_r+0x9a>
 80119bc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80119c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80119c2:	07da      	lsls	r2, r3, #31
 80119c4:	d405      	bmi.n	80119d2 <_puts_r+0x4e>
 80119c6:	89a3      	ldrh	r3, [r4, #12]
 80119c8:	059b      	lsls	r3, r3, #22
 80119ca:	d402      	bmi.n	80119d2 <_puts_r+0x4e>
 80119cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80119ce:	f000 f86b 	bl	8011aa8 <__retarget_lock_release_recursive>
 80119d2:	4628      	mov	r0, r5
 80119d4:	bd70      	pop	{r4, r5, r6, pc}
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	da04      	bge.n	80119e4 <_puts_r+0x60>
 80119da:	69a2      	ldr	r2, [r4, #24]
 80119dc:	429a      	cmp	r2, r3
 80119de:	dc17      	bgt.n	8011a10 <_puts_r+0x8c>
 80119e0:	290a      	cmp	r1, #10
 80119e2:	d015      	beq.n	8011a10 <_puts_r+0x8c>
 80119e4:	6823      	ldr	r3, [r4, #0]
 80119e6:	1c5a      	adds	r2, r3, #1
 80119e8:	6022      	str	r2, [r4, #0]
 80119ea:	7019      	strb	r1, [r3, #0]
 80119ec:	68a3      	ldr	r3, [r4, #8]
 80119ee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80119f2:	3b01      	subs	r3, #1
 80119f4:	60a3      	str	r3, [r4, #8]
 80119f6:	2900      	cmp	r1, #0
 80119f8:	d1ed      	bne.n	80119d6 <_puts_r+0x52>
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	da11      	bge.n	8011a22 <_puts_r+0x9e>
 80119fe:	4622      	mov	r2, r4
 8011a00:	210a      	movs	r1, #10
 8011a02:	4628      	mov	r0, r5
 8011a04:	f001 fea3 	bl	801374e <__swbuf_r>
 8011a08:	3001      	adds	r0, #1
 8011a0a:	d0d7      	beq.n	80119bc <_puts_r+0x38>
 8011a0c:	250a      	movs	r5, #10
 8011a0e:	e7d7      	b.n	80119c0 <_puts_r+0x3c>
 8011a10:	4622      	mov	r2, r4
 8011a12:	4628      	mov	r0, r5
 8011a14:	f001 fe9b 	bl	801374e <__swbuf_r>
 8011a18:	3001      	adds	r0, #1
 8011a1a:	d1e7      	bne.n	80119ec <_puts_r+0x68>
 8011a1c:	e7ce      	b.n	80119bc <_puts_r+0x38>
 8011a1e:	3e01      	subs	r6, #1
 8011a20:	e7e4      	b.n	80119ec <_puts_r+0x68>
 8011a22:	6823      	ldr	r3, [r4, #0]
 8011a24:	1c5a      	adds	r2, r3, #1
 8011a26:	6022      	str	r2, [r4, #0]
 8011a28:	220a      	movs	r2, #10
 8011a2a:	701a      	strb	r2, [r3, #0]
 8011a2c:	e7ee      	b.n	8011a0c <_puts_r+0x88>
	...

08011a30 <puts>:
 8011a30:	4b02      	ldr	r3, [pc, #8]	@ (8011a3c <puts+0xc>)
 8011a32:	4601      	mov	r1, r0
 8011a34:	6818      	ldr	r0, [r3, #0]
 8011a36:	f7ff bfa5 	b.w	8011984 <_puts_r>
 8011a3a:	bf00      	nop
 8011a3c:	200000c8 	.word	0x200000c8

08011a40 <memset>:
 8011a40:	4402      	add	r2, r0
 8011a42:	4603      	mov	r3, r0
 8011a44:	4293      	cmp	r3, r2
 8011a46:	d100      	bne.n	8011a4a <memset+0xa>
 8011a48:	4770      	bx	lr
 8011a4a:	f803 1b01 	strb.w	r1, [r3], #1
 8011a4e:	e7f9      	b.n	8011a44 <memset+0x4>

08011a50 <__errno>:
 8011a50:	4b01      	ldr	r3, [pc, #4]	@ (8011a58 <__errno+0x8>)
 8011a52:	6818      	ldr	r0, [r3, #0]
 8011a54:	4770      	bx	lr
 8011a56:	bf00      	nop
 8011a58:	200000c8 	.word	0x200000c8

08011a5c <__libc_init_array>:
 8011a5c:	b570      	push	{r4, r5, r6, lr}
 8011a5e:	4d0d      	ldr	r5, [pc, #52]	@ (8011a94 <__libc_init_array+0x38>)
 8011a60:	4c0d      	ldr	r4, [pc, #52]	@ (8011a98 <__libc_init_array+0x3c>)
 8011a62:	1b64      	subs	r4, r4, r5
 8011a64:	10a4      	asrs	r4, r4, #2
 8011a66:	2600      	movs	r6, #0
 8011a68:	42a6      	cmp	r6, r4
 8011a6a:	d109      	bne.n	8011a80 <__libc_init_array+0x24>
 8011a6c:	4d0b      	ldr	r5, [pc, #44]	@ (8011a9c <__libc_init_array+0x40>)
 8011a6e:	4c0c      	ldr	r4, [pc, #48]	@ (8011aa0 <__libc_init_array+0x44>)
 8011a70:	f002 f92a 	bl	8013cc8 <_init>
 8011a74:	1b64      	subs	r4, r4, r5
 8011a76:	10a4      	asrs	r4, r4, #2
 8011a78:	2600      	movs	r6, #0
 8011a7a:	42a6      	cmp	r6, r4
 8011a7c:	d105      	bne.n	8011a8a <__libc_init_array+0x2e>
 8011a7e:	bd70      	pop	{r4, r5, r6, pc}
 8011a80:	f855 3b04 	ldr.w	r3, [r5], #4
 8011a84:	4798      	blx	r3
 8011a86:	3601      	adds	r6, #1
 8011a88:	e7ee      	b.n	8011a68 <__libc_init_array+0xc>
 8011a8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8011a8e:	4798      	blx	r3
 8011a90:	3601      	adds	r6, #1
 8011a92:	e7f2      	b.n	8011a7a <__libc_init_array+0x1e>
 8011a94:	08015d5c 	.word	0x08015d5c
 8011a98:	08015d5c 	.word	0x08015d5c
 8011a9c:	08015d5c 	.word	0x08015d5c
 8011aa0:	08015d60 	.word	0x08015d60

08011aa4 <__retarget_lock_init_recursive>:
 8011aa4:	4770      	bx	lr

08011aa6 <__retarget_lock_acquire_recursive>:
 8011aa6:	4770      	bx	lr

08011aa8 <__retarget_lock_release_recursive>:
 8011aa8:	4770      	bx	lr
	...

08011aac <_localeconv_r>:
 8011aac:	4800      	ldr	r0, [pc, #0]	@ (8011ab0 <_localeconv_r+0x4>)
 8011aae:	4770      	bx	lr
 8011ab0:	20000208 	.word	0x20000208

08011ab4 <memcpy>:
 8011ab4:	440a      	add	r2, r1
 8011ab6:	4291      	cmp	r1, r2
 8011ab8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8011abc:	d100      	bne.n	8011ac0 <memcpy+0xc>
 8011abe:	4770      	bx	lr
 8011ac0:	b510      	push	{r4, lr}
 8011ac2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011ac6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011aca:	4291      	cmp	r1, r2
 8011acc:	d1f9      	bne.n	8011ac2 <memcpy+0xe>
 8011ace:	bd10      	pop	{r4, pc}

08011ad0 <quorem>:
 8011ad0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ad4:	6903      	ldr	r3, [r0, #16]
 8011ad6:	690c      	ldr	r4, [r1, #16]
 8011ad8:	42a3      	cmp	r3, r4
 8011ada:	4607      	mov	r7, r0
 8011adc:	db7e      	blt.n	8011bdc <quorem+0x10c>
 8011ade:	3c01      	subs	r4, #1
 8011ae0:	f101 0814 	add.w	r8, r1, #20
 8011ae4:	00a3      	lsls	r3, r4, #2
 8011ae6:	f100 0514 	add.w	r5, r0, #20
 8011aea:	9300      	str	r3, [sp, #0]
 8011aec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011af0:	9301      	str	r3, [sp, #4]
 8011af2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011af6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011afa:	3301      	adds	r3, #1
 8011afc:	429a      	cmp	r2, r3
 8011afe:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011b02:	fbb2 f6f3 	udiv	r6, r2, r3
 8011b06:	d32e      	bcc.n	8011b66 <quorem+0x96>
 8011b08:	f04f 0a00 	mov.w	sl, #0
 8011b0c:	46c4      	mov	ip, r8
 8011b0e:	46ae      	mov	lr, r5
 8011b10:	46d3      	mov	fp, sl
 8011b12:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011b16:	b298      	uxth	r0, r3
 8011b18:	fb06 a000 	mla	r0, r6, r0, sl
 8011b1c:	0c02      	lsrs	r2, r0, #16
 8011b1e:	0c1b      	lsrs	r3, r3, #16
 8011b20:	fb06 2303 	mla	r3, r6, r3, r2
 8011b24:	f8de 2000 	ldr.w	r2, [lr]
 8011b28:	b280      	uxth	r0, r0
 8011b2a:	b292      	uxth	r2, r2
 8011b2c:	1a12      	subs	r2, r2, r0
 8011b2e:	445a      	add	r2, fp
 8011b30:	f8de 0000 	ldr.w	r0, [lr]
 8011b34:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011b38:	b29b      	uxth	r3, r3
 8011b3a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8011b3e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8011b42:	b292      	uxth	r2, r2
 8011b44:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8011b48:	45e1      	cmp	r9, ip
 8011b4a:	f84e 2b04 	str.w	r2, [lr], #4
 8011b4e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8011b52:	d2de      	bcs.n	8011b12 <quorem+0x42>
 8011b54:	9b00      	ldr	r3, [sp, #0]
 8011b56:	58eb      	ldr	r3, [r5, r3]
 8011b58:	b92b      	cbnz	r3, 8011b66 <quorem+0x96>
 8011b5a:	9b01      	ldr	r3, [sp, #4]
 8011b5c:	3b04      	subs	r3, #4
 8011b5e:	429d      	cmp	r5, r3
 8011b60:	461a      	mov	r2, r3
 8011b62:	d32f      	bcc.n	8011bc4 <quorem+0xf4>
 8011b64:	613c      	str	r4, [r7, #16]
 8011b66:	4638      	mov	r0, r7
 8011b68:	f001 fc78 	bl	801345c <__mcmp>
 8011b6c:	2800      	cmp	r0, #0
 8011b6e:	db25      	blt.n	8011bbc <quorem+0xec>
 8011b70:	4629      	mov	r1, r5
 8011b72:	2000      	movs	r0, #0
 8011b74:	f858 2b04 	ldr.w	r2, [r8], #4
 8011b78:	f8d1 c000 	ldr.w	ip, [r1]
 8011b7c:	fa1f fe82 	uxth.w	lr, r2
 8011b80:	fa1f f38c 	uxth.w	r3, ip
 8011b84:	eba3 030e 	sub.w	r3, r3, lr
 8011b88:	4403      	add	r3, r0
 8011b8a:	0c12      	lsrs	r2, r2, #16
 8011b8c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8011b90:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8011b94:	b29b      	uxth	r3, r3
 8011b96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011b9a:	45c1      	cmp	r9, r8
 8011b9c:	f841 3b04 	str.w	r3, [r1], #4
 8011ba0:	ea4f 4022 	mov.w	r0, r2, asr #16
 8011ba4:	d2e6      	bcs.n	8011b74 <quorem+0xa4>
 8011ba6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011baa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011bae:	b922      	cbnz	r2, 8011bba <quorem+0xea>
 8011bb0:	3b04      	subs	r3, #4
 8011bb2:	429d      	cmp	r5, r3
 8011bb4:	461a      	mov	r2, r3
 8011bb6:	d30b      	bcc.n	8011bd0 <quorem+0x100>
 8011bb8:	613c      	str	r4, [r7, #16]
 8011bba:	3601      	adds	r6, #1
 8011bbc:	4630      	mov	r0, r6
 8011bbe:	b003      	add	sp, #12
 8011bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bc4:	6812      	ldr	r2, [r2, #0]
 8011bc6:	3b04      	subs	r3, #4
 8011bc8:	2a00      	cmp	r2, #0
 8011bca:	d1cb      	bne.n	8011b64 <quorem+0x94>
 8011bcc:	3c01      	subs	r4, #1
 8011bce:	e7c6      	b.n	8011b5e <quorem+0x8e>
 8011bd0:	6812      	ldr	r2, [r2, #0]
 8011bd2:	3b04      	subs	r3, #4
 8011bd4:	2a00      	cmp	r2, #0
 8011bd6:	d1ef      	bne.n	8011bb8 <quorem+0xe8>
 8011bd8:	3c01      	subs	r4, #1
 8011bda:	e7ea      	b.n	8011bb2 <quorem+0xe2>
 8011bdc:	2000      	movs	r0, #0
 8011bde:	e7ee      	b.n	8011bbe <quorem+0xee>

08011be0 <_dtoa_r>:
 8011be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011be4:	69c7      	ldr	r7, [r0, #28]
 8011be6:	b097      	sub	sp, #92	@ 0x5c
 8011be8:	ed8d 0b04 	vstr	d0, [sp, #16]
 8011bec:	ec55 4b10 	vmov	r4, r5, d0
 8011bf0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8011bf2:	9107      	str	r1, [sp, #28]
 8011bf4:	4681      	mov	r9, r0
 8011bf6:	920c      	str	r2, [sp, #48]	@ 0x30
 8011bf8:	9311      	str	r3, [sp, #68]	@ 0x44
 8011bfa:	b97f      	cbnz	r7, 8011c1c <_dtoa_r+0x3c>
 8011bfc:	2010      	movs	r0, #16
 8011bfe:	f001 f859 	bl	8012cb4 <malloc>
 8011c02:	4602      	mov	r2, r0
 8011c04:	f8c9 001c 	str.w	r0, [r9, #28]
 8011c08:	b920      	cbnz	r0, 8011c14 <_dtoa_r+0x34>
 8011c0a:	4ba9      	ldr	r3, [pc, #676]	@ (8011eb0 <_dtoa_r+0x2d0>)
 8011c0c:	21ef      	movs	r1, #239	@ 0xef
 8011c0e:	48a9      	ldr	r0, [pc, #676]	@ (8011eb4 <_dtoa_r+0x2d4>)
 8011c10:	f001 ff5a 	bl	8013ac8 <__assert_func>
 8011c14:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8011c18:	6007      	str	r7, [r0, #0]
 8011c1a:	60c7      	str	r7, [r0, #12]
 8011c1c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8011c20:	6819      	ldr	r1, [r3, #0]
 8011c22:	b159      	cbz	r1, 8011c3c <_dtoa_r+0x5c>
 8011c24:	685a      	ldr	r2, [r3, #4]
 8011c26:	604a      	str	r2, [r1, #4]
 8011c28:	2301      	movs	r3, #1
 8011c2a:	4093      	lsls	r3, r2
 8011c2c:	608b      	str	r3, [r1, #8]
 8011c2e:	4648      	mov	r0, r9
 8011c30:	f001 f9e2 	bl	8012ff8 <_Bfree>
 8011c34:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8011c38:	2200      	movs	r2, #0
 8011c3a:	601a      	str	r2, [r3, #0]
 8011c3c:	1e2b      	subs	r3, r5, #0
 8011c3e:	bfb9      	ittee	lt
 8011c40:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8011c44:	9305      	strlt	r3, [sp, #20]
 8011c46:	2300      	movge	r3, #0
 8011c48:	6033      	strge	r3, [r6, #0]
 8011c4a:	9f05      	ldr	r7, [sp, #20]
 8011c4c:	4b9a      	ldr	r3, [pc, #616]	@ (8011eb8 <_dtoa_r+0x2d8>)
 8011c4e:	bfbc      	itt	lt
 8011c50:	2201      	movlt	r2, #1
 8011c52:	6032      	strlt	r2, [r6, #0]
 8011c54:	43bb      	bics	r3, r7
 8011c56:	d112      	bne.n	8011c7e <_dtoa_r+0x9e>
 8011c58:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8011c5a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8011c5e:	6013      	str	r3, [r2, #0]
 8011c60:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011c64:	4323      	orrs	r3, r4
 8011c66:	f000 855a 	beq.w	801271e <_dtoa_r+0xb3e>
 8011c6a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011c6c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8011ecc <_dtoa_r+0x2ec>
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	f000 855c 	beq.w	801272e <_dtoa_r+0xb4e>
 8011c76:	f10a 0303 	add.w	r3, sl, #3
 8011c7a:	f000 bd56 	b.w	801272a <_dtoa_r+0xb4a>
 8011c7e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8011c82:	2200      	movs	r2, #0
 8011c84:	ec51 0b17 	vmov	r0, r1, d7
 8011c88:	2300      	movs	r3, #0
 8011c8a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8011c8e:	f7ee ff03 	bl	8000a98 <__aeabi_dcmpeq>
 8011c92:	4680      	mov	r8, r0
 8011c94:	b158      	cbz	r0, 8011cae <_dtoa_r+0xce>
 8011c96:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8011c98:	2301      	movs	r3, #1
 8011c9a:	6013      	str	r3, [r2, #0]
 8011c9c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011c9e:	b113      	cbz	r3, 8011ca6 <_dtoa_r+0xc6>
 8011ca0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8011ca2:	4b86      	ldr	r3, [pc, #536]	@ (8011ebc <_dtoa_r+0x2dc>)
 8011ca4:	6013      	str	r3, [r2, #0]
 8011ca6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8011ed0 <_dtoa_r+0x2f0>
 8011caa:	f000 bd40 	b.w	801272e <_dtoa_r+0xb4e>
 8011cae:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8011cb2:	aa14      	add	r2, sp, #80	@ 0x50
 8011cb4:	a915      	add	r1, sp, #84	@ 0x54
 8011cb6:	4648      	mov	r0, r9
 8011cb8:	f001 fc80 	bl	80135bc <__d2b>
 8011cbc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8011cc0:	9002      	str	r0, [sp, #8]
 8011cc2:	2e00      	cmp	r6, #0
 8011cc4:	d078      	beq.n	8011db8 <_dtoa_r+0x1d8>
 8011cc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011cc8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8011ccc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011cd0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8011cd4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8011cd8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8011cdc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8011ce0:	4619      	mov	r1, r3
 8011ce2:	2200      	movs	r2, #0
 8011ce4:	4b76      	ldr	r3, [pc, #472]	@ (8011ec0 <_dtoa_r+0x2e0>)
 8011ce6:	f7ee fab7 	bl	8000258 <__aeabi_dsub>
 8011cea:	a36b      	add	r3, pc, #428	@ (adr r3, 8011e98 <_dtoa_r+0x2b8>)
 8011cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cf0:	f7ee fc6a 	bl	80005c8 <__aeabi_dmul>
 8011cf4:	a36a      	add	r3, pc, #424	@ (adr r3, 8011ea0 <_dtoa_r+0x2c0>)
 8011cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cfa:	f7ee faaf 	bl	800025c <__adddf3>
 8011cfe:	4604      	mov	r4, r0
 8011d00:	4630      	mov	r0, r6
 8011d02:	460d      	mov	r5, r1
 8011d04:	f7ee fbf6 	bl	80004f4 <__aeabi_i2d>
 8011d08:	a367      	add	r3, pc, #412	@ (adr r3, 8011ea8 <_dtoa_r+0x2c8>)
 8011d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d0e:	f7ee fc5b 	bl	80005c8 <__aeabi_dmul>
 8011d12:	4602      	mov	r2, r0
 8011d14:	460b      	mov	r3, r1
 8011d16:	4620      	mov	r0, r4
 8011d18:	4629      	mov	r1, r5
 8011d1a:	f7ee fa9f 	bl	800025c <__adddf3>
 8011d1e:	4604      	mov	r4, r0
 8011d20:	460d      	mov	r5, r1
 8011d22:	f7ee ff01 	bl	8000b28 <__aeabi_d2iz>
 8011d26:	2200      	movs	r2, #0
 8011d28:	4607      	mov	r7, r0
 8011d2a:	2300      	movs	r3, #0
 8011d2c:	4620      	mov	r0, r4
 8011d2e:	4629      	mov	r1, r5
 8011d30:	f7ee febc 	bl	8000aac <__aeabi_dcmplt>
 8011d34:	b140      	cbz	r0, 8011d48 <_dtoa_r+0x168>
 8011d36:	4638      	mov	r0, r7
 8011d38:	f7ee fbdc 	bl	80004f4 <__aeabi_i2d>
 8011d3c:	4622      	mov	r2, r4
 8011d3e:	462b      	mov	r3, r5
 8011d40:	f7ee feaa 	bl	8000a98 <__aeabi_dcmpeq>
 8011d44:	b900      	cbnz	r0, 8011d48 <_dtoa_r+0x168>
 8011d46:	3f01      	subs	r7, #1
 8011d48:	2f16      	cmp	r7, #22
 8011d4a:	d852      	bhi.n	8011df2 <_dtoa_r+0x212>
 8011d4c:	4b5d      	ldr	r3, [pc, #372]	@ (8011ec4 <_dtoa_r+0x2e4>)
 8011d4e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d56:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8011d5a:	f7ee fea7 	bl	8000aac <__aeabi_dcmplt>
 8011d5e:	2800      	cmp	r0, #0
 8011d60:	d049      	beq.n	8011df6 <_dtoa_r+0x216>
 8011d62:	3f01      	subs	r7, #1
 8011d64:	2300      	movs	r3, #0
 8011d66:	9310      	str	r3, [sp, #64]	@ 0x40
 8011d68:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8011d6a:	1b9b      	subs	r3, r3, r6
 8011d6c:	1e5a      	subs	r2, r3, #1
 8011d6e:	bf45      	ittet	mi
 8011d70:	f1c3 0301 	rsbmi	r3, r3, #1
 8011d74:	9300      	strmi	r3, [sp, #0]
 8011d76:	2300      	movpl	r3, #0
 8011d78:	2300      	movmi	r3, #0
 8011d7a:	9206      	str	r2, [sp, #24]
 8011d7c:	bf54      	ite	pl
 8011d7e:	9300      	strpl	r3, [sp, #0]
 8011d80:	9306      	strmi	r3, [sp, #24]
 8011d82:	2f00      	cmp	r7, #0
 8011d84:	db39      	blt.n	8011dfa <_dtoa_r+0x21a>
 8011d86:	9b06      	ldr	r3, [sp, #24]
 8011d88:	970d      	str	r7, [sp, #52]	@ 0x34
 8011d8a:	443b      	add	r3, r7
 8011d8c:	9306      	str	r3, [sp, #24]
 8011d8e:	2300      	movs	r3, #0
 8011d90:	9308      	str	r3, [sp, #32]
 8011d92:	9b07      	ldr	r3, [sp, #28]
 8011d94:	2b09      	cmp	r3, #9
 8011d96:	d863      	bhi.n	8011e60 <_dtoa_r+0x280>
 8011d98:	2b05      	cmp	r3, #5
 8011d9a:	bfc4      	itt	gt
 8011d9c:	3b04      	subgt	r3, #4
 8011d9e:	9307      	strgt	r3, [sp, #28]
 8011da0:	9b07      	ldr	r3, [sp, #28]
 8011da2:	f1a3 0302 	sub.w	r3, r3, #2
 8011da6:	bfcc      	ite	gt
 8011da8:	2400      	movgt	r4, #0
 8011daa:	2401      	movle	r4, #1
 8011dac:	2b03      	cmp	r3, #3
 8011dae:	d863      	bhi.n	8011e78 <_dtoa_r+0x298>
 8011db0:	e8df f003 	tbb	[pc, r3]
 8011db4:	2b375452 	.word	0x2b375452
 8011db8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8011dbc:	441e      	add	r6, r3
 8011dbe:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8011dc2:	2b20      	cmp	r3, #32
 8011dc4:	bfc1      	itttt	gt
 8011dc6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8011dca:	409f      	lslgt	r7, r3
 8011dcc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8011dd0:	fa24 f303 	lsrgt.w	r3, r4, r3
 8011dd4:	bfd6      	itet	le
 8011dd6:	f1c3 0320 	rsble	r3, r3, #32
 8011dda:	ea47 0003 	orrgt.w	r0, r7, r3
 8011dde:	fa04 f003 	lslle.w	r0, r4, r3
 8011de2:	f7ee fb77 	bl	80004d4 <__aeabi_ui2d>
 8011de6:	2201      	movs	r2, #1
 8011de8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8011dec:	3e01      	subs	r6, #1
 8011dee:	9212      	str	r2, [sp, #72]	@ 0x48
 8011df0:	e776      	b.n	8011ce0 <_dtoa_r+0x100>
 8011df2:	2301      	movs	r3, #1
 8011df4:	e7b7      	b.n	8011d66 <_dtoa_r+0x186>
 8011df6:	9010      	str	r0, [sp, #64]	@ 0x40
 8011df8:	e7b6      	b.n	8011d68 <_dtoa_r+0x188>
 8011dfa:	9b00      	ldr	r3, [sp, #0]
 8011dfc:	1bdb      	subs	r3, r3, r7
 8011dfe:	9300      	str	r3, [sp, #0]
 8011e00:	427b      	negs	r3, r7
 8011e02:	9308      	str	r3, [sp, #32]
 8011e04:	2300      	movs	r3, #0
 8011e06:	930d      	str	r3, [sp, #52]	@ 0x34
 8011e08:	e7c3      	b.n	8011d92 <_dtoa_r+0x1b2>
 8011e0a:	2301      	movs	r3, #1
 8011e0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8011e0e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011e10:	eb07 0b03 	add.w	fp, r7, r3
 8011e14:	f10b 0301 	add.w	r3, fp, #1
 8011e18:	2b01      	cmp	r3, #1
 8011e1a:	9303      	str	r3, [sp, #12]
 8011e1c:	bfb8      	it	lt
 8011e1e:	2301      	movlt	r3, #1
 8011e20:	e006      	b.n	8011e30 <_dtoa_r+0x250>
 8011e22:	2301      	movs	r3, #1
 8011e24:	9309      	str	r3, [sp, #36]	@ 0x24
 8011e26:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	dd28      	ble.n	8011e7e <_dtoa_r+0x29e>
 8011e2c:	469b      	mov	fp, r3
 8011e2e:	9303      	str	r3, [sp, #12]
 8011e30:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8011e34:	2100      	movs	r1, #0
 8011e36:	2204      	movs	r2, #4
 8011e38:	f102 0514 	add.w	r5, r2, #20
 8011e3c:	429d      	cmp	r5, r3
 8011e3e:	d926      	bls.n	8011e8e <_dtoa_r+0x2ae>
 8011e40:	6041      	str	r1, [r0, #4]
 8011e42:	4648      	mov	r0, r9
 8011e44:	f001 f898 	bl	8012f78 <_Balloc>
 8011e48:	4682      	mov	sl, r0
 8011e4a:	2800      	cmp	r0, #0
 8011e4c:	d142      	bne.n	8011ed4 <_dtoa_r+0x2f4>
 8011e4e:	4b1e      	ldr	r3, [pc, #120]	@ (8011ec8 <_dtoa_r+0x2e8>)
 8011e50:	4602      	mov	r2, r0
 8011e52:	f240 11af 	movw	r1, #431	@ 0x1af
 8011e56:	e6da      	b.n	8011c0e <_dtoa_r+0x2e>
 8011e58:	2300      	movs	r3, #0
 8011e5a:	e7e3      	b.n	8011e24 <_dtoa_r+0x244>
 8011e5c:	2300      	movs	r3, #0
 8011e5e:	e7d5      	b.n	8011e0c <_dtoa_r+0x22c>
 8011e60:	2401      	movs	r4, #1
 8011e62:	2300      	movs	r3, #0
 8011e64:	9307      	str	r3, [sp, #28]
 8011e66:	9409      	str	r4, [sp, #36]	@ 0x24
 8011e68:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8011e6c:	2200      	movs	r2, #0
 8011e6e:	f8cd b00c 	str.w	fp, [sp, #12]
 8011e72:	2312      	movs	r3, #18
 8011e74:	920c      	str	r2, [sp, #48]	@ 0x30
 8011e76:	e7db      	b.n	8011e30 <_dtoa_r+0x250>
 8011e78:	2301      	movs	r3, #1
 8011e7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8011e7c:	e7f4      	b.n	8011e68 <_dtoa_r+0x288>
 8011e7e:	f04f 0b01 	mov.w	fp, #1
 8011e82:	f8cd b00c 	str.w	fp, [sp, #12]
 8011e86:	465b      	mov	r3, fp
 8011e88:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8011e8c:	e7d0      	b.n	8011e30 <_dtoa_r+0x250>
 8011e8e:	3101      	adds	r1, #1
 8011e90:	0052      	lsls	r2, r2, #1
 8011e92:	e7d1      	b.n	8011e38 <_dtoa_r+0x258>
 8011e94:	f3af 8000 	nop.w
 8011e98:	636f4361 	.word	0x636f4361
 8011e9c:	3fd287a7 	.word	0x3fd287a7
 8011ea0:	8b60c8b3 	.word	0x8b60c8b3
 8011ea4:	3fc68a28 	.word	0x3fc68a28
 8011ea8:	509f79fb 	.word	0x509f79fb
 8011eac:	3fd34413 	.word	0x3fd34413
 8011eb0:	08015a21 	.word	0x08015a21
 8011eb4:	08015a38 	.word	0x08015a38
 8011eb8:	7ff00000 	.word	0x7ff00000
 8011ebc:	080159f1 	.word	0x080159f1
 8011ec0:	3ff80000 	.word	0x3ff80000
 8011ec4:	08015b88 	.word	0x08015b88
 8011ec8:	08015a90 	.word	0x08015a90
 8011ecc:	08015a1d 	.word	0x08015a1d
 8011ed0:	080159f0 	.word	0x080159f0
 8011ed4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8011ed8:	6018      	str	r0, [r3, #0]
 8011eda:	9b03      	ldr	r3, [sp, #12]
 8011edc:	2b0e      	cmp	r3, #14
 8011ede:	f200 80a1 	bhi.w	8012024 <_dtoa_r+0x444>
 8011ee2:	2c00      	cmp	r4, #0
 8011ee4:	f000 809e 	beq.w	8012024 <_dtoa_r+0x444>
 8011ee8:	2f00      	cmp	r7, #0
 8011eea:	dd33      	ble.n	8011f54 <_dtoa_r+0x374>
 8011eec:	4b9c      	ldr	r3, [pc, #624]	@ (8012160 <_dtoa_r+0x580>)
 8011eee:	f007 020f 	and.w	r2, r7, #15
 8011ef2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011ef6:	ed93 7b00 	vldr	d7, [r3]
 8011efa:	05f8      	lsls	r0, r7, #23
 8011efc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8011f00:	ea4f 1427 	mov.w	r4, r7, asr #4
 8011f04:	d516      	bpl.n	8011f34 <_dtoa_r+0x354>
 8011f06:	4b97      	ldr	r3, [pc, #604]	@ (8012164 <_dtoa_r+0x584>)
 8011f08:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8011f0c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011f10:	f7ee fc84 	bl	800081c <__aeabi_ddiv>
 8011f14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011f18:	f004 040f 	and.w	r4, r4, #15
 8011f1c:	2603      	movs	r6, #3
 8011f1e:	4d91      	ldr	r5, [pc, #580]	@ (8012164 <_dtoa_r+0x584>)
 8011f20:	b954      	cbnz	r4, 8011f38 <_dtoa_r+0x358>
 8011f22:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8011f26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011f2a:	f7ee fc77 	bl	800081c <__aeabi_ddiv>
 8011f2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011f32:	e028      	b.n	8011f86 <_dtoa_r+0x3a6>
 8011f34:	2602      	movs	r6, #2
 8011f36:	e7f2      	b.n	8011f1e <_dtoa_r+0x33e>
 8011f38:	07e1      	lsls	r1, r4, #31
 8011f3a:	d508      	bpl.n	8011f4e <_dtoa_r+0x36e>
 8011f3c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8011f40:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011f44:	f7ee fb40 	bl	80005c8 <__aeabi_dmul>
 8011f48:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8011f4c:	3601      	adds	r6, #1
 8011f4e:	1064      	asrs	r4, r4, #1
 8011f50:	3508      	adds	r5, #8
 8011f52:	e7e5      	b.n	8011f20 <_dtoa_r+0x340>
 8011f54:	f000 80af 	beq.w	80120b6 <_dtoa_r+0x4d6>
 8011f58:	427c      	negs	r4, r7
 8011f5a:	4b81      	ldr	r3, [pc, #516]	@ (8012160 <_dtoa_r+0x580>)
 8011f5c:	4d81      	ldr	r5, [pc, #516]	@ (8012164 <_dtoa_r+0x584>)
 8011f5e:	f004 020f 	and.w	r2, r4, #15
 8011f62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f6a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8011f6e:	f7ee fb2b 	bl	80005c8 <__aeabi_dmul>
 8011f72:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011f76:	1124      	asrs	r4, r4, #4
 8011f78:	2300      	movs	r3, #0
 8011f7a:	2602      	movs	r6, #2
 8011f7c:	2c00      	cmp	r4, #0
 8011f7e:	f040 808f 	bne.w	80120a0 <_dtoa_r+0x4c0>
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d1d3      	bne.n	8011f2e <_dtoa_r+0x34e>
 8011f86:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011f88:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	f000 8094 	beq.w	80120ba <_dtoa_r+0x4da>
 8011f92:	4b75      	ldr	r3, [pc, #468]	@ (8012168 <_dtoa_r+0x588>)
 8011f94:	2200      	movs	r2, #0
 8011f96:	4620      	mov	r0, r4
 8011f98:	4629      	mov	r1, r5
 8011f9a:	f7ee fd87 	bl	8000aac <__aeabi_dcmplt>
 8011f9e:	2800      	cmp	r0, #0
 8011fa0:	f000 808b 	beq.w	80120ba <_dtoa_r+0x4da>
 8011fa4:	9b03      	ldr	r3, [sp, #12]
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	f000 8087 	beq.w	80120ba <_dtoa_r+0x4da>
 8011fac:	f1bb 0f00 	cmp.w	fp, #0
 8011fb0:	dd34      	ble.n	801201c <_dtoa_r+0x43c>
 8011fb2:	4620      	mov	r0, r4
 8011fb4:	4b6d      	ldr	r3, [pc, #436]	@ (801216c <_dtoa_r+0x58c>)
 8011fb6:	2200      	movs	r2, #0
 8011fb8:	4629      	mov	r1, r5
 8011fba:	f7ee fb05 	bl	80005c8 <__aeabi_dmul>
 8011fbe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011fc2:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8011fc6:	3601      	adds	r6, #1
 8011fc8:	465c      	mov	r4, fp
 8011fca:	4630      	mov	r0, r6
 8011fcc:	f7ee fa92 	bl	80004f4 <__aeabi_i2d>
 8011fd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011fd4:	f7ee faf8 	bl	80005c8 <__aeabi_dmul>
 8011fd8:	4b65      	ldr	r3, [pc, #404]	@ (8012170 <_dtoa_r+0x590>)
 8011fda:	2200      	movs	r2, #0
 8011fdc:	f7ee f93e 	bl	800025c <__adddf3>
 8011fe0:	4605      	mov	r5, r0
 8011fe2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8011fe6:	2c00      	cmp	r4, #0
 8011fe8:	d16a      	bne.n	80120c0 <_dtoa_r+0x4e0>
 8011fea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011fee:	4b61      	ldr	r3, [pc, #388]	@ (8012174 <_dtoa_r+0x594>)
 8011ff0:	2200      	movs	r2, #0
 8011ff2:	f7ee f931 	bl	8000258 <__aeabi_dsub>
 8011ff6:	4602      	mov	r2, r0
 8011ff8:	460b      	mov	r3, r1
 8011ffa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011ffe:	462a      	mov	r2, r5
 8012000:	4633      	mov	r3, r6
 8012002:	f7ee fd71 	bl	8000ae8 <__aeabi_dcmpgt>
 8012006:	2800      	cmp	r0, #0
 8012008:	f040 8298 	bne.w	801253c <_dtoa_r+0x95c>
 801200c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012010:	462a      	mov	r2, r5
 8012012:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8012016:	f7ee fd49 	bl	8000aac <__aeabi_dcmplt>
 801201a:	bb38      	cbnz	r0, 801206c <_dtoa_r+0x48c>
 801201c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8012020:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8012024:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8012026:	2b00      	cmp	r3, #0
 8012028:	f2c0 8157 	blt.w	80122da <_dtoa_r+0x6fa>
 801202c:	2f0e      	cmp	r7, #14
 801202e:	f300 8154 	bgt.w	80122da <_dtoa_r+0x6fa>
 8012032:	4b4b      	ldr	r3, [pc, #300]	@ (8012160 <_dtoa_r+0x580>)
 8012034:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012038:	ed93 7b00 	vldr	d7, [r3]
 801203c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801203e:	2b00      	cmp	r3, #0
 8012040:	ed8d 7b00 	vstr	d7, [sp]
 8012044:	f280 80e5 	bge.w	8012212 <_dtoa_r+0x632>
 8012048:	9b03      	ldr	r3, [sp, #12]
 801204a:	2b00      	cmp	r3, #0
 801204c:	f300 80e1 	bgt.w	8012212 <_dtoa_r+0x632>
 8012050:	d10c      	bne.n	801206c <_dtoa_r+0x48c>
 8012052:	4b48      	ldr	r3, [pc, #288]	@ (8012174 <_dtoa_r+0x594>)
 8012054:	2200      	movs	r2, #0
 8012056:	ec51 0b17 	vmov	r0, r1, d7
 801205a:	f7ee fab5 	bl	80005c8 <__aeabi_dmul>
 801205e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012062:	f7ee fd37 	bl	8000ad4 <__aeabi_dcmpge>
 8012066:	2800      	cmp	r0, #0
 8012068:	f000 8266 	beq.w	8012538 <_dtoa_r+0x958>
 801206c:	2400      	movs	r4, #0
 801206e:	4625      	mov	r5, r4
 8012070:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012072:	4656      	mov	r6, sl
 8012074:	ea6f 0803 	mvn.w	r8, r3
 8012078:	2700      	movs	r7, #0
 801207a:	4621      	mov	r1, r4
 801207c:	4648      	mov	r0, r9
 801207e:	f000 ffbb 	bl	8012ff8 <_Bfree>
 8012082:	2d00      	cmp	r5, #0
 8012084:	f000 80bd 	beq.w	8012202 <_dtoa_r+0x622>
 8012088:	b12f      	cbz	r7, 8012096 <_dtoa_r+0x4b6>
 801208a:	42af      	cmp	r7, r5
 801208c:	d003      	beq.n	8012096 <_dtoa_r+0x4b6>
 801208e:	4639      	mov	r1, r7
 8012090:	4648      	mov	r0, r9
 8012092:	f000 ffb1 	bl	8012ff8 <_Bfree>
 8012096:	4629      	mov	r1, r5
 8012098:	4648      	mov	r0, r9
 801209a:	f000 ffad 	bl	8012ff8 <_Bfree>
 801209e:	e0b0      	b.n	8012202 <_dtoa_r+0x622>
 80120a0:	07e2      	lsls	r2, r4, #31
 80120a2:	d505      	bpl.n	80120b0 <_dtoa_r+0x4d0>
 80120a4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80120a8:	f7ee fa8e 	bl	80005c8 <__aeabi_dmul>
 80120ac:	3601      	adds	r6, #1
 80120ae:	2301      	movs	r3, #1
 80120b0:	1064      	asrs	r4, r4, #1
 80120b2:	3508      	adds	r5, #8
 80120b4:	e762      	b.n	8011f7c <_dtoa_r+0x39c>
 80120b6:	2602      	movs	r6, #2
 80120b8:	e765      	b.n	8011f86 <_dtoa_r+0x3a6>
 80120ba:	9c03      	ldr	r4, [sp, #12]
 80120bc:	46b8      	mov	r8, r7
 80120be:	e784      	b.n	8011fca <_dtoa_r+0x3ea>
 80120c0:	4b27      	ldr	r3, [pc, #156]	@ (8012160 <_dtoa_r+0x580>)
 80120c2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80120c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80120c8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80120cc:	4454      	add	r4, sl
 80120ce:	2900      	cmp	r1, #0
 80120d0:	d054      	beq.n	801217c <_dtoa_r+0x59c>
 80120d2:	4929      	ldr	r1, [pc, #164]	@ (8012178 <_dtoa_r+0x598>)
 80120d4:	2000      	movs	r0, #0
 80120d6:	f7ee fba1 	bl	800081c <__aeabi_ddiv>
 80120da:	4633      	mov	r3, r6
 80120dc:	462a      	mov	r2, r5
 80120de:	f7ee f8bb 	bl	8000258 <__aeabi_dsub>
 80120e2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80120e6:	4656      	mov	r6, sl
 80120e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80120ec:	f7ee fd1c 	bl	8000b28 <__aeabi_d2iz>
 80120f0:	4605      	mov	r5, r0
 80120f2:	f7ee f9ff 	bl	80004f4 <__aeabi_i2d>
 80120f6:	4602      	mov	r2, r0
 80120f8:	460b      	mov	r3, r1
 80120fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80120fe:	f7ee f8ab 	bl	8000258 <__aeabi_dsub>
 8012102:	3530      	adds	r5, #48	@ 0x30
 8012104:	4602      	mov	r2, r0
 8012106:	460b      	mov	r3, r1
 8012108:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801210c:	f806 5b01 	strb.w	r5, [r6], #1
 8012110:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8012114:	f7ee fcca 	bl	8000aac <__aeabi_dcmplt>
 8012118:	2800      	cmp	r0, #0
 801211a:	d172      	bne.n	8012202 <_dtoa_r+0x622>
 801211c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012120:	4911      	ldr	r1, [pc, #68]	@ (8012168 <_dtoa_r+0x588>)
 8012122:	2000      	movs	r0, #0
 8012124:	f7ee f898 	bl	8000258 <__aeabi_dsub>
 8012128:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801212c:	f7ee fcbe 	bl	8000aac <__aeabi_dcmplt>
 8012130:	2800      	cmp	r0, #0
 8012132:	f040 80b4 	bne.w	801229e <_dtoa_r+0x6be>
 8012136:	42a6      	cmp	r6, r4
 8012138:	f43f af70 	beq.w	801201c <_dtoa_r+0x43c>
 801213c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8012140:	4b0a      	ldr	r3, [pc, #40]	@ (801216c <_dtoa_r+0x58c>)
 8012142:	2200      	movs	r2, #0
 8012144:	f7ee fa40 	bl	80005c8 <__aeabi_dmul>
 8012148:	4b08      	ldr	r3, [pc, #32]	@ (801216c <_dtoa_r+0x58c>)
 801214a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801214e:	2200      	movs	r2, #0
 8012150:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012154:	f7ee fa38 	bl	80005c8 <__aeabi_dmul>
 8012158:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801215c:	e7c4      	b.n	80120e8 <_dtoa_r+0x508>
 801215e:	bf00      	nop
 8012160:	08015b88 	.word	0x08015b88
 8012164:	08015b60 	.word	0x08015b60
 8012168:	3ff00000 	.word	0x3ff00000
 801216c:	40240000 	.word	0x40240000
 8012170:	401c0000 	.word	0x401c0000
 8012174:	40140000 	.word	0x40140000
 8012178:	3fe00000 	.word	0x3fe00000
 801217c:	4631      	mov	r1, r6
 801217e:	4628      	mov	r0, r5
 8012180:	f7ee fa22 	bl	80005c8 <__aeabi_dmul>
 8012184:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8012188:	9413      	str	r4, [sp, #76]	@ 0x4c
 801218a:	4656      	mov	r6, sl
 801218c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012190:	f7ee fcca 	bl	8000b28 <__aeabi_d2iz>
 8012194:	4605      	mov	r5, r0
 8012196:	f7ee f9ad 	bl	80004f4 <__aeabi_i2d>
 801219a:	4602      	mov	r2, r0
 801219c:	460b      	mov	r3, r1
 801219e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80121a2:	f7ee f859 	bl	8000258 <__aeabi_dsub>
 80121a6:	3530      	adds	r5, #48	@ 0x30
 80121a8:	f806 5b01 	strb.w	r5, [r6], #1
 80121ac:	4602      	mov	r2, r0
 80121ae:	460b      	mov	r3, r1
 80121b0:	42a6      	cmp	r6, r4
 80121b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80121b6:	f04f 0200 	mov.w	r2, #0
 80121ba:	d124      	bne.n	8012206 <_dtoa_r+0x626>
 80121bc:	4baf      	ldr	r3, [pc, #700]	@ (801247c <_dtoa_r+0x89c>)
 80121be:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80121c2:	f7ee f84b 	bl	800025c <__adddf3>
 80121c6:	4602      	mov	r2, r0
 80121c8:	460b      	mov	r3, r1
 80121ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80121ce:	f7ee fc8b 	bl	8000ae8 <__aeabi_dcmpgt>
 80121d2:	2800      	cmp	r0, #0
 80121d4:	d163      	bne.n	801229e <_dtoa_r+0x6be>
 80121d6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80121da:	49a8      	ldr	r1, [pc, #672]	@ (801247c <_dtoa_r+0x89c>)
 80121dc:	2000      	movs	r0, #0
 80121de:	f7ee f83b 	bl	8000258 <__aeabi_dsub>
 80121e2:	4602      	mov	r2, r0
 80121e4:	460b      	mov	r3, r1
 80121e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80121ea:	f7ee fc5f 	bl	8000aac <__aeabi_dcmplt>
 80121ee:	2800      	cmp	r0, #0
 80121f0:	f43f af14 	beq.w	801201c <_dtoa_r+0x43c>
 80121f4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80121f6:	1e73      	subs	r3, r6, #1
 80121f8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80121fa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80121fe:	2b30      	cmp	r3, #48	@ 0x30
 8012200:	d0f8      	beq.n	80121f4 <_dtoa_r+0x614>
 8012202:	4647      	mov	r7, r8
 8012204:	e03b      	b.n	801227e <_dtoa_r+0x69e>
 8012206:	4b9e      	ldr	r3, [pc, #632]	@ (8012480 <_dtoa_r+0x8a0>)
 8012208:	f7ee f9de 	bl	80005c8 <__aeabi_dmul>
 801220c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012210:	e7bc      	b.n	801218c <_dtoa_r+0x5ac>
 8012212:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8012216:	4656      	mov	r6, sl
 8012218:	e9dd 2300 	ldrd	r2, r3, [sp]
 801221c:	4620      	mov	r0, r4
 801221e:	4629      	mov	r1, r5
 8012220:	f7ee fafc 	bl	800081c <__aeabi_ddiv>
 8012224:	f7ee fc80 	bl	8000b28 <__aeabi_d2iz>
 8012228:	4680      	mov	r8, r0
 801222a:	f7ee f963 	bl	80004f4 <__aeabi_i2d>
 801222e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012232:	f7ee f9c9 	bl	80005c8 <__aeabi_dmul>
 8012236:	4602      	mov	r2, r0
 8012238:	460b      	mov	r3, r1
 801223a:	4620      	mov	r0, r4
 801223c:	4629      	mov	r1, r5
 801223e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8012242:	f7ee f809 	bl	8000258 <__aeabi_dsub>
 8012246:	f806 4b01 	strb.w	r4, [r6], #1
 801224a:	9d03      	ldr	r5, [sp, #12]
 801224c:	eba6 040a 	sub.w	r4, r6, sl
 8012250:	42a5      	cmp	r5, r4
 8012252:	4602      	mov	r2, r0
 8012254:	460b      	mov	r3, r1
 8012256:	d133      	bne.n	80122c0 <_dtoa_r+0x6e0>
 8012258:	f7ee f800 	bl	800025c <__adddf3>
 801225c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012260:	4604      	mov	r4, r0
 8012262:	460d      	mov	r5, r1
 8012264:	f7ee fc40 	bl	8000ae8 <__aeabi_dcmpgt>
 8012268:	b9c0      	cbnz	r0, 801229c <_dtoa_r+0x6bc>
 801226a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801226e:	4620      	mov	r0, r4
 8012270:	4629      	mov	r1, r5
 8012272:	f7ee fc11 	bl	8000a98 <__aeabi_dcmpeq>
 8012276:	b110      	cbz	r0, 801227e <_dtoa_r+0x69e>
 8012278:	f018 0f01 	tst.w	r8, #1
 801227c:	d10e      	bne.n	801229c <_dtoa_r+0x6bc>
 801227e:	9902      	ldr	r1, [sp, #8]
 8012280:	4648      	mov	r0, r9
 8012282:	f000 feb9 	bl	8012ff8 <_Bfree>
 8012286:	2300      	movs	r3, #0
 8012288:	7033      	strb	r3, [r6, #0]
 801228a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801228c:	3701      	adds	r7, #1
 801228e:	601f      	str	r7, [r3, #0]
 8012290:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8012292:	2b00      	cmp	r3, #0
 8012294:	f000 824b 	beq.w	801272e <_dtoa_r+0xb4e>
 8012298:	601e      	str	r6, [r3, #0]
 801229a:	e248      	b.n	801272e <_dtoa_r+0xb4e>
 801229c:	46b8      	mov	r8, r7
 801229e:	4633      	mov	r3, r6
 80122a0:	461e      	mov	r6, r3
 80122a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80122a6:	2a39      	cmp	r2, #57	@ 0x39
 80122a8:	d106      	bne.n	80122b8 <_dtoa_r+0x6d8>
 80122aa:	459a      	cmp	sl, r3
 80122ac:	d1f8      	bne.n	80122a0 <_dtoa_r+0x6c0>
 80122ae:	2230      	movs	r2, #48	@ 0x30
 80122b0:	f108 0801 	add.w	r8, r8, #1
 80122b4:	f88a 2000 	strb.w	r2, [sl]
 80122b8:	781a      	ldrb	r2, [r3, #0]
 80122ba:	3201      	adds	r2, #1
 80122bc:	701a      	strb	r2, [r3, #0]
 80122be:	e7a0      	b.n	8012202 <_dtoa_r+0x622>
 80122c0:	4b6f      	ldr	r3, [pc, #444]	@ (8012480 <_dtoa_r+0x8a0>)
 80122c2:	2200      	movs	r2, #0
 80122c4:	f7ee f980 	bl	80005c8 <__aeabi_dmul>
 80122c8:	2200      	movs	r2, #0
 80122ca:	2300      	movs	r3, #0
 80122cc:	4604      	mov	r4, r0
 80122ce:	460d      	mov	r5, r1
 80122d0:	f7ee fbe2 	bl	8000a98 <__aeabi_dcmpeq>
 80122d4:	2800      	cmp	r0, #0
 80122d6:	d09f      	beq.n	8012218 <_dtoa_r+0x638>
 80122d8:	e7d1      	b.n	801227e <_dtoa_r+0x69e>
 80122da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80122dc:	2a00      	cmp	r2, #0
 80122de:	f000 80ea 	beq.w	80124b6 <_dtoa_r+0x8d6>
 80122e2:	9a07      	ldr	r2, [sp, #28]
 80122e4:	2a01      	cmp	r2, #1
 80122e6:	f300 80cd 	bgt.w	8012484 <_dtoa_r+0x8a4>
 80122ea:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80122ec:	2a00      	cmp	r2, #0
 80122ee:	f000 80c1 	beq.w	8012474 <_dtoa_r+0x894>
 80122f2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80122f6:	9c08      	ldr	r4, [sp, #32]
 80122f8:	9e00      	ldr	r6, [sp, #0]
 80122fa:	9a00      	ldr	r2, [sp, #0]
 80122fc:	441a      	add	r2, r3
 80122fe:	9200      	str	r2, [sp, #0]
 8012300:	9a06      	ldr	r2, [sp, #24]
 8012302:	2101      	movs	r1, #1
 8012304:	441a      	add	r2, r3
 8012306:	4648      	mov	r0, r9
 8012308:	9206      	str	r2, [sp, #24]
 801230a:	f000 ff29 	bl	8013160 <__i2b>
 801230e:	4605      	mov	r5, r0
 8012310:	b166      	cbz	r6, 801232c <_dtoa_r+0x74c>
 8012312:	9b06      	ldr	r3, [sp, #24]
 8012314:	2b00      	cmp	r3, #0
 8012316:	dd09      	ble.n	801232c <_dtoa_r+0x74c>
 8012318:	42b3      	cmp	r3, r6
 801231a:	9a00      	ldr	r2, [sp, #0]
 801231c:	bfa8      	it	ge
 801231e:	4633      	movge	r3, r6
 8012320:	1ad2      	subs	r2, r2, r3
 8012322:	9200      	str	r2, [sp, #0]
 8012324:	9a06      	ldr	r2, [sp, #24]
 8012326:	1af6      	subs	r6, r6, r3
 8012328:	1ad3      	subs	r3, r2, r3
 801232a:	9306      	str	r3, [sp, #24]
 801232c:	9b08      	ldr	r3, [sp, #32]
 801232e:	b30b      	cbz	r3, 8012374 <_dtoa_r+0x794>
 8012330:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012332:	2b00      	cmp	r3, #0
 8012334:	f000 80c6 	beq.w	80124c4 <_dtoa_r+0x8e4>
 8012338:	2c00      	cmp	r4, #0
 801233a:	f000 80c0 	beq.w	80124be <_dtoa_r+0x8de>
 801233e:	4629      	mov	r1, r5
 8012340:	4622      	mov	r2, r4
 8012342:	4648      	mov	r0, r9
 8012344:	f000 ffc4 	bl	80132d0 <__pow5mult>
 8012348:	9a02      	ldr	r2, [sp, #8]
 801234a:	4601      	mov	r1, r0
 801234c:	4605      	mov	r5, r0
 801234e:	4648      	mov	r0, r9
 8012350:	f000 ff1c 	bl	801318c <__multiply>
 8012354:	9902      	ldr	r1, [sp, #8]
 8012356:	4680      	mov	r8, r0
 8012358:	4648      	mov	r0, r9
 801235a:	f000 fe4d 	bl	8012ff8 <_Bfree>
 801235e:	9b08      	ldr	r3, [sp, #32]
 8012360:	1b1b      	subs	r3, r3, r4
 8012362:	9308      	str	r3, [sp, #32]
 8012364:	f000 80b1 	beq.w	80124ca <_dtoa_r+0x8ea>
 8012368:	9a08      	ldr	r2, [sp, #32]
 801236a:	4641      	mov	r1, r8
 801236c:	4648      	mov	r0, r9
 801236e:	f000 ffaf 	bl	80132d0 <__pow5mult>
 8012372:	9002      	str	r0, [sp, #8]
 8012374:	2101      	movs	r1, #1
 8012376:	4648      	mov	r0, r9
 8012378:	f000 fef2 	bl	8013160 <__i2b>
 801237c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801237e:	4604      	mov	r4, r0
 8012380:	2b00      	cmp	r3, #0
 8012382:	f000 81d8 	beq.w	8012736 <_dtoa_r+0xb56>
 8012386:	461a      	mov	r2, r3
 8012388:	4601      	mov	r1, r0
 801238a:	4648      	mov	r0, r9
 801238c:	f000 ffa0 	bl	80132d0 <__pow5mult>
 8012390:	9b07      	ldr	r3, [sp, #28]
 8012392:	2b01      	cmp	r3, #1
 8012394:	4604      	mov	r4, r0
 8012396:	f300 809f 	bgt.w	80124d8 <_dtoa_r+0x8f8>
 801239a:	9b04      	ldr	r3, [sp, #16]
 801239c:	2b00      	cmp	r3, #0
 801239e:	f040 8097 	bne.w	80124d0 <_dtoa_r+0x8f0>
 80123a2:	9b05      	ldr	r3, [sp, #20]
 80123a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	f040 8093 	bne.w	80124d4 <_dtoa_r+0x8f4>
 80123ae:	9b05      	ldr	r3, [sp, #20]
 80123b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80123b4:	0d1b      	lsrs	r3, r3, #20
 80123b6:	051b      	lsls	r3, r3, #20
 80123b8:	b133      	cbz	r3, 80123c8 <_dtoa_r+0x7e8>
 80123ba:	9b00      	ldr	r3, [sp, #0]
 80123bc:	3301      	adds	r3, #1
 80123be:	9300      	str	r3, [sp, #0]
 80123c0:	9b06      	ldr	r3, [sp, #24]
 80123c2:	3301      	adds	r3, #1
 80123c4:	9306      	str	r3, [sp, #24]
 80123c6:	2301      	movs	r3, #1
 80123c8:	9308      	str	r3, [sp, #32]
 80123ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	f000 81b8 	beq.w	8012742 <_dtoa_r+0xb62>
 80123d2:	6923      	ldr	r3, [r4, #16]
 80123d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80123d8:	6918      	ldr	r0, [r3, #16]
 80123da:	f000 fe75 	bl	80130c8 <__hi0bits>
 80123de:	f1c0 0020 	rsb	r0, r0, #32
 80123e2:	9b06      	ldr	r3, [sp, #24]
 80123e4:	4418      	add	r0, r3
 80123e6:	f010 001f 	ands.w	r0, r0, #31
 80123ea:	f000 8082 	beq.w	80124f2 <_dtoa_r+0x912>
 80123ee:	f1c0 0320 	rsb	r3, r0, #32
 80123f2:	2b04      	cmp	r3, #4
 80123f4:	dd73      	ble.n	80124de <_dtoa_r+0x8fe>
 80123f6:	9b00      	ldr	r3, [sp, #0]
 80123f8:	f1c0 001c 	rsb	r0, r0, #28
 80123fc:	4403      	add	r3, r0
 80123fe:	9300      	str	r3, [sp, #0]
 8012400:	9b06      	ldr	r3, [sp, #24]
 8012402:	4403      	add	r3, r0
 8012404:	4406      	add	r6, r0
 8012406:	9306      	str	r3, [sp, #24]
 8012408:	9b00      	ldr	r3, [sp, #0]
 801240a:	2b00      	cmp	r3, #0
 801240c:	dd05      	ble.n	801241a <_dtoa_r+0x83a>
 801240e:	9902      	ldr	r1, [sp, #8]
 8012410:	461a      	mov	r2, r3
 8012412:	4648      	mov	r0, r9
 8012414:	f000 ffb6 	bl	8013384 <__lshift>
 8012418:	9002      	str	r0, [sp, #8]
 801241a:	9b06      	ldr	r3, [sp, #24]
 801241c:	2b00      	cmp	r3, #0
 801241e:	dd05      	ble.n	801242c <_dtoa_r+0x84c>
 8012420:	4621      	mov	r1, r4
 8012422:	461a      	mov	r2, r3
 8012424:	4648      	mov	r0, r9
 8012426:	f000 ffad 	bl	8013384 <__lshift>
 801242a:	4604      	mov	r4, r0
 801242c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801242e:	2b00      	cmp	r3, #0
 8012430:	d061      	beq.n	80124f6 <_dtoa_r+0x916>
 8012432:	9802      	ldr	r0, [sp, #8]
 8012434:	4621      	mov	r1, r4
 8012436:	f001 f811 	bl	801345c <__mcmp>
 801243a:	2800      	cmp	r0, #0
 801243c:	da5b      	bge.n	80124f6 <_dtoa_r+0x916>
 801243e:	2300      	movs	r3, #0
 8012440:	9902      	ldr	r1, [sp, #8]
 8012442:	220a      	movs	r2, #10
 8012444:	4648      	mov	r0, r9
 8012446:	f000 fdf9 	bl	801303c <__multadd>
 801244a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801244c:	9002      	str	r0, [sp, #8]
 801244e:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8012452:	2b00      	cmp	r3, #0
 8012454:	f000 8177 	beq.w	8012746 <_dtoa_r+0xb66>
 8012458:	4629      	mov	r1, r5
 801245a:	2300      	movs	r3, #0
 801245c:	220a      	movs	r2, #10
 801245e:	4648      	mov	r0, r9
 8012460:	f000 fdec 	bl	801303c <__multadd>
 8012464:	f1bb 0f00 	cmp.w	fp, #0
 8012468:	4605      	mov	r5, r0
 801246a:	dc6f      	bgt.n	801254c <_dtoa_r+0x96c>
 801246c:	9b07      	ldr	r3, [sp, #28]
 801246e:	2b02      	cmp	r3, #2
 8012470:	dc49      	bgt.n	8012506 <_dtoa_r+0x926>
 8012472:	e06b      	b.n	801254c <_dtoa_r+0x96c>
 8012474:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8012476:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801247a:	e73c      	b.n	80122f6 <_dtoa_r+0x716>
 801247c:	3fe00000 	.word	0x3fe00000
 8012480:	40240000 	.word	0x40240000
 8012484:	9b03      	ldr	r3, [sp, #12]
 8012486:	1e5c      	subs	r4, r3, #1
 8012488:	9b08      	ldr	r3, [sp, #32]
 801248a:	42a3      	cmp	r3, r4
 801248c:	db09      	blt.n	80124a2 <_dtoa_r+0x8c2>
 801248e:	1b1c      	subs	r4, r3, r4
 8012490:	9b03      	ldr	r3, [sp, #12]
 8012492:	2b00      	cmp	r3, #0
 8012494:	f6bf af30 	bge.w	80122f8 <_dtoa_r+0x718>
 8012498:	9b00      	ldr	r3, [sp, #0]
 801249a:	9a03      	ldr	r2, [sp, #12]
 801249c:	1a9e      	subs	r6, r3, r2
 801249e:	2300      	movs	r3, #0
 80124a0:	e72b      	b.n	80122fa <_dtoa_r+0x71a>
 80124a2:	9b08      	ldr	r3, [sp, #32]
 80124a4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80124a6:	9408      	str	r4, [sp, #32]
 80124a8:	1ae3      	subs	r3, r4, r3
 80124aa:	441a      	add	r2, r3
 80124ac:	9e00      	ldr	r6, [sp, #0]
 80124ae:	9b03      	ldr	r3, [sp, #12]
 80124b0:	920d      	str	r2, [sp, #52]	@ 0x34
 80124b2:	2400      	movs	r4, #0
 80124b4:	e721      	b.n	80122fa <_dtoa_r+0x71a>
 80124b6:	9c08      	ldr	r4, [sp, #32]
 80124b8:	9e00      	ldr	r6, [sp, #0]
 80124ba:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80124bc:	e728      	b.n	8012310 <_dtoa_r+0x730>
 80124be:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80124c2:	e751      	b.n	8012368 <_dtoa_r+0x788>
 80124c4:	9a08      	ldr	r2, [sp, #32]
 80124c6:	9902      	ldr	r1, [sp, #8]
 80124c8:	e750      	b.n	801236c <_dtoa_r+0x78c>
 80124ca:	f8cd 8008 	str.w	r8, [sp, #8]
 80124ce:	e751      	b.n	8012374 <_dtoa_r+0x794>
 80124d0:	2300      	movs	r3, #0
 80124d2:	e779      	b.n	80123c8 <_dtoa_r+0x7e8>
 80124d4:	9b04      	ldr	r3, [sp, #16]
 80124d6:	e777      	b.n	80123c8 <_dtoa_r+0x7e8>
 80124d8:	2300      	movs	r3, #0
 80124da:	9308      	str	r3, [sp, #32]
 80124dc:	e779      	b.n	80123d2 <_dtoa_r+0x7f2>
 80124de:	d093      	beq.n	8012408 <_dtoa_r+0x828>
 80124e0:	9a00      	ldr	r2, [sp, #0]
 80124e2:	331c      	adds	r3, #28
 80124e4:	441a      	add	r2, r3
 80124e6:	9200      	str	r2, [sp, #0]
 80124e8:	9a06      	ldr	r2, [sp, #24]
 80124ea:	441a      	add	r2, r3
 80124ec:	441e      	add	r6, r3
 80124ee:	9206      	str	r2, [sp, #24]
 80124f0:	e78a      	b.n	8012408 <_dtoa_r+0x828>
 80124f2:	4603      	mov	r3, r0
 80124f4:	e7f4      	b.n	80124e0 <_dtoa_r+0x900>
 80124f6:	9b03      	ldr	r3, [sp, #12]
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	46b8      	mov	r8, r7
 80124fc:	dc20      	bgt.n	8012540 <_dtoa_r+0x960>
 80124fe:	469b      	mov	fp, r3
 8012500:	9b07      	ldr	r3, [sp, #28]
 8012502:	2b02      	cmp	r3, #2
 8012504:	dd1e      	ble.n	8012544 <_dtoa_r+0x964>
 8012506:	f1bb 0f00 	cmp.w	fp, #0
 801250a:	f47f adb1 	bne.w	8012070 <_dtoa_r+0x490>
 801250e:	4621      	mov	r1, r4
 8012510:	465b      	mov	r3, fp
 8012512:	2205      	movs	r2, #5
 8012514:	4648      	mov	r0, r9
 8012516:	f000 fd91 	bl	801303c <__multadd>
 801251a:	4601      	mov	r1, r0
 801251c:	4604      	mov	r4, r0
 801251e:	9802      	ldr	r0, [sp, #8]
 8012520:	f000 ff9c 	bl	801345c <__mcmp>
 8012524:	2800      	cmp	r0, #0
 8012526:	f77f ada3 	ble.w	8012070 <_dtoa_r+0x490>
 801252a:	4656      	mov	r6, sl
 801252c:	2331      	movs	r3, #49	@ 0x31
 801252e:	f806 3b01 	strb.w	r3, [r6], #1
 8012532:	f108 0801 	add.w	r8, r8, #1
 8012536:	e59f      	b.n	8012078 <_dtoa_r+0x498>
 8012538:	9c03      	ldr	r4, [sp, #12]
 801253a:	46b8      	mov	r8, r7
 801253c:	4625      	mov	r5, r4
 801253e:	e7f4      	b.n	801252a <_dtoa_r+0x94a>
 8012540:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8012544:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012546:	2b00      	cmp	r3, #0
 8012548:	f000 8101 	beq.w	801274e <_dtoa_r+0xb6e>
 801254c:	2e00      	cmp	r6, #0
 801254e:	dd05      	ble.n	801255c <_dtoa_r+0x97c>
 8012550:	4629      	mov	r1, r5
 8012552:	4632      	mov	r2, r6
 8012554:	4648      	mov	r0, r9
 8012556:	f000 ff15 	bl	8013384 <__lshift>
 801255a:	4605      	mov	r5, r0
 801255c:	9b08      	ldr	r3, [sp, #32]
 801255e:	2b00      	cmp	r3, #0
 8012560:	d05c      	beq.n	801261c <_dtoa_r+0xa3c>
 8012562:	6869      	ldr	r1, [r5, #4]
 8012564:	4648      	mov	r0, r9
 8012566:	f000 fd07 	bl	8012f78 <_Balloc>
 801256a:	4606      	mov	r6, r0
 801256c:	b928      	cbnz	r0, 801257a <_dtoa_r+0x99a>
 801256e:	4b82      	ldr	r3, [pc, #520]	@ (8012778 <_dtoa_r+0xb98>)
 8012570:	4602      	mov	r2, r0
 8012572:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8012576:	f7ff bb4a 	b.w	8011c0e <_dtoa_r+0x2e>
 801257a:	692a      	ldr	r2, [r5, #16]
 801257c:	3202      	adds	r2, #2
 801257e:	0092      	lsls	r2, r2, #2
 8012580:	f105 010c 	add.w	r1, r5, #12
 8012584:	300c      	adds	r0, #12
 8012586:	f7ff fa95 	bl	8011ab4 <memcpy>
 801258a:	2201      	movs	r2, #1
 801258c:	4631      	mov	r1, r6
 801258e:	4648      	mov	r0, r9
 8012590:	f000 fef8 	bl	8013384 <__lshift>
 8012594:	f10a 0301 	add.w	r3, sl, #1
 8012598:	9300      	str	r3, [sp, #0]
 801259a:	eb0a 030b 	add.w	r3, sl, fp
 801259e:	9308      	str	r3, [sp, #32]
 80125a0:	9b04      	ldr	r3, [sp, #16]
 80125a2:	f003 0301 	and.w	r3, r3, #1
 80125a6:	462f      	mov	r7, r5
 80125a8:	9306      	str	r3, [sp, #24]
 80125aa:	4605      	mov	r5, r0
 80125ac:	9b00      	ldr	r3, [sp, #0]
 80125ae:	9802      	ldr	r0, [sp, #8]
 80125b0:	4621      	mov	r1, r4
 80125b2:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 80125b6:	f7ff fa8b 	bl	8011ad0 <quorem>
 80125ba:	4603      	mov	r3, r0
 80125bc:	3330      	adds	r3, #48	@ 0x30
 80125be:	9003      	str	r0, [sp, #12]
 80125c0:	4639      	mov	r1, r7
 80125c2:	9802      	ldr	r0, [sp, #8]
 80125c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80125c6:	f000 ff49 	bl	801345c <__mcmp>
 80125ca:	462a      	mov	r2, r5
 80125cc:	9004      	str	r0, [sp, #16]
 80125ce:	4621      	mov	r1, r4
 80125d0:	4648      	mov	r0, r9
 80125d2:	f000 ff5f 	bl	8013494 <__mdiff>
 80125d6:	68c2      	ldr	r2, [r0, #12]
 80125d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80125da:	4606      	mov	r6, r0
 80125dc:	bb02      	cbnz	r2, 8012620 <_dtoa_r+0xa40>
 80125de:	4601      	mov	r1, r0
 80125e0:	9802      	ldr	r0, [sp, #8]
 80125e2:	f000 ff3b 	bl	801345c <__mcmp>
 80125e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80125e8:	4602      	mov	r2, r0
 80125ea:	4631      	mov	r1, r6
 80125ec:	4648      	mov	r0, r9
 80125ee:	920c      	str	r2, [sp, #48]	@ 0x30
 80125f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80125f2:	f000 fd01 	bl	8012ff8 <_Bfree>
 80125f6:	9b07      	ldr	r3, [sp, #28]
 80125f8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80125fa:	9e00      	ldr	r6, [sp, #0]
 80125fc:	ea42 0103 	orr.w	r1, r2, r3
 8012600:	9b06      	ldr	r3, [sp, #24]
 8012602:	4319      	orrs	r1, r3
 8012604:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012606:	d10d      	bne.n	8012624 <_dtoa_r+0xa44>
 8012608:	2b39      	cmp	r3, #57	@ 0x39
 801260a:	d027      	beq.n	801265c <_dtoa_r+0xa7c>
 801260c:	9a04      	ldr	r2, [sp, #16]
 801260e:	2a00      	cmp	r2, #0
 8012610:	dd01      	ble.n	8012616 <_dtoa_r+0xa36>
 8012612:	9b03      	ldr	r3, [sp, #12]
 8012614:	3331      	adds	r3, #49	@ 0x31
 8012616:	f88b 3000 	strb.w	r3, [fp]
 801261a:	e52e      	b.n	801207a <_dtoa_r+0x49a>
 801261c:	4628      	mov	r0, r5
 801261e:	e7b9      	b.n	8012594 <_dtoa_r+0x9b4>
 8012620:	2201      	movs	r2, #1
 8012622:	e7e2      	b.n	80125ea <_dtoa_r+0xa0a>
 8012624:	9904      	ldr	r1, [sp, #16]
 8012626:	2900      	cmp	r1, #0
 8012628:	db04      	blt.n	8012634 <_dtoa_r+0xa54>
 801262a:	9807      	ldr	r0, [sp, #28]
 801262c:	4301      	orrs	r1, r0
 801262e:	9806      	ldr	r0, [sp, #24]
 8012630:	4301      	orrs	r1, r0
 8012632:	d120      	bne.n	8012676 <_dtoa_r+0xa96>
 8012634:	2a00      	cmp	r2, #0
 8012636:	ddee      	ble.n	8012616 <_dtoa_r+0xa36>
 8012638:	9902      	ldr	r1, [sp, #8]
 801263a:	9300      	str	r3, [sp, #0]
 801263c:	2201      	movs	r2, #1
 801263e:	4648      	mov	r0, r9
 8012640:	f000 fea0 	bl	8013384 <__lshift>
 8012644:	4621      	mov	r1, r4
 8012646:	9002      	str	r0, [sp, #8]
 8012648:	f000 ff08 	bl	801345c <__mcmp>
 801264c:	2800      	cmp	r0, #0
 801264e:	9b00      	ldr	r3, [sp, #0]
 8012650:	dc02      	bgt.n	8012658 <_dtoa_r+0xa78>
 8012652:	d1e0      	bne.n	8012616 <_dtoa_r+0xa36>
 8012654:	07da      	lsls	r2, r3, #31
 8012656:	d5de      	bpl.n	8012616 <_dtoa_r+0xa36>
 8012658:	2b39      	cmp	r3, #57	@ 0x39
 801265a:	d1da      	bne.n	8012612 <_dtoa_r+0xa32>
 801265c:	2339      	movs	r3, #57	@ 0x39
 801265e:	f88b 3000 	strb.w	r3, [fp]
 8012662:	4633      	mov	r3, r6
 8012664:	461e      	mov	r6, r3
 8012666:	3b01      	subs	r3, #1
 8012668:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801266c:	2a39      	cmp	r2, #57	@ 0x39
 801266e:	d04e      	beq.n	801270e <_dtoa_r+0xb2e>
 8012670:	3201      	adds	r2, #1
 8012672:	701a      	strb	r2, [r3, #0]
 8012674:	e501      	b.n	801207a <_dtoa_r+0x49a>
 8012676:	2a00      	cmp	r2, #0
 8012678:	dd03      	ble.n	8012682 <_dtoa_r+0xaa2>
 801267a:	2b39      	cmp	r3, #57	@ 0x39
 801267c:	d0ee      	beq.n	801265c <_dtoa_r+0xa7c>
 801267e:	3301      	adds	r3, #1
 8012680:	e7c9      	b.n	8012616 <_dtoa_r+0xa36>
 8012682:	9a00      	ldr	r2, [sp, #0]
 8012684:	9908      	ldr	r1, [sp, #32]
 8012686:	f802 3c01 	strb.w	r3, [r2, #-1]
 801268a:	428a      	cmp	r2, r1
 801268c:	d028      	beq.n	80126e0 <_dtoa_r+0xb00>
 801268e:	9902      	ldr	r1, [sp, #8]
 8012690:	2300      	movs	r3, #0
 8012692:	220a      	movs	r2, #10
 8012694:	4648      	mov	r0, r9
 8012696:	f000 fcd1 	bl	801303c <__multadd>
 801269a:	42af      	cmp	r7, r5
 801269c:	9002      	str	r0, [sp, #8]
 801269e:	f04f 0300 	mov.w	r3, #0
 80126a2:	f04f 020a 	mov.w	r2, #10
 80126a6:	4639      	mov	r1, r7
 80126a8:	4648      	mov	r0, r9
 80126aa:	d107      	bne.n	80126bc <_dtoa_r+0xadc>
 80126ac:	f000 fcc6 	bl	801303c <__multadd>
 80126b0:	4607      	mov	r7, r0
 80126b2:	4605      	mov	r5, r0
 80126b4:	9b00      	ldr	r3, [sp, #0]
 80126b6:	3301      	adds	r3, #1
 80126b8:	9300      	str	r3, [sp, #0]
 80126ba:	e777      	b.n	80125ac <_dtoa_r+0x9cc>
 80126bc:	f000 fcbe 	bl	801303c <__multadd>
 80126c0:	4629      	mov	r1, r5
 80126c2:	4607      	mov	r7, r0
 80126c4:	2300      	movs	r3, #0
 80126c6:	220a      	movs	r2, #10
 80126c8:	4648      	mov	r0, r9
 80126ca:	f000 fcb7 	bl	801303c <__multadd>
 80126ce:	4605      	mov	r5, r0
 80126d0:	e7f0      	b.n	80126b4 <_dtoa_r+0xad4>
 80126d2:	f1bb 0f00 	cmp.w	fp, #0
 80126d6:	bfcc      	ite	gt
 80126d8:	465e      	movgt	r6, fp
 80126da:	2601      	movle	r6, #1
 80126dc:	4456      	add	r6, sl
 80126de:	2700      	movs	r7, #0
 80126e0:	9902      	ldr	r1, [sp, #8]
 80126e2:	9300      	str	r3, [sp, #0]
 80126e4:	2201      	movs	r2, #1
 80126e6:	4648      	mov	r0, r9
 80126e8:	f000 fe4c 	bl	8013384 <__lshift>
 80126ec:	4621      	mov	r1, r4
 80126ee:	9002      	str	r0, [sp, #8]
 80126f0:	f000 feb4 	bl	801345c <__mcmp>
 80126f4:	2800      	cmp	r0, #0
 80126f6:	dcb4      	bgt.n	8012662 <_dtoa_r+0xa82>
 80126f8:	d102      	bne.n	8012700 <_dtoa_r+0xb20>
 80126fa:	9b00      	ldr	r3, [sp, #0]
 80126fc:	07db      	lsls	r3, r3, #31
 80126fe:	d4b0      	bmi.n	8012662 <_dtoa_r+0xa82>
 8012700:	4633      	mov	r3, r6
 8012702:	461e      	mov	r6, r3
 8012704:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012708:	2a30      	cmp	r2, #48	@ 0x30
 801270a:	d0fa      	beq.n	8012702 <_dtoa_r+0xb22>
 801270c:	e4b5      	b.n	801207a <_dtoa_r+0x49a>
 801270e:	459a      	cmp	sl, r3
 8012710:	d1a8      	bne.n	8012664 <_dtoa_r+0xa84>
 8012712:	2331      	movs	r3, #49	@ 0x31
 8012714:	f108 0801 	add.w	r8, r8, #1
 8012718:	f88a 3000 	strb.w	r3, [sl]
 801271c:	e4ad      	b.n	801207a <_dtoa_r+0x49a>
 801271e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8012720:	f8df a058 	ldr.w	sl, [pc, #88]	@ 801277c <_dtoa_r+0xb9c>
 8012724:	b11b      	cbz	r3, 801272e <_dtoa_r+0xb4e>
 8012726:	f10a 0308 	add.w	r3, sl, #8
 801272a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801272c:	6013      	str	r3, [r2, #0]
 801272e:	4650      	mov	r0, sl
 8012730:	b017      	add	sp, #92	@ 0x5c
 8012732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012736:	9b07      	ldr	r3, [sp, #28]
 8012738:	2b01      	cmp	r3, #1
 801273a:	f77f ae2e 	ble.w	801239a <_dtoa_r+0x7ba>
 801273e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012740:	9308      	str	r3, [sp, #32]
 8012742:	2001      	movs	r0, #1
 8012744:	e64d      	b.n	80123e2 <_dtoa_r+0x802>
 8012746:	f1bb 0f00 	cmp.w	fp, #0
 801274a:	f77f aed9 	ble.w	8012500 <_dtoa_r+0x920>
 801274e:	4656      	mov	r6, sl
 8012750:	9802      	ldr	r0, [sp, #8]
 8012752:	4621      	mov	r1, r4
 8012754:	f7ff f9bc 	bl	8011ad0 <quorem>
 8012758:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 801275c:	f806 3b01 	strb.w	r3, [r6], #1
 8012760:	eba6 020a 	sub.w	r2, r6, sl
 8012764:	4593      	cmp	fp, r2
 8012766:	ddb4      	ble.n	80126d2 <_dtoa_r+0xaf2>
 8012768:	9902      	ldr	r1, [sp, #8]
 801276a:	2300      	movs	r3, #0
 801276c:	220a      	movs	r2, #10
 801276e:	4648      	mov	r0, r9
 8012770:	f000 fc64 	bl	801303c <__multadd>
 8012774:	9002      	str	r0, [sp, #8]
 8012776:	e7eb      	b.n	8012750 <_dtoa_r+0xb70>
 8012778:	08015a90 	.word	0x08015a90
 801277c:	08015a14 	.word	0x08015a14

08012780 <__ssputs_r>:
 8012780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012784:	688e      	ldr	r6, [r1, #8]
 8012786:	461f      	mov	r7, r3
 8012788:	42be      	cmp	r6, r7
 801278a:	680b      	ldr	r3, [r1, #0]
 801278c:	4682      	mov	sl, r0
 801278e:	460c      	mov	r4, r1
 8012790:	4690      	mov	r8, r2
 8012792:	d82d      	bhi.n	80127f0 <__ssputs_r+0x70>
 8012794:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012798:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801279c:	d026      	beq.n	80127ec <__ssputs_r+0x6c>
 801279e:	6965      	ldr	r5, [r4, #20]
 80127a0:	6909      	ldr	r1, [r1, #16]
 80127a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80127a6:	eba3 0901 	sub.w	r9, r3, r1
 80127aa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80127ae:	1c7b      	adds	r3, r7, #1
 80127b0:	444b      	add	r3, r9
 80127b2:	106d      	asrs	r5, r5, #1
 80127b4:	429d      	cmp	r5, r3
 80127b6:	bf38      	it	cc
 80127b8:	461d      	movcc	r5, r3
 80127ba:	0553      	lsls	r3, r2, #21
 80127bc:	d527      	bpl.n	801280e <__ssputs_r+0x8e>
 80127be:	4629      	mov	r1, r5
 80127c0:	f000 faa2 	bl	8012d08 <_malloc_r>
 80127c4:	4606      	mov	r6, r0
 80127c6:	b360      	cbz	r0, 8012822 <__ssputs_r+0xa2>
 80127c8:	6921      	ldr	r1, [r4, #16]
 80127ca:	464a      	mov	r2, r9
 80127cc:	f7ff f972 	bl	8011ab4 <memcpy>
 80127d0:	89a3      	ldrh	r3, [r4, #12]
 80127d2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80127d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80127da:	81a3      	strh	r3, [r4, #12]
 80127dc:	6126      	str	r6, [r4, #16]
 80127de:	6165      	str	r5, [r4, #20]
 80127e0:	444e      	add	r6, r9
 80127e2:	eba5 0509 	sub.w	r5, r5, r9
 80127e6:	6026      	str	r6, [r4, #0]
 80127e8:	60a5      	str	r5, [r4, #8]
 80127ea:	463e      	mov	r6, r7
 80127ec:	42be      	cmp	r6, r7
 80127ee:	d900      	bls.n	80127f2 <__ssputs_r+0x72>
 80127f0:	463e      	mov	r6, r7
 80127f2:	6820      	ldr	r0, [r4, #0]
 80127f4:	4632      	mov	r2, r6
 80127f6:	4641      	mov	r1, r8
 80127f8:	f001 f8d4 	bl	80139a4 <memmove>
 80127fc:	68a3      	ldr	r3, [r4, #8]
 80127fe:	1b9b      	subs	r3, r3, r6
 8012800:	60a3      	str	r3, [r4, #8]
 8012802:	6823      	ldr	r3, [r4, #0]
 8012804:	4433      	add	r3, r6
 8012806:	6023      	str	r3, [r4, #0]
 8012808:	2000      	movs	r0, #0
 801280a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801280e:	462a      	mov	r2, r5
 8012810:	f000 ff6f 	bl	80136f2 <_realloc_r>
 8012814:	4606      	mov	r6, r0
 8012816:	2800      	cmp	r0, #0
 8012818:	d1e0      	bne.n	80127dc <__ssputs_r+0x5c>
 801281a:	6921      	ldr	r1, [r4, #16]
 801281c:	4650      	mov	r0, sl
 801281e:	f001 f985 	bl	8013b2c <_free_r>
 8012822:	230c      	movs	r3, #12
 8012824:	f8ca 3000 	str.w	r3, [sl]
 8012828:	89a3      	ldrh	r3, [r4, #12]
 801282a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801282e:	81a3      	strh	r3, [r4, #12]
 8012830:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012834:	e7e9      	b.n	801280a <__ssputs_r+0x8a>
	...

08012838 <_svfiprintf_r>:
 8012838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801283c:	4698      	mov	r8, r3
 801283e:	898b      	ldrh	r3, [r1, #12]
 8012840:	061b      	lsls	r3, r3, #24
 8012842:	b09d      	sub	sp, #116	@ 0x74
 8012844:	4607      	mov	r7, r0
 8012846:	460d      	mov	r5, r1
 8012848:	4614      	mov	r4, r2
 801284a:	d510      	bpl.n	801286e <_svfiprintf_r+0x36>
 801284c:	690b      	ldr	r3, [r1, #16]
 801284e:	b973      	cbnz	r3, 801286e <_svfiprintf_r+0x36>
 8012850:	2140      	movs	r1, #64	@ 0x40
 8012852:	f000 fa59 	bl	8012d08 <_malloc_r>
 8012856:	6028      	str	r0, [r5, #0]
 8012858:	6128      	str	r0, [r5, #16]
 801285a:	b930      	cbnz	r0, 801286a <_svfiprintf_r+0x32>
 801285c:	230c      	movs	r3, #12
 801285e:	603b      	str	r3, [r7, #0]
 8012860:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012864:	b01d      	add	sp, #116	@ 0x74
 8012866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801286a:	2340      	movs	r3, #64	@ 0x40
 801286c:	616b      	str	r3, [r5, #20]
 801286e:	2300      	movs	r3, #0
 8012870:	9309      	str	r3, [sp, #36]	@ 0x24
 8012872:	2320      	movs	r3, #32
 8012874:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012878:	f8cd 800c 	str.w	r8, [sp, #12]
 801287c:	2330      	movs	r3, #48	@ 0x30
 801287e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012a1c <_svfiprintf_r+0x1e4>
 8012882:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012886:	f04f 0901 	mov.w	r9, #1
 801288a:	4623      	mov	r3, r4
 801288c:	469a      	mov	sl, r3
 801288e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012892:	b10a      	cbz	r2, 8012898 <_svfiprintf_r+0x60>
 8012894:	2a25      	cmp	r2, #37	@ 0x25
 8012896:	d1f9      	bne.n	801288c <_svfiprintf_r+0x54>
 8012898:	ebba 0b04 	subs.w	fp, sl, r4
 801289c:	d00b      	beq.n	80128b6 <_svfiprintf_r+0x7e>
 801289e:	465b      	mov	r3, fp
 80128a0:	4622      	mov	r2, r4
 80128a2:	4629      	mov	r1, r5
 80128a4:	4638      	mov	r0, r7
 80128a6:	f7ff ff6b 	bl	8012780 <__ssputs_r>
 80128aa:	3001      	adds	r0, #1
 80128ac:	f000 80a7 	beq.w	80129fe <_svfiprintf_r+0x1c6>
 80128b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80128b2:	445a      	add	r2, fp
 80128b4:	9209      	str	r2, [sp, #36]	@ 0x24
 80128b6:	f89a 3000 	ldrb.w	r3, [sl]
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	f000 809f 	beq.w	80129fe <_svfiprintf_r+0x1c6>
 80128c0:	2300      	movs	r3, #0
 80128c2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80128c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80128ca:	f10a 0a01 	add.w	sl, sl, #1
 80128ce:	9304      	str	r3, [sp, #16]
 80128d0:	9307      	str	r3, [sp, #28]
 80128d2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80128d6:	931a      	str	r3, [sp, #104]	@ 0x68
 80128d8:	4654      	mov	r4, sl
 80128da:	2205      	movs	r2, #5
 80128dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80128e0:	484e      	ldr	r0, [pc, #312]	@ (8012a1c <_svfiprintf_r+0x1e4>)
 80128e2:	f7ed fc5d 	bl	80001a0 <memchr>
 80128e6:	9a04      	ldr	r2, [sp, #16]
 80128e8:	b9d8      	cbnz	r0, 8012922 <_svfiprintf_r+0xea>
 80128ea:	06d0      	lsls	r0, r2, #27
 80128ec:	bf44      	itt	mi
 80128ee:	2320      	movmi	r3, #32
 80128f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80128f4:	0711      	lsls	r1, r2, #28
 80128f6:	bf44      	itt	mi
 80128f8:	232b      	movmi	r3, #43	@ 0x2b
 80128fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80128fe:	f89a 3000 	ldrb.w	r3, [sl]
 8012902:	2b2a      	cmp	r3, #42	@ 0x2a
 8012904:	d015      	beq.n	8012932 <_svfiprintf_r+0xfa>
 8012906:	9a07      	ldr	r2, [sp, #28]
 8012908:	4654      	mov	r4, sl
 801290a:	2000      	movs	r0, #0
 801290c:	f04f 0c0a 	mov.w	ip, #10
 8012910:	4621      	mov	r1, r4
 8012912:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012916:	3b30      	subs	r3, #48	@ 0x30
 8012918:	2b09      	cmp	r3, #9
 801291a:	d94b      	bls.n	80129b4 <_svfiprintf_r+0x17c>
 801291c:	b1b0      	cbz	r0, 801294c <_svfiprintf_r+0x114>
 801291e:	9207      	str	r2, [sp, #28]
 8012920:	e014      	b.n	801294c <_svfiprintf_r+0x114>
 8012922:	eba0 0308 	sub.w	r3, r0, r8
 8012926:	fa09 f303 	lsl.w	r3, r9, r3
 801292a:	4313      	orrs	r3, r2
 801292c:	9304      	str	r3, [sp, #16]
 801292e:	46a2      	mov	sl, r4
 8012930:	e7d2      	b.n	80128d8 <_svfiprintf_r+0xa0>
 8012932:	9b03      	ldr	r3, [sp, #12]
 8012934:	1d19      	adds	r1, r3, #4
 8012936:	681b      	ldr	r3, [r3, #0]
 8012938:	9103      	str	r1, [sp, #12]
 801293a:	2b00      	cmp	r3, #0
 801293c:	bfbb      	ittet	lt
 801293e:	425b      	neglt	r3, r3
 8012940:	f042 0202 	orrlt.w	r2, r2, #2
 8012944:	9307      	strge	r3, [sp, #28]
 8012946:	9307      	strlt	r3, [sp, #28]
 8012948:	bfb8      	it	lt
 801294a:	9204      	strlt	r2, [sp, #16]
 801294c:	7823      	ldrb	r3, [r4, #0]
 801294e:	2b2e      	cmp	r3, #46	@ 0x2e
 8012950:	d10a      	bne.n	8012968 <_svfiprintf_r+0x130>
 8012952:	7863      	ldrb	r3, [r4, #1]
 8012954:	2b2a      	cmp	r3, #42	@ 0x2a
 8012956:	d132      	bne.n	80129be <_svfiprintf_r+0x186>
 8012958:	9b03      	ldr	r3, [sp, #12]
 801295a:	1d1a      	adds	r2, r3, #4
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	9203      	str	r2, [sp, #12]
 8012960:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012964:	3402      	adds	r4, #2
 8012966:	9305      	str	r3, [sp, #20]
 8012968:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012a2c <_svfiprintf_r+0x1f4>
 801296c:	7821      	ldrb	r1, [r4, #0]
 801296e:	2203      	movs	r2, #3
 8012970:	4650      	mov	r0, sl
 8012972:	f7ed fc15 	bl	80001a0 <memchr>
 8012976:	b138      	cbz	r0, 8012988 <_svfiprintf_r+0x150>
 8012978:	9b04      	ldr	r3, [sp, #16]
 801297a:	eba0 000a 	sub.w	r0, r0, sl
 801297e:	2240      	movs	r2, #64	@ 0x40
 8012980:	4082      	lsls	r2, r0
 8012982:	4313      	orrs	r3, r2
 8012984:	3401      	adds	r4, #1
 8012986:	9304      	str	r3, [sp, #16]
 8012988:	f814 1b01 	ldrb.w	r1, [r4], #1
 801298c:	4824      	ldr	r0, [pc, #144]	@ (8012a20 <_svfiprintf_r+0x1e8>)
 801298e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012992:	2206      	movs	r2, #6
 8012994:	f7ed fc04 	bl	80001a0 <memchr>
 8012998:	2800      	cmp	r0, #0
 801299a:	d036      	beq.n	8012a0a <_svfiprintf_r+0x1d2>
 801299c:	4b21      	ldr	r3, [pc, #132]	@ (8012a24 <_svfiprintf_r+0x1ec>)
 801299e:	bb1b      	cbnz	r3, 80129e8 <_svfiprintf_r+0x1b0>
 80129a0:	9b03      	ldr	r3, [sp, #12]
 80129a2:	3307      	adds	r3, #7
 80129a4:	f023 0307 	bic.w	r3, r3, #7
 80129a8:	3308      	adds	r3, #8
 80129aa:	9303      	str	r3, [sp, #12]
 80129ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80129ae:	4433      	add	r3, r6
 80129b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80129b2:	e76a      	b.n	801288a <_svfiprintf_r+0x52>
 80129b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80129b8:	460c      	mov	r4, r1
 80129ba:	2001      	movs	r0, #1
 80129bc:	e7a8      	b.n	8012910 <_svfiprintf_r+0xd8>
 80129be:	2300      	movs	r3, #0
 80129c0:	3401      	adds	r4, #1
 80129c2:	9305      	str	r3, [sp, #20]
 80129c4:	4619      	mov	r1, r3
 80129c6:	f04f 0c0a 	mov.w	ip, #10
 80129ca:	4620      	mov	r0, r4
 80129cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80129d0:	3a30      	subs	r2, #48	@ 0x30
 80129d2:	2a09      	cmp	r2, #9
 80129d4:	d903      	bls.n	80129de <_svfiprintf_r+0x1a6>
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d0c6      	beq.n	8012968 <_svfiprintf_r+0x130>
 80129da:	9105      	str	r1, [sp, #20]
 80129dc:	e7c4      	b.n	8012968 <_svfiprintf_r+0x130>
 80129de:	fb0c 2101 	mla	r1, ip, r1, r2
 80129e2:	4604      	mov	r4, r0
 80129e4:	2301      	movs	r3, #1
 80129e6:	e7f0      	b.n	80129ca <_svfiprintf_r+0x192>
 80129e8:	ab03      	add	r3, sp, #12
 80129ea:	9300      	str	r3, [sp, #0]
 80129ec:	462a      	mov	r2, r5
 80129ee:	4b0e      	ldr	r3, [pc, #56]	@ (8012a28 <_svfiprintf_r+0x1f0>)
 80129f0:	a904      	add	r1, sp, #16
 80129f2:	4638      	mov	r0, r7
 80129f4:	f7fe fb12 	bl	801101c <_printf_float>
 80129f8:	1c42      	adds	r2, r0, #1
 80129fa:	4606      	mov	r6, r0
 80129fc:	d1d6      	bne.n	80129ac <_svfiprintf_r+0x174>
 80129fe:	89ab      	ldrh	r3, [r5, #12]
 8012a00:	065b      	lsls	r3, r3, #25
 8012a02:	f53f af2d 	bmi.w	8012860 <_svfiprintf_r+0x28>
 8012a06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012a08:	e72c      	b.n	8012864 <_svfiprintf_r+0x2c>
 8012a0a:	ab03      	add	r3, sp, #12
 8012a0c:	9300      	str	r3, [sp, #0]
 8012a0e:	462a      	mov	r2, r5
 8012a10:	4b05      	ldr	r3, [pc, #20]	@ (8012a28 <_svfiprintf_r+0x1f0>)
 8012a12:	a904      	add	r1, sp, #16
 8012a14:	4638      	mov	r0, r7
 8012a16:	f7fe fd99 	bl	801154c <_printf_i>
 8012a1a:	e7ed      	b.n	80129f8 <_svfiprintf_r+0x1c0>
 8012a1c:	08015aa1 	.word	0x08015aa1
 8012a20:	08015aab 	.word	0x08015aab
 8012a24:	0801101d 	.word	0x0801101d
 8012a28:	08012781 	.word	0x08012781
 8012a2c:	08015aa7 	.word	0x08015aa7

08012a30 <__sfputc_r>:
 8012a30:	6893      	ldr	r3, [r2, #8]
 8012a32:	3b01      	subs	r3, #1
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	b410      	push	{r4}
 8012a38:	6093      	str	r3, [r2, #8]
 8012a3a:	da08      	bge.n	8012a4e <__sfputc_r+0x1e>
 8012a3c:	6994      	ldr	r4, [r2, #24]
 8012a3e:	42a3      	cmp	r3, r4
 8012a40:	db01      	blt.n	8012a46 <__sfputc_r+0x16>
 8012a42:	290a      	cmp	r1, #10
 8012a44:	d103      	bne.n	8012a4e <__sfputc_r+0x1e>
 8012a46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012a4a:	f000 be80 	b.w	801374e <__swbuf_r>
 8012a4e:	6813      	ldr	r3, [r2, #0]
 8012a50:	1c58      	adds	r0, r3, #1
 8012a52:	6010      	str	r0, [r2, #0]
 8012a54:	7019      	strb	r1, [r3, #0]
 8012a56:	4608      	mov	r0, r1
 8012a58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012a5c:	4770      	bx	lr

08012a5e <__sfputs_r>:
 8012a5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a60:	4606      	mov	r6, r0
 8012a62:	460f      	mov	r7, r1
 8012a64:	4614      	mov	r4, r2
 8012a66:	18d5      	adds	r5, r2, r3
 8012a68:	42ac      	cmp	r4, r5
 8012a6a:	d101      	bne.n	8012a70 <__sfputs_r+0x12>
 8012a6c:	2000      	movs	r0, #0
 8012a6e:	e007      	b.n	8012a80 <__sfputs_r+0x22>
 8012a70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012a74:	463a      	mov	r2, r7
 8012a76:	4630      	mov	r0, r6
 8012a78:	f7ff ffda 	bl	8012a30 <__sfputc_r>
 8012a7c:	1c43      	adds	r3, r0, #1
 8012a7e:	d1f3      	bne.n	8012a68 <__sfputs_r+0xa>
 8012a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012a84 <_vfiprintf_r>:
 8012a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a88:	460d      	mov	r5, r1
 8012a8a:	b09d      	sub	sp, #116	@ 0x74
 8012a8c:	4614      	mov	r4, r2
 8012a8e:	4698      	mov	r8, r3
 8012a90:	4606      	mov	r6, r0
 8012a92:	b118      	cbz	r0, 8012a9c <_vfiprintf_r+0x18>
 8012a94:	6a03      	ldr	r3, [r0, #32]
 8012a96:	b90b      	cbnz	r3, 8012a9c <_vfiprintf_r+0x18>
 8012a98:	f7fe ff24 	bl	80118e4 <__sinit>
 8012a9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012a9e:	07d9      	lsls	r1, r3, #31
 8012aa0:	d405      	bmi.n	8012aae <_vfiprintf_r+0x2a>
 8012aa2:	89ab      	ldrh	r3, [r5, #12]
 8012aa4:	059a      	lsls	r2, r3, #22
 8012aa6:	d402      	bmi.n	8012aae <_vfiprintf_r+0x2a>
 8012aa8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012aaa:	f7fe fffc 	bl	8011aa6 <__retarget_lock_acquire_recursive>
 8012aae:	89ab      	ldrh	r3, [r5, #12]
 8012ab0:	071b      	lsls	r3, r3, #28
 8012ab2:	d501      	bpl.n	8012ab8 <_vfiprintf_r+0x34>
 8012ab4:	692b      	ldr	r3, [r5, #16]
 8012ab6:	b99b      	cbnz	r3, 8012ae0 <_vfiprintf_r+0x5c>
 8012ab8:	4629      	mov	r1, r5
 8012aba:	4630      	mov	r0, r6
 8012abc:	f000 fe86 	bl	80137cc <__swsetup_r>
 8012ac0:	b170      	cbz	r0, 8012ae0 <_vfiprintf_r+0x5c>
 8012ac2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012ac4:	07dc      	lsls	r4, r3, #31
 8012ac6:	d504      	bpl.n	8012ad2 <_vfiprintf_r+0x4e>
 8012ac8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012acc:	b01d      	add	sp, #116	@ 0x74
 8012ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ad2:	89ab      	ldrh	r3, [r5, #12]
 8012ad4:	0598      	lsls	r0, r3, #22
 8012ad6:	d4f7      	bmi.n	8012ac8 <_vfiprintf_r+0x44>
 8012ad8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012ada:	f7fe ffe5 	bl	8011aa8 <__retarget_lock_release_recursive>
 8012ade:	e7f3      	b.n	8012ac8 <_vfiprintf_r+0x44>
 8012ae0:	2300      	movs	r3, #0
 8012ae2:	9309      	str	r3, [sp, #36]	@ 0x24
 8012ae4:	2320      	movs	r3, #32
 8012ae6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012aea:	f8cd 800c 	str.w	r8, [sp, #12]
 8012aee:	2330      	movs	r3, #48	@ 0x30
 8012af0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012ca0 <_vfiprintf_r+0x21c>
 8012af4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012af8:	f04f 0901 	mov.w	r9, #1
 8012afc:	4623      	mov	r3, r4
 8012afe:	469a      	mov	sl, r3
 8012b00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012b04:	b10a      	cbz	r2, 8012b0a <_vfiprintf_r+0x86>
 8012b06:	2a25      	cmp	r2, #37	@ 0x25
 8012b08:	d1f9      	bne.n	8012afe <_vfiprintf_r+0x7a>
 8012b0a:	ebba 0b04 	subs.w	fp, sl, r4
 8012b0e:	d00b      	beq.n	8012b28 <_vfiprintf_r+0xa4>
 8012b10:	465b      	mov	r3, fp
 8012b12:	4622      	mov	r2, r4
 8012b14:	4629      	mov	r1, r5
 8012b16:	4630      	mov	r0, r6
 8012b18:	f7ff ffa1 	bl	8012a5e <__sfputs_r>
 8012b1c:	3001      	adds	r0, #1
 8012b1e:	f000 80a7 	beq.w	8012c70 <_vfiprintf_r+0x1ec>
 8012b22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012b24:	445a      	add	r2, fp
 8012b26:	9209      	str	r2, [sp, #36]	@ 0x24
 8012b28:	f89a 3000 	ldrb.w	r3, [sl]
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	f000 809f 	beq.w	8012c70 <_vfiprintf_r+0x1ec>
 8012b32:	2300      	movs	r3, #0
 8012b34:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012b38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012b3c:	f10a 0a01 	add.w	sl, sl, #1
 8012b40:	9304      	str	r3, [sp, #16]
 8012b42:	9307      	str	r3, [sp, #28]
 8012b44:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012b48:	931a      	str	r3, [sp, #104]	@ 0x68
 8012b4a:	4654      	mov	r4, sl
 8012b4c:	2205      	movs	r2, #5
 8012b4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012b52:	4853      	ldr	r0, [pc, #332]	@ (8012ca0 <_vfiprintf_r+0x21c>)
 8012b54:	f7ed fb24 	bl	80001a0 <memchr>
 8012b58:	9a04      	ldr	r2, [sp, #16]
 8012b5a:	b9d8      	cbnz	r0, 8012b94 <_vfiprintf_r+0x110>
 8012b5c:	06d1      	lsls	r1, r2, #27
 8012b5e:	bf44      	itt	mi
 8012b60:	2320      	movmi	r3, #32
 8012b62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012b66:	0713      	lsls	r3, r2, #28
 8012b68:	bf44      	itt	mi
 8012b6a:	232b      	movmi	r3, #43	@ 0x2b
 8012b6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012b70:	f89a 3000 	ldrb.w	r3, [sl]
 8012b74:	2b2a      	cmp	r3, #42	@ 0x2a
 8012b76:	d015      	beq.n	8012ba4 <_vfiprintf_r+0x120>
 8012b78:	9a07      	ldr	r2, [sp, #28]
 8012b7a:	4654      	mov	r4, sl
 8012b7c:	2000      	movs	r0, #0
 8012b7e:	f04f 0c0a 	mov.w	ip, #10
 8012b82:	4621      	mov	r1, r4
 8012b84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012b88:	3b30      	subs	r3, #48	@ 0x30
 8012b8a:	2b09      	cmp	r3, #9
 8012b8c:	d94b      	bls.n	8012c26 <_vfiprintf_r+0x1a2>
 8012b8e:	b1b0      	cbz	r0, 8012bbe <_vfiprintf_r+0x13a>
 8012b90:	9207      	str	r2, [sp, #28]
 8012b92:	e014      	b.n	8012bbe <_vfiprintf_r+0x13a>
 8012b94:	eba0 0308 	sub.w	r3, r0, r8
 8012b98:	fa09 f303 	lsl.w	r3, r9, r3
 8012b9c:	4313      	orrs	r3, r2
 8012b9e:	9304      	str	r3, [sp, #16]
 8012ba0:	46a2      	mov	sl, r4
 8012ba2:	e7d2      	b.n	8012b4a <_vfiprintf_r+0xc6>
 8012ba4:	9b03      	ldr	r3, [sp, #12]
 8012ba6:	1d19      	adds	r1, r3, #4
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	9103      	str	r1, [sp, #12]
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	bfbb      	ittet	lt
 8012bb0:	425b      	neglt	r3, r3
 8012bb2:	f042 0202 	orrlt.w	r2, r2, #2
 8012bb6:	9307      	strge	r3, [sp, #28]
 8012bb8:	9307      	strlt	r3, [sp, #28]
 8012bba:	bfb8      	it	lt
 8012bbc:	9204      	strlt	r2, [sp, #16]
 8012bbe:	7823      	ldrb	r3, [r4, #0]
 8012bc0:	2b2e      	cmp	r3, #46	@ 0x2e
 8012bc2:	d10a      	bne.n	8012bda <_vfiprintf_r+0x156>
 8012bc4:	7863      	ldrb	r3, [r4, #1]
 8012bc6:	2b2a      	cmp	r3, #42	@ 0x2a
 8012bc8:	d132      	bne.n	8012c30 <_vfiprintf_r+0x1ac>
 8012bca:	9b03      	ldr	r3, [sp, #12]
 8012bcc:	1d1a      	adds	r2, r3, #4
 8012bce:	681b      	ldr	r3, [r3, #0]
 8012bd0:	9203      	str	r2, [sp, #12]
 8012bd2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012bd6:	3402      	adds	r4, #2
 8012bd8:	9305      	str	r3, [sp, #20]
 8012bda:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012cb0 <_vfiprintf_r+0x22c>
 8012bde:	7821      	ldrb	r1, [r4, #0]
 8012be0:	2203      	movs	r2, #3
 8012be2:	4650      	mov	r0, sl
 8012be4:	f7ed fadc 	bl	80001a0 <memchr>
 8012be8:	b138      	cbz	r0, 8012bfa <_vfiprintf_r+0x176>
 8012bea:	9b04      	ldr	r3, [sp, #16]
 8012bec:	eba0 000a 	sub.w	r0, r0, sl
 8012bf0:	2240      	movs	r2, #64	@ 0x40
 8012bf2:	4082      	lsls	r2, r0
 8012bf4:	4313      	orrs	r3, r2
 8012bf6:	3401      	adds	r4, #1
 8012bf8:	9304      	str	r3, [sp, #16]
 8012bfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012bfe:	4829      	ldr	r0, [pc, #164]	@ (8012ca4 <_vfiprintf_r+0x220>)
 8012c00:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012c04:	2206      	movs	r2, #6
 8012c06:	f7ed facb 	bl	80001a0 <memchr>
 8012c0a:	2800      	cmp	r0, #0
 8012c0c:	d03f      	beq.n	8012c8e <_vfiprintf_r+0x20a>
 8012c0e:	4b26      	ldr	r3, [pc, #152]	@ (8012ca8 <_vfiprintf_r+0x224>)
 8012c10:	bb1b      	cbnz	r3, 8012c5a <_vfiprintf_r+0x1d6>
 8012c12:	9b03      	ldr	r3, [sp, #12]
 8012c14:	3307      	adds	r3, #7
 8012c16:	f023 0307 	bic.w	r3, r3, #7
 8012c1a:	3308      	adds	r3, #8
 8012c1c:	9303      	str	r3, [sp, #12]
 8012c1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012c20:	443b      	add	r3, r7
 8012c22:	9309      	str	r3, [sp, #36]	@ 0x24
 8012c24:	e76a      	b.n	8012afc <_vfiprintf_r+0x78>
 8012c26:	fb0c 3202 	mla	r2, ip, r2, r3
 8012c2a:	460c      	mov	r4, r1
 8012c2c:	2001      	movs	r0, #1
 8012c2e:	e7a8      	b.n	8012b82 <_vfiprintf_r+0xfe>
 8012c30:	2300      	movs	r3, #0
 8012c32:	3401      	adds	r4, #1
 8012c34:	9305      	str	r3, [sp, #20]
 8012c36:	4619      	mov	r1, r3
 8012c38:	f04f 0c0a 	mov.w	ip, #10
 8012c3c:	4620      	mov	r0, r4
 8012c3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012c42:	3a30      	subs	r2, #48	@ 0x30
 8012c44:	2a09      	cmp	r2, #9
 8012c46:	d903      	bls.n	8012c50 <_vfiprintf_r+0x1cc>
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d0c6      	beq.n	8012bda <_vfiprintf_r+0x156>
 8012c4c:	9105      	str	r1, [sp, #20]
 8012c4e:	e7c4      	b.n	8012bda <_vfiprintf_r+0x156>
 8012c50:	fb0c 2101 	mla	r1, ip, r1, r2
 8012c54:	4604      	mov	r4, r0
 8012c56:	2301      	movs	r3, #1
 8012c58:	e7f0      	b.n	8012c3c <_vfiprintf_r+0x1b8>
 8012c5a:	ab03      	add	r3, sp, #12
 8012c5c:	9300      	str	r3, [sp, #0]
 8012c5e:	462a      	mov	r2, r5
 8012c60:	4b12      	ldr	r3, [pc, #72]	@ (8012cac <_vfiprintf_r+0x228>)
 8012c62:	a904      	add	r1, sp, #16
 8012c64:	4630      	mov	r0, r6
 8012c66:	f7fe f9d9 	bl	801101c <_printf_float>
 8012c6a:	4607      	mov	r7, r0
 8012c6c:	1c78      	adds	r0, r7, #1
 8012c6e:	d1d6      	bne.n	8012c1e <_vfiprintf_r+0x19a>
 8012c70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012c72:	07d9      	lsls	r1, r3, #31
 8012c74:	d405      	bmi.n	8012c82 <_vfiprintf_r+0x1fe>
 8012c76:	89ab      	ldrh	r3, [r5, #12]
 8012c78:	059a      	lsls	r2, r3, #22
 8012c7a:	d402      	bmi.n	8012c82 <_vfiprintf_r+0x1fe>
 8012c7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012c7e:	f7fe ff13 	bl	8011aa8 <__retarget_lock_release_recursive>
 8012c82:	89ab      	ldrh	r3, [r5, #12]
 8012c84:	065b      	lsls	r3, r3, #25
 8012c86:	f53f af1f 	bmi.w	8012ac8 <_vfiprintf_r+0x44>
 8012c8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012c8c:	e71e      	b.n	8012acc <_vfiprintf_r+0x48>
 8012c8e:	ab03      	add	r3, sp, #12
 8012c90:	9300      	str	r3, [sp, #0]
 8012c92:	462a      	mov	r2, r5
 8012c94:	4b05      	ldr	r3, [pc, #20]	@ (8012cac <_vfiprintf_r+0x228>)
 8012c96:	a904      	add	r1, sp, #16
 8012c98:	4630      	mov	r0, r6
 8012c9a:	f7fe fc57 	bl	801154c <_printf_i>
 8012c9e:	e7e4      	b.n	8012c6a <_vfiprintf_r+0x1e6>
 8012ca0:	08015aa1 	.word	0x08015aa1
 8012ca4:	08015aab 	.word	0x08015aab
 8012ca8:	0801101d 	.word	0x0801101d
 8012cac:	08012a5f 	.word	0x08012a5f
 8012cb0:	08015aa7 	.word	0x08015aa7

08012cb4 <malloc>:
 8012cb4:	4b02      	ldr	r3, [pc, #8]	@ (8012cc0 <malloc+0xc>)
 8012cb6:	4601      	mov	r1, r0
 8012cb8:	6818      	ldr	r0, [r3, #0]
 8012cba:	f000 b825 	b.w	8012d08 <_malloc_r>
 8012cbe:	bf00      	nop
 8012cc0:	200000c8 	.word	0x200000c8

08012cc4 <sbrk_aligned>:
 8012cc4:	b570      	push	{r4, r5, r6, lr}
 8012cc6:	4e0f      	ldr	r6, [pc, #60]	@ (8012d04 <sbrk_aligned+0x40>)
 8012cc8:	460c      	mov	r4, r1
 8012cca:	6831      	ldr	r1, [r6, #0]
 8012ccc:	4605      	mov	r5, r0
 8012cce:	b911      	cbnz	r1, 8012cd6 <sbrk_aligned+0x12>
 8012cd0:	f000 feb6 	bl	8013a40 <_sbrk_r>
 8012cd4:	6030      	str	r0, [r6, #0]
 8012cd6:	4621      	mov	r1, r4
 8012cd8:	4628      	mov	r0, r5
 8012cda:	f000 feb1 	bl	8013a40 <_sbrk_r>
 8012cde:	1c43      	adds	r3, r0, #1
 8012ce0:	d103      	bne.n	8012cea <sbrk_aligned+0x26>
 8012ce2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8012ce6:	4620      	mov	r0, r4
 8012ce8:	bd70      	pop	{r4, r5, r6, pc}
 8012cea:	1cc4      	adds	r4, r0, #3
 8012cec:	f024 0403 	bic.w	r4, r4, #3
 8012cf0:	42a0      	cmp	r0, r4
 8012cf2:	d0f8      	beq.n	8012ce6 <sbrk_aligned+0x22>
 8012cf4:	1a21      	subs	r1, r4, r0
 8012cf6:	4628      	mov	r0, r5
 8012cf8:	f000 fea2 	bl	8013a40 <_sbrk_r>
 8012cfc:	3001      	adds	r0, #1
 8012cfe:	d1f2      	bne.n	8012ce6 <sbrk_aligned+0x22>
 8012d00:	e7ef      	b.n	8012ce2 <sbrk_aligned+0x1e>
 8012d02:	bf00      	nop
 8012d04:	20001e8c 	.word	0x20001e8c

08012d08 <_malloc_r>:
 8012d08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012d0c:	1ccd      	adds	r5, r1, #3
 8012d0e:	f025 0503 	bic.w	r5, r5, #3
 8012d12:	3508      	adds	r5, #8
 8012d14:	2d0c      	cmp	r5, #12
 8012d16:	bf38      	it	cc
 8012d18:	250c      	movcc	r5, #12
 8012d1a:	2d00      	cmp	r5, #0
 8012d1c:	4606      	mov	r6, r0
 8012d1e:	db01      	blt.n	8012d24 <_malloc_r+0x1c>
 8012d20:	42a9      	cmp	r1, r5
 8012d22:	d904      	bls.n	8012d2e <_malloc_r+0x26>
 8012d24:	230c      	movs	r3, #12
 8012d26:	6033      	str	r3, [r6, #0]
 8012d28:	2000      	movs	r0, #0
 8012d2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012d2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012e04 <_malloc_r+0xfc>
 8012d32:	f000 f915 	bl	8012f60 <__malloc_lock>
 8012d36:	f8d8 3000 	ldr.w	r3, [r8]
 8012d3a:	461c      	mov	r4, r3
 8012d3c:	bb44      	cbnz	r4, 8012d90 <_malloc_r+0x88>
 8012d3e:	4629      	mov	r1, r5
 8012d40:	4630      	mov	r0, r6
 8012d42:	f7ff ffbf 	bl	8012cc4 <sbrk_aligned>
 8012d46:	1c43      	adds	r3, r0, #1
 8012d48:	4604      	mov	r4, r0
 8012d4a:	d158      	bne.n	8012dfe <_malloc_r+0xf6>
 8012d4c:	f8d8 4000 	ldr.w	r4, [r8]
 8012d50:	4627      	mov	r7, r4
 8012d52:	2f00      	cmp	r7, #0
 8012d54:	d143      	bne.n	8012dde <_malloc_r+0xd6>
 8012d56:	2c00      	cmp	r4, #0
 8012d58:	d04b      	beq.n	8012df2 <_malloc_r+0xea>
 8012d5a:	6823      	ldr	r3, [r4, #0]
 8012d5c:	4639      	mov	r1, r7
 8012d5e:	4630      	mov	r0, r6
 8012d60:	eb04 0903 	add.w	r9, r4, r3
 8012d64:	f000 fe6c 	bl	8013a40 <_sbrk_r>
 8012d68:	4581      	cmp	r9, r0
 8012d6a:	d142      	bne.n	8012df2 <_malloc_r+0xea>
 8012d6c:	6821      	ldr	r1, [r4, #0]
 8012d6e:	1a6d      	subs	r5, r5, r1
 8012d70:	4629      	mov	r1, r5
 8012d72:	4630      	mov	r0, r6
 8012d74:	f7ff ffa6 	bl	8012cc4 <sbrk_aligned>
 8012d78:	3001      	adds	r0, #1
 8012d7a:	d03a      	beq.n	8012df2 <_malloc_r+0xea>
 8012d7c:	6823      	ldr	r3, [r4, #0]
 8012d7e:	442b      	add	r3, r5
 8012d80:	6023      	str	r3, [r4, #0]
 8012d82:	f8d8 3000 	ldr.w	r3, [r8]
 8012d86:	685a      	ldr	r2, [r3, #4]
 8012d88:	bb62      	cbnz	r2, 8012de4 <_malloc_r+0xdc>
 8012d8a:	f8c8 7000 	str.w	r7, [r8]
 8012d8e:	e00f      	b.n	8012db0 <_malloc_r+0xa8>
 8012d90:	6822      	ldr	r2, [r4, #0]
 8012d92:	1b52      	subs	r2, r2, r5
 8012d94:	d420      	bmi.n	8012dd8 <_malloc_r+0xd0>
 8012d96:	2a0b      	cmp	r2, #11
 8012d98:	d917      	bls.n	8012dca <_malloc_r+0xc2>
 8012d9a:	1961      	adds	r1, r4, r5
 8012d9c:	42a3      	cmp	r3, r4
 8012d9e:	6025      	str	r5, [r4, #0]
 8012da0:	bf18      	it	ne
 8012da2:	6059      	strne	r1, [r3, #4]
 8012da4:	6863      	ldr	r3, [r4, #4]
 8012da6:	bf08      	it	eq
 8012da8:	f8c8 1000 	streq.w	r1, [r8]
 8012dac:	5162      	str	r2, [r4, r5]
 8012dae:	604b      	str	r3, [r1, #4]
 8012db0:	4630      	mov	r0, r6
 8012db2:	f000 f8db 	bl	8012f6c <__malloc_unlock>
 8012db6:	f104 000b 	add.w	r0, r4, #11
 8012dba:	1d23      	adds	r3, r4, #4
 8012dbc:	f020 0007 	bic.w	r0, r0, #7
 8012dc0:	1ac2      	subs	r2, r0, r3
 8012dc2:	bf1c      	itt	ne
 8012dc4:	1a1b      	subne	r3, r3, r0
 8012dc6:	50a3      	strne	r3, [r4, r2]
 8012dc8:	e7af      	b.n	8012d2a <_malloc_r+0x22>
 8012dca:	6862      	ldr	r2, [r4, #4]
 8012dcc:	42a3      	cmp	r3, r4
 8012dce:	bf0c      	ite	eq
 8012dd0:	f8c8 2000 	streq.w	r2, [r8]
 8012dd4:	605a      	strne	r2, [r3, #4]
 8012dd6:	e7eb      	b.n	8012db0 <_malloc_r+0xa8>
 8012dd8:	4623      	mov	r3, r4
 8012dda:	6864      	ldr	r4, [r4, #4]
 8012ddc:	e7ae      	b.n	8012d3c <_malloc_r+0x34>
 8012dde:	463c      	mov	r4, r7
 8012de0:	687f      	ldr	r7, [r7, #4]
 8012de2:	e7b6      	b.n	8012d52 <_malloc_r+0x4a>
 8012de4:	461a      	mov	r2, r3
 8012de6:	685b      	ldr	r3, [r3, #4]
 8012de8:	42a3      	cmp	r3, r4
 8012dea:	d1fb      	bne.n	8012de4 <_malloc_r+0xdc>
 8012dec:	2300      	movs	r3, #0
 8012dee:	6053      	str	r3, [r2, #4]
 8012df0:	e7de      	b.n	8012db0 <_malloc_r+0xa8>
 8012df2:	230c      	movs	r3, #12
 8012df4:	6033      	str	r3, [r6, #0]
 8012df6:	4630      	mov	r0, r6
 8012df8:	f000 f8b8 	bl	8012f6c <__malloc_unlock>
 8012dfc:	e794      	b.n	8012d28 <_malloc_r+0x20>
 8012dfe:	6005      	str	r5, [r0, #0]
 8012e00:	e7d6      	b.n	8012db0 <_malloc_r+0xa8>
 8012e02:	bf00      	nop
 8012e04:	20001e90 	.word	0x20001e90

08012e08 <__sflush_r>:
 8012e08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e10:	0716      	lsls	r6, r2, #28
 8012e12:	4605      	mov	r5, r0
 8012e14:	460c      	mov	r4, r1
 8012e16:	d454      	bmi.n	8012ec2 <__sflush_r+0xba>
 8012e18:	684b      	ldr	r3, [r1, #4]
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	dc02      	bgt.n	8012e24 <__sflush_r+0x1c>
 8012e1e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	dd48      	ble.n	8012eb6 <__sflush_r+0xae>
 8012e24:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012e26:	2e00      	cmp	r6, #0
 8012e28:	d045      	beq.n	8012eb6 <__sflush_r+0xae>
 8012e2a:	2300      	movs	r3, #0
 8012e2c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012e30:	682f      	ldr	r7, [r5, #0]
 8012e32:	6a21      	ldr	r1, [r4, #32]
 8012e34:	602b      	str	r3, [r5, #0]
 8012e36:	d030      	beq.n	8012e9a <__sflush_r+0x92>
 8012e38:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012e3a:	89a3      	ldrh	r3, [r4, #12]
 8012e3c:	0759      	lsls	r1, r3, #29
 8012e3e:	d505      	bpl.n	8012e4c <__sflush_r+0x44>
 8012e40:	6863      	ldr	r3, [r4, #4]
 8012e42:	1ad2      	subs	r2, r2, r3
 8012e44:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012e46:	b10b      	cbz	r3, 8012e4c <__sflush_r+0x44>
 8012e48:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012e4a:	1ad2      	subs	r2, r2, r3
 8012e4c:	2300      	movs	r3, #0
 8012e4e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012e50:	6a21      	ldr	r1, [r4, #32]
 8012e52:	4628      	mov	r0, r5
 8012e54:	47b0      	blx	r6
 8012e56:	1c43      	adds	r3, r0, #1
 8012e58:	89a3      	ldrh	r3, [r4, #12]
 8012e5a:	d106      	bne.n	8012e6a <__sflush_r+0x62>
 8012e5c:	6829      	ldr	r1, [r5, #0]
 8012e5e:	291d      	cmp	r1, #29
 8012e60:	d82b      	bhi.n	8012eba <__sflush_r+0xb2>
 8012e62:	4a2a      	ldr	r2, [pc, #168]	@ (8012f0c <__sflush_r+0x104>)
 8012e64:	40ca      	lsrs	r2, r1
 8012e66:	07d6      	lsls	r6, r2, #31
 8012e68:	d527      	bpl.n	8012eba <__sflush_r+0xb2>
 8012e6a:	2200      	movs	r2, #0
 8012e6c:	6062      	str	r2, [r4, #4]
 8012e6e:	04d9      	lsls	r1, r3, #19
 8012e70:	6922      	ldr	r2, [r4, #16]
 8012e72:	6022      	str	r2, [r4, #0]
 8012e74:	d504      	bpl.n	8012e80 <__sflush_r+0x78>
 8012e76:	1c42      	adds	r2, r0, #1
 8012e78:	d101      	bne.n	8012e7e <__sflush_r+0x76>
 8012e7a:	682b      	ldr	r3, [r5, #0]
 8012e7c:	b903      	cbnz	r3, 8012e80 <__sflush_r+0x78>
 8012e7e:	6560      	str	r0, [r4, #84]	@ 0x54
 8012e80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012e82:	602f      	str	r7, [r5, #0]
 8012e84:	b1b9      	cbz	r1, 8012eb6 <__sflush_r+0xae>
 8012e86:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012e8a:	4299      	cmp	r1, r3
 8012e8c:	d002      	beq.n	8012e94 <__sflush_r+0x8c>
 8012e8e:	4628      	mov	r0, r5
 8012e90:	f000 fe4c 	bl	8013b2c <_free_r>
 8012e94:	2300      	movs	r3, #0
 8012e96:	6363      	str	r3, [r4, #52]	@ 0x34
 8012e98:	e00d      	b.n	8012eb6 <__sflush_r+0xae>
 8012e9a:	2301      	movs	r3, #1
 8012e9c:	4628      	mov	r0, r5
 8012e9e:	47b0      	blx	r6
 8012ea0:	4602      	mov	r2, r0
 8012ea2:	1c50      	adds	r0, r2, #1
 8012ea4:	d1c9      	bne.n	8012e3a <__sflush_r+0x32>
 8012ea6:	682b      	ldr	r3, [r5, #0]
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d0c6      	beq.n	8012e3a <__sflush_r+0x32>
 8012eac:	2b1d      	cmp	r3, #29
 8012eae:	d001      	beq.n	8012eb4 <__sflush_r+0xac>
 8012eb0:	2b16      	cmp	r3, #22
 8012eb2:	d11e      	bne.n	8012ef2 <__sflush_r+0xea>
 8012eb4:	602f      	str	r7, [r5, #0]
 8012eb6:	2000      	movs	r0, #0
 8012eb8:	e022      	b.n	8012f00 <__sflush_r+0xf8>
 8012eba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012ebe:	b21b      	sxth	r3, r3
 8012ec0:	e01b      	b.n	8012efa <__sflush_r+0xf2>
 8012ec2:	690f      	ldr	r7, [r1, #16]
 8012ec4:	2f00      	cmp	r7, #0
 8012ec6:	d0f6      	beq.n	8012eb6 <__sflush_r+0xae>
 8012ec8:	0793      	lsls	r3, r2, #30
 8012eca:	680e      	ldr	r6, [r1, #0]
 8012ecc:	bf08      	it	eq
 8012ece:	694b      	ldreq	r3, [r1, #20]
 8012ed0:	600f      	str	r7, [r1, #0]
 8012ed2:	bf18      	it	ne
 8012ed4:	2300      	movne	r3, #0
 8012ed6:	eba6 0807 	sub.w	r8, r6, r7
 8012eda:	608b      	str	r3, [r1, #8]
 8012edc:	f1b8 0f00 	cmp.w	r8, #0
 8012ee0:	dde9      	ble.n	8012eb6 <__sflush_r+0xae>
 8012ee2:	6a21      	ldr	r1, [r4, #32]
 8012ee4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8012ee6:	4643      	mov	r3, r8
 8012ee8:	463a      	mov	r2, r7
 8012eea:	4628      	mov	r0, r5
 8012eec:	47b0      	blx	r6
 8012eee:	2800      	cmp	r0, #0
 8012ef0:	dc08      	bgt.n	8012f04 <__sflush_r+0xfc>
 8012ef2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012ef6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012efa:	81a3      	strh	r3, [r4, #12]
 8012efc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f04:	4407      	add	r7, r0
 8012f06:	eba8 0800 	sub.w	r8, r8, r0
 8012f0a:	e7e7      	b.n	8012edc <__sflush_r+0xd4>
 8012f0c:	20400001 	.word	0x20400001

08012f10 <_fflush_r>:
 8012f10:	b538      	push	{r3, r4, r5, lr}
 8012f12:	690b      	ldr	r3, [r1, #16]
 8012f14:	4605      	mov	r5, r0
 8012f16:	460c      	mov	r4, r1
 8012f18:	b913      	cbnz	r3, 8012f20 <_fflush_r+0x10>
 8012f1a:	2500      	movs	r5, #0
 8012f1c:	4628      	mov	r0, r5
 8012f1e:	bd38      	pop	{r3, r4, r5, pc}
 8012f20:	b118      	cbz	r0, 8012f2a <_fflush_r+0x1a>
 8012f22:	6a03      	ldr	r3, [r0, #32]
 8012f24:	b90b      	cbnz	r3, 8012f2a <_fflush_r+0x1a>
 8012f26:	f7fe fcdd 	bl	80118e4 <__sinit>
 8012f2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d0f3      	beq.n	8012f1a <_fflush_r+0xa>
 8012f32:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012f34:	07d0      	lsls	r0, r2, #31
 8012f36:	d404      	bmi.n	8012f42 <_fflush_r+0x32>
 8012f38:	0599      	lsls	r1, r3, #22
 8012f3a:	d402      	bmi.n	8012f42 <_fflush_r+0x32>
 8012f3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012f3e:	f7fe fdb2 	bl	8011aa6 <__retarget_lock_acquire_recursive>
 8012f42:	4628      	mov	r0, r5
 8012f44:	4621      	mov	r1, r4
 8012f46:	f7ff ff5f 	bl	8012e08 <__sflush_r>
 8012f4a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012f4c:	07da      	lsls	r2, r3, #31
 8012f4e:	4605      	mov	r5, r0
 8012f50:	d4e4      	bmi.n	8012f1c <_fflush_r+0xc>
 8012f52:	89a3      	ldrh	r3, [r4, #12]
 8012f54:	059b      	lsls	r3, r3, #22
 8012f56:	d4e1      	bmi.n	8012f1c <_fflush_r+0xc>
 8012f58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012f5a:	f7fe fda5 	bl	8011aa8 <__retarget_lock_release_recursive>
 8012f5e:	e7dd      	b.n	8012f1c <_fflush_r+0xc>

08012f60 <__malloc_lock>:
 8012f60:	4801      	ldr	r0, [pc, #4]	@ (8012f68 <__malloc_lock+0x8>)
 8012f62:	f7fe bda0 	b.w	8011aa6 <__retarget_lock_acquire_recursive>
 8012f66:	bf00      	nop
 8012f68:	20001e88 	.word	0x20001e88

08012f6c <__malloc_unlock>:
 8012f6c:	4801      	ldr	r0, [pc, #4]	@ (8012f74 <__malloc_unlock+0x8>)
 8012f6e:	f7fe bd9b 	b.w	8011aa8 <__retarget_lock_release_recursive>
 8012f72:	bf00      	nop
 8012f74:	20001e88 	.word	0x20001e88

08012f78 <_Balloc>:
 8012f78:	b570      	push	{r4, r5, r6, lr}
 8012f7a:	69c6      	ldr	r6, [r0, #28]
 8012f7c:	4604      	mov	r4, r0
 8012f7e:	460d      	mov	r5, r1
 8012f80:	b976      	cbnz	r6, 8012fa0 <_Balloc+0x28>
 8012f82:	2010      	movs	r0, #16
 8012f84:	f7ff fe96 	bl	8012cb4 <malloc>
 8012f88:	4602      	mov	r2, r0
 8012f8a:	61e0      	str	r0, [r4, #28]
 8012f8c:	b920      	cbnz	r0, 8012f98 <_Balloc+0x20>
 8012f8e:	4b18      	ldr	r3, [pc, #96]	@ (8012ff0 <_Balloc+0x78>)
 8012f90:	4818      	ldr	r0, [pc, #96]	@ (8012ff4 <_Balloc+0x7c>)
 8012f92:	216b      	movs	r1, #107	@ 0x6b
 8012f94:	f000 fd98 	bl	8013ac8 <__assert_func>
 8012f98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012f9c:	6006      	str	r6, [r0, #0]
 8012f9e:	60c6      	str	r6, [r0, #12]
 8012fa0:	69e6      	ldr	r6, [r4, #28]
 8012fa2:	68f3      	ldr	r3, [r6, #12]
 8012fa4:	b183      	cbz	r3, 8012fc8 <_Balloc+0x50>
 8012fa6:	69e3      	ldr	r3, [r4, #28]
 8012fa8:	68db      	ldr	r3, [r3, #12]
 8012faa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012fae:	b9b8      	cbnz	r0, 8012fe0 <_Balloc+0x68>
 8012fb0:	2101      	movs	r1, #1
 8012fb2:	fa01 f605 	lsl.w	r6, r1, r5
 8012fb6:	1d72      	adds	r2, r6, #5
 8012fb8:	0092      	lsls	r2, r2, #2
 8012fba:	4620      	mov	r0, r4
 8012fbc:	f000 fda2 	bl	8013b04 <_calloc_r>
 8012fc0:	b160      	cbz	r0, 8012fdc <_Balloc+0x64>
 8012fc2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012fc6:	e00e      	b.n	8012fe6 <_Balloc+0x6e>
 8012fc8:	2221      	movs	r2, #33	@ 0x21
 8012fca:	2104      	movs	r1, #4
 8012fcc:	4620      	mov	r0, r4
 8012fce:	f000 fd99 	bl	8013b04 <_calloc_r>
 8012fd2:	69e3      	ldr	r3, [r4, #28]
 8012fd4:	60f0      	str	r0, [r6, #12]
 8012fd6:	68db      	ldr	r3, [r3, #12]
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d1e4      	bne.n	8012fa6 <_Balloc+0x2e>
 8012fdc:	2000      	movs	r0, #0
 8012fde:	bd70      	pop	{r4, r5, r6, pc}
 8012fe0:	6802      	ldr	r2, [r0, #0]
 8012fe2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012fe6:	2300      	movs	r3, #0
 8012fe8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012fec:	e7f7      	b.n	8012fde <_Balloc+0x66>
 8012fee:	bf00      	nop
 8012ff0:	08015a21 	.word	0x08015a21
 8012ff4:	08015ab2 	.word	0x08015ab2

08012ff8 <_Bfree>:
 8012ff8:	b570      	push	{r4, r5, r6, lr}
 8012ffa:	69c6      	ldr	r6, [r0, #28]
 8012ffc:	4605      	mov	r5, r0
 8012ffe:	460c      	mov	r4, r1
 8013000:	b976      	cbnz	r6, 8013020 <_Bfree+0x28>
 8013002:	2010      	movs	r0, #16
 8013004:	f7ff fe56 	bl	8012cb4 <malloc>
 8013008:	4602      	mov	r2, r0
 801300a:	61e8      	str	r0, [r5, #28]
 801300c:	b920      	cbnz	r0, 8013018 <_Bfree+0x20>
 801300e:	4b09      	ldr	r3, [pc, #36]	@ (8013034 <_Bfree+0x3c>)
 8013010:	4809      	ldr	r0, [pc, #36]	@ (8013038 <_Bfree+0x40>)
 8013012:	218f      	movs	r1, #143	@ 0x8f
 8013014:	f000 fd58 	bl	8013ac8 <__assert_func>
 8013018:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801301c:	6006      	str	r6, [r0, #0]
 801301e:	60c6      	str	r6, [r0, #12]
 8013020:	b13c      	cbz	r4, 8013032 <_Bfree+0x3a>
 8013022:	69eb      	ldr	r3, [r5, #28]
 8013024:	6862      	ldr	r2, [r4, #4]
 8013026:	68db      	ldr	r3, [r3, #12]
 8013028:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801302c:	6021      	str	r1, [r4, #0]
 801302e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013032:	bd70      	pop	{r4, r5, r6, pc}
 8013034:	08015a21 	.word	0x08015a21
 8013038:	08015ab2 	.word	0x08015ab2

0801303c <__multadd>:
 801303c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013040:	690d      	ldr	r5, [r1, #16]
 8013042:	4607      	mov	r7, r0
 8013044:	460c      	mov	r4, r1
 8013046:	461e      	mov	r6, r3
 8013048:	f101 0c14 	add.w	ip, r1, #20
 801304c:	2000      	movs	r0, #0
 801304e:	f8dc 3000 	ldr.w	r3, [ip]
 8013052:	b299      	uxth	r1, r3
 8013054:	fb02 6101 	mla	r1, r2, r1, r6
 8013058:	0c1e      	lsrs	r6, r3, #16
 801305a:	0c0b      	lsrs	r3, r1, #16
 801305c:	fb02 3306 	mla	r3, r2, r6, r3
 8013060:	b289      	uxth	r1, r1
 8013062:	3001      	adds	r0, #1
 8013064:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013068:	4285      	cmp	r5, r0
 801306a:	f84c 1b04 	str.w	r1, [ip], #4
 801306e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013072:	dcec      	bgt.n	801304e <__multadd+0x12>
 8013074:	b30e      	cbz	r6, 80130ba <__multadd+0x7e>
 8013076:	68a3      	ldr	r3, [r4, #8]
 8013078:	42ab      	cmp	r3, r5
 801307a:	dc19      	bgt.n	80130b0 <__multadd+0x74>
 801307c:	6861      	ldr	r1, [r4, #4]
 801307e:	4638      	mov	r0, r7
 8013080:	3101      	adds	r1, #1
 8013082:	f7ff ff79 	bl	8012f78 <_Balloc>
 8013086:	4680      	mov	r8, r0
 8013088:	b928      	cbnz	r0, 8013096 <__multadd+0x5a>
 801308a:	4602      	mov	r2, r0
 801308c:	4b0c      	ldr	r3, [pc, #48]	@ (80130c0 <__multadd+0x84>)
 801308e:	480d      	ldr	r0, [pc, #52]	@ (80130c4 <__multadd+0x88>)
 8013090:	21ba      	movs	r1, #186	@ 0xba
 8013092:	f000 fd19 	bl	8013ac8 <__assert_func>
 8013096:	6922      	ldr	r2, [r4, #16]
 8013098:	3202      	adds	r2, #2
 801309a:	f104 010c 	add.w	r1, r4, #12
 801309e:	0092      	lsls	r2, r2, #2
 80130a0:	300c      	adds	r0, #12
 80130a2:	f7fe fd07 	bl	8011ab4 <memcpy>
 80130a6:	4621      	mov	r1, r4
 80130a8:	4638      	mov	r0, r7
 80130aa:	f7ff ffa5 	bl	8012ff8 <_Bfree>
 80130ae:	4644      	mov	r4, r8
 80130b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80130b4:	3501      	adds	r5, #1
 80130b6:	615e      	str	r6, [r3, #20]
 80130b8:	6125      	str	r5, [r4, #16]
 80130ba:	4620      	mov	r0, r4
 80130bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130c0:	08015a90 	.word	0x08015a90
 80130c4:	08015ab2 	.word	0x08015ab2

080130c8 <__hi0bits>:
 80130c8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80130cc:	4603      	mov	r3, r0
 80130ce:	bf36      	itet	cc
 80130d0:	0403      	lslcc	r3, r0, #16
 80130d2:	2000      	movcs	r0, #0
 80130d4:	2010      	movcc	r0, #16
 80130d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80130da:	bf3c      	itt	cc
 80130dc:	021b      	lslcc	r3, r3, #8
 80130de:	3008      	addcc	r0, #8
 80130e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80130e4:	bf3c      	itt	cc
 80130e6:	011b      	lslcc	r3, r3, #4
 80130e8:	3004      	addcc	r0, #4
 80130ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80130ee:	bf3c      	itt	cc
 80130f0:	009b      	lslcc	r3, r3, #2
 80130f2:	3002      	addcc	r0, #2
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	db05      	blt.n	8013104 <__hi0bits+0x3c>
 80130f8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80130fc:	f100 0001 	add.w	r0, r0, #1
 8013100:	bf08      	it	eq
 8013102:	2020      	moveq	r0, #32
 8013104:	4770      	bx	lr

08013106 <__lo0bits>:
 8013106:	6803      	ldr	r3, [r0, #0]
 8013108:	4602      	mov	r2, r0
 801310a:	f013 0007 	ands.w	r0, r3, #7
 801310e:	d00b      	beq.n	8013128 <__lo0bits+0x22>
 8013110:	07d9      	lsls	r1, r3, #31
 8013112:	d421      	bmi.n	8013158 <__lo0bits+0x52>
 8013114:	0798      	lsls	r0, r3, #30
 8013116:	bf49      	itett	mi
 8013118:	085b      	lsrmi	r3, r3, #1
 801311a:	089b      	lsrpl	r3, r3, #2
 801311c:	2001      	movmi	r0, #1
 801311e:	6013      	strmi	r3, [r2, #0]
 8013120:	bf5c      	itt	pl
 8013122:	6013      	strpl	r3, [r2, #0]
 8013124:	2002      	movpl	r0, #2
 8013126:	4770      	bx	lr
 8013128:	b299      	uxth	r1, r3
 801312a:	b909      	cbnz	r1, 8013130 <__lo0bits+0x2a>
 801312c:	0c1b      	lsrs	r3, r3, #16
 801312e:	2010      	movs	r0, #16
 8013130:	b2d9      	uxtb	r1, r3
 8013132:	b909      	cbnz	r1, 8013138 <__lo0bits+0x32>
 8013134:	3008      	adds	r0, #8
 8013136:	0a1b      	lsrs	r3, r3, #8
 8013138:	0719      	lsls	r1, r3, #28
 801313a:	bf04      	itt	eq
 801313c:	091b      	lsreq	r3, r3, #4
 801313e:	3004      	addeq	r0, #4
 8013140:	0799      	lsls	r1, r3, #30
 8013142:	bf04      	itt	eq
 8013144:	089b      	lsreq	r3, r3, #2
 8013146:	3002      	addeq	r0, #2
 8013148:	07d9      	lsls	r1, r3, #31
 801314a:	d403      	bmi.n	8013154 <__lo0bits+0x4e>
 801314c:	085b      	lsrs	r3, r3, #1
 801314e:	f100 0001 	add.w	r0, r0, #1
 8013152:	d003      	beq.n	801315c <__lo0bits+0x56>
 8013154:	6013      	str	r3, [r2, #0]
 8013156:	4770      	bx	lr
 8013158:	2000      	movs	r0, #0
 801315a:	4770      	bx	lr
 801315c:	2020      	movs	r0, #32
 801315e:	4770      	bx	lr

08013160 <__i2b>:
 8013160:	b510      	push	{r4, lr}
 8013162:	460c      	mov	r4, r1
 8013164:	2101      	movs	r1, #1
 8013166:	f7ff ff07 	bl	8012f78 <_Balloc>
 801316a:	4602      	mov	r2, r0
 801316c:	b928      	cbnz	r0, 801317a <__i2b+0x1a>
 801316e:	4b05      	ldr	r3, [pc, #20]	@ (8013184 <__i2b+0x24>)
 8013170:	4805      	ldr	r0, [pc, #20]	@ (8013188 <__i2b+0x28>)
 8013172:	f240 1145 	movw	r1, #325	@ 0x145
 8013176:	f000 fca7 	bl	8013ac8 <__assert_func>
 801317a:	2301      	movs	r3, #1
 801317c:	6144      	str	r4, [r0, #20]
 801317e:	6103      	str	r3, [r0, #16]
 8013180:	bd10      	pop	{r4, pc}
 8013182:	bf00      	nop
 8013184:	08015a90 	.word	0x08015a90
 8013188:	08015ab2 	.word	0x08015ab2

0801318c <__multiply>:
 801318c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013190:	4617      	mov	r7, r2
 8013192:	690a      	ldr	r2, [r1, #16]
 8013194:	693b      	ldr	r3, [r7, #16]
 8013196:	429a      	cmp	r2, r3
 8013198:	bfa8      	it	ge
 801319a:	463b      	movge	r3, r7
 801319c:	4689      	mov	r9, r1
 801319e:	bfa4      	itt	ge
 80131a0:	460f      	movge	r7, r1
 80131a2:	4699      	movge	r9, r3
 80131a4:	693d      	ldr	r5, [r7, #16]
 80131a6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80131aa:	68bb      	ldr	r3, [r7, #8]
 80131ac:	6879      	ldr	r1, [r7, #4]
 80131ae:	eb05 060a 	add.w	r6, r5, sl
 80131b2:	42b3      	cmp	r3, r6
 80131b4:	b085      	sub	sp, #20
 80131b6:	bfb8      	it	lt
 80131b8:	3101      	addlt	r1, #1
 80131ba:	f7ff fedd 	bl	8012f78 <_Balloc>
 80131be:	b930      	cbnz	r0, 80131ce <__multiply+0x42>
 80131c0:	4602      	mov	r2, r0
 80131c2:	4b41      	ldr	r3, [pc, #260]	@ (80132c8 <__multiply+0x13c>)
 80131c4:	4841      	ldr	r0, [pc, #260]	@ (80132cc <__multiply+0x140>)
 80131c6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80131ca:	f000 fc7d 	bl	8013ac8 <__assert_func>
 80131ce:	f100 0414 	add.w	r4, r0, #20
 80131d2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80131d6:	4623      	mov	r3, r4
 80131d8:	2200      	movs	r2, #0
 80131da:	4573      	cmp	r3, lr
 80131dc:	d320      	bcc.n	8013220 <__multiply+0x94>
 80131de:	f107 0814 	add.w	r8, r7, #20
 80131e2:	f109 0114 	add.w	r1, r9, #20
 80131e6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80131ea:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80131ee:	9302      	str	r3, [sp, #8]
 80131f0:	1beb      	subs	r3, r5, r7
 80131f2:	3b15      	subs	r3, #21
 80131f4:	f023 0303 	bic.w	r3, r3, #3
 80131f8:	3304      	adds	r3, #4
 80131fa:	3715      	adds	r7, #21
 80131fc:	42bd      	cmp	r5, r7
 80131fe:	bf38      	it	cc
 8013200:	2304      	movcc	r3, #4
 8013202:	9301      	str	r3, [sp, #4]
 8013204:	9b02      	ldr	r3, [sp, #8]
 8013206:	9103      	str	r1, [sp, #12]
 8013208:	428b      	cmp	r3, r1
 801320a:	d80c      	bhi.n	8013226 <__multiply+0x9a>
 801320c:	2e00      	cmp	r6, #0
 801320e:	dd03      	ble.n	8013218 <__multiply+0x8c>
 8013210:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8013214:	2b00      	cmp	r3, #0
 8013216:	d055      	beq.n	80132c4 <__multiply+0x138>
 8013218:	6106      	str	r6, [r0, #16]
 801321a:	b005      	add	sp, #20
 801321c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013220:	f843 2b04 	str.w	r2, [r3], #4
 8013224:	e7d9      	b.n	80131da <__multiply+0x4e>
 8013226:	f8b1 a000 	ldrh.w	sl, [r1]
 801322a:	f1ba 0f00 	cmp.w	sl, #0
 801322e:	d01f      	beq.n	8013270 <__multiply+0xe4>
 8013230:	46c4      	mov	ip, r8
 8013232:	46a1      	mov	r9, r4
 8013234:	2700      	movs	r7, #0
 8013236:	f85c 2b04 	ldr.w	r2, [ip], #4
 801323a:	f8d9 3000 	ldr.w	r3, [r9]
 801323e:	fa1f fb82 	uxth.w	fp, r2
 8013242:	b29b      	uxth	r3, r3
 8013244:	fb0a 330b 	mla	r3, sl, fp, r3
 8013248:	443b      	add	r3, r7
 801324a:	f8d9 7000 	ldr.w	r7, [r9]
 801324e:	0c12      	lsrs	r2, r2, #16
 8013250:	0c3f      	lsrs	r7, r7, #16
 8013252:	fb0a 7202 	mla	r2, sl, r2, r7
 8013256:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801325a:	b29b      	uxth	r3, r3
 801325c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013260:	4565      	cmp	r5, ip
 8013262:	f849 3b04 	str.w	r3, [r9], #4
 8013266:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801326a:	d8e4      	bhi.n	8013236 <__multiply+0xaa>
 801326c:	9b01      	ldr	r3, [sp, #4]
 801326e:	50e7      	str	r7, [r4, r3]
 8013270:	9b03      	ldr	r3, [sp, #12]
 8013272:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8013276:	3104      	adds	r1, #4
 8013278:	f1b9 0f00 	cmp.w	r9, #0
 801327c:	d020      	beq.n	80132c0 <__multiply+0x134>
 801327e:	6823      	ldr	r3, [r4, #0]
 8013280:	4647      	mov	r7, r8
 8013282:	46a4      	mov	ip, r4
 8013284:	f04f 0a00 	mov.w	sl, #0
 8013288:	f8b7 b000 	ldrh.w	fp, [r7]
 801328c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8013290:	fb09 220b 	mla	r2, r9, fp, r2
 8013294:	4452      	add	r2, sl
 8013296:	b29b      	uxth	r3, r3
 8013298:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801329c:	f84c 3b04 	str.w	r3, [ip], #4
 80132a0:	f857 3b04 	ldr.w	r3, [r7], #4
 80132a4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80132a8:	f8bc 3000 	ldrh.w	r3, [ip]
 80132ac:	fb09 330a 	mla	r3, r9, sl, r3
 80132b0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80132b4:	42bd      	cmp	r5, r7
 80132b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80132ba:	d8e5      	bhi.n	8013288 <__multiply+0xfc>
 80132bc:	9a01      	ldr	r2, [sp, #4]
 80132be:	50a3      	str	r3, [r4, r2]
 80132c0:	3404      	adds	r4, #4
 80132c2:	e79f      	b.n	8013204 <__multiply+0x78>
 80132c4:	3e01      	subs	r6, #1
 80132c6:	e7a1      	b.n	801320c <__multiply+0x80>
 80132c8:	08015a90 	.word	0x08015a90
 80132cc:	08015ab2 	.word	0x08015ab2

080132d0 <__pow5mult>:
 80132d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80132d4:	4615      	mov	r5, r2
 80132d6:	f012 0203 	ands.w	r2, r2, #3
 80132da:	4607      	mov	r7, r0
 80132dc:	460e      	mov	r6, r1
 80132de:	d007      	beq.n	80132f0 <__pow5mult+0x20>
 80132e0:	4c25      	ldr	r4, [pc, #148]	@ (8013378 <__pow5mult+0xa8>)
 80132e2:	3a01      	subs	r2, #1
 80132e4:	2300      	movs	r3, #0
 80132e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80132ea:	f7ff fea7 	bl	801303c <__multadd>
 80132ee:	4606      	mov	r6, r0
 80132f0:	10ad      	asrs	r5, r5, #2
 80132f2:	d03d      	beq.n	8013370 <__pow5mult+0xa0>
 80132f4:	69fc      	ldr	r4, [r7, #28]
 80132f6:	b97c      	cbnz	r4, 8013318 <__pow5mult+0x48>
 80132f8:	2010      	movs	r0, #16
 80132fa:	f7ff fcdb 	bl	8012cb4 <malloc>
 80132fe:	4602      	mov	r2, r0
 8013300:	61f8      	str	r0, [r7, #28]
 8013302:	b928      	cbnz	r0, 8013310 <__pow5mult+0x40>
 8013304:	4b1d      	ldr	r3, [pc, #116]	@ (801337c <__pow5mult+0xac>)
 8013306:	481e      	ldr	r0, [pc, #120]	@ (8013380 <__pow5mult+0xb0>)
 8013308:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801330c:	f000 fbdc 	bl	8013ac8 <__assert_func>
 8013310:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013314:	6004      	str	r4, [r0, #0]
 8013316:	60c4      	str	r4, [r0, #12]
 8013318:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801331c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013320:	b94c      	cbnz	r4, 8013336 <__pow5mult+0x66>
 8013322:	f240 2171 	movw	r1, #625	@ 0x271
 8013326:	4638      	mov	r0, r7
 8013328:	f7ff ff1a 	bl	8013160 <__i2b>
 801332c:	2300      	movs	r3, #0
 801332e:	f8c8 0008 	str.w	r0, [r8, #8]
 8013332:	4604      	mov	r4, r0
 8013334:	6003      	str	r3, [r0, #0]
 8013336:	f04f 0900 	mov.w	r9, #0
 801333a:	07eb      	lsls	r3, r5, #31
 801333c:	d50a      	bpl.n	8013354 <__pow5mult+0x84>
 801333e:	4631      	mov	r1, r6
 8013340:	4622      	mov	r2, r4
 8013342:	4638      	mov	r0, r7
 8013344:	f7ff ff22 	bl	801318c <__multiply>
 8013348:	4631      	mov	r1, r6
 801334a:	4680      	mov	r8, r0
 801334c:	4638      	mov	r0, r7
 801334e:	f7ff fe53 	bl	8012ff8 <_Bfree>
 8013352:	4646      	mov	r6, r8
 8013354:	106d      	asrs	r5, r5, #1
 8013356:	d00b      	beq.n	8013370 <__pow5mult+0xa0>
 8013358:	6820      	ldr	r0, [r4, #0]
 801335a:	b938      	cbnz	r0, 801336c <__pow5mult+0x9c>
 801335c:	4622      	mov	r2, r4
 801335e:	4621      	mov	r1, r4
 8013360:	4638      	mov	r0, r7
 8013362:	f7ff ff13 	bl	801318c <__multiply>
 8013366:	6020      	str	r0, [r4, #0]
 8013368:	f8c0 9000 	str.w	r9, [r0]
 801336c:	4604      	mov	r4, r0
 801336e:	e7e4      	b.n	801333a <__pow5mult+0x6a>
 8013370:	4630      	mov	r0, r6
 8013372:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013376:	bf00      	nop
 8013378:	08015b54 	.word	0x08015b54
 801337c:	08015a21 	.word	0x08015a21
 8013380:	08015ab2 	.word	0x08015ab2

08013384 <__lshift>:
 8013384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013388:	460c      	mov	r4, r1
 801338a:	6849      	ldr	r1, [r1, #4]
 801338c:	6923      	ldr	r3, [r4, #16]
 801338e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013392:	68a3      	ldr	r3, [r4, #8]
 8013394:	4607      	mov	r7, r0
 8013396:	4691      	mov	r9, r2
 8013398:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801339c:	f108 0601 	add.w	r6, r8, #1
 80133a0:	42b3      	cmp	r3, r6
 80133a2:	db0b      	blt.n	80133bc <__lshift+0x38>
 80133a4:	4638      	mov	r0, r7
 80133a6:	f7ff fde7 	bl	8012f78 <_Balloc>
 80133aa:	4605      	mov	r5, r0
 80133ac:	b948      	cbnz	r0, 80133c2 <__lshift+0x3e>
 80133ae:	4602      	mov	r2, r0
 80133b0:	4b28      	ldr	r3, [pc, #160]	@ (8013454 <__lshift+0xd0>)
 80133b2:	4829      	ldr	r0, [pc, #164]	@ (8013458 <__lshift+0xd4>)
 80133b4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80133b8:	f000 fb86 	bl	8013ac8 <__assert_func>
 80133bc:	3101      	adds	r1, #1
 80133be:	005b      	lsls	r3, r3, #1
 80133c0:	e7ee      	b.n	80133a0 <__lshift+0x1c>
 80133c2:	2300      	movs	r3, #0
 80133c4:	f100 0114 	add.w	r1, r0, #20
 80133c8:	f100 0210 	add.w	r2, r0, #16
 80133cc:	4618      	mov	r0, r3
 80133ce:	4553      	cmp	r3, sl
 80133d0:	db33      	blt.n	801343a <__lshift+0xb6>
 80133d2:	6920      	ldr	r0, [r4, #16]
 80133d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80133d8:	f104 0314 	add.w	r3, r4, #20
 80133dc:	f019 091f 	ands.w	r9, r9, #31
 80133e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80133e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80133e8:	d02b      	beq.n	8013442 <__lshift+0xbe>
 80133ea:	f1c9 0e20 	rsb	lr, r9, #32
 80133ee:	468a      	mov	sl, r1
 80133f0:	2200      	movs	r2, #0
 80133f2:	6818      	ldr	r0, [r3, #0]
 80133f4:	fa00 f009 	lsl.w	r0, r0, r9
 80133f8:	4310      	orrs	r0, r2
 80133fa:	f84a 0b04 	str.w	r0, [sl], #4
 80133fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8013402:	459c      	cmp	ip, r3
 8013404:	fa22 f20e 	lsr.w	r2, r2, lr
 8013408:	d8f3      	bhi.n	80133f2 <__lshift+0x6e>
 801340a:	ebac 0304 	sub.w	r3, ip, r4
 801340e:	3b15      	subs	r3, #21
 8013410:	f023 0303 	bic.w	r3, r3, #3
 8013414:	3304      	adds	r3, #4
 8013416:	f104 0015 	add.w	r0, r4, #21
 801341a:	4560      	cmp	r0, ip
 801341c:	bf88      	it	hi
 801341e:	2304      	movhi	r3, #4
 8013420:	50ca      	str	r2, [r1, r3]
 8013422:	b10a      	cbz	r2, 8013428 <__lshift+0xa4>
 8013424:	f108 0602 	add.w	r6, r8, #2
 8013428:	3e01      	subs	r6, #1
 801342a:	4638      	mov	r0, r7
 801342c:	612e      	str	r6, [r5, #16]
 801342e:	4621      	mov	r1, r4
 8013430:	f7ff fde2 	bl	8012ff8 <_Bfree>
 8013434:	4628      	mov	r0, r5
 8013436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801343a:	f842 0f04 	str.w	r0, [r2, #4]!
 801343e:	3301      	adds	r3, #1
 8013440:	e7c5      	b.n	80133ce <__lshift+0x4a>
 8013442:	3904      	subs	r1, #4
 8013444:	f853 2b04 	ldr.w	r2, [r3], #4
 8013448:	f841 2f04 	str.w	r2, [r1, #4]!
 801344c:	459c      	cmp	ip, r3
 801344e:	d8f9      	bhi.n	8013444 <__lshift+0xc0>
 8013450:	e7ea      	b.n	8013428 <__lshift+0xa4>
 8013452:	bf00      	nop
 8013454:	08015a90 	.word	0x08015a90
 8013458:	08015ab2 	.word	0x08015ab2

0801345c <__mcmp>:
 801345c:	690a      	ldr	r2, [r1, #16]
 801345e:	4603      	mov	r3, r0
 8013460:	6900      	ldr	r0, [r0, #16]
 8013462:	1a80      	subs	r0, r0, r2
 8013464:	b530      	push	{r4, r5, lr}
 8013466:	d10e      	bne.n	8013486 <__mcmp+0x2a>
 8013468:	3314      	adds	r3, #20
 801346a:	3114      	adds	r1, #20
 801346c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8013470:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8013474:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013478:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801347c:	4295      	cmp	r5, r2
 801347e:	d003      	beq.n	8013488 <__mcmp+0x2c>
 8013480:	d205      	bcs.n	801348e <__mcmp+0x32>
 8013482:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013486:	bd30      	pop	{r4, r5, pc}
 8013488:	42a3      	cmp	r3, r4
 801348a:	d3f3      	bcc.n	8013474 <__mcmp+0x18>
 801348c:	e7fb      	b.n	8013486 <__mcmp+0x2a>
 801348e:	2001      	movs	r0, #1
 8013490:	e7f9      	b.n	8013486 <__mcmp+0x2a>
	...

08013494 <__mdiff>:
 8013494:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013498:	4689      	mov	r9, r1
 801349a:	4606      	mov	r6, r0
 801349c:	4611      	mov	r1, r2
 801349e:	4648      	mov	r0, r9
 80134a0:	4614      	mov	r4, r2
 80134a2:	f7ff ffdb 	bl	801345c <__mcmp>
 80134a6:	1e05      	subs	r5, r0, #0
 80134a8:	d112      	bne.n	80134d0 <__mdiff+0x3c>
 80134aa:	4629      	mov	r1, r5
 80134ac:	4630      	mov	r0, r6
 80134ae:	f7ff fd63 	bl	8012f78 <_Balloc>
 80134b2:	4602      	mov	r2, r0
 80134b4:	b928      	cbnz	r0, 80134c2 <__mdiff+0x2e>
 80134b6:	4b3f      	ldr	r3, [pc, #252]	@ (80135b4 <__mdiff+0x120>)
 80134b8:	f240 2137 	movw	r1, #567	@ 0x237
 80134bc:	483e      	ldr	r0, [pc, #248]	@ (80135b8 <__mdiff+0x124>)
 80134be:	f000 fb03 	bl	8013ac8 <__assert_func>
 80134c2:	2301      	movs	r3, #1
 80134c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80134c8:	4610      	mov	r0, r2
 80134ca:	b003      	add	sp, #12
 80134cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134d0:	bfbc      	itt	lt
 80134d2:	464b      	movlt	r3, r9
 80134d4:	46a1      	movlt	r9, r4
 80134d6:	4630      	mov	r0, r6
 80134d8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80134dc:	bfba      	itte	lt
 80134de:	461c      	movlt	r4, r3
 80134e0:	2501      	movlt	r5, #1
 80134e2:	2500      	movge	r5, #0
 80134e4:	f7ff fd48 	bl	8012f78 <_Balloc>
 80134e8:	4602      	mov	r2, r0
 80134ea:	b918      	cbnz	r0, 80134f4 <__mdiff+0x60>
 80134ec:	4b31      	ldr	r3, [pc, #196]	@ (80135b4 <__mdiff+0x120>)
 80134ee:	f240 2145 	movw	r1, #581	@ 0x245
 80134f2:	e7e3      	b.n	80134bc <__mdiff+0x28>
 80134f4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80134f8:	6926      	ldr	r6, [r4, #16]
 80134fa:	60c5      	str	r5, [r0, #12]
 80134fc:	f109 0310 	add.w	r3, r9, #16
 8013500:	f109 0514 	add.w	r5, r9, #20
 8013504:	f104 0e14 	add.w	lr, r4, #20
 8013508:	f100 0b14 	add.w	fp, r0, #20
 801350c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8013510:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8013514:	9301      	str	r3, [sp, #4]
 8013516:	46d9      	mov	r9, fp
 8013518:	f04f 0c00 	mov.w	ip, #0
 801351c:	9b01      	ldr	r3, [sp, #4]
 801351e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8013522:	f853 af04 	ldr.w	sl, [r3, #4]!
 8013526:	9301      	str	r3, [sp, #4]
 8013528:	fa1f f38a 	uxth.w	r3, sl
 801352c:	4619      	mov	r1, r3
 801352e:	b283      	uxth	r3, r0
 8013530:	1acb      	subs	r3, r1, r3
 8013532:	0c00      	lsrs	r0, r0, #16
 8013534:	4463      	add	r3, ip
 8013536:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801353a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801353e:	b29b      	uxth	r3, r3
 8013540:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8013544:	4576      	cmp	r6, lr
 8013546:	f849 3b04 	str.w	r3, [r9], #4
 801354a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801354e:	d8e5      	bhi.n	801351c <__mdiff+0x88>
 8013550:	1b33      	subs	r3, r6, r4
 8013552:	3b15      	subs	r3, #21
 8013554:	f023 0303 	bic.w	r3, r3, #3
 8013558:	3415      	adds	r4, #21
 801355a:	3304      	adds	r3, #4
 801355c:	42a6      	cmp	r6, r4
 801355e:	bf38      	it	cc
 8013560:	2304      	movcc	r3, #4
 8013562:	441d      	add	r5, r3
 8013564:	445b      	add	r3, fp
 8013566:	461e      	mov	r6, r3
 8013568:	462c      	mov	r4, r5
 801356a:	4544      	cmp	r4, r8
 801356c:	d30e      	bcc.n	801358c <__mdiff+0xf8>
 801356e:	f108 0103 	add.w	r1, r8, #3
 8013572:	1b49      	subs	r1, r1, r5
 8013574:	f021 0103 	bic.w	r1, r1, #3
 8013578:	3d03      	subs	r5, #3
 801357a:	45a8      	cmp	r8, r5
 801357c:	bf38      	it	cc
 801357e:	2100      	movcc	r1, #0
 8013580:	440b      	add	r3, r1
 8013582:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013586:	b191      	cbz	r1, 80135ae <__mdiff+0x11a>
 8013588:	6117      	str	r7, [r2, #16]
 801358a:	e79d      	b.n	80134c8 <__mdiff+0x34>
 801358c:	f854 1b04 	ldr.w	r1, [r4], #4
 8013590:	46e6      	mov	lr, ip
 8013592:	0c08      	lsrs	r0, r1, #16
 8013594:	fa1c fc81 	uxtah	ip, ip, r1
 8013598:	4471      	add	r1, lr
 801359a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801359e:	b289      	uxth	r1, r1
 80135a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80135a4:	f846 1b04 	str.w	r1, [r6], #4
 80135a8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80135ac:	e7dd      	b.n	801356a <__mdiff+0xd6>
 80135ae:	3f01      	subs	r7, #1
 80135b0:	e7e7      	b.n	8013582 <__mdiff+0xee>
 80135b2:	bf00      	nop
 80135b4:	08015a90 	.word	0x08015a90
 80135b8:	08015ab2 	.word	0x08015ab2

080135bc <__d2b>:
 80135bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80135c0:	460f      	mov	r7, r1
 80135c2:	2101      	movs	r1, #1
 80135c4:	ec59 8b10 	vmov	r8, r9, d0
 80135c8:	4616      	mov	r6, r2
 80135ca:	f7ff fcd5 	bl	8012f78 <_Balloc>
 80135ce:	4604      	mov	r4, r0
 80135d0:	b930      	cbnz	r0, 80135e0 <__d2b+0x24>
 80135d2:	4602      	mov	r2, r0
 80135d4:	4b23      	ldr	r3, [pc, #140]	@ (8013664 <__d2b+0xa8>)
 80135d6:	4824      	ldr	r0, [pc, #144]	@ (8013668 <__d2b+0xac>)
 80135d8:	f240 310f 	movw	r1, #783	@ 0x30f
 80135dc:	f000 fa74 	bl	8013ac8 <__assert_func>
 80135e0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80135e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80135e8:	b10d      	cbz	r5, 80135ee <__d2b+0x32>
 80135ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80135ee:	9301      	str	r3, [sp, #4]
 80135f0:	f1b8 0300 	subs.w	r3, r8, #0
 80135f4:	d023      	beq.n	801363e <__d2b+0x82>
 80135f6:	4668      	mov	r0, sp
 80135f8:	9300      	str	r3, [sp, #0]
 80135fa:	f7ff fd84 	bl	8013106 <__lo0bits>
 80135fe:	e9dd 1200 	ldrd	r1, r2, [sp]
 8013602:	b1d0      	cbz	r0, 801363a <__d2b+0x7e>
 8013604:	f1c0 0320 	rsb	r3, r0, #32
 8013608:	fa02 f303 	lsl.w	r3, r2, r3
 801360c:	430b      	orrs	r3, r1
 801360e:	40c2      	lsrs	r2, r0
 8013610:	6163      	str	r3, [r4, #20]
 8013612:	9201      	str	r2, [sp, #4]
 8013614:	9b01      	ldr	r3, [sp, #4]
 8013616:	61a3      	str	r3, [r4, #24]
 8013618:	2b00      	cmp	r3, #0
 801361a:	bf0c      	ite	eq
 801361c:	2201      	moveq	r2, #1
 801361e:	2202      	movne	r2, #2
 8013620:	6122      	str	r2, [r4, #16]
 8013622:	b1a5      	cbz	r5, 801364e <__d2b+0x92>
 8013624:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8013628:	4405      	add	r5, r0
 801362a:	603d      	str	r5, [r7, #0]
 801362c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8013630:	6030      	str	r0, [r6, #0]
 8013632:	4620      	mov	r0, r4
 8013634:	b003      	add	sp, #12
 8013636:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801363a:	6161      	str	r1, [r4, #20]
 801363c:	e7ea      	b.n	8013614 <__d2b+0x58>
 801363e:	a801      	add	r0, sp, #4
 8013640:	f7ff fd61 	bl	8013106 <__lo0bits>
 8013644:	9b01      	ldr	r3, [sp, #4]
 8013646:	6163      	str	r3, [r4, #20]
 8013648:	3020      	adds	r0, #32
 801364a:	2201      	movs	r2, #1
 801364c:	e7e8      	b.n	8013620 <__d2b+0x64>
 801364e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013652:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8013656:	6038      	str	r0, [r7, #0]
 8013658:	6918      	ldr	r0, [r3, #16]
 801365a:	f7ff fd35 	bl	80130c8 <__hi0bits>
 801365e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013662:	e7e5      	b.n	8013630 <__d2b+0x74>
 8013664:	08015a90 	.word	0x08015a90
 8013668:	08015ab2 	.word	0x08015ab2

0801366c <__sread>:
 801366c:	b510      	push	{r4, lr}
 801366e:	460c      	mov	r4, r1
 8013670:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013674:	f000 f9d2 	bl	8013a1c <_read_r>
 8013678:	2800      	cmp	r0, #0
 801367a:	bfab      	itete	ge
 801367c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801367e:	89a3      	ldrhlt	r3, [r4, #12]
 8013680:	181b      	addge	r3, r3, r0
 8013682:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8013686:	bfac      	ite	ge
 8013688:	6563      	strge	r3, [r4, #84]	@ 0x54
 801368a:	81a3      	strhlt	r3, [r4, #12]
 801368c:	bd10      	pop	{r4, pc}

0801368e <__swrite>:
 801368e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013692:	461f      	mov	r7, r3
 8013694:	898b      	ldrh	r3, [r1, #12]
 8013696:	05db      	lsls	r3, r3, #23
 8013698:	4605      	mov	r5, r0
 801369a:	460c      	mov	r4, r1
 801369c:	4616      	mov	r6, r2
 801369e:	d505      	bpl.n	80136ac <__swrite+0x1e>
 80136a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80136a4:	2302      	movs	r3, #2
 80136a6:	2200      	movs	r2, #0
 80136a8:	f000 f9a6 	bl	80139f8 <_lseek_r>
 80136ac:	89a3      	ldrh	r3, [r4, #12]
 80136ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80136b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80136b6:	81a3      	strh	r3, [r4, #12]
 80136b8:	4632      	mov	r2, r6
 80136ba:	463b      	mov	r3, r7
 80136bc:	4628      	mov	r0, r5
 80136be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80136c2:	f000 b9cd 	b.w	8013a60 <_write_r>

080136c6 <__sseek>:
 80136c6:	b510      	push	{r4, lr}
 80136c8:	460c      	mov	r4, r1
 80136ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80136ce:	f000 f993 	bl	80139f8 <_lseek_r>
 80136d2:	1c43      	adds	r3, r0, #1
 80136d4:	89a3      	ldrh	r3, [r4, #12]
 80136d6:	bf15      	itete	ne
 80136d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80136da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80136de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80136e2:	81a3      	strheq	r3, [r4, #12]
 80136e4:	bf18      	it	ne
 80136e6:	81a3      	strhne	r3, [r4, #12]
 80136e8:	bd10      	pop	{r4, pc}

080136ea <__sclose>:
 80136ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80136ee:	f000 b9c9 	b.w	8013a84 <_close_r>

080136f2 <_realloc_r>:
 80136f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136f6:	4607      	mov	r7, r0
 80136f8:	4614      	mov	r4, r2
 80136fa:	460d      	mov	r5, r1
 80136fc:	b921      	cbnz	r1, 8013708 <_realloc_r+0x16>
 80136fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013702:	4611      	mov	r1, r2
 8013704:	f7ff bb00 	b.w	8012d08 <_malloc_r>
 8013708:	b92a      	cbnz	r2, 8013716 <_realloc_r+0x24>
 801370a:	f000 fa0f 	bl	8013b2c <_free_r>
 801370e:	4625      	mov	r5, r4
 8013710:	4628      	mov	r0, r5
 8013712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013716:	f000 fa65 	bl	8013be4 <_malloc_usable_size_r>
 801371a:	4284      	cmp	r4, r0
 801371c:	4606      	mov	r6, r0
 801371e:	d802      	bhi.n	8013726 <_realloc_r+0x34>
 8013720:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013724:	d8f4      	bhi.n	8013710 <_realloc_r+0x1e>
 8013726:	4621      	mov	r1, r4
 8013728:	4638      	mov	r0, r7
 801372a:	f7ff faed 	bl	8012d08 <_malloc_r>
 801372e:	4680      	mov	r8, r0
 8013730:	b908      	cbnz	r0, 8013736 <_realloc_r+0x44>
 8013732:	4645      	mov	r5, r8
 8013734:	e7ec      	b.n	8013710 <_realloc_r+0x1e>
 8013736:	42b4      	cmp	r4, r6
 8013738:	4622      	mov	r2, r4
 801373a:	4629      	mov	r1, r5
 801373c:	bf28      	it	cs
 801373e:	4632      	movcs	r2, r6
 8013740:	f7fe f9b8 	bl	8011ab4 <memcpy>
 8013744:	4629      	mov	r1, r5
 8013746:	4638      	mov	r0, r7
 8013748:	f000 f9f0 	bl	8013b2c <_free_r>
 801374c:	e7f1      	b.n	8013732 <_realloc_r+0x40>

0801374e <__swbuf_r>:
 801374e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013750:	460e      	mov	r6, r1
 8013752:	4614      	mov	r4, r2
 8013754:	4605      	mov	r5, r0
 8013756:	b118      	cbz	r0, 8013760 <__swbuf_r+0x12>
 8013758:	6a03      	ldr	r3, [r0, #32]
 801375a:	b90b      	cbnz	r3, 8013760 <__swbuf_r+0x12>
 801375c:	f7fe f8c2 	bl	80118e4 <__sinit>
 8013760:	69a3      	ldr	r3, [r4, #24]
 8013762:	60a3      	str	r3, [r4, #8]
 8013764:	89a3      	ldrh	r3, [r4, #12]
 8013766:	071a      	lsls	r2, r3, #28
 8013768:	d501      	bpl.n	801376e <__swbuf_r+0x20>
 801376a:	6923      	ldr	r3, [r4, #16]
 801376c:	b943      	cbnz	r3, 8013780 <__swbuf_r+0x32>
 801376e:	4621      	mov	r1, r4
 8013770:	4628      	mov	r0, r5
 8013772:	f000 f82b 	bl	80137cc <__swsetup_r>
 8013776:	b118      	cbz	r0, 8013780 <__swbuf_r+0x32>
 8013778:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801377c:	4638      	mov	r0, r7
 801377e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013780:	6823      	ldr	r3, [r4, #0]
 8013782:	6922      	ldr	r2, [r4, #16]
 8013784:	1a98      	subs	r0, r3, r2
 8013786:	6963      	ldr	r3, [r4, #20]
 8013788:	b2f6      	uxtb	r6, r6
 801378a:	4283      	cmp	r3, r0
 801378c:	4637      	mov	r7, r6
 801378e:	dc05      	bgt.n	801379c <__swbuf_r+0x4e>
 8013790:	4621      	mov	r1, r4
 8013792:	4628      	mov	r0, r5
 8013794:	f7ff fbbc 	bl	8012f10 <_fflush_r>
 8013798:	2800      	cmp	r0, #0
 801379a:	d1ed      	bne.n	8013778 <__swbuf_r+0x2a>
 801379c:	68a3      	ldr	r3, [r4, #8]
 801379e:	3b01      	subs	r3, #1
 80137a0:	60a3      	str	r3, [r4, #8]
 80137a2:	6823      	ldr	r3, [r4, #0]
 80137a4:	1c5a      	adds	r2, r3, #1
 80137a6:	6022      	str	r2, [r4, #0]
 80137a8:	701e      	strb	r6, [r3, #0]
 80137aa:	6962      	ldr	r2, [r4, #20]
 80137ac:	1c43      	adds	r3, r0, #1
 80137ae:	429a      	cmp	r2, r3
 80137b0:	d004      	beq.n	80137bc <__swbuf_r+0x6e>
 80137b2:	89a3      	ldrh	r3, [r4, #12]
 80137b4:	07db      	lsls	r3, r3, #31
 80137b6:	d5e1      	bpl.n	801377c <__swbuf_r+0x2e>
 80137b8:	2e0a      	cmp	r6, #10
 80137ba:	d1df      	bne.n	801377c <__swbuf_r+0x2e>
 80137bc:	4621      	mov	r1, r4
 80137be:	4628      	mov	r0, r5
 80137c0:	f7ff fba6 	bl	8012f10 <_fflush_r>
 80137c4:	2800      	cmp	r0, #0
 80137c6:	d0d9      	beq.n	801377c <__swbuf_r+0x2e>
 80137c8:	e7d6      	b.n	8013778 <__swbuf_r+0x2a>
	...

080137cc <__swsetup_r>:
 80137cc:	b538      	push	{r3, r4, r5, lr}
 80137ce:	4b29      	ldr	r3, [pc, #164]	@ (8013874 <__swsetup_r+0xa8>)
 80137d0:	4605      	mov	r5, r0
 80137d2:	6818      	ldr	r0, [r3, #0]
 80137d4:	460c      	mov	r4, r1
 80137d6:	b118      	cbz	r0, 80137e0 <__swsetup_r+0x14>
 80137d8:	6a03      	ldr	r3, [r0, #32]
 80137da:	b90b      	cbnz	r3, 80137e0 <__swsetup_r+0x14>
 80137dc:	f7fe f882 	bl	80118e4 <__sinit>
 80137e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80137e4:	0719      	lsls	r1, r3, #28
 80137e6:	d422      	bmi.n	801382e <__swsetup_r+0x62>
 80137e8:	06da      	lsls	r2, r3, #27
 80137ea:	d407      	bmi.n	80137fc <__swsetup_r+0x30>
 80137ec:	2209      	movs	r2, #9
 80137ee:	602a      	str	r2, [r5, #0]
 80137f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80137f4:	81a3      	strh	r3, [r4, #12]
 80137f6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80137fa:	e033      	b.n	8013864 <__swsetup_r+0x98>
 80137fc:	0758      	lsls	r0, r3, #29
 80137fe:	d512      	bpl.n	8013826 <__swsetup_r+0x5a>
 8013800:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013802:	b141      	cbz	r1, 8013816 <__swsetup_r+0x4a>
 8013804:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013808:	4299      	cmp	r1, r3
 801380a:	d002      	beq.n	8013812 <__swsetup_r+0x46>
 801380c:	4628      	mov	r0, r5
 801380e:	f000 f98d 	bl	8013b2c <_free_r>
 8013812:	2300      	movs	r3, #0
 8013814:	6363      	str	r3, [r4, #52]	@ 0x34
 8013816:	89a3      	ldrh	r3, [r4, #12]
 8013818:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801381c:	81a3      	strh	r3, [r4, #12]
 801381e:	2300      	movs	r3, #0
 8013820:	6063      	str	r3, [r4, #4]
 8013822:	6923      	ldr	r3, [r4, #16]
 8013824:	6023      	str	r3, [r4, #0]
 8013826:	89a3      	ldrh	r3, [r4, #12]
 8013828:	f043 0308 	orr.w	r3, r3, #8
 801382c:	81a3      	strh	r3, [r4, #12]
 801382e:	6923      	ldr	r3, [r4, #16]
 8013830:	b94b      	cbnz	r3, 8013846 <__swsetup_r+0x7a>
 8013832:	89a3      	ldrh	r3, [r4, #12]
 8013834:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8013838:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801383c:	d003      	beq.n	8013846 <__swsetup_r+0x7a>
 801383e:	4621      	mov	r1, r4
 8013840:	4628      	mov	r0, r5
 8013842:	f000 f83f 	bl	80138c4 <__smakebuf_r>
 8013846:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801384a:	f013 0201 	ands.w	r2, r3, #1
 801384e:	d00a      	beq.n	8013866 <__swsetup_r+0x9a>
 8013850:	2200      	movs	r2, #0
 8013852:	60a2      	str	r2, [r4, #8]
 8013854:	6962      	ldr	r2, [r4, #20]
 8013856:	4252      	negs	r2, r2
 8013858:	61a2      	str	r2, [r4, #24]
 801385a:	6922      	ldr	r2, [r4, #16]
 801385c:	b942      	cbnz	r2, 8013870 <__swsetup_r+0xa4>
 801385e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8013862:	d1c5      	bne.n	80137f0 <__swsetup_r+0x24>
 8013864:	bd38      	pop	{r3, r4, r5, pc}
 8013866:	0799      	lsls	r1, r3, #30
 8013868:	bf58      	it	pl
 801386a:	6962      	ldrpl	r2, [r4, #20]
 801386c:	60a2      	str	r2, [r4, #8]
 801386e:	e7f4      	b.n	801385a <__swsetup_r+0x8e>
 8013870:	2000      	movs	r0, #0
 8013872:	e7f7      	b.n	8013864 <__swsetup_r+0x98>
 8013874:	200000c8 	.word	0x200000c8

08013878 <__swhatbuf_r>:
 8013878:	b570      	push	{r4, r5, r6, lr}
 801387a:	460c      	mov	r4, r1
 801387c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013880:	2900      	cmp	r1, #0
 8013882:	b096      	sub	sp, #88	@ 0x58
 8013884:	4615      	mov	r5, r2
 8013886:	461e      	mov	r6, r3
 8013888:	da0d      	bge.n	80138a6 <__swhatbuf_r+0x2e>
 801388a:	89a3      	ldrh	r3, [r4, #12]
 801388c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013890:	f04f 0100 	mov.w	r1, #0
 8013894:	bf14      	ite	ne
 8013896:	2340      	movne	r3, #64	@ 0x40
 8013898:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801389c:	2000      	movs	r0, #0
 801389e:	6031      	str	r1, [r6, #0]
 80138a0:	602b      	str	r3, [r5, #0]
 80138a2:	b016      	add	sp, #88	@ 0x58
 80138a4:	bd70      	pop	{r4, r5, r6, pc}
 80138a6:	466a      	mov	r2, sp
 80138a8:	f000 f8fc 	bl	8013aa4 <_fstat_r>
 80138ac:	2800      	cmp	r0, #0
 80138ae:	dbec      	blt.n	801388a <__swhatbuf_r+0x12>
 80138b0:	9901      	ldr	r1, [sp, #4]
 80138b2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80138b6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80138ba:	4259      	negs	r1, r3
 80138bc:	4159      	adcs	r1, r3
 80138be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80138c2:	e7eb      	b.n	801389c <__swhatbuf_r+0x24>

080138c4 <__smakebuf_r>:
 80138c4:	898b      	ldrh	r3, [r1, #12]
 80138c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80138c8:	079d      	lsls	r5, r3, #30
 80138ca:	4606      	mov	r6, r0
 80138cc:	460c      	mov	r4, r1
 80138ce:	d507      	bpl.n	80138e0 <__smakebuf_r+0x1c>
 80138d0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80138d4:	6023      	str	r3, [r4, #0]
 80138d6:	6123      	str	r3, [r4, #16]
 80138d8:	2301      	movs	r3, #1
 80138da:	6163      	str	r3, [r4, #20]
 80138dc:	b003      	add	sp, #12
 80138de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80138e0:	ab01      	add	r3, sp, #4
 80138e2:	466a      	mov	r2, sp
 80138e4:	f7ff ffc8 	bl	8013878 <__swhatbuf_r>
 80138e8:	9f00      	ldr	r7, [sp, #0]
 80138ea:	4605      	mov	r5, r0
 80138ec:	4639      	mov	r1, r7
 80138ee:	4630      	mov	r0, r6
 80138f0:	f7ff fa0a 	bl	8012d08 <_malloc_r>
 80138f4:	b948      	cbnz	r0, 801390a <__smakebuf_r+0x46>
 80138f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80138fa:	059a      	lsls	r2, r3, #22
 80138fc:	d4ee      	bmi.n	80138dc <__smakebuf_r+0x18>
 80138fe:	f023 0303 	bic.w	r3, r3, #3
 8013902:	f043 0302 	orr.w	r3, r3, #2
 8013906:	81a3      	strh	r3, [r4, #12]
 8013908:	e7e2      	b.n	80138d0 <__smakebuf_r+0xc>
 801390a:	89a3      	ldrh	r3, [r4, #12]
 801390c:	6020      	str	r0, [r4, #0]
 801390e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013912:	81a3      	strh	r3, [r4, #12]
 8013914:	9b01      	ldr	r3, [sp, #4]
 8013916:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801391a:	b15b      	cbz	r3, 8013934 <__smakebuf_r+0x70>
 801391c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013920:	4630      	mov	r0, r6
 8013922:	f000 f859 	bl	80139d8 <_isatty_r>
 8013926:	b128      	cbz	r0, 8013934 <__smakebuf_r+0x70>
 8013928:	89a3      	ldrh	r3, [r4, #12]
 801392a:	f023 0303 	bic.w	r3, r3, #3
 801392e:	f043 0301 	orr.w	r3, r3, #1
 8013932:	81a3      	strh	r3, [r4, #12]
 8013934:	89a3      	ldrh	r3, [r4, #12]
 8013936:	431d      	orrs	r5, r3
 8013938:	81a5      	strh	r5, [r4, #12]
 801393a:	e7cf      	b.n	80138dc <__smakebuf_r+0x18>

0801393c <_putc_r>:
 801393c:	b570      	push	{r4, r5, r6, lr}
 801393e:	460d      	mov	r5, r1
 8013940:	4614      	mov	r4, r2
 8013942:	4606      	mov	r6, r0
 8013944:	b118      	cbz	r0, 801394e <_putc_r+0x12>
 8013946:	6a03      	ldr	r3, [r0, #32]
 8013948:	b90b      	cbnz	r3, 801394e <_putc_r+0x12>
 801394a:	f7fd ffcb 	bl	80118e4 <__sinit>
 801394e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013950:	07d8      	lsls	r0, r3, #31
 8013952:	d405      	bmi.n	8013960 <_putc_r+0x24>
 8013954:	89a3      	ldrh	r3, [r4, #12]
 8013956:	0599      	lsls	r1, r3, #22
 8013958:	d402      	bmi.n	8013960 <_putc_r+0x24>
 801395a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801395c:	f7fe f8a3 	bl	8011aa6 <__retarget_lock_acquire_recursive>
 8013960:	68a3      	ldr	r3, [r4, #8]
 8013962:	3b01      	subs	r3, #1
 8013964:	2b00      	cmp	r3, #0
 8013966:	60a3      	str	r3, [r4, #8]
 8013968:	da05      	bge.n	8013976 <_putc_r+0x3a>
 801396a:	69a2      	ldr	r2, [r4, #24]
 801396c:	4293      	cmp	r3, r2
 801396e:	db12      	blt.n	8013996 <_putc_r+0x5a>
 8013970:	b2eb      	uxtb	r3, r5
 8013972:	2b0a      	cmp	r3, #10
 8013974:	d00f      	beq.n	8013996 <_putc_r+0x5a>
 8013976:	6823      	ldr	r3, [r4, #0]
 8013978:	1c5a      	adds	r2, r3, #1
 801397a:	6022      	str	r2, [r4, #0]
 801397c:	701d      	strb	r5, [r3, #0]
 801397e:	b2ed      	uxtb	r5, r5
 8013980:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013982:	07da      	lsls	r2, r3, #31
 8013984:	d405      	bmi.n	8013992 <_putc_r+0x56>
 8013986:	89a3      	ldrh	r3, [r4, #12]
 8013988:	059b      	lsls	r3, r3, #22
 801398a:	d402      	bmi.n	8013992 <_putc_r+0x56>
 801398c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801398e:	f7fe f88b 	bl	8011aa8 <__retarget_lock_release_recursive>
 8013992:	4628      	mov	r0, r5
 8013994:	bd70      	pop	{r4, r5, r6, pc}
 8013996:	4629      	mov	r1, r5
 8013998:	4622      	mov	r2, r4
 801399a:	4630      	mov	r0, r6
 801399c:	f7ff fed7 	bl	801374e <__swbuf_r>
 80139a0:	4605      	mov	r5, r0
 80139a2:	e7ed      	b.n	8013980 <_putc_r+0x44>

080139a4 <memmove>:
 80139a4:	4288      	cmp	r0, r1
 80139a6:	b510      	push	{r4, lr}
 80139a8:	eb01 0402 	add.w	r4, r1, r2
 80139ac:	d902      	bls.n	80139b4 <memmove+0x10>
 80139ae:	4284      	cmp	r4, r0
 80139b0:	4623      	mov	r3, r4
 80139b2:	d807      	bhi.n	80139c4 <memmove+0x20>
 80139b4:	1e43      	subs	r3, r0, #1
 80139b6:	42a1      	cmp	r1, r4
 80139b8:	d008      	beq.n	80139cc <memmove+0x28>
 80139ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80139be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80139c2:	e7f8      	b.n	80139b6 <memmove+0x12>
 80139c4:	4402      	add	r2, r0
 80139c6:	4601      	mov	r1, r0
 80139c8:	428a      	cmp	r2, r1
 80139ca:	d100      	bne.n	80139ce <memmove+0x2a>
 80139cc:	bd10      	pop	{r4, pc}
 80139ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80139d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80139d6:	e7f7      	b.n	80139c8 <memmove+0x24>

080139d8 <_isatty_r>:
 80139d8:	b538      	push	{r3, r4, r5, lr}
 80139da:	4d06      	ldr	r5, [pc, #24]	@ (80139f4 <_isatty_r+0x1c>)
 80139dc:	2300      	movs	r3, #0
 80139de:	4604      	mov	r4, r0
 80139e0:	4608      	mov	r0, r1
 80139e2:	602b      	str	r3, [r5, #0]
 80139e4:	f7ef fcd0 	bl	8003388 <_isatty>
 80139e8:	1c43      	adds	r3, r0, #1
 80139ea:	d102      	bne.n	80139f2 <_isatty_r+0x1a>
 80139ec:	682b      	ldr	r3, [r5, #0]
 80139ee:	b103      	cbz	r3, 80139f2 <_isatty_r+0x1a>
 80139f0:	6023      	str	r3, [r4, #0]
 80139f2:	bd38      	pop	{r3, r4, r5, pc}
 80139f4:	20001e94 	.word	0x20001e94

080139f8 <_lseek_r>:
 80139f8:	b538      	push	{r3, r4, r5, lr}
 80139fa:	4d07      	ldr	r5, [pc, #28]	@ (8013a18 <_lseek_r+0x20>)
 80139fc:	4604      	mov	r4, r0
 80139fe:	4608      	mov	r0, r1
 8013a00:	4611      	mov	r1, r2
 8013a02:	2200      	movs	r2, #0
 8013a04:	602a      	str	r2, [r5, #0]
 8013a06:	461a      	mov	r2, r3
 8013a08:	f7ef fcc9 	bl	800339e <_lseek>
 8013a0c:	1c43      	adds	r3, r0, #1
 8013a0e:	d102      	bne.n	8013a16 <_lseek_r+0x1e>
 8013a10:	682b      	ldr	r3, [r5, #0]
 8013a12:	b103      	cbz	r3, 8013a16 <_lseek_r+0x1e>
 8013a14:	6023      	str	r3, [r4, #0]
 8013a16:	bd38      	pop	{r3, r4, r5, pc}
 8013a18:	20001e94 	.word	0x20001e94

08013a1c <_read_r>:
 8013a1c:	b538      	push	{r3, r4, r5, lr}
 8013a1e:	4d07      	ldr	r5, [pc, #28]	@ (8013a3c <_read_r+0x20>)
 8013a20:	4604      	mov	r4, r0
 8013a22:	4608      	mov	r0, r1
 8013a24:	4611      	mov	r1, r2
 8013a26:	2200      	movs	r2, #0
 8013a28:	602a      	str	r2, [r5, #0]
 8013a2a:	461a      	mov	r2, r3
 8013a2c:	f7ef fc73 	bl	8003316 <_read>
 8013a30:	1c43      	adds	r3, r0, #1
 8013a32:	d102      	bne.n	8013a3a <_read_r+0x1e>
 8013a34:	682b      	ldr	r3, [r5, #0]
 8013a36:	b103      	cbz	r3, 8013a3a <_read_r+0x1e>
 8013a38:	6023      	str	r3, [r4, #0]
 8013a3a:	bd38      	pop	{r3, r4, r5, pc}
 8013a3c:	20001e94 	.word	0x20001e94

08013a40 <_sbrk_r>:
 8013a40:	b538      	push	{r3, r4, r5, lr}
 8013a42:	4d06      	ldr	r5, [pc, #24]	@ (8013a5c <_sbrk_r+0x1c>)
 8013a44:	2300      	movs	r3, #0
 8013a46:	4604      	mov	r4, r0
 8013a48:	4608      	mov	r0, r1
 8013a4a:	602b      	str	r3, [r5, #0]
 8013a4c:	f7ef fcb4 	bl	80033b8 <_sbrk>
 8013a50:	1c43      	adds	r3, r0, #1
 8013a52:	d102      	bne.n	8013a5a <_sbrk_r+0x1a>
 8013a54:	682b      	ldr	r3, [r5, #0]
 8013a56:	b103      	cbz	r3, 8013a5a <_sbrk_r+0x1a>
 8013a58:	6023      	str	r3, [r4, #0]
 8013a5a:	bd38      	pop	{r3, r4, r5, pc}
 8013a5c:	20001e94 	.word	0x20001e94

08013a60 <_write_r>:
 8013a60:	b538      	push	{r3, r4, r5, lr}
 8013a62:	4d07      	ldr	r5, [pc, #28]	@ (8013a80 <_write_r+0x20>)
 8013a64:	4604      	mov	r4, r0
 8013a66:	4608      	mov	r0, r1
 8013a68:	4611      	mov	r1, r2
 8013a6a:	2200      	movs	r2, #0
 8013a6c:	602a      	str	r2, [r5, #0]
 8013a6e:	461a      	mov	r2, r3
 8013a70:	f7fa fe5e 	bl	800e730 <_write>
 8013a74:	1c43      	adds	r3, r0, #1
 8013a76:	d102      	bne.n	8013a7e <_write_r+0x1e>
 8013a78:	682b      	ldr	r3, [r5, #0]
 8013a7a:	b103      	cbz	r3, 8013a7e <_write_r+0x1e>
 8013a7c:	6023      	str	r3, [r4, #0]
 8013a7e:	bd38      	pop	{r3, r4, r5, pc}
 8013a80:	20001e94 	.word	0x20001e94

08013a84 <_close_r>:
 8013a84:	b538      	push	{r3, r4, r5, lr}
 8013a86:	4d06      	ldr	r5, [pc, #24]	@ (8013aa0 <_close_r+0x1c>)
 8013a88:	2300      	movs	r3, #0
 8013a8a:	4604      	mov	r4, r0
 8013a8c:	4608      	mov	r0, r1
 8013a8e:	602b      	str	r3, [r5, #0]
 8013a90:	f7ef fc5e 	bl	8003350 <_close>
 8013a94:	1c43      	adds	r3, r0, #1
 8013a96:	d102      	bne.n	8013a9e <_close_r+0x1a>
 8013a98:	682b      	ldr	r3, [r5, #0]
 8013a9a:	b103      	cbz	r3, 8013a9e <_close_r+0x1a>
 8013a9c:	6023      	str	r3, [r4, #0]
 8013a9e:	bd38      	pop	{r3, r4, r5, pc}
 8013aa0:	20001e94 	.word	0x20001e94

08013aa4 <_fstat_r>:
 8013aa4:	b538      	push	{r3, r4, r5, lr}
 8013aa6:	4d07      	ldr	r5, [pc, #28]	@ (8013ac4 <_fstat_r+0x20>)
 8013aa8:	2300      	movs	r3, #0
 8013aaa:	4604      	mov	r4, r0
 8013aac:	4608      	mov	r0, r1
 8013aae:	4611      	mov	r1, r2
 8013ab0:	602b      	str	r3, [r5, #0]
 8013ab2:	f7ef fc59 	bl	8003368 <_fstat>
 8013ab6:	1c43      	adds	r3, r0, #1
 8013ab8:	d102      	bne.n	8013ac0 <_fstat_r+0x1c>
 8013aba:	682b      	ldr	r3, [r5, #0]
 8013abc:	b103      	cbz	r3, 8013ac0 <_fstat_r+0x1c>
 8013abe:	6023      	str	r3, [r4, #0]
 8013ac0:	bd38      	pop	{r3, r4, r5, pc}
 8013ac2:	bf00      	nop
 8013ac4:	20001e94 	.word	0x20001e94

08013ac8 <__assert_func>:
 8013ac8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013aca:	4614      	mov	r4, r2
 8013acc:	461a      	mov	r2, r3
 8013ace:	4b09      	ldr	r3, [pc, #36]	@ (8013af4 <__assert_func+0x2c>)
 8013ad0:	681b      	ldr	r3, [r3, #0]
 8013ad2:	4605      	mov	r5, r0
 8013ad4:	68d8      	ldr	r0, [r3, #12]
 8013ad6:	b14c      	cbz	r4, 8013aec <__assert_func+0x24>
 8013ad8:	4b07      	ldr	r3, [pc, #28]	@ (8013af8 <__assert_func+0x30>)
 8013ada:	9100      	str	r1, [sp, #0]
 8013adc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013ae0:	4906      	ldr	r1, [pc, #24]	@ (8013afc <__assert_func+0x34>)
 8013ae2:	462b      	mov	r3, r5
 8013ae4:	f000 f886 	bl	8013bf4 <fiprintf>
 8013ae8:	f000 f8a3 	bl	8013c32 <abort>
 8013aec:	4b04      	ldr	r3, [pc, #16]	@ (8013b00 <__assert_func+0x38>)
 8013aee:	461c      	mov	r4, r3
 8013af0:	e7f3      	b.n	8013ada <__assert_func+0x12>
 8013af2:	bf00      	nop
 8013af4:	200000c8 	.word	0x200000c8
 8013af8:	08015b15 	.word	0x08015b15
 8013afc:	08015b22 	.word	0x08015b22
 8013b00:	08015b50 	.word	0x08015b50

08013b04 <_calloc_r>:
 8013b04:	b570      	push	{r4, r5, r6, lr}
 8013b06:	fba1 5402 	umull	r5, r4, r1, r2
 8013b0a:	b934      	cbnz	r4, 8013b1a <_calloc_r+0x16>
 8013b0c:	4629      	mov	r1, r5
 8013b0e:	f7ff f8fb 	bl	8012d08 <_malloc_r>
 8013b12:	4606      	mov	r6, r0
 8013b14:	b928      	cbnz	r0, 8013b22 <_calloc_r+0x1e>
 8013b16:	4630      	mov	r0, r6
 8013b18:	bd70      	pop	{r4, r5, r6, pc}
 8013b1a:	220c      	movs	r2, #12
 8013b1c:	6002      	str	r2, [r0, #0]
 8013b1e:	2600      	movs	r6, #0
 8013b20:	e7f9      	b.n	8013b16 <_calloc_r+0x12>
 8013b22:	462a      	mov	r2, r5
 8013b24:	4621      	mov	r1, r4
 8013b26:	f7fd ff8b 	bl	8011a40 <memset>
 8013b2a:	e7f4      	b.n	8013b16 <_calloc_r+0x12>

08013b2c <_free_r>:
 8013b2c:	b538      	push	{r3, r4, r5, lr}
 8013b2e:	4605      	mov	r5, r0
 8013b30:	2900      	cmp	r1, #0
 8013b32:	d041      	beq.n	8013bb8 <_free_r+0x8c>
 8013b34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013b38:	1f0c      	subs	r4, r1, #4
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	bfb8      	it	lt
 8013b3e:	18e4      	addlt	r4, r4, r3
 8013b40:	f7ff fa0e 	bl	8012f60 <__malloc_lock>
 8013b44:	4a1d      	ldr	r2, [pc, #116]	@ (8013bbc <_free_r+0x90>)
 8013b46:	6813      	ldr	r3, [r2, #0]
 8013b48:	b933      	cbnz	r3, 8013b58 <_free_r+0x2c>
 8013b4a:	6063      	str	r3, [r4, #4]
 8013b4c:	6014      	str	r4, [r2, #0]
 8013b4e:	4628      	mov	r0, r5
 8013b50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013b54:	f7ff ba0a 	b.w	8012f6c <__malloc_unlock>
 8013b58:	42a3      	cmp	r3, r4
 8013b5a:	d908      	bls.n	8013b6e <_free_r+0x42>
 8013b5c:	6820      	ldr	r0, [r4, #0]
 8013b5e:	1821      	adds	r1, r4, r0
 8013b60:	428b      	cmp	r3, r1
 8013b62:	bf01      	itttt	eq
 8013b64:	6819      	ldreq	r1, [r3, #0]
 8013b66:	685b      	ldreq	r3, [r3, #4]
 8013b68:	1809      	addeq	r1, r1, r0
 8013b6a:	6021      	streq	r1, [r4, #0]
 8013b6c:	e7ed      	b.n	8013b4a <_free_r+0x1e>
 8013b6e:	461a      	mov	r2, r3
 8013b70:	685b      	ldr	r3, [r3, #4]
 8013b72:	b10b      	cbz	r3, 8013b78 <_free_r+0x4c>
 8013b74:	42a3      	cmp	r3, r4
 8013b76:	d9fa      	bls.n	8013b6e <_free_r+0x42>
 8013b78:	6811      	ldr	r1, [r2, #0]
 8013b7a:	1850      	adds	r0, r2, r1
 8013b7c:	42a0      	cmp	r0, r4
 8013b7e:	d10b      	bne.n	8013b98 <_free_r+0x6c>
 8013b80:	6820      	ldr	r0, [r4, #0]
 8013b82:	4401      	add	r1, r0
 8013b84:	1850      	adds	r0, r2, r1
 8013b86:	4283      	cmp	r3, r0
 8013b88:	6011      	str	r1, [r2, #0]
 8013b8a:	d1e0      	bne.n	8013b4e <_free_r+0x22>
 8013b8c:	6818      	ldr	r0, [r3, #0]
 8013b8e:	685b      	ldr	r3, [r3, #4]
 8013b90:	6053      	str	r3, [r2, #4]
 8013b92:	4408      	add	r0, r1
 8013b94:	6010      	str	r0, [r2, #0]
 8013b96:	e7da      	b.n	8013b4e <_free_r+0x22>
 8013b98:	d902      	bls.n	8013ba0 <_free_r+0x74>
 8013b9a:	230c      	movs	r3, #12
 8013b9c:	602b      	str	r3, [r5, #0]
 8013b9e:	e7d6      	b.n	8013b4e <_free_r+0x22>
 8013ba0:	6820      	ldr	r0, [r4, #0]
 8013ba2:	1821      	adds	r1, r4, r0
 8013ba4:	428b      	cmp	r3, r1
 8013ba6:	bf04      	itt	eq
 8013ba8:	6819      	ldreq	r1, [r3, #0]
 8013baa:	685b      	ldreq	r3, [r3, #4]
 8013bac:	6063      	str	r3, [r4, #4]
 8013bae:	bf04      	itt	eq
 8013bb0:	1809      	addeq	r1, r1, r0
 8013bb2:	6021      	streq	r1, [r4, #0]
 8013bb4:	6054      	str	r4, [r2, #4]
 8013bb6:	e7ca      	b.n	8013b4e <_free_r+0x22>
 8013bb8:	bd38      	pop	{r3, r4, r5, pc}
 8013bba:	bf00      	nop
 8013bbc:	20001e90 	.word	0x20001e90

08013bc0 <__ascii_mbtowc>:
 8013bc0:	b082      	sub	sp, #8
 8013bc2:	b901      	cbnz	r1, 8013bc6 <__ascii_mbtowc+0x6>
 8013bc4:	a901      	add	r1, sp, #4
 8013bc6:	b142      	cbz	r2, 8013bda <__ascii_mbtowc+0x1a>
 8013bc8:	b14b      	cbz	r3, 8013bde <__ascii_mbtowc+0x1e>
 8013bca:	7813      	ldrb	r3, [r2, #0]
 8013bcc:	600b      	str	r3, [r1, #0]
 8013bce:	7812      	ldrb	r2, [r2, #0]
 8013bd0:	1e10      	subs	r0, r2, #0
 8013bd2:	bf18      	it	ne
 8013bd4:	2001      	movne	r0, #1
 8013bd6:	b002      	add	sp, #8
 8013bd8:	4770      	bx	lr
 8013bda:	4610      	mov	r0, r2
 8013bdc:	e7fb      	b.n	8013bd6 <__ascii_mbtowc+0x16>
 8013bde:	f06f 0001 	mvn.w	r0, #1
 8013be2:	e7f8      	b.n	8013bd6 <__ascii_mbtowc+0x16>

08013be4 <_malloc_usable_size_r>:
 8013be4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013be8:	1f18      	subs	r0, r3, #4
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	bfbc      	itt	lt
 8013bee:	580b      	ldrlt	r3, [r1, r0]
 8013bf0:	18c0      	addlt	r0, r0, r3
 8013bf2:	4770      	bx	lr

08013bf4 <fiprintf>:
 8013bf4:	b40e      	push	{r1, r2, r3}
 8013bf6:	b503      	push	{r0, r1, lr}
 8013bf8:	4601      	mov	r1, r0
 8013bfa:	ab03      	add	r3, sp, #12
 8013bfc:	4805      	ldr	r0, [pc, #20]	@ (8013c14 <fiprintf+0x20>)
 8013bfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8013c02:	6800      	ldr	r0, [r0, #0]
 8013c04:	9301      	str	r3, [sp, #4]
 8013c06:	f7fe ff3d 	bl	8012a84 <_vfiprintf_r>
 8013c0a:	b002      	add	sp, #8
 8013c0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013c10:	b003      	add	sp, #12
 8013c12:	4770      	bx	lr
 8013c14:	200000c8 	.word	0x200000c8

08013c18 <__ascii_wctomb>:
 8013c18:	4603      	mov	r3, r0
 8013c1a:	4608      	mov	r0, r1
 8013c1c:	b141      	cbz	r1, 8013c30 <__ascii_wctomb+0x18>
 8013c1e:	2aff      	cmp	r2, #255	@ 0xff
 8013c20:	d904      	bls.n	8013c2c <__ascii_wctomb+0x14>
 8013c22:	228a      	movs	r2, #138	@ 0x8a
 8013c24:	601a      	str	r2, [r3, #0]
 8013c26:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013c2a:	4770      	bx	lr
 8013c2c:	700a      	strb	r2, [r1, #0]
 8013c2e:	2001      	movs	r0, #1
 8013c30:	4770      	bx	lr

08013c32 <abort>:
 8013c32:	b508      	push	{r3, lr}
 8013c34:	2006      	movs	r0, #6
 8013c36:	f000 f82b 	bl	8013c90 <raise>
 8013c3a:	2001      	movs	r0, #1
 8013c3c:	f7ef fb60 	bl	8003300 <_exit>

08013c40 <_raise_r>:
 8013c40:	291f      	cmp	r1, #31
 8013c42:	b538      	push	{r3, r4, r5, lr}
 8013c44:	4605      	mov	r5, r0
 8013c46:	460c      	mov	r4, r1
 8013c48:	d904      	bls.n	8013c54 <_raise_r+0x14>
 8013c4a:	2316      	movs	r3, #22
 8013c4c:	6003      	str	r3, [r0, #0]
 8013c4e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013c52:	bd38      	pop	{r3, r4, r5, pc}
 8013c54:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013c56:	b112      	cbz	r2, 8013c5e <_raise_r+0x1e>
 8013c58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013c5c:	b94b      	cbnz	r3, 8013c72 <_raise_r+0x32>
 8013c5e:	4628      	mov	r0, r5
 8013c60:	f000 f830 	bl	8013cc4 <_getpid_r>
 8013c64:	4622      	mov	r2, r4
 8013c66:	4601      	mov	r1, r0
 8013c68:	4628      	mov	r0, r5
 8013c6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013c6e:	f000 b817 	b.w	8013ca0 <_kill_r>
 8013c72:	2b01      	cmp	r3, #1
 8013c74:	d00a      	beq.n	8013c8c <_raise_r+0x4c>
 8013c76:	1c59      	adds	r1, r3, #1
 8013c78:	d103      	bne.n	8013c82 <_raise_r+0x42>
 8013c7a:	2316      	movs	r3, #22
 8013c7c:	6003      	str	r3, [r0, #0]
 8013c7e:	2001      	movs	r0, #1
 8013c80:	e7e7      	b.n	8013c52 <_raise_r+0x12>
 8013c82:	2100      	movs	r1, #0
 8013c84:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013c88:	4620      	mov	r0, r4
 8013c8a:	4798      	blx	r3
 8013c8c:	2000      	movs	r0, #0
 8013c8e:	e7e0      	b.n	8013c52 <_raise_r+0x12>

08013c90 <raise>:
 8013c90:	4b02      	ldr	r3, [pc, #8]	@ (8013c9c <raise+0xc>)
 8013c92:	4601      	mov	r1, r0
 8013c94:	6818      	ldr	r0, [r3, #0]
 8013c96:	f7ff bfd3 	b.w	8013c40 <_raise_r>
 8013c9a:	bf00      	nop
 8013c9c:	200000c8 	.word	0x200000c8

08013ca0 <_kill_r>:
 8013ca0:	b538      	push	{r3, r4, r5, lr}
 8013ca2:	4d07      	ldr	r5, [pc, #28]	@ (8013cc0 <_kill_r+0x20>)
 8013ca4:	2300      	movs	r3, #0
 8013ca6:	4604      	mov	r4, r0
 8013ca8:	4608      	mov	r0, r1
 8013caa:	4611      	mov	r1, r2
 8013cac:	602b      	str	r3, [r5, #0]
 8013cae:	f7ef fb17 	bl	80032e0 <_kill>
 8013cb2:	1c43      	adds	r3, r0, #1
 8013cb4:	d102      	bne.n	8013cbc <_kill_r+0x1c>
 8013cb6:	682b      	ldr	r3, [r5, #0]
 8013cb8:	b103      	cbz	r3, 8013cbc <_kill_r+0x1c>
 8013cba:	6023      	str	r3, [r4, #0]
 8013cbc:	bd38      	pop	{r3, r4, r5, pc}
 8013cbe:	bf00      	nop
 8013cc0:	20001e94 	.word	0x20001e94

08013cc4 <_getpid_r>:
 8013cc4:	f7ef bb04 	b.w	80032d0 <_getpid>

08013cc8 <_init>:
 8013cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013cca:	bf00      	nop
 8013ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013cce:	bc08      	pop	{r3}
 8013cd0:	469e      	mov	lr, r3
 8013cd2:	4770      	bx	lr

08013cd4 <_fini>:
 8013cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013cd6:	bf00      	nop
 8013cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013cda:	bc08      	pop	{r3}
 8013cdc:	469e      	mov	lr, r3
 8013cde:	4770      	bx	lr
